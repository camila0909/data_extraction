Glaucia Innocencio de Jesus Paulo Paiva

N√∫meros primos e testes de primalidade

CAMPINAS

2014

i

ii

Ficha catalogr√°ficaUniversidade Estadual de CampinasBiblioteca do Instituto de Matem√°tica, Estat√≠stica e Computa√ß√£o Cient√≠ficaMaria Fabiana Bezerra Muller - CRB 8/6162      Paiva, Glaucia Innocencio de Jesus Paulo, 1985-  P166nPaiN√∫meros primos e testes de primalidade / Glaucia Innocencio de Jesus PauloPaiva. ‚Äì Campinas, SP : [s.n.], 2014.      PaiOrientador: Ricardo Miranda Martins.  PaiDisserta√ß√£o (mestrado profissional) ‚Äì Universidade Estadual de Campinas,Instituto de Matem√°tica, Estat√≠stica e Computa√ß√£o Cient√≠fica.       Pai1. N√∫meros primos. 2. Matem√°tica (Segundo grau) - Estudo e ensino. 3.Congru√™ncias e restos. I. Martins, Ricardo Miranda,1983-. II. UniversidadeEstadual de Campinas. Instituto de Matem√°tica, Estat√≠stica e Computa√ß√£oCient√≠fica. III. T√≠tulo. Informa√ß√µes para Biblioteca DigitalT√≠tulo em outro idioma: Prime numbers and primality testPalavras-chave em ingl√™s:Prime numbersMathematics - Study and teachingCongruences and residues√Årea de concentra√ß√£o: Matem√°tica em Rede NacionalTitula√ß√£o: Mestra Banca examinadora:Ricardo Miranda Martins [Orientador]Pedro Jos√© CatuognoClaudio Aguinaldo BuzziData de defesa: 15-12-2014Programa de P√≥s-Gradua√ß√£o: Matem√°tica em Rede NacionalPowered by TCPDF (www.tcpdf.org)ivvi

Abstract

This dissertation studies integers , their properties and congruences . We cover various

topics involving prime numbers , including how to generate them and decide if an integer

is prime or composite . Our goal is to describe and study some primality tests such as

the Fermat test , Lucas- Lehmer test , Miller- Rabin test and the AKS algorithm. We

also propose some didactic sequences to study these topics in an elementary level to basic

education .

Keywords: Prime numbers, mathematics - study and teaching, congruences and residues

Resumo

Nesta disserta√ß√£o estudamos n√∫meros inteiros, suas propriedades e congru√™ncias. Abor-

damos v√°rios t√≥picos envolvendo n√∫meros primos, incluindo como ger√°-los e como decidir se

um n√∫mero inteiro √© primo ou composto. Nosso objetivo √© descrever e estudar alguns testes

de primalidade, como o Teste de Fermat, Teste de Lucas-Lehmer, Teste de Miller-Rabin e

o algoritmo AKS. Propomos ainda algumas sequ√™ncias did√°ticas para estudar estes t√≥picos

em um n√≠vel mais elementar, no ensino b√°sico.

Palavras-chave: N√∫meros primos, congru√™ncia e restos, matem√°tica (2¬∫ grau)- estudo

e ensino

vii

viii

SUM√ÅRIO

Dedicat√≥ria

Agradecimentos

Introdu√ß√£o

1 N√öMEROS INTEIROS

1.1 Propriedades

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.2 Congru√™ncia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.3 Propriedades

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.4 Teorema Chin√™s dos Restos

. . . . . . . . . . . . . . . . . . . . . . . . . . .

2 N√öMEROS PRIMOS

2.1 Co-primos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.2 Crivo de Erast√≥stenes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.3 N√∫meros de Mersenne

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3 TESTE DE PRIMALIDADE

3.1 Teste de Fermat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3.2 Teste de Lucas-Lehmer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3.3 Teste de Miller-Rabin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3.4 AKS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ix

xi

xiii

1

3

3

4

5

6

11

12

13

14

21

21

24

24

28

4 SEQU√äNCIA DID√ÅTICA

4.1

Introdu√ß√£o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.2 Objetivo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.3 Metodologia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.4 Atividade 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.5 Atividade 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.6 Atividade 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.7 Conclus√£o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Refer√™ncias Bibliogr√°ficas

31

31

31

32

32

33

34

35

37

x

Dedico ao meu marido, Augusto e aos meus filhos, Matheus e Isabela.

xi

xii

AGRADECIMENTOS

Agrade√ßo a toda minha fam√≠lia que sempre me incentivou a estudar e buscar meus

objetivos.

Agrade√ßo em especial minha m√£e e meus av√≥s que s√£o meus maiores e melhores exemplos

e sempre estiveram do meu lado.

Agrade√ßo tamb√©m meu padastro, que √© um dos maiores incentivadores para que eu

estude sempre e sei que vibra com cada conquista minha.

N√£o poderia deixar de dizer meu muito obrigada por toda a paci√™ncia que meus dois

filhos, Matheus e Isabela, tiveram com a mam√£e em todo esse per√≠odo.

Agrade√ßo meu orientador pela proposta de tema e auxilio e a Capes pelo auxilio

financeiro durante essa jornada.

Agrade√ßo tamb√©m todos os meus amigos que sempre estiveram ao meu lado mesmo

alguns a dist√¢ncia. E por √∫ltimo e com grande import√¢ncia agrade√ßo meu eterno amor,

meu marido que me acompanhou e me ajudou incansavelmente durante esses 3 anos, para

que eu consiguisse concluir e conquistar meu t√≠tulo.

xiii

xiv

INTRODU√á√ÉO

Criptografia √© um tema que sempre esteve presente na hist√≥ria da humanidade. A palavra

criptografia vem do grego: Cripto (escondido) e Grafia (escrita). Ela consiste no estudo de

t√©cnicas que fazem com que uma informa√ß√£o original seja transformada numa informa√ß√£o

ileg√≠vel de forma que possa ser conhecida apenas pelo seu destinat√°rio. Apesar do termo

criptografia significar em grego mensagem escondida, o envio de mensagens de forma oculta

chama-se esteganografia.

A utiliza√ß√£o da criptografia √© t√£o antiga quanto a pr√≥pria escrita. A primeira apari√ß√£o

em documentos da criptografia foi em torno de 1900 a.c., no Egito, quando um escriba usou

hier√≥glifos fora do padr√£o numa inscri√ß√£o [1]. A partir da√≠ a humanidade tem muitos outros

documentos que comprovam o constante uso da criptografia ao longo da hist√≥ria.

Essa utiliza√ß√£o se dava principalmente em tempos de guerra, quando um povo precisava

transmitir informa√ß√µes que se fossem interceptadas pelo seu rival elas seriam ileg√≠veis por

ele, e ent√£o eles utilizavam c√≥digos nos quais o seu advers√°rio n√£o conhecia. Uma antiga e

conhecida forma de criptografia foram as Cifras de C√©sar, em Roma, J√∫lio Cesar se utilizava

dessas cifras para transmitir informa√ß√µes militares a seus generais. Esse m√©todo consistia

em trocar as letras por letras tr√™s posi√ß√µes a frente no alfabeto. Obviamente para os tempos

atuais esse m√©todo √© f√°cil de ser decifrado, mas quando utilizado, por volta de 40ùëé.ùê∂. foi

extremamente eficiente e n√£o h√° documentos que mostrem que algu√©m tenha conseguido ou

sequer tenha tentado decifrar as Cifras de C√©sar. Acredita-se que seus rivais achavam que

Cesar escrevia em outra l√≠ngua.

O tempo se passou e mais m√©todos para encriptar uma informa√ß√£o foram criados, e

1

cada vez mais decifradores surgiam, at√© que durante a Segunda Guerra Mundial surgiu a

necessidade de m√©todos mais elaborados para cifrar mensagens. Ent√£o come√ßam a surgir

algoritmos matem√°ticos que cifravam e decifravam essas informa√ß√µes. Atualmente com o

advento da internet e com a grande quantidade de informa√ß√µes transmitidas, existem v√°rios

algoritmos que criptografam uma mensagem. O mais conhecido se chama RSA, tem esse

nome devido a seus inventores Ronald Rivest, Adi Shamir e Leonard Adleman, que o criaram

em 1978.

O RSA √© um algoritmo que se utiliza de dois n√∫meros primos muito grandes para cifrar

uma mensagem. O algoritmo utiliza o produto destes n√∫meros e caso algu√©m, que n√£o seja

o destinat√°rio, queira decifrar a mensagem deve descobrir quais s√£o os dois n√∫meros primos

utilizados. Para garantir a seguran√ßa das informa√ß√µes transmitidas esse n√∫meros primos tem

pelo menos 250 d√≠gitos, tornando o algoritmo inquebr√°vel, pois √© extremamente d√≠ficil fatorar

n√∫meros inteiros.

A decodifica√ß√£o das mensagens que utilizam o RSA traz √† tona um outro tema que, assim

como a criptografia, √© bem antigo: a fatora√ß√£o de um n√∫mero, ou ainda a simples descoberta

se um n√∫mero √© primo ou composto. O primeiro algoritmo para este fim foi o Crivo de

Erast√≥stenes, criado mais ou menos no ano de 200a.C.

Ao longo do tempo muitos matem√°ticos como Fermat, Miller, entre outros, criaram me-

t√≥dos para determinar se um n√∫mero √© ou n√£o primo sem fator√°-lo, mas os √∫nicos que

conseguiram um algoritmo em tempo polinomial foram os indianos e cientistas da computa-

√ß√£o Manindra Agrawal, Neeraj Kayal e Nitin Saxena em 6de Agosto de2002 em um trabalho

intitulado "PRIMES is in P".

Os autores receberam o Premio G√∂del (√© uma premia√ß√£o dada a cientistas que tenham

publicado coisas relevantes na √°rea da ci√™cias da computa√ß√£o) de 2006 por este trabalho.

Este algoritmo √© conhecido hoje como algoritmo AKS.

A estrutura de cap√≠tulos utilizada √© a seguinte. No Cap√≠tulo 1 falaremos sobre os n√∫meros

inteiros, suas propriedades e congru√™ncia. No Cap√≠tulo 2 o tema √© n√∫meros primos, n√∫meros

de Mersene e o Crivo de Erastostenes. No Cap√≠tulo 3 falaremos sobre alguns testes de

primalidade, s√£o eles:Teste de Fermat, Teste de Lucas-Lehmer, Teste de Miller-Rabin e o

AKS. No Cap√≠tulo 4 e √∫ltimo cap√≠tulo colocamos uma sequ√™ncia did√°tica para ser aplicada

em alunos do ensino m√©dio utilizando como tema central testes de primalidade. Em todos

os cap√≠tulos foram feitos exemplos num√©ricos para facilitar o entendimento da teoria.

2

CAP√çTULO 1

N√öMEROS INTEIROS

O nascimento do conceito de n√∫mero surgiu pela necessidade da humanidade de contar.

Foram muitos anos para que se estabelecesse o que hoje conhecemos como n√∫meros naturais:

N = {0, 1, 2, 3, 4, 5, 6, ......}.

Muitos anos se passaram e com mais dificuldade de entendimento e aceita√ß√£o das pessoas

foi introduzido o conjunto dos n√∫meros inteiros:

Z = {..... ‚àí 6, ‚àí5, ‚àí4, ‚àí3, ‚àí2, ‚àí1, 0, 1, 2, 3, 4, 5, 6, ......}.

Hoje em dia sabemos e conseguimos pereceber no nosso cotidiano a import√¢ncia desse

conjunto. Veremos ent√£o algumas propriedades desses n√∫meros.

1.1 Propriedades

Os n√∫meros inteiros possuem duas opera√ß√µes, a soma e a multiplica√ß√£o. Listaremos

agora as propriedades dessas opera√ß√µes:

1. elemento neutro da soma √© o 0. Dado ùëé ‚àà Z temos que ùëé + 0 = ùëé = 0 + ùëé, ‚àÄùëé ‚àà Z;

2. elemento neutro da multiplica√ß√£o √© o 1. Dado ùëé ‚àà Z temos que ùëé ¬∑ 1 = 1 = 1 ¬∑ ùëé, ‚àÄùëé ‚àà Z;

3

3. elemento oposto da soma: Dado ùëé ‚àà Z temos que ‚àÉ ‚àí ùëé ‚àà Z tal que ùëé + (‚àíùëé) = 0 =

(‚àíùëé) + ùëé;

4. Comutatividade:

Dados ùëé, ùëè ‚àà Z temos ent√£o que ùëé + ùëè = ùëè + ùëé e ùëé.ùëè = ùëè.ùëé;

5. Associatividade:

Dados ùëé, ùëè, ùëê ‚àà Z temos ent√£o que (ùëé + ùëè) + ùëê = ùëé + (ùëè + ùëê) e ùëé.(ùëè.ùëê) = ùëé.(ùëè.ùëê);

6. distributiva da multiplica√ß√£o em rela√ß√£o a adi√ß√£o:

Dados ùëé, ùëè, ùëê ‚àà Z temos ent√£o que (ùëé + ùëè)ùëê = ùëé.ùëê + ùëè.ùëê.

1.2 Congru√™ncia

A aritim√©tica modular √© algo de suma import√¢ncia para a teoria dos n√∫meros. Esse

conceito foi introduzido por Gauss e se perpetuou.

Dizemos que um n√∫mero ùëé √© congruente a outro n√∫mero ùëè m√≥dulo ùëö, quando a divis√£o

de ùëé por ùëö restar ùëè, e na linguagem matem√°tica escrevemos da seguinte forma:

ùëé ‚â° ùëè (mod ùëö).

Lemos ùëé √© congruo ùëè m√≥dulo ùëö, com ùëé, ùëö, ùëè ‚àà Z.

Faremos alguns exemplos.

Exemplo 1.2.1. Resolva:17 ‚â° ùë• (mod 3)

Como 17 = 3 ¬∑ 5 + 2, 17 ‚àí 2 √© divis√≠vel por 3.

Logo 17 ‚â° 2 (mod 3).

17 ‚â° 2 (mod 3) √© equivalente escrevermos dessa forma :17 = 2 + 3ùë¶.

Exemplo 1.2.2. Resolva:20 ‚â° ùë• (mod 5).

Como 20 = 5 ¬∑ 4 + 0 20 ‚àí 0 √© divis√≠vel por 5, logo 20 ‚â° 0 (mod 5).

20 ‚â° 0 (mod5)√© equivalente escrevermos dessa forma :20 = 5ùë¶.

Exemplo 1.2.3. Resolva:2 ‚â° ùë• (mod 9).

Neste caso 2 < 9 ent√£o voc√™ n√£o consegue fazer a divis√£o para dar um valor inteiro logo

ùë• = 2 ou ùë• = ‚àí7 s√£o respostas equivalentes.

Podemos escrever a equa√ß√£o acima da seguinte forma:2 = 2 + 9ùë¶ ou 2 = ‚àí7 + 9ùëß.

Vejamos agora algumas propriedades da congru√™ncia.

4

1.3 Propriedades

A congru√™ncia satisfaz as propriedades de reflexidade, transitividade e de simetria. Ent√£o,

dados ùëé, ùëè, ùëê, ùëõ ‚àà Z,temos:

‚Ä¢ ùëé ‚â° ùëé (mod n) (reflexiva);

‚Ä¢ Se ùëé ‚â° ùëè (mod n) ent√£o ùëè ‚â° ùëé (mod n) (sim√©trica);

‚Ä¢ Se ùëé ‚â° ùëè (mod n) e ùëè ‚â° ùëê (mod n) ent√£o ùëé ‚â° ùëê (mod n) (transitiva).

Uma quarta propriedade √©:

ùëé ‚â° ùëè (mod n) e ùëê ‚â° ùëë (mod n) ‚áí ùëé + ùëê ‚â° ùëè + ùëë (mod n), ùëé ‚àí ùëê ‚â° ùëè ‚àí ùëë (mod n) e

ùëé ¬∑ ùëê ‚â° ùëè ¬∑ ùëë (mod n).

Demonstra√ß√£o:

‚Ä¢ Dado que : ùëé ‚â° ùëè (mod n) e ùëê ‚â° ùëë (mod n) , sabemos ent√£o que ùëé ‚àí ùëè e ùëê ‚àí ùëë s√£o

divisiveis por ùëõ, ent√£o obviamente ùëé ‚àí ùëè + ùëê ‚àí ùëë √© divisivel por ùëõ.

Organizando de forma diferente ùëé ‚àí ùëè + ùëê ‚àí ùëë temos:ùëé + ùëê ‚àí (ùëè + ùëë) como foi dito acima

ùëé ‚àí ùëè + ùëê ‚àí ùëë √© divisivel por ùëõ , logo

ùëé + ùëê ‚â° ùëè + ùëë (mod n).

‚Ä¢ Dado que : ùëé ‚â° ùëè (mod n) e ùëê ‚â° ùëë (mod n), sabemos ent√£o que ùëé ‚àí ùëè e ùëê ‚àí ùëë s√£o

divis√≠veis por ùëõ, ent√£o obviamente ùëé ‚àí ùëè ‚àí (ùëê ‚àí ùëë)

=

ùëé ‚àí ùëè ‚àí ùëê + ùëë √© divis√≠vel por ùëõ.

Organizando de forma diferente ùëé ‚àí ùëè ‚àí ùëê + ùëë temos: ùëé ‚àí ùëê ‚àí (ùëè ‚àí ùëë) como foi dito acima

ùëé ‚àí ùëè ‚àí ùëê + ùëë √© divisivel por ùëõ , logo

ùëé ‚àí ùëê ‚â° ùëè ‚àí ùëë (mod n).

‚Ä¢ Dado que : ùëé ‚â° ùëè (mod n) e ùëê ‚â° ùëë (mod n),

ùëé ‚àí ùëè = ùëò.ùëõ , agora vamos multiplicar por ùëê ambos os lados e ùëê ‚àí ùëë = ùëò1 ¬∑ ùëõ, vamos
multiplicar ambos os lados por ùëè.

5

Obtemos ent√£o as seguintes equa√ß√µes: ùëéùëê ‚àí ùëèùëê = ùëê ¬∑ ùëò ¬∑ ùëõ e ùëèùëê ‚àí ùëëùëê = ùëê ¬∑ ùëò1 ¬∑ ùëõ.

Agora somando as duas equa√ß√µes teremos:

ùëéùëê ‚àí ùëèùëê + ùëèùëê ‚àí ùëëùëê = ùëê ¬∑ ùëò ¬∑ ùëõ + ùëê ¬∑ ùëò1 ¬∑ ùëõ
‚áí

ùëéùëê ‚àí ùëëùëê = ùëê ¬∑ ùëò ¬∑ ùëõ + ùëê ¬∑ ùëò1 ¬∑ ùëõ;

ùëéùëê ‚àí ùëëùëê = ùëõ(ùëê ¬∑ ùëò ¬∑ +ùëê ¬∑ ùëò1¬∑)
‚áí

ùëé¬∑ ùëê ‚â° ùëè ¬∑ ùëë (mod n).

1.4 Teorema Chin√™s dos Restos

Contam que na China, em √©poca de guerra, ap√≥s os confrontos o general reunia toda sua

tropa e contava quantos haviam retornado. Como as tropas eram numerosas ele colocava

todos em fila, pedia que fizessem filas de diferentes tamanhos e contabilizava somente o

que restava. Com esses n√∫meros em m√£os conseguia obter o n√∫mero de soldados que havia

voltado da guerra. Veremos agora qual o terorema utilizado.

Teorema 1.4.1. Sejam ùëö1, ùëö2, ..., ùëöùëü inteiros positivos e primos entre si. O sistema de
congru√™ncias

‚éß

‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é™‚é™‚é™‚é™‚é©

ùë• ‚â° ùëé1 (mod ùëö1)
ùë• ‚â° ùëé2 (mod ùëö2)
...
ùë• ‚â° ùëéùëü (mod ùëöùëü)

tem solu√ß√£o √∫nica ùë• ‚â° ùëé1ùëÄ1ùë¶1 + ùëé2ùëÄ2ùë¶2 + ... + ùëéùëüùëÄùëüùë¶ùëü (mod ùëÄ ),
onde ùëÄ = ùëö1ùëö2...ùëöùëü, ùëÄùëò = ùëÄ
ùëöùëò
ou seja, ùë¶ùëò √© o inverso multiplicativo de ùëÄùëò m√≥dulo ùëöùëò.

e ùë¶ùëò √© tal que ùëÄùëòùë¶ùëò ‚â° 1 (mod ùëöùëò)

Demonstra√ß√£o

Retirado de [12]

Vamos demonstrar por indu√ß√£o.

‚Ä¢ Primeiro vamos provar para 2 equa√ß√µes:

Dado o sistema:

6

‚éß
‚é®

‚é©

ùë• ‚â° ùëé1 (mod ùëö1)
ùë• ‚â° ùëé2 (mod ùëö2)

(1)

Um inteiro ùë• satisfaz o sistema (1) se e somente se existem inteiros ùë¶1 e ùë¶2 tais que

ùë• = ùëö1 ¬∑ ùë¶1 + ùëé1 (2)

ùë• = ùëö2 ¬∑ ùë¶2 + ùëé2 (3).

Subtraindo as duas equa√ß√µes e reordenando temos:

ùëö1 ¬∑ ùë¶1 ‚àí ùëö2 ¬∑ ùë¶2 = ùëé2 ‚àí ùëé1. (4)

Agora, como mdc(m1, m2) = 1, sabemos que a equa√ß√£o (4) possui alguma solu√ß√£o
(ùë¶1, ùë¶2) ‚àà Z2.

Fixe uma tal solu√ß√£o e defina ùë• = ùë•0 pela equa√ß√£o (2). Ent√£o usando (4) vemos que
tamb√©m vale a equa√ß√£o (3). Portanto este ùë• = ùë•0 √© uma solu√ß√£o do sistema (1).

Uma vez encontrada uma solu√ß√£o ùë•0, vejamos que qualquer ùë• ‚â° ùë•0 (modm1 ¬∑ m2) √©
solu√ß√£o e de fato:

ùë• = ùë•0 + ùëò ¬∑ ùëö1 ¬∑ ùëö2 ‚áí ùë• ‚â° ùë•0 (modm1) e ùë• ‚â° ùë•0 (modm2).

Por outro lado, veremos que todas as solu√ß√µes s√£o dessa forma. Suponha ùë• solu√ß√£o do

sistema. Como ùë•1 tamb√©m √© solu√ß√£o, temos que ùë¶ = ùë• ‚àí ùë•0 satisfaz:
‚éß
‚é®

ùë¶ ‚â° ùëé1 ‚àí ùëé1 ‚â° 0 (mod ùëö1)
ùë¶ ‚â° ùëé2 ‚àí ùëé2 ‚â° 0 (mod ùëö2)

‚é©

Pelas equa√ß√µes acima temos que ùëö1 divide ùë¶, isto √©, existe ùëô tal que ùë¶ = ùëô ¬∑ ùëö1 e ùëö2
divide ùë¶ = ùëô ¬∑ùëö1. Como ùëö1 e ùëö2 s√£o primos entre si, ùëö2 divide ùëô, isto √©, existe ùëò tal que
ùëô = ùëò ¬∑ùëö2. Portanto ùë¶ = ùëò ¬∑ùëö1 ¬∑ùëö2 ‚â° 0(modm1 ¬∑m2), ou seja, ùë• ‚â° ùë•0 (modm1 ¬∑m2),como
quer√≠amos provar.

‚Ä¢ J√° vimos que o teorema vale para 2 equa√ß√µes. Agora fixe ùëò ‚â• 2 e suponha que o teorema

vale para ùëò ‚àí 1 equa√ß√µes. Dados ùëö1, ¬∑ ¬∑ ¬∑ , ùëöùëò dois a dois primos entre si, e ùëé1, ¬∑ ¬∑ ¬∑ , ùëéùëò
quaisquer, considere o sistema formado apenas pelas ùëò ‚àí 1 primeiras equa√ß√µes. Pela

hip√≥tese de indu√ß√£o, existe um ùëè tal que este subsistema √© equivalente a uma √∫nica

equa√ß√£o, a saber,

ùë• ‚â° ùëè (modM), onde ùëÄ = ùëö1 ¬∑ ¬∑ ¬∑ ùëöùëò‚àí1.

7

Portanto o sistema inteiro √© equivalente a um sistema com duas equa√ß√µes:
‚éß
‚é®

ùë• ‚â° ùëè (mod ùëÄ )

‚é©

ùë• ‚â° ùëéùëò (mod ùëöùëò)

Notando que ùëÄ e ùëöùëò s√£o primos entre si, e usando que o teorema vale para duas
equa√ß√µes, temos que existe solu√ß√£o ùë•0. Al√©m disso, ùë• √© solu√ß√£o se e somente se ùë• ‚â° ùë•0
(mod ùëÄ ¬∑ ùëöùëò) e ùëÄ ¬∑ ùëöùëò = ùëö1 ¬∑ ¬∑ ¬∑ ùëöùëò1 ¬∑ ùëöùëò, como quer√≠amos demonstrar.

Exemplo 1.4.2. (Exemplo retirado de [1])

H√° mais de mil anos, um general chin√™s desejava saber exatamente quantos soldados

tinha em seu ex√©rcito. Estimou que este n√∫mero estava entre 500 e 1000. Para determin√°-lo

precisamente, utilizou o m√©todo descrito a seguir. Ordenou que seus soldados entrassem em

uma forma√ß√£o com colunas de 9 soldados e contou o n√∫mero de soldados que n√£o puderam

ser arranjados em uma destas colunas. Foram 3. Repetiu o procedimento com colunas de

tamanho 10 e 11 e descobriu que sobraram respectivamente 4 e 10 soldados. Para chegar ao

tamanho do seu ex√©rcito, o general resolveu o problema matem√°tico detalhado no pr√≥ximo

par√°grafo. Este fato √© ver√≠dico exceto pelos n√∫meros envolvidos.

Este √© um problema expl√≠cito de congru√™ncia. Denotaremos por ùë• o n√∫mero total solda-

dos, ent√£o:

ùë• ‚â° 3

‚éß
‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é©
ùë• ‚â° 10

ùë• ‚â° 4

(mod 9)

(mod 10)

(mod 11)

Ent√£o 9.ùëû1 + 3 = ùë• ,

‚Ä¢ substituindo na segunda equa√ß√£o do sistema temos 9.ùëû1 ‚â° 1 (mod 10) ‚áí ùëû1 ‚â° 9

ùëùùëöùëúùëë10.

‚Ä¢ Substituindo agora na terceira equa√ß√£o temos 9.ùëû1 ‚â° 7 (mod 11) ‚áí ùëû1 ‚â° 8 (mod 11).

Temos ent√£o um novo sistema modular:
‚éß
‚é®

ùëû1 ‚â° 9 (mod 10)
ùëû1 ‚â° 8 (mod 11)

‚é©
E a partir dele novas equa√ß√µes:
‚éß
‚é®

‚é©
E ent√£o conluimos que ùëû2 = 1 e ùëû1 = 19

10.ùëû2 + 9 = ùëû1
11ùëû2 + 8 = ùëû1

8

Exemplo 1.4.3. Considere-se a equa√ß√£o:

327ùë• ‚â° 171 (mod 520)

Vamos calcular o mdc(327, 520) = 1 podemos deduzir que existe uma √∫nica solu√ß√£o,

utilizaremos ent√£o o met√≥do explicado acima.

Fatoramos o 520 = 5.8.13, e passamos ao sistema

‚éß
‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é©

327ùë• ‚â° 171

(mod 5)

327ùë• ‚â° 171

(mod 8)

‚áî

327ùë• ‚â° 171

(mod 13)

2ùë• ‚â° 1

‚éß
‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é©
2ùë• ‚â° 4

7ùë• ‚â° 3

(mod 5)

(mod 8)

(mod 13)

Queremos que o ùë• fique multiplicado por 1, ent√£o vamos multiplicar a primeira equa√ß√£o

do sistema por 8, a segunda e a terceira por 7.

‚éß
‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é©

16ùë• ‚â° 8

(mod 5)

49ùë• ‚â° 21

(mod 8)

‚áî

14ùë• ‚â° 28

(mod 13)

‚éß
‚é™‚é™‚é™‚é®
‚é™‚é™‚é™‚é©

ùë• ‚â° 3

(mod 5)

ùë• ‚â° 5

(mod 8)

ùë• ‚â° 2

(mod 13)

Agora podemos resolver os sistema.

Vamos come√ßar trabalhando com as duas primeiras equa√ß√µes de congru√™ncia,temos que:

ùë• = 3 + 5ùë¶ ‚áí 3 + 5ùë¶ ‚â° 5

(mod 8) ‚áí ùë¶ ‚â° 2

(mod 8) ‚áí ùë¶ = 8ùëò + 2

Logo: ùë• = 3 + 5(8ùëò + 2) ‚áí ùë• = 40ùëò + 13

Agora vamos utilizar o resultado acima e a equa√ß√£o 3:

40ùëò + 13 ‚â° 2

(mod 13) ‚áí ùëò = 2 + 13ùë§
Logo: ùë• = 40(2 + 13ùë§) + 13 ‚áí ùë• = 93 + 520ùë§ com ùë§ ‚àà Z

(mod 13) ‚áí ùëò ‚â° 2

9

10

CAP√çTULO 2

N√öMEROS PRIMOS

Defini√ß√£o 2.0.4. Um n√∫mero ùëõ ‚àà N √© chamado de primo se ùëõ > 1 √© divis√≠vel apenas por
ele mesmo e por 1.

Exemplo 2.0.5. Alguns exemplos de n√∫meros primos s√£o: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31.......

Alguns autores utilizam outra defini√ß√£o para os primos:

Defini√ß√£o 2.0.6. Dado ùëõ ‚àà Z, ùëõ Ã∏= ¬±1 e ùëõ Ã∏= 0, ent√£o dizemos que n √© primo se ùëõ s√≥ √©
divis√≠vel por ¬±1, ¬±ùëù.

As duas s√£o igualmente v√°lidas mas neste trabalho usaremos apenas a primeira defini√ß√£o.

Os n√∫meros primos tem esse nome por serem os n√∫meros prim√°rios geradores de todos os

outros. Essa nomenclatura foi utilizada por Fibonacci, e consagrada no mundo matem√°tico,

e hoje √© conhecido no mundo todo [5].

Esses n√∫meros come√ßaram a ser estudados ainda na Gr√©cia em 400ùëé.ùê∂. pelos Pitag√≥ricos,

que tinham interesse em estud√°-los pois viam uma liga√ß√£o com a numerologia, algo m√≠stico,

e foi mais aprofundada na obra de Euclides, "Os elementos", onde ele definiu o que seriam

primos, e demonstrou por contradi√ß√£o que existem infinitos primos. Nessa mesma obra ele

define e demonstra O Teorema Fundamental da Aritim√©tica que enunciamos abaixo:

Teorema 2.0.7. Todo n√∫mero inteiro maior do que 1 ou √© primo ou pode ser escrito como

um produto de n√∫meros primos e de maneira √∫nica.

11

Demonstra√ß√£o: Vamos primeiro demonstrar que um n√∫mero natural ùëõ se escreve como

um produto de primos e depois provamos a unicidade:

Por indu√ß√£o finita:

‚Ä¢ Para ùëõ = 2 e sabemos que 2 √© primo logo est√° provado!

‚Ä¢ Agora supondo que para um ùëõ ‚àà N qualquer ent√£o temos ùëõ = ùëù1.ùëù2.ùëù3.....ùëùùëó e aceitamos

como v√°lido!

‚Ä¢ Vamos mostrar ent√£o que para um ùëö > ùëõ com ùëö ‚àà N, tamb√©m vale, ent√£o temos que:

ùëö = ùëõ.ùëò, com ùëò ‚àà N como ùëõ = ùëù1.ùëù2.ùëù3.....ùëùùëó temos tr√™s possibilidades para ùëò:

1. se k for primo e ùëò Ã∏= ùëù1, ùëù2, ùëù3, ....., ùëùùëó ent√£o ùëö = ùëû1.ùëû2.ùëû3.....ùëûùëó.ùëò OK!

2. se k √© primo e ùëò = ùëù1, ùëù2, ùëù3, ....., ùëùùëó idem anterior!

3. k n√£o √© primo , logo tamb√©m √© decomposto em n√∫meros primos ùëò = ùëû1.ùëû2.ùëû3.....ùëûùëñ

Ent√£o ùëö = ùëù1.ùëù2.ùëù3.....ùëùùëó.ùëû1.ùëû2.ùëû3.....ùëûùëñ .

Agora precisamos provar a unicidade da decomposi√ß√£o.
Vamos provar por contradi√ß√£o , ent√£o vamos supor que dado um ùëé ‚àà N ele pode ser

decomposto de duas formas diferentes:

ùëé = ùëù1.ùëù2.ùëù3.....ùëùùëó e ùëé = ùëû1.ùëû2.ùëû3.....ùëûùëñ
com ùëù1, ùëù2, ùëù3, ...., ùëùùëó, ùëû1, ùëû2, ùëû3, ....., ùëûùëñ primos .
Ent√£o ùëù1.ùëù2......ùëùùëó = ùëû1.ùëû2......ùëûùëñ,
sendo assim ùëù1 | ùëû1.ùëû2......ùëûùëñ ‚áí ùëù1 = ùëûùëü, para algum ùëü ‚áí ùëù1 ‚â• ùëû1.
Da mesma forma ùëû1 | ùëù1.ùëù2.ùëù3....ùëùùëó ‚áí ùëû1 = ùëùùë†, para algum ùë† ‚áí ùëû1 ‚â• ùëù1.
Logo ùëù1 = ùëû1.
Com o mesmo racioc√≠nio concluimos que :ùëù2 = ùëû2, ùëù3 = ùëû3,...,ùëùùëó = ùëùùëñ.

2.1 Co-primos

Existem tamb√©m os conhecidos co-primos ou primos entre si:

Defini√ß√£o 2.1.1. Dados ùëé ‚àà N e ùëè ‚àà N e ùëöùëëùëê(ùëé, ùëè) = 1 ent√£o dizemos que a e b s√£o co-primos
ou primos entre si.

12

CRIVO DE ERAST√ìSTENES
9

3

6

8

7

4

5

13

23

33

43

53

63

73

83

93

14

24

34

44

54

64

74

84

94

15

25

35

45

55

65

75

85

95

16

26

36

46

56

66

76

86

96

17

27

37

47

57

67

77

87

97

18

28

38

48

58

68

78

88

98

19

29

39

49

59

69

79

89

99

1

11

21

31

41

51

61

71

81

91

2

12

22

32

42

52

62

72

82

92

10

20

30

40

50

60

70

80

90

100

Exemplo 2.1.2. Os n√∫meros 49 e 24 s√£o primos entre si, pois mdc(49, 24) = 1. Ou seja,

eles n√£o tem nenhum fator primo em comum.

Exemplo 2.1.3. Os n√∫meros 81 e 12 n√£o s√£o primos entre si j√° que o mdc(81, 12) = 3.

Durante toda a hist√≥ria, surgiram matem√°ticos interessados em demonstrar ou encontrar

uma regularidade entre os n√∫meros primos. Erat√≥stenes encontrou um metodo pr√°tico para

encontrar os n√∫meros primos.

2.2 Crivo de Erast√≥stenes

Erast√≥stenes foi uma fil√≥sofo que viveu 200 anos antes de Cristo, e teve seus maiores

trabalhos no campo da geografia, mas teve tamb√©m contribui√ß√µes para a matem√°tica. Criou

o chamado Crivo de Erast√≥stenes.

O Crivo √© uma tabela onde voc√™ coloca os n√∫meros naturais at√© onde desejar, e depois vai

"crivando"(ou cortando) os n√∫meros m√∫ltiplos, e os que sobrarem sem o corte s√£o os primos,

como no exemplo abaixo:

Exemplo 2.2.1. Vamos encontrar os n√∫meros primos at√© 100:

‚Ä¢ Corta-se o n√∫mero 1, pois por defini√ß√£o ele n√£o √© primo,

‚Ä¢ 2 n√£o corta, e a partir da√≠ cortam todos os m√∫ltiplos de 2,

13

CRIVO DE ERAST√ìSTENES

/1

11

2

3

//4

5

//6

7

//8

///12

13 ///14 ///15 ///16

17 ///18

///21 ////22

23 ///24 ///25 ///26 ///27 ///28

//9

19

29

31

///32 ///33 ///34 ///35 ///36

37 ///38 ///39

41 ////42

43 ///44 ///45 ///46

47 ///48 ///49

51 ////52

53 ///54 ///55 ///56 ///57 ///58 ///59

61 ////62 ///63 ///64 ///65 ///66

67 ///68 ///69

71 ////72

73 ///74 ///75 ///76 ///77 ///78

///81 ////82

83 ///84 ///85 ///86 ///87 ///88

79

89

///10

///20

///30

///40

///50

///60

///70

///80

///90

91 ////92 ///93 ///94 ///95 ///96

97 ///98 ///99 /////100

‚Ä¢ Vamos para o pr√≥ximo n√∫mero que n√£o foi riscado √© o 3, e n√£o cortamos, e a partir da√≠

cortam todos os m√∫ltiplos de 3,

‚Ä¢ e vamos cortando todos os m√∫ltiplos dos anteriores at√© que sobrar√£o somente os primos.

E o crivo fica da seguinte forma:

Concluimos que os primos at√© 100 s√£o:

2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97

Para a √©poca o met√≥do utilizado por Erast√≥stenes, foi de extrema import√¢ncia, mas

obviamente esse algoritmo para n√∫meros primos muito grandes √© invi√°vel, ent√£o vieram

outros matem√°ticos que tentaram descobrir formas mais r√°pidas de se ter o resultado.

Na corrida para descobrir alguma regra ou caracter√≠stica comum entre os primos, surgi-

ram outros grupos de n√∫meros que seguiam alguma regularidade. Um dos conjuntos mais

importantes formado por n√∫meros primos √© o conhecido como n√∫meros de Mersenne.

2.3 N√∫meros de Mersenne

Esse conjunto de n√∫meros tem esse nome pois seu descobridor foi Mersenne um padre,

te√≥logo e matem√°tico que no s√©culo XVII mantinha contato com Pierre de Fermat.

Fermat que tamb√©m era matem√°tico e teve estudos importantissimos na √°rea da ariti-

m√©tica, estava estudando sobre os n√∫meros primos, e ent√£o mandou uma carta com uma

14

f√≥rmula para Mersenne. Essa f√≥rmula nos d√° o que hoje conhecemos como n√∫meros de Fer-
mat, 22ùëù +1, e Mersenne resolveu ent√£o inspirado na f√≥rmula de Fermat, descobrir para quais
valores de p uma outra f√≥rmula, 2ùëù ‚àí 1, seria um n√∫mero primo. Ele percebeu ent√£o que se:

‚Ä¢ ùëù fosse composto ent√£o 2ùëù ‚àí 1 tamb√©m seria,

‚Ä¢ ùëù fosse primo ent√£o 2ùëù ‚àí 1 poderia ser primo ou composto.

Ele enumerou ent√£o alguns valores pra ùëù que ele acreditava serem todos primos, e que

resultariam em 2ùëù ‚àí 1 tamb√©m primo, os n√∫meros s√£o:

ùëù = 2, 3, 5, 7, 13, 17, 19, 31, 67, 127, 257.

E isso perdurou por anos, at√© que outros matem√°ticos conseguiram encontrar outros valores

de p primos que faziam com que sua f√≥rmula resultaria em um n√∫mero primo e tamb√©m

perceberam que para os primos 67 e 257 a f√≥rmula resultava um n√∫mero composto.

Fazendo os calculos para os valores de ùëù que resultam em um primo, veremos quais valores

Mersenne encontrou:

‚Ä¢ Para ùëù = 2 ‚áí 22 ‚àí 1 = 3

‚Ä¢ Para ùëù = 3 ‚áí 23 ‚àí 1 = 7

‚Ä¢ Para ùëù = 5 ‚áí 25 ‚àí 1 = 31

‚Ä¢ Para ùëù = 7 ‚áí 27 ‚àí 1 = 127

‚Ä¢ Para ùëù = 13 ‚áí 213 ‚àí 1 = 8.191

‚Ä¢ Para ùëù = 17 ‚áí 217 ‚àí 1 = 131.071

‚Ä¢ Para ùëù = 19 ‚áí 219 ‚àí 1 = 524.287

‚Ä¢ Para ùëù = 31 ‚áí 231 ‚àí 1 = 2.147.483.647

‚Ä¢ Para ùëù = 127 ‚áí 2127 ‚àí 1 = 1.701.411.83.460.469.231.731.687.303.715.884.105.727

Enunciaremos ent√£o a seguinte preposi√ß√£o:

Proposi√ß√£o 2.3.1. (Primos de Mersenne) Dado ùëÄùëõ = 2ùëõ ‚àí 1 primo, ent√£o ùëõ √© primo.

15

Demonstra√ß√£o: Vamos provar por absurdo , supondo que n n√£o seja primo, ent√£o

ùëõ = ùëù.ùëû Logo:

ùëÄùëõ = 2ùëùùëû ‚àí 1
ùëÄùëõ = (2ùëù ‚àí 1).(2ùëù(ùë†‚àí1) + 2ùëù(ùë†‚àí2) + 2ùëù(ùë†‚àí3) + +2ùëù(ùë†‚àí4) + .... + 2ùëù(ùë†‚àí(ùë†‚àí1)) + 2ùëù(ùë†‚àíùë†))
ùëÄùëõ = (2ùëù ‚àí 1).(2ùëù(ùë†‚àí1) + 2ùëù(ùë†‚àí2) + 2ùëù(ùë†‚àí3) + +2ùëù(ùë†‚àí4) + .... + 2ùëù + 1)
Como ùëù|ùëõ ent√£o ùëÄùëù|ùëÄùëõ, Logo ùëÄùëõ n√£o √© primo ABSURDO!

Exemplo 2.3.2. Para ùëõ = 2 qual o valor de ùëÄùëõ?

ùëÄ2 = 22 ‚àí 1 ‚Üí ùëÄ2 = 3
ùëÄ2 √© primo ‚áí ùëõ = 2 √© primo.

Exemplo 2.3.3. Para ùëõ = 9 ùëÄ9 = 29 ‚àí 1 ‚Üí ùëÄ9 = 511

511 = 7.73 logo √© composto

ùëõ = 9 √© composto ‚áí ùëÄ9 √© composto

Exemplo 2.3.4. Para ùëõ = 11 ùëÄ11 = 211 ‚àí 1 ‚Üí ùëÄ11 = 2047

2047 = 23.89 logo √© composto

Com este exemplo percebemos que a rec√≠proca da preposi√ß√£o n√£o √© verdadeira, pois se

temos um n primo, podemos encontrar um ùëÄùëõ composto

Anos se passaram e muito outros matem√°ticos continuaram na busca pelos primos de

Mersenne, veremos na tabela abaixo os 48 primos de Mersenne conhecidos:

(*) A tabela acima n√£o √© discretamente exaustiva em todo o intervalo apresentado. At√©

agora ( ùëÇùë¢ùë°.19, 2014), do que a tabela cont√©m, sabe-se (por crit√©rios algor√≠tmicos de busca

exaustiva) que todos os primeiros mersennes primos de ùëÄ2 a ùëÄ13.466.917 j√° foram identi-
ficados e s√£o ali listados. Entretanto, entre os Mersennes primos ùëÄ25.964.951 e ùëÄ57.884.161
(respectivamente, 42≈æ e 48≈æ, este o mais recente descoberto), n√£o se tem registro oficial de

outros Mersennes primos o que n√£o significa poder afirmar-se inequivocamente n√£o os haja:

os intervalos s√£o cada vez maiores e as buscas s√£o cada vez mais trabalhosas. Como exemplo

hist√≥rico, cite-se que o 29≈æ Mersenne primo foi descoberto somente ap√≥s os 30≈æ e 31≈æ. √â

digno de nota que ap√≥s o ùëÄ46≈æ, em apenas quatorze dias descobriu-se um Mersenne primo
menor ùëÄ45≈æ, conforme acima citado. FONTE:[8]

Muito antes de Mersenne, Euclides em meados de 300 a.C., descobriu um conjunto de

n√∫meros com uma carcater√≠stica bem interessante que veremos a seguir, esses n√∫meros ele

deu o nome de n√∫meros perfeitos. Veremos a defini√ß√£o:

16

Ordem

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

p

2

3

5

7

13

17

19

31

61

89

107

127

521

607

1.279

2.203

2.281

3.217

4.253

4.423

9.689

9.941

11.213

19.937

21.701

23.209

44.497

86.243

110.503

132.049

D√≠gitos

Anos

Refer√™ncias ao descobridor

1

1

2

3

4

6

6

10

19

27

33

39

157

183

386

664

687

969

1281

1332

2917

2993

3376

6002

6533

6987

13395

25962

33265

39751

antiguidade

antiguidade

antiguidade

antiguidade

1461

1588

1588

1750

1883

1911

1913

1876

Reguis (1536), Cataldi (1603)

Cataldi (1603)

Cataldi (1603)

Euler (1772)

Pervouchine (1883), Seelhoff (1886)

Powers (1911)

Powers (1914)

Lucas (1876)

Jan. 30, 1952 Robinson

Jan. 30, 1952 Robinson

Jan. 30, 1952 Robinson

Jan. 30, 1952 Robinson

Jan. 30, 1952 Robinson

Set. 8, 1957

Riesel

Nov. 3, 1961 Hurwitz

Nov. 3, 1961 Hurwitz

Mai 11, 1963 Gillies (1964)

Mai 16, 1963 Gillies (1964)

Jun. 2, 1963 Gillies (1964)

Mar. 4, 1971 Tuckerman (1971)

Out. 30, 1978 Noll and Nickel (1980)

Fev. 9, 1979 Noll (Noll Nickel 1980)

Abr. 8, 1979 Nelson Slowinski (Slowinski 1978-79)

Set. 25, 1982

Slowinski

Jan. 28, 1988 Colquitt e Welsh (1991)

Set. 20, 1983

Slowinski

17

Ordem

p

D√≠gitos

Anos

Refer√™ncias ao descobridor

31

32

33

34

35

36

37

38

39

40

41

42*

43*

44*

45*

46*

47*

48*

216.091

756.839

859.433

1.257.787

1.398.269

2.976.221

3.021.377

65050

227832

258716

378632

420921

895832

909526

Set. 6, 1985

Slowinski

Fev. 19, 1992

Slowinski e Gage

Jan. 10, 1994

Slowinski e Gage

Set. 3, 1996

Slowinski e Gage

Nov. 12, 1996

Joel Armengaud/GIMPS

Ago. 24, 1997 Gordon Spence/GIMPS (Devlin 1997)

Jan. 27, 1998

Roland Clarkson/GIMPS

6.972.593

2098960

Jun. 1, 1999

Nayan Hajratwala/GIMPS

13.466.917

4053946

Nov. 14, 2001 Michael Cameron/GIMPS (Whitehouse 2001)

20.996.011

6320430

Nov. 17, 2003 Michael Shafer/GIMPS (Weisstein 2003)

24.036.583

7235733

Mai 15, 2004

Josh Findley/GIMPS (Weisstein 2004)

25.964.951

7816230

Fev. 18, 2005 Martin Nowak/GIMPS (Weisstein 2005)

30.402.457

9152052

Dez 15, 2005

Dr. Curtis Cooper e Dr. Steven Boone

32.582.657

9808358

Set. 4, 2006

Dr. Curtis Cooper e Dr. Steven Boone

37.156.667

11.185.272

Set. 6, 2008

GIMPS / Hans-Michael Elvenich

42.643.801

12.837.064 Abril.12, 2009 GIMPS / Odd M. Strindmo

43.112.609

12.978.189 Ago. 23 , 2008 GIMPS / Edson Smith

57.885.161

17.425.171

Jan. 25 , 2013 GIMPS / Curtis Cooper

Defini√ß√£o 2.3.5. (N√∫meros perfeitos): Seja ùëõ > 1 um n√∫mero natural e considere ùëÜ(ùëõ) a

soma dos divisores positivos(ùëë) de ùëõ, tal que ùëë < ùëõ. Chamaremos ùëõ de um n√∫mero perfeito,

se ùëÜ(ùëõ) = ùëõ.

Vamos aos exemplos.

Exemplo 2.3.6. Vamos verificar se o n√∫mero 6 √© perfeito.

6 = 3 ¬∑ 2 ¬∑ 1, sendo assim os divisores de 6 s√£o 3, 2, 1 ùëÜ(6) = 3 + 2 + 1 = 6, logo 6 √© um

n√∫mero perfeito

Exemplo 2.3.7. Vamos verificar se o n√∫mero 15 √© perfeito.

15 = 5 ¬∑ 3 ¬∑ 1, sendo assim os divisores de 15 s√£o 5, 3, 1 ùëÜ(15) = 5 + 3 + 1 = 9, logo 15 n√£o

√© um n√∫mero perfeito.

Teorema 2.3.8. ( F√≥rmula de Euclides ) Dado ùëò ‚àà N, se 2ùëò ‚àí 1 for primo, ent√£o

ùëõ = 2ùëò‚àí1(2ùëò ‚àí 1) √© um n√∫mero perfeito.

Demonstra√ß√£o: Suponha 2ùëò ‚àí1 = ùëù e ùëù primo. Se pegarmos o n√∫mero 2ùëò‚àí1 ¬∑ùëù e sabemos

ent√£o que a soma dos divisores de ùëõ = 2ùëò‚àí1 ¬∑ ùëù menores que ele √© :

18

ùëÜ(ùëõ) = ùëÜ(2ùëò‚àí1 ¬∑ ùëù) = (1 + 2 + 22 + ... + 2ùëò‚àí1) + (ùëù + 2ùëù + 22ùëù + ... + 2ùëò‚àí2ùëù)
ùëÜ(ùëõ) = 1.(2ùëò‚àí1)
ùëÜ(ùëõ) = ùëù + ùëù(2ùëò‚àí1 ‚àí 1) = ùëù(1 + 2ùëò‚àí1 ‚àí 1) = ùëù(2ùëò‚àí1) = ùëõ

= 2ùëò ‚àí 1 + ùëù(2ùëò‚àí1 ‚àí 1)

[Ô∏Å 1.(2ùëò‚àí1‚àí1)
2‚àí1

2‚àí1 + ùëù

]Ô∏Å

Exemplo 2.3.9. Dado ùëò = 2 ‚áí ùëõ = 2ùëò‚àí1(2ùëò ‚àí 1) = 21 ¬∑ (22 ‚àí 1) ‚áí ùëõ = 6.

Como 22 ‚àí1 = 3 que √© um n√∫mero primo ent√£o, 6 √© perfeito, como j√° haviamos verificado.

Exemplo 2.3.10. Dado ùëò = 7 ‚áí ùëõ = 2ùëò‚àí1(2ùëò ‚àí 1) = 26 ¬∑ (27 ‚àí 1)ùëõ = 8.128.
Como 27 ‚àí 1 = 127 que √© um n√∫mero primo ent√£o, 8128 √© perfeito.

ùëÜ(ùëõ) = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 127 + 254 + 508 + 1016 + 2032 + 4064 = 8.128 = ùëõ

Exemplo 2.3.11. Dado ùëò = 11 ‚áí ùëõ = 2ùëò‚àí1(2ùëò ‚àí 1) = 210 ¬∑ (211 ‚àí 1). Como 211 ‚àí 1 =

2.047 = 23 ¬∑ 89 n√£o √© primo. Logo ùëõ n√£o √© perfeito.

19

20

CAP√çTULO 3

TESTE DE PRIMALIDADE

Sabemos que existem mais de 100 diferentes testes de primalidade, existem alguns que

diferem totalmente , e existem testes que s√£o apenas melhorias de algoritmos j√° utilizados.

Faremos aqui uma descri√ß√£o dos testes mais relevantes para esse trabalho.

3.1 Teste de Fermat

Pierre de Fermat foi um dos maiores matem√°ticos do s√©culo XVII. N√£o teve nenhuma

publica√ß√£o em vida, mas deixou grandes contribui√ß√µes para a evolu√ß√£o da matem√°tica, sendo

uma delas conhecida como Pequeno Teorema de Fermat. Esse teorema diz o seguinte:

Teorema 3.1.1. (Pequeno Teorema de Fermat) Se p √© um n√∫mero primo, ent√£o para qual-

quer inteiro ùëé, temos que:

ùëéùëù ‚â° ùëé (mod p).

Demonstra√ß√£o: Vamos fazer a demonstra√ß√£o por indu√ß√£o finita em ùëé:

1. Vamos verificar que para ùëé = 1 e p um primo qualquer vale,

ent√£o: 1ùëù ‚â° 1 (mod p) OK!

2. Vamos supor verdade para um ùëé = ùëõ com ùëõ ‚àà N ‚áí ùëõùëù ‚â° ùëõ (mod ùëù)

21

3. Vamos provar que vale para ùëé = ùëõ + 1 ,ent√£o queremos mostrar que:

(ùëõ + 1)ùëù ‚â° (ùëõ + 1) (mod p).

Para isso utilazaremos do seguinte Lema:

Lema 3.1.2. Seja p primo e ùëé e ùëè inteiros. Ent√£o:

(ùëé + ùëè)ùëù ‚â° (ùëéùëù + ùëèùëù) (mod p)

Demonstra√ß√£o do Lema acima se d√° pelo desenvolvimento de (ùëé + ùëè)ùëù por Bin√¥mio de

Newton.

Agora, utilizando do Lema acima temos que:

(ùëõ + 1)ùëù ‚â° (ùëõùëù + 1ùëù)

(mod ùëù) ‚áí (ùëõ + 1)ùëù ‚â° ùëõùëù + 1

(mod ùëù).

Mas sabemos pela hip√≥tese de indu√ß√£o que: ùëõùëù ‚â° ùëõ (mod p).

Ent√£o utilizando as propriedades de congru√™ncia temos:

ùëõùëù ‚â° ùëõ (mod ùëù) e 1 ‚â° 1

(mod ùëù) ‚áí ùëõùëù + 1 ‚â° (ùëõ + 1)

(mod ùëù)

(ùëõ + 1)ùëù ‚â° ùëõ + 1 (mod p).

Como quer√≠amos provar!

Exemplo 3.1.3. Agora vamos testar para um ùëù = 5 e ùëé = 2.

25 ‚â° 32 ‚â° 2 (mod 5).

Exemplo 3.1.4. Agora vamos testar para um ùëù = 5 e ùëé = 4.

45 = 1024 ‚â° 4 (mod 5).

Facilmente encontramos um contra exemplo para a rec√≠proca do Teorema, ou seja, se

quisermos saber se um n√∫mero √© primo se utilizando do Pequeno Teorema de Fermat temos

grande chances de chegarmos a conclus√£o equivocada. Veremos no exemplo a seguir.

Exemplo 3.1.5. Dado ùëù = 341 e ùëé = 2, atrav√©s do Pequeno Teorema de Fermat, vamos

tentar concluir se 341 √© ou n√£o primo. Sabemos que :

22

210 = 1024 ‚â° 1 (mod 341).

Elevando os dois lados a 10, temos que:

210¬∑10 ‚â° 110

(mod 341) ‚áí 2100 ‚â° 1

(mod 341).

Elevando os dois lados ao cubo, temos que:

2300 ‚â° 13 (mod 341).

Multiplicando por 210 temos que:

2300.210 ‚â° 1 (mod 341).

Repetindo a multiplica√ß√£o por mais 3 vezes:

Agora para finalizar multiplicamos por 2 e teremos :

2300.240 ‚â° 1 (mod 341).

2340.2 ‚â° 1.2 (mod 341),
2341 ‚â° 2 (mod 341).

Sendo assim poder√≠amos concluir que 341 √© primo! O que √© mentira, j√° que 341 = 11.31.

Com este exemplo vimos que a rec√≠proca n√£o √© verdadeira, testamos somente com ùëé = 2,

e concluimos que 341 √© primo.

O Teste de Fermat para saber se um n√∫mero natural √© ou n√£o primo, se utiliza justamente

do teorema descrito acima. A m√°quina utilizada testa o valor dado com v√°rios valores de ùëé

naturais e diferentes at√© que se para todos os valores testados o Pequeno Teorema de Fermat

se confirma ela retornar√° que o valor √© primo e caso contr√°rio ela retorna que o n√∫mero √©

composto.

Esse √© um teste probabil√≠stico j√° que n√£o √© poss√≠vel testar para todos os n√∫meros naturais.

Sendo assim, para n√∫meros muito grandes voc√™ pode ter o resultado errado caso a m√°quina

teste aquele valor s√≥ para n√∫meros onde o Teorema funcionar√° e retorne que ele √© primo ,

quando na verdade se tivesse feito o teste com outro valor teria constatado que ele era com-

posto. Mas se tivessemos feito outros testes para o nosso √∫ltimo exemplo talvez tivessemos

feito com n√∫meros que confirmassem o Pequeno Teorema de Fermat e assim retornaria que

o valor era primo , o que vimos que n√£o √© verdade.Logo este √© um teste que n√£o d√° 100% de

certeza.

Quanto mais valores testarmos mais chances temos de acertar, mas nunca teremos certeza,

principalmente para valores muito grandes.

23

3.2 Teste de Lucas-Lehmer

Este √© um teste que foi criado por Lucas em 1876. Ap√≥s meio s√©culo, em 1936, Lehmer

fez algumas contribui√ß√µes para o teorema. O teste se utiliza dos n√∫meros de Mersenne, ele

testa o valor dado atrav√©s de uma recorr√™ncia e retorna verdadeiro quando √© primo.

No algoritmo utiliza-se as seguintes equa√ß√µes:

ùëÜ0 = 4, ùëÜùëõ ‚â° (ùëÜ2

ùëõ‚àí1‚àí2)

(mod ùëÄùëù), comùëÄùëù = 2ùëù‚àí1.Se ùëÜùëõ‚àí2 ‚â° 0

(mod ùëÄùëù) ‚áí ùëÄùëù √© primo.

(3.1)

A demonstra√ß√£o deste algoritimo foi feita por Lucas e n√£o √© trivial ele foi melhorado por

Lehmer mas ainda assim n√£o cabe faz√™-la neste trabalho. Pode-se encontrar essa demons-

tra√ß√£o em [2].

Faremos alguns exemplos para entendermos como funciona esse teste.

Exemplo 3.2.1. Vamos testar para: ùëõ = 3 ‚áí ùëÄ3 = 23? 1 = 7.

temos que : ùëÜ0 = 4,
ùëÜ1 ‚â° 14 (mod7), ùëÜ1 ‚â° 0 (mod7).
Logo 7 √© primo.

Exemplo 3.2.2. Vamos testar agora para o n√∫mero 7.
Primeiro calculamos ùëÄ7 = 27 ‚àí 1 ‚áí ùëÄ7 = 127
Dado ùëÜ0 = 4, vamos calcular ùëÜ1, ùëÜ2, ùëÜ3, ùëÜ4, ùëÜ5

ùëÜ1 ‚â° 14 (mod 127),

ùëÜ2 ‚â° 67 (mod 127),
ùëÜ3 ‚â° 42 (mod 127),
ùëÜ4 ‚â° 111 (mod 127),
ùëÜ5 ‚â° 0 (mod 127),

Conluimos ent√£o que 127 √© primo.

3.3 Teste de Miller-Rabin

Este teste foi criado por Gary Miller e Michael Rabin, dois profissionais da √°rea da

inform√°tica que estudam criptografia e atrav√©s tamb√©m do pequeno Teorema de Fermat

24

criaram um teste probabilistico com alto grau de acerto.

Teorema de base para o teste:

Teorema 3.3.1. Sejam ùëù um n√∫mero primo e ùë• > 1 tal que ùë•2 ‚â° 1

(mod ùëù) . Ent√£o

ùë• ‚â° 1

(mod ùëù) ou ùë• ‚â° ùëù ‚àí 1

(mod ùëù)

Demonstra√ß√£o
ùë•2 ‚â° 1

(mod ùëù) ‚áí ùë•2 ‚àí 1 ‚â° 0

(mod ùëù) ‚áí

(ùë• + 1)(ùë• ‚àí 1) ‚â° 0

(mod ùëù) ‚áí ùë• ‚â° ‚àí1

(mod ùëù) ou ùë• ‚â° 1

(mod ùëù) ‚áí

ùë• ‚â° (ùëù ‚àí 1) (mod p) ou ùë• ‚â° 1 (mod p) ‚áí

C.Q.D

O teste de Miller testa s√≥ n√∫meros impares pelo motivo √≥bvio que o √∫nico primo par √© o

2, ele funciona de seguinte forma:

1. Dado um ùëõ inteiro, ele divide ùëõ ‚àí 1 por 2 diversas vezes at√© encontrar um valor ùëò

√≠mpar. E ent√£o ùëõ ‚àí 1 = 2ùëû.ùëò

2. √â escolhido um ùëé natural e ùëé < ùëõ, e ent√£o se faz o 1¬∫ teste:

ùëéùëò ‚â° 1 (mod n).

3. E depois uma sequ√™ncia de testes com o mesmo valor de ùëé, mas com ùëñ variando

ùëé2ùëñ.ùëû ‚â° ‚àí1 (mod n)

Com 0 < ùëñ < ùëû ‚àí 1

4. Caso em algum momento dos testes a igualdade seja verdadeira a m√°quina retorna que

o ùëõ √© primo caso contr√°rio ela retorna que o ùëõ √© composto.

Vamos fazer alguns exemplos se utilizando do teste mostrado nessa se√ß√£o.

Exemplo 3.3.2. Neste exemplo, vamos utilizar o teste de Miller para descobrir se ùëõ = 15 √©

primo ou composto.

Ent√£o seguiremos os passos acima:

25

1. Ent√£o pegaremos ùëõ ‚àí 1 = 15 ‚àí 1 = 14 e dividiremos por 2 at√© que o resultado d√™ um

n√∫mero √≠mpar 14 = 21.7. Ent√£o ùëò = 7 e ùëû = 1.

E usaremos ùëé = 2.

2. Agora vamos substituir na primeira f√≥rmula: 27 ‚â° 128 ‚â° 8 (mod 15) Como 8 Ã∏= 1

ent√£o vamos para a segunda parte

3. Agora subtituiremos na segunda f√≥rmula,

21 ‚â° 2 (mod 5),

22 ‚â° 4 (mod 15),

24 ‚â° 1 (mod 15),

Sendo assim provamos que 15 √© composto.

Exemplo 3.3.3. Vamos testar agora para ùëõ = 561.

1. Ent√£o ùëõ ‚àí 1 = 561 ‚àí 1 = 560 e 560 = 24.35 ent√£o ùëò = 35 e ùëû = 4.

2. Escolhendo ùëé = 2 temos que utilizar : ùëéùëò ‚â° 1 (mod n).

Ent√£o:235 ‚â° 263 (mod 561).

3. E agora vamos utilizar a f√≥rmula ùëé2ùëñ.ùëû ‚â° ‚àí1 (mod n), com 0 < ùëñ < ùëû ‚àí 1

221.35 ‚â° 166 (mod 561),

222.35 ‚â° 67 (mod 561),

223.35 ‚â° 1 (mod 561), sendo assim 561 √© composto.

Exemplo 3.3.4. Vamos testar para o ùëõ = 7, sabemos que ele tem que retornar que o valor

√© um poss√≠vel primo.

1. Ent√£o ùëõ ‚àí 1 = 7 ‚àí 1 = 6 e 6 = 21.3 ent√£o ùëò = 3 e ùëû = 1

2. Escolhendo ùëé = 2 temos que utilizar : ùëéùëò ‚â° 1 (mod n)

Ent√£o:23 ‚â° 1 (mod 7)

Exemplo 3.3.5. Vamos testar para o ùëõ = 1.373.653.

26

1. Ent√£o ùëõ ‚àí 1 = 1.373.653 ‚àí 1 = 1.373.652 e 1.373.652 = 22 ¬∑ 343.413 ent√£o ùëò = 343.413

e ùëû = 2.

2. Escolhendo ùëé = 2 temos que utilizar : ùëéùëò ‚â° 1 (mod n).

Ent√£o:2343.413 ‚â° 890.592 (mod 1.373.653).

3. E agora vamos utilizar a f√≥rmula ùëé2ùëñ.ùëû ‚â° ‚àí1 (mod n), com 0 < ùëñ < ùëû ‚àí 1.

221.343.413 ‚â° 1.373.652 (mod 1.373.653),

221.343.413 ‚â° ‚àí1 (mod 1.373.653),

Sendo assim concluimos que 1.373.653 √© primo. O que n√£o √© verdade pois 1.373.653 =

829 ¬∑ 1657.

Ent√£o dizemos que 1.373.653 √© um pseudo-primo para ùëé = 2.

Apesar do teste de Miller ser um teste probab√≠listico, √© conhecido que se for testado com

alguns valores de ùëé conseguimos torna-lo um teste determin√≠stico, como veremos na abaixo:

‚Ä¢ se ùëõ < 2.047, √© suficiente testar para ùëé = 2;

‚Ä¢ se ùëõ < 1373653, √© suficiente testar para ùëé = 2 e 3;

‚Ä¢ se ùëõ < 9080191, √© suficiente testar para ùëé = 31 e 73;

‚Ä¢ se ùëõ < 25326001 , √© suficiente testar para ùëé = 2, 3, e 5;

‚Ä¢ se ùëõ < 4759123141 , √© suficiente testar para ùëé = 2, 7, e 61;

‚Ä¢ se ùëõ < 1.122.004.669.633, √© suficiente testar para ùëé = 2, 13, 23, e 1.662.803;

‚Ä¢ se ùëõ < 2.152.302.898.747, √© suficiente testar para ùëé = 2, 3, 5, 7, e 11;

‚Ä¢ se ùëõ < 3.474.749.660.383, √© suficiente testar para ùëé = 2, 3, 5, 7, 11, e 13;

‚Ä¢ se ùëõ < 341.550.071.728.321, √© suficiente testar para ùëé = 2, 3, 5, 7, 11, 13, e 17;

‚Ä¢ se ùëõ < 3.825.123.056.546.413.051, √© suficiente testar para ùëé = 2, 3, 5, 7, 11, 13, 17, 19, e

23.

27

Fonte: Refer√™ncia [12]

Se um n√∫mero composto ùëõ tem resultado inconclusivo para o teste de Miller com respeito

a uma base ùëè, dizemos que ùëõ √© um pseudoprimo forte para a base ùëè. Existem mais de 1200
pseudoprimos fortes entre 1 e 109.Segue alguns deles: 561, 1105, 1729, 2465, 2821, 6601, 8911,

10585, 15841, 29341, 41041, 46657, 52633, 62745, 63973, 75361, 101101, 115921, 126217,

162401, 172081, 188461, 252601, 278545, 294409, 314821, 334153, 340561, 399001, 410041,

449065, 488881, 512461.

3.4 AKS

Todos os testes citados anteriormente tiveram sua import√¢ncia na √©poca em que foram

descobertos, mas nenhum deles supri a necessidade que temos na atualidade devido a tec-

nologia que estamos inseridos. A busca por um teste que diga se um n√∫mero muito grande

√© primo ou n√£o continuou, at√© que surgiu o algoritimo AKS, que veremos a seguir.

Este teste foi criado por 3 indianos conhecidos como : Manindra Agrawal, Neeraj Kayal

e Nitin Saxena o que originou o nome ao teste AKS. Em 2002, ent√£o Agrawal , professor

doutor em Ci√™ncias da Computa√ß√£o e seus alunos Kayal e Saxena, rec√©m formados do curso de

Ci√™ncias da Computa√ß√£o, que tinham seu trabalho de conclus√£o de curso intitulado Towards

a deterministic polynomial-time Primality Test, estavam ent√£o a procura de um Teste de

primalidade que faria isso em um tempo polinomial, ou seja, diria se um n√∫mero era primo

ou n√£o mais r√°pido do que todos os testes j√° vistos at√© ent√£o.

Este √© um teste que tem como seu principal diferencial o tempo de resposta, e faz com

que as pessoas imaginem que seu algoritimo se utilize de uma matem√°tica avan√ßada o que

n√£o √© verdade. Ele teve uma repercu√ß√£o muito grande e prova disso foi que assim do seu

lan√ßamento, no dia seguinte j√° haviam v√°rias sugest√µes de simplifica√ß√µes dadas pelos mais

diversos estudiosos da √°rea, que j√° perceberam a import√¢ncia daquele artigo.

O algoritimo tem como base a seguinte equa√ß√£o de congru√™ncia:

(ùë• ‚àí ùëé)ùëù ‚â° (ùë•ùëù ‚àí ùëé)

(mod ùëù) ‚áî ùëù √© primo.

Sendo ùëé ‚àà ùëç e ùëù > 1, desenvolvimento dessa equa√ß√£o se d√° pela expans√£o binomial de:

ùëõ
‚àëÔ∏Ä
ùëù=0

(ùë• ‚àí ùëé)ùëù .

28

Visto que desenvolver essa equa√ß√£o e mostrar que um n√∫mero grande p √© primo levaria

muito tempo, ent√£o houve uma melhoria desse algoritimo. Ao inv√©s de (mod ùëù) se utiliza
mod (ùë•ùëü ‚àí 1, ùëù) onde ùëü √© um n√∫mero primo pequeno. O algoritimo AKS utiliza tamb√©m

congru√™ncia de polin√¥mios nesse trabalho n√£o foi feito uma explana√ß√£o sobre esse assunto,

mas na bibliografia [13] voc√™ encontra uma introdu√ß√£o sobre o tema.

Vamos fazer exemplos num√©ricos, para ficar mais claro.

Exemplo 3.4.1. Vamos fazer a verifica√ß√£o se 7 √© um n√∫mero primo atrav√©s do teste AKS.

Seja ùëù = 7 e vamos tomar ùëé = 2 e ùëü = 3.

Substituindo os valores na equa√ß√£o, abaixo:

(ùë• ‚àí ùëé)ùëù ‚â° (ùë•ùëù ‚àí ùëé) mod (ùë•ùëü ‚àí 1, ùëù), (ùë• ‚àí 2)7 ‚â° (ùë•7 ‚àí 2) mod (ùë•3 ‚àí 1, 7).

1. Precisamos verificar qual o resto da divis√£o de ùë•7 ‚àí 2 por ùë•3 ‚àí 1.

Fazendo os calculos temos que o resto √© ùë• ‚àí 2.

Faremos ent√£o, (ùë• ‚àí 2) dividido por 7 e o resto da divis√£o √© 5+x.

2. Agora vamos verificar se (ùë• ‚àí 2)7 mod(ùë•3 ‚àí 1, 7) tamb√©m tem como resto 5 + ùë•.

Ent√£o utilizando a expans√£o bin√¥mial,temos: (ùë•‚àí2)7 = ‚àí128+448ùë•‚àí672ùë•2 +560ùë•3 ‚àí
280ùë•4 + 84ùë•5 ‚àí 14ùë•6 + ùë•7.

E agora se utilizando do resultado da expans√£o, dividiremos por ùë•3 ‚àí 1 e o resto dessa
divis√£o √© 418 + 169ùë• ‚àí 588ùë•2.

Vamos dividir ent√£o 418 + 169ùë• ‚àí 588ùë•2 por 7 e o resto dessa divis√£o √© igual a 5+x.

Logo 7 √© primo.

Exemplo 3.4.2. Faremos agora para ùëù = 4, ùëé = 2 e ùëü = 3.

1. Vamos fazer a divis√£o de ùë•4 ‚àí 2 por ùë•3 ‚àí 1, o resto da divis√£o √© igual a x-2.

Agora dividindo ùë• ‚àí 2 por 4 , o resto da divis√£o √© 2+x.

2. Usando a expans√£o binomial de (ùë• ‚àí 2)4 temos ùë•4 ‚àí 8ùë•3 + 24ùë•2 ‚àí 32ùë• + 16 e agora

vamos dividir o resultado por ùë•3 ‚àí 1 e obtemos o resto igual a -3x.

Como x ‚àí 2 Ã∏= ‚àí3x.

Portanto 4 √© composto.

29

30

CAP√çTULO 4

SEQU√äNCIA DID√ÅTICA

4.1

Introdu√ß√£o

A matem√°tica n√£o costuma ser a mat√©ria mais fascinante para a maioria dos alunos, por

diversos motivos. Um deles √© a falta de significado que existe nos conte√∫dos dos livros e

apostilas usadas nas escolas. Alguns conte√∫dos conseguimos com facilidade encontrar uma

aplicabilidade e uma resposta para aquela velha pergunta: ‚ÄúProfessor, para o que eu vou

usar isso na minha vida?‚Äù.

Esse trabalho vem para contribuir, para dar significado a alguns conte√∫dos ensinados

no ensino m√©dio, por mais que alguns conte√∫dos n√£o tenha aplica√ß√£o direta no cotidiano

daqueles alunos, precisamos mostrar aos alunos que indiretamente ele est√° usando algo que

√© uma consequ√™ncia do que ele aprendeu.

Depois de todos os conceitos vistos acima vamos aplicar alguns deles direta outros in-

diretamente nesta sequ√™ncia did√°tica, que visa tamb√©m passar um pouco de conhecimento

al√©m do curriculo regular do ensino b√°sico.

4.2 Objetivo

Nosso objetivo √© atrav√©s dos testes de primalidade trazer a tona a aplicabilidade dos

n√∫meros primos. Esse √© um assunto que acompanha toda a trajet√≥ria matem√°tica do nosso

31

aluno no ensino b√°sico e muitos deles n√£o veem uma aplica√ß√£o real para o tema.

Vimos nesse trabalho alguns testes de primalidade e escolhemos apresentar para os alu-

nos o Crivo de Erat√≥stenes e o Teste Miller. O motivo da escolha do Crivo de Erat√≥stenes

√© mostrar para os alunos porque tantos outros testes surgiram mesmo j√° existindo h√° tan-

tos anos esse m√©todo. A escolha do teste de Miller foi feita devido a maior facilidade de

entendimento dos alunos na faixa et√°ria que se encontram.

4.3 Metodologia

‚Ä¢ O professor deve dar uma introdu√ß√£o hist√≥rica da import√¢ncia dos n√∫meros primos.

Essa introdu√ß√£o pode ser retirada desse trabalho no Cap√≠tulo 3 que fala sobre os n√∫-

meros primos. Nesse momento o aluno precisa tamb√©m j√° ter aprendido o que s√£o

n√∫meros primos e tamb√©m o que significa fatorar um n√∫mero.

‚Ä¢ Para contextualizar e fazer a aula se tornar mais interessante pode-se contar um pouqui-

nho sobre criptografia. Na introdu√ß√£o desse trabalho voc√™ encontra um breve hist√≥rico

da criptografia.

‚Ä¢ Caso a escola tenha o recurso da sala de inform√°tica √© interessante fazer com que os

alunos pesquisem sobre o assunto para que n√£o fique apenas uma aula expositiva e eles

consigam discutir sobre o tema.

‚Ä¢ Iniciar o assunto mostrando a forma mais simples de se encontrar um n√∫mero primo,

que √© pelo Crivo de Erat√≥stenes, contar um pouquinho sobre o Crivo de Erat√≥stenes e

como ele fazia para encontrar um n√∫mero primo.

4.4 Atividade 1

Primeiramente, os alunos devem descobrir se um n√∫mero √© primo ou n√£o da forma usual,

ou seja, pelo algoritmo da divis√£o. Assim, dado um n√∫mero pequeno (n√£o muito maior

que 100), os alunos devem efetuar divis√µes por v√°rios n√∫meros inteiros at√© descobrir sua

fatora√ß√£o. Desta forma, descobrir√£o se ele √© ou n√£o primo.

A seguir, os alunos podem se dividir em grupos de mais ou menos 4 alunos e cada grupo

recebe um outro n√∫mero (ou o mesmo do in√≠cio) para descobrir atrav√©s do crivo se √© ou n√£o

32

primo. √â esperado que esta atividade termine antes da primeira. Se o n√∫mero for riscado,

ele n√£o √© primo. Se n√£o for riscado, ele √© primo.

Finalmente, deve-se propor aos alunos que encontrem todos os n√∫meros primos que est√£o

compreendidos entre 0 e 100.

Ap√≥s esses c√°lculos mostre para os alunos o quanto demoraria se tivesse que encontrar

um n√∫mero primo muito grande e conclua ent√£o que √© por isso que existem v√°rias outras

formas (algoritmos) de decidir sobre primalidade. Existem algumas mais eficientes outras

menos.

Falar sobre os seguintes testes de primalidade:

1. Teste de Fermat

2. Teste de Lucas-lehmer

3. Teste de Miller

4. Algoritmo AKS

Todos eles t√™m os nomes dos seus descobridores o √∫ltimo √© o mais atual e √© o que apresenta

a resposta se um n√∫mero √© ou n√£o primo com mais rapidez. Devido √† complexidade dos

c√°lculos, sugiro que seja utilizado o Teste de Miller na aula seguinte, para ilustrar o poder

do algoritmo.

4.5 Atividade 2

Agora faremos uma explana√ß√£o sobre como o teste de Miller encontra um n√∫mero primo

com porcentagem m√≠nima de erro.

Ap√≥s apresentar uma sequ√™ncia de passos de como o teste encontra se um n√∫mero √© primo

ou n√£o, fa√ßa com um valor o passo a passo com os alunos. N√£o creio que seria interessante

para os alunos a demonstra√ß√£o, pois se torna cansativa. No entanto, isto fica a crit√©rio do

professor que ir√° realizar a atividade, pois √†s vezes o n√≠vel de conhecimento matem√°tico da

turma permite que a prova seja feita.

Fazer ent√£o um passo a passo de prefer√™ncia j√° com um exemplo n√∫merico para ficar mais

claro. Segue o passo a passo do Teste de Miller.

1. Dado um n√∫mero ùëõ calcule ùëõ ‚àí 1.

33

2. Divida o n√∫mero ùëõ ‚àí 1 por 2 por v√°rias vezes at√© encontrar um n√∫mero √≠mpar.

3. Voc√™ obteve ent√£o um n√∫mero ùëõ ‚àí 1 = 2ùëûùëò. Agora escolha um valor que chamaremos

de ùëé e deve ser menor que ùëõ ‚àí 1.

4. Agora calcule ùëéùëò. Este resultado voc√™ deve dividir por ùëõ e, caso o resto seja 1, ùëõ √© um

poss√≠vel n√∫mero primo.

5. Agora fa√ßa: ùëé2ùëñùëò com 0 < ùëñ < ùëû ‚àí 1 e divida por ùëõ. Se em algum momento o resto for

ùëõ ‚àí 1 ent√£o esse n√∫mero √© um poss√≠vel primo.

D√™ ent√£o valores para que os alunos possam encontrar poss√≠veis primos utilizando o Teste

de Miller.

√â bom enfatizar que o Teste de Miller √© probabil√≠stico, ou seja, ele pode falhar. Dar

um exemplo quando o teste falha (por exemplo s√£o pseudo-primos para ùëé = 2 os seguintes

valores:561, 1105, 1729, 2465, 2821, 6601, 8911, 10585, 15841.29341, 41041, 46657, 52633.62745, 63973

e o 75361).

Ap√≥s a atividade seria interessante levantar com os alunos o que eles acharam e se con-

seguiram perceber o quanto a matem√°tica est√° inserida nas mais variadas situa√ß√µes.

Observamos que na referencia [8] existe um simulador do Teste de Miller, que faz todos

os c√°lculos acima.

4.6 Atividade 3

Esta atividade √© um jogo, que pode ser executado em gincanas ou mesmo durante a aula.

A proposta √© que o docente escolha v√°rios n√∫meros (primos, compostos e pseudoprimos para

o teste de Miller) e escreva em peda√ßos de papel.

Com a turma dividida em grupos, a ideia √© pegar cada n√∫mero e decidir se √© primo ou

composto, utilizando algum m√©todo (fatora√ß√£o, crivo de Erat√≥stenes ou teste de Miller).

Ap√≥s algum tempo, paramos a disputa e somamos os n√∫meros que cada grupo conseguiu

definir a primalidade. Ganha a disputa o grupo cuja soma dos n√∫meros for maior.

Desta forma, existem duas op√ß√µes para os grupos: escolher poucos n√∫meros grandes para

testar, ou muitos n√∫meros pequenos.

34

4.7 Conclus√£o

Como foi citado no in√≠cio dessa sequ√™ncia did√°tica, o grande intuito √© mostrar para

os nossos alunos como a matem√°tica est√° presente no seu cotidiano, mesmo que as vezes

indiretamente.

Mostrar a aplica√ß√£o de um teste de primalidade para os alunos, tem como intuito mos-

trar a eles que a matem√°tica est√° aplicada a tecnologia que eles est√£o inseridos e utilizam

diariamente.

35

36

REFER√äNCIAS BIBLIOGR√ÅFICAS

[1] Hist√≥ria da criptografia. Dispon√≠vel em:

http://prof-ricardovianna.blogspot.com.br/2011/05/criptografia-parte-i-historia-

da.html

(acesso em 01/08/2014)

[2] COUTINHO S. C., N√∫meros Inteiros e Criptografia RSA. Cole√ß√£o Matem√°tica e Apli-

ca√ß√µes, IMPA, 2013.

[3] Hist√≥ria do Pr√™mio Godel. Dispon√≠vel em:

http://www.matematika.it/public/premi/Premio%20GODEL.pdf

(acesso em 01/09/2014)

[4] Lemos Manoel, Criptografia, N√∫meros Primos e Algoritmos.Dispon√≠vel em:

http://www.impa.br/opencms/pt/biblioteca/pm/PM_04.pdf

(acesso em 20/07/2014)

[5] Universidade de Lisboa, P√°gina dos N√∫meros Primos. Dispon√≠vel em:

http://www.educ.fc.ul.pt/icm/icm98/icm12/Historia.htm

(acesso em 20/07/2014)

[6] Santos Jos√© Plinio O., Introdu√ß√£o √† teoria dos n√∫meros.Cole√ß√£o Matem√°tica Universi-

t√°ria, IMPA, 2009.

37

[7] Martinez, Fabio Brochero; et al , Teoria dos n√∫meros: um passeio com primos e outros

n√∫meros familiares pelo mundo inteiro,IMPA , 2011

[8] Simulador do Teste de Miller: http://gandraxa.com/miller_rabin_primality_test.xml

(acesso em 15/10/2014)

[9] N√∫meros primos de Mersenne. Dispon√≠vel em:

http://www.profcardy.com/artigos/mersenne.php

(acesso em :15/10/2014)

[10] Tabela com n√∫meros de Primos de Mersenne: http://www.mersenne.org/primes/

[11] Deterministic variants of the test Dispon√≠vel em :

http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test

(acesso

em

15/10/2014)

[12] Teorema Chin√™s do Restos. Dispon√≠vel em:

http://www.mat.puc-rio.br/ jairo/MAT1310/ (acesso em 25/01/2015)

[13] Congru√™ncia de polin√¥mios.

http://www.rumoaoita.com/site/attachments/065_filipe_aulas_congruencia.pdf

(acesso 25/01/2015).

38

