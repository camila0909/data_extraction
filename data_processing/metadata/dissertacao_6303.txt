UNIVERSIDADE FEDERAL DO TRI ˆANGULO MINEIRO

MESTRADO PROFISSIONAL EM MATEM ´ATICA EM REDE

NACIONAL

Joaquim Barbosa J´unior

Resolu¸c˜ao de problemas usando o wxMaxima

Uberaba-MG

2013

JOAQUIM BARBOSA J ´UNIOR

Resolu¸c˜ao de problemas usando o wxMaxima

Disserta¸c˜ao, apresentada ao curso de Mes-
trado Proﬁssional em Matem´atica em Rede
Nacional-PROFMAT, como parte das ati-
vidades para obten¸c˜ao do t´ıtulo de Mestre
em Matem´atica da Universidade Federal do
Triˆangulo Mineiro - UFTM, Departamento
de Matem´atica.

Uberaba

2013

A minha esposa M´aria R´ubia Barbosa

e minha ﬁlha Mariannah Silva Barbosa.

AGRADECIMENTOS

– Agrade¸co a Deus acima de tudo.

– Ao meu orientador Ms. Welington Barros e Barbosa.

– Ao meu co-orientador Dr. Osmar Al´essio.

– `A coordenadora do PROFMAT polo UFTM, Drª. Marcela Luciano Vilela de Souza

– `A CAPES

– Agrade¸co ao IMPA e a SBM pela cria¸c˜ao do PROFMAT, que proporcionou-me a

oportunidade de tornar-me um mestre.

– Ao meus companheiros de muitas viagens M´ario e Neilon.

A mente que se abre a uma nova ideia jamais voltar´a ao seu tamanho original.

Albert Einstein

RESUMO

Este trabalho ilustra as potencialidades do software wxMaxima usando o sistema

operacional UBUNTU-Linux em um ambiente gr´aﬁco KDE. Mostra com trabalhar com

vari´aveis, listas, equa¸c˜oes, fun¸c˜oes e gr´aﬁcos de duas ou trˆes dimens˜oes. Outros temas do

ensino superior como limites, derivadas, integrais, matrizes, sistemas lineares, autovalores,

autovetores e equa¸c˜oes diferenciais tamb´em s˜ao abordados. WxMaxima ´e um software

livre e pode fazer c´alculos usando a forma simb´olica e/ou num´erica. Pode tamb´em ser

utilizado em sistemas operacionais como MacOS e Windows. A disserta¸c˜ao tamb´em

apresenta sugest˜oes sobre como e onde o aplicativo pode ser utilizado.

Palavras-chave: Resolu¸c˜ao de problemas, Maxima, wxMaxima, Macsyma, Software

livre, Matem´atica computacional simb´olica, CAS

ABSTRACT

This work shows the potential of to use the software wxMaxima in UBUNTU-Linux

operating system with a graphical environment KDE. Shows how to work with variables,

lists, equations, functions and graphs in two or three dimensions. Other issues in higher

education as limits, derivatives, integrals, matrices, linear systems, eigenvalues, eigenvec-

tors and diﬀerential equations are also discussed. WxMaxima is free software and can

perform calculations using the symbolic form and / or numerical. Can also be used on

operating systems like Windows and MacOS. The dissertation also presents suggestions

on how and where the application can be used.

Keywords: Troubleshooting, Maxima, WxMaxima, Macsyma, Free software, Symbolic

computational mathematics, CAS

Conte´udo

Lista de Figuras

1 INTRODUC¸ ˜AO

2 REGRAS B ´ASICAS DO WXMAXIMA

p. 14

p. 16

2.1 VARI ´AVEIS E C ´ALCULOS ALG´EBRICOS . . . . . . . . . . . . . . .

p. 16

2.2 LISTAS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 18

2.3 RESOLVENDO EQUAC¸ ˜OES . . . . . . . . . . . . . . . . . . . . . . .

p. 18

2.4 DEFININDO FUNC¸ ˜OES DE UMA OU MAIS VARI ´AVEIS . . . . . .

p. 19

3 PLOTAGEM DE GR ´AFICOS

p. 22

3.1 DUAS DIMENS ˜OES . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 22

3.1.1 Fun¸c˜oes expl´ıcitas . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 22

3.1.2 Fun¸c˜oes impl´ıcitas e param´etricas . . . . . . . . . . . . . . . . .

p. 24

3.2 TRˆES DIMENS ˜OES . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 27

3.2.1 Fun¸c˜oes expl´ıcitas . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 27

3.2.2 O draw3d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 28

3.3 USANDO GR ´AFICOS PARA ENCONTRAR RA´IZES NUM´ERICAS .

p. 33

4 C ´ALCULO DIFERENCIAL E ´ALGEBRA LINEAR

p. 34

4.1 LIMITES DE FUNC¸ ˜OES . . . . . . . . . . . . . . . . . . . . . . . . .

p. 34

4.2 DERIVADAS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 36

4.3

INTEGRAIS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 38

4.4 SISTEMAS LINEARES . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 39

4.5 MATRIZES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 41

4.6 POLIN ˆOMIO CARACTER´ISTICO, AUTOVALORES E AUTOVETO-

RES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 44

5 EQUAC¸ ˜OES DIFERENCIAIS ORDIN ´ARIAS

p. 46

5.1 REVISANDO A TEORIA . . . . . . . . . . . . . . . . . . . . . . . . .

p. 46

5.1.1 Equa¸c˜oes de de 1ª ordem . . . . . . . . . . . . . . . . . . . . . .

p. 46

5.1.1.1 Equa¸c˜oes de vari´aveis separ´aveis

. . . . . . . . . . . .

p. 46

5.1.1.2 Equa¸c˜oes exatas

. . . . . . . . . . . . . . . . . . . . .

p. 47

5.1.1.3 Equa¸c˜oes lineares e os fatores integrantes . . . . . . . .

p. 47

5.1.2 EDOs de 2ª ordem com coeﬁcientes constantes . . . . . . . . . .

p. 48

5.1.2.1 Equa¸c˜ao caracter´ıstica e resolu¸c˜ao da equa¸c˜ao homogˆenea p. 48

5.1.2.2 Duas ra´ızes reais distintas . . . . . . . . . . . . . . . .

p. 49

5.1.2.3 Duas ra´ızes complexas . . . . . . . . . . . . . . . . . .

p. 49

5.1.2.4 Uma raiz real . . . . . . . . . . . . . . . . . . . . . . .

p. 50

5.2 USANDO O WXMAXIMA PARA SOLUCIONAR EDOS . . . . . . .

p. 51

5.3 CAMPO DE DIREC¸ ˜OES . . . . . . . . . . . . . . . . . . . . . . . . .

p. 52

6 CONSIDERAC¸ ˜OES FINAIS

Referˆencias

p. 56

p. 57

Lista de Figuras

1

2

3

4

5

6

7

8

9

Logo do Maxima.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 15

Atribuindo vari´aveis e realizando c´alculos.

. . . . . . . . . . . . . . . .

p. 17

C´alculo de ra´ızes exatas.

. . . . . . . . . . . . . . . . . . . . . . . . . .

p. 17

C´alculo de ra´ızes n˜ao exatas com resultado simb´olico ou num´erico. . . .

p. 17

C´alculo de logaritmos.

. . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 17

Trabalhando com listas.

. . . . . . . . . . . . . . . . . . . . . . . . . .

p. 18

Resolvendo equa¸c˜oes do segundo grau . . . . . . . . . . . . . . . . . . .

p. 19

Resolvendo equa¸c˜oes literais . . . . . . . . . . . . . . . . . . . . . . . .

p. 19

C´alculo de imagens e zero da fun¸c˜ao f(x) = 3x + 1 . . . . . . . . . . .

p. 20

10 C´alculo de imagens e zero da fun¸c˜ao g(x) = x2 + x + 1 . . . . . . . . .

p. 20

11 C´alculo das imagens r(1, 2, 3) , r(−1, 0, −6) e r(

√

√
a, 3

a, 12a) . . . . . .

p. 21

12 Resolvendo as equa¸c˜oes r(s, 2, −9) = 0 e r(

√

t, t, 0) = 0 . . . . . . . . .

p. 21

13 Gr´aﬁco de fun¸c˜oes expl´ıcitas usando o plot2d.

. . . . . . . . . . . . . .

p. 23

14 Gr´aﬁco de fun¸c˜oes expl´ıcitas usando o wxplot2d. . . . . . . . . . . . . .

p. 23

15 Comando wxdraw2d em uma equa¸c˜ao de el´ıpse.

. . . . . . . . . . . . .

p. 25

16 Comando wxdraw2d em uma equa¸c˜ao de hip´erbole.

. . . . . . . . . . .

p. 25

17 Comando wxdraw2d para duas fun¸c˜oes impl´ıcitas. . . . . . . . . . . . .

p. 26

18 Comando wxdraw2d para fun¸c˜ao param´etrica.

. . . . . . . . . . . . . .

p. 26

19 Exemplo plot3d em paraboloide e plano . . . . . . . . . . . . . . . . . .

p. 28

20 Explicit:Paraboloide hiperb´olico . . . . . . . . . . . . . . . . . . . . . .

p. 30

21 Parametric:H´elice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 31

22 Parametric Surface:Toro . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 31

23

Implicit: Cone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 31

24 Quatro comandos dentro de um mesmo draw3d . . . . . . . . . . . . .

p. 32

25 Quatro gr´aﬁcos em ´unico draw3d.

. . . . . . . . . . . . . . . . . . . . .

p. 32

26 Outra perspectiva para os quatro gr´aﬁcos . . . . . . . . . . . . . . . . .

p. 32

27

Ineﬁc´acia do comando solve e fun¸c˜ao f(x).

. . . . . . . . . . . . . . . .

p. 33

28 Gr´aﬁco de f(x) e utiliza¸c˜ao do ﬁnd root.

. . . . . . . . . . . . . . . . .

p. 33

29

30

Limites laterais e bilateral. . . . . . . . . . . . . . . . . . . . . . . . . .

p. 35

Limites tendendo ao inﬁnito. . . . . . . . . . . . . . . . . . . . . . . . .

p. 36

31 Alguns limites fundamentais. . . . . . . . . . . . . . . . . . . . . . . . .

p. 36

32 Derivada de uma fun¸c˜ao composta.

. . . . . . . . . . . . . . . . . . . .

p. 37

33 Exemplo de derivada parcial. . . . . . . . . . . . . . . . . . . . . . . . .

p. 37

34 Comando integrate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 38

35

Incapacidade de integrate para integrar algumas fun¸c˜oes.

. . . . . . . .

p. 39

36 O uso de romberg para integrais deﬁnidas.

. . . . . . . . . . . . . . . .

p. 39

37

38

39

Solucionando sistemas lineares com solve. . . . . . . . . . . . . . . . . .

p. 40

Sistema poss´ıvel e indeterminado.

. . . . . . . . . . . . . . . . . . . . .

p. 40

Sistema imposs´ıvel.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 41

40 Deﬁnindo uma matriz . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 42

41 Alguns elementos da matriz A. . . . . . . . . . . . . . . . . . . . . . . .

p. 42

42 Determinante e escalonamento.

. . . . . . . . . . . . . . . . . . . . . .

p. 42

43 Matriz inversa.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 42

44 Matriz B e produto por escalar.

. . . . . . . . . . . . . . . . . . . . . .

p. 43

45 Produto entre matrizes.

. . . . . . . . . . . . . . . . . . . . . . . . . .

p. 43

46 Adi¸c˜ao e diferen¸ca.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 43

47 Autovalores da matriz C. . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 45

48 Autovalores usando o pacote eigen.

. . . . . . . . . . . . . . . . . . . .

p. 45

49 Autovetores da matriz C. . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 45

50 Equa¸c˜ao diferencial de 1ª ordem com condi¸c˜ao inicial (π, 3).
√

51 Equa¸c˜ao diferencial de 1ª ordem com condi¸c˜ao inicial (−2,

. . . . . .

p. 52

5) . . . . .

p. 52

52 Equa¸c˜ao diferencial de 2ª ordem com condi¸c˜oes de contorno (1, 5; 0, 5) e

(2; 6). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

p. 52

53 Campo de dire¸c˜oes com condi¸c˜ao inicial.

. . . . . . . . . . . . . . . . .

p. 53

54 Campo de dire¸c˜oes com condi¸c˜ao inicial.

. . . . . . . . . . . . . . . . .

p. 54

55 Campo de dire¸c˜oes com condi¸c˜ao inicial.

. . . . . . . . . . . . . . . . .

p. 54

56 Condi¸c˜oes iniciais escolhidas atrav´es de “clics” do mouse . . . . . . . .

p. 55

14

1

INTRODUC¸ ˜AO

Sabe-se, atualmente, que com os avan¸cos tecnol´ogicos o uso de computadores se tor-

nou indispens´avel. Devido ao grande n´umero de informa¸c˜oes do mundo atual bancos,

hospitais, aeroportos e lojas n˜ao podem mais funcionar sem o uso de tais m´aquinas. Na

educa¸c˜ao, professores podem usar essa tecnologia para enriquecer suas aulas proporcio-

nando aos alunos mais uma ferramenta de aprendizagem que pode ser muito eﬁcaz se bem

utilizada. Os computadores tamb´em tem extrema importˆancia para muitos proﬁssionais

da ´area de exatas, no que diz respeito a resolu¸c˜ao de problemas que envolvam c´alculos

complexos ou at´e mesmo muito extensos. Neste sentido, os computadores e seus softwa-

res se tornam poderosas ferramentas de ensino, aprendizagem e resolu¸c˜ao de problemas.

Pensando nisso, este trabalho apresenta um material complementar a alunos dos cursos
de gradua¸c˜ao ou p´os-gradua¸c˜ao, que possuam as disciplinas de ´Algebra Linear, C´alculo

Diferencial e Integral, Equa¸c˜oes Diferenciais e C´alculo Num´erico em seus planos de curso.

Esta disserta¸c˜ao pretende analisar alguns problemas t´ıpicos das disciplinas citadas apre-

sentando resolu¸c˜oes alg´ebricas e/ou num´ericas utilizando recursos computacionais.

Para as solu¸c˜oes computacionais ser´a utilizado o software wxMaxima 11.08.0 no sis-

tema operacional Ubuntu-Linux com ambiente gr´aﬁco KDE. Para usu´arios que n˜ao s˜ao

familiarizados com o Linux, existe tamb´em vers˜oes do wxMaxima para Windows ou Ma-

cintosh. Os arquivos do Windows ou MacOS para download e instala¸c˜ao podem ser

encontrados no seguinte site http://sourceforge.net/projects/maxima/ﬁles/. No Ubuntu-

Linux, em uma janela do terminal, digite “sudo apt-get install wxmaxima” junto com a

senha de super usu´ario para instalar o programa. O leitor n˜ao precisar´a pagar licen¸cas para

poder utiliz´a-lo pois ´e um programa livre, raz˜ao pela qual foi escolhido para tal estudo.

O autor recomenda que o leitor esteja sempre com o software ao lado para que, na leitura

do texto, v´a comprovando os comandos e aprendendo a us´a-los de forma completamente

pr´atica. Maxima ´e uma linguagem computacional baseada em Lisp para a manipula¸c˜ao de

express˜oes simb´olicas e num´ericas. Manipula express˜oes, gr´aﬁcos, c´alculos de integra¸c˜ao

e diferencia¸c˜ao,matrizes, limites, vetores,etc. Pode obter resultados de forma simb´olica,

15

Figura 1: Logo do Maxima.

sendo seu ponto mais interessante. Para se resolver, por exemplo, a equa¸c˜ao x2 −2 = 0 um

outro programa qualquer pode retornar como resultado x = 1, 4142 ou x = −1, 4142. Por

mais que se aumente a precis˜ao do resultado, sempre s˜ao perdidas inﬁnitas casas decimais

no processo. Utilizando a forma simb´olica do wxMaxima, para a mesma equa¸c˜ao, as ra´ızes

seriam x =

2 ou x = −

2. Neste caso, n˜ao h´a nenhuma perda por arredondamento ou

√

√

truncamento de resultados.

Maxima surgiu do c´odigo fonte do Macsyma desenvolvido pelo MIT (Massachusetts

Institute of Technology) entre 1968 e 1982. Em 1982 uma c´opia do Macsyma foi entregue

ao departamento de energia americano e outra ao professor William F. Schelter, da uni-

versidade do Texas. Esta c´opia foi chamada de Macsyma DOE (Departament of energy).

Trˆes anos antes de sua morte em 2001, professor Schelter conseguiu licen¸ca do departa-

mento de energia para tornar livre o c´odigo fonte do software . Assim outras pessoas

poderiam continuar desenvolvendo o programa. E continuam at´e hoje. Essa vers˜ao livre

do Macsyma ´e conhecida como Maxima.

A disserta¸c˜ao segue assim apresentada: O cap´ıtulo 2, trata de regras e comandos

b´asicos para deﬁni¸c˜ao de vari´aveis, listas, equa¸c˜oes e fun¸c˜oes. No cap´ıtulo 3 ´e feita a

plotagem de gr´aﬁcos bidimensionais e tridimensionais de forma expl´ıcita, impl´ıcita e pa-

ram´etrica. No ﬁnal deste mesmo cap´ıtulo, aborda-se um m´etodo para se resolver equa¸c˜oes

utilizando-se gr´aﬁcos. Temas do c´alculo diferencial e integral e ´algebra linear s˜ao traba-

lhados no cap´ıtulo 4. Neste s˜ao calculados limites, derivadas, integrais, opera¸c˜oes com

matrizes, resolu¸c˜ao de sistemas lineares, autovalores, autovetores utilizando aux´ılio com-

putacional. H´a uma breve revis˜ao do conte´udo de equa¸c˜oes diferenciais na primeira se¸c˜ao

do cap´ıtulo 5, nas outras se¸c˜oes s˜ao resolvidas equa¸c˜oes diferenciais e constru´ıdos campos

de dire¸c˜oes usando o wxMaxima. No ´ultimo cap´ıtulo, s˜ao feitas algumas conclus˜oes e

sugest˜oes a respeito do software destacando suas potencialidades.

16

2 REGRAS B ´ASICAS DO WXMAXIMA

2.1 VARI ´AVEIS E C ´ALCULOS ALG´EBRICOS

O wxMaxima recebe comandos ou valores digitados na linha %i(n), os executa e

mostra o resultado na linha %o(n), onde n ´e um n´umero natural. A letra “i” em %i(n)

signiﬁca input(do inglˆes: entrada) e a letra “o” em %o(n) signiﬁca output (do inglˆes:sa´ıda).

Pode-se atribuir valor a uma vari´avel no software atrav´es do sinal de dois pontos (:). Logo,

b:5, signiﬁca que b vale 5 ou b = 5. Todo comando no wxMaxima ´e executado somente

ap´os a combina¸c˜ao de teclas “shift + enter” ser pressionada. A tecla “enter” ´e utilizada

junto com o sinal de ponto e v´ırgula (;) quando se quer inserir v´arios comandos ao mesmo

tempo. Por exemplo, a:1 ; b:-3 ; c:1/5 diz ao programa que as vari´aveis a, b e c s˜ao
respectivamente 1, -3 e 1
5 . Pode-se ent˜ao fazer c´alculos aritm´eticos usando os s´ımbolos

da tabela 1 com a atribui¸c˜ao de valores acima. (ﬁgura 2)

A raiz quadrada ´e feita pelo comando “sqrt(<n´umero>)”. Para o c´alculo das ra´ızes

com os demais ´ındices, deve ser utilizada a potencia¸c˜ao. Assim,desejando-se calcular
√
4

√
4 . Para 3

216 ,216 1

3 . Generalizando, deve ser digitado

16, usa-se a potencia¸c˜ao 16 1

“<radicando>**(1/<´ındice>)”. As ﬁguras 3 e 4, mostram alguns exemplos de c´alculos

de ra´ızes. Como dito anteriormente, uma das potencialidades do software ´e o c´alculo

simb´olico, que ´e exibido em formato LaTex. Note que isso ocorreu em casos de ra´ızes

inexatas, mas se o usu´ario desejar uma resposta num´erica, poder´a utilizar o comando

S´ımbolos ou comandos
+
-
*
/
** ou ˆ
log(x)
log(x)/log(b)

Opera¸c˜ao
adi¸c˜ao
subtra¸c˜ao
multiplica¸c˜ao
divis˜ao
potencia¸c˜ao
logaritmo neperiano
log.de x na base b

Tabela 1: Opera¸c˜oes b´asicas no wxMaxima

17

Figura 2: Atribuindo vari´aveis e realizando c´alculos.

Figura 3: C´alculo de ra´ızes exatas.

Figura 4: C´alculo de ra´ızes n˜ao exatas com resultado simb´olico ou num´erico.

Figura 5: C´alculo de logaritmos.

“%,numer”que passa para num´erica a ´ultima sa´ıda simb´olica. 1 Para o c´alculo de logarit-

mos neperianos (na base e) ´e utilizado o comando log(<n´umero>). Como o software n˜ao

possui um comando pr´oprio para logaritmos em outras bases, deve-se utilizar uma rela¸c˜ao

1O s´ımbolo “%”, sozinho, ´e usado sempre que se queira referir a ´ultima sa´ıda do programa. Assim na

entrada “%i7”, (ﬁgura 4), “%” se refere a sa´ıda “%o6”.

bastante conhecida de mudan¸ca de base, logb(x) = loge(x)
Na linha de comando:

logeb , para solucionar o problema.
log(<n´umero>)/log(<base>).(ﬁgura 5) Os c´alculos tamb´em po-

dem ser organizados utilizando-se coment´arios que n˜ao s˜ao interpretados pelo programa

quando escritos entre os sinais /* e */. Por v´arias vezes, neste texto, o autor utiliza este

recurso para melhorar a compreens˜ao dos comandos contidos nas ﬁguras.

18

2.2 LISTAS

Muitas vezes, como ser´a visto posteriormente, o programa trabalhar´a com listas. Uma

lista ´e uma cole¸c˜ao de n´umeros, vari´aveis, fun¸c˜oes, matrizes, vetores, etc ... Sempre vˆem

escritos entre colchetes e com todos seu elementos separados por v´ırgula. Na ﬁgura 6 h´a

exemplos de listas e opera¸c˜oes que podem ser feitas utilizando-as.

Figura 6: Trabalhando com listas.

2.3 RESOLVENDO EQUAC¸ ˜OES

O software consegue resolver muitas equa¸c˜oes de forma simb´olica. Uma equa¸c˜ao

´e solucionada atrav´es do comando solve(<equa¸c˜ao>, < vari´avel>), digitando no campo

<vari´avel> a vari´avel a ser isolada. No campo <equa¸c˜ao> os membros da equa¸c˜ao devem

ser separados pelo sinal de igual, diferentemente da atribui¸c˜ao de valores `a vari´aveis que ´e
feito usando o sinal de dois pontos. Como exemplo, a equa¸c˜ao p
9 + k2 = 5 foi resolvida
na ﬁgura 8 em rela¸c˜ao `as vari´aveis p, r e k. Algumas equa¸c˜oes do segundo grau tamb´em

4 − r

foram resolvidas na ﬁgura 7. Para ﬁns agilizar a digita¸c˜ao, a equa¸c˜ao contida na ﬁgura 8,

recebeu um nome, “eq1”, atrav´es do sinal de dois pontos. Desta forma, n˜ao ´e necess´ario

ﬁcar digitando a equa¸c˜ao in´umeras vezes, bastando apenas chamar por seu nome.

19

Figura 7: Resolvendo equa¸c˜oes do segundo grau

Figura 8: Resolvendo equa¸c˜oes literais

2.4 DEFININDO FUNC¸ ˜OES DE UMA OU MAIS VARI ´AVEIS

O wxMaxima possui tamb´em in´umeros comandos para trabalhar com fun¸c˜oes. Uma

fun¸c˜ao ´e deﬁnida no programa atrav´es do sinal de dois pontos (:) junto com o sinal de

de igual(=). Assim, escrevendo f(x) := 3*x+1, est´a deﬁnindo-se a fun¸c˜ao f (x) = 3x + 1.

Com a fun¸c˜ao deﬁnida, pode-se calcular imagens digitando simplesmente f(1), f(2), f(-5),

f(3/4), etc... Al´em disso, ´e poss´ıvel determinar as ra´ızes da fun¸c˜ao atrav´es do comando

solve(<fun¸c˜ao> = 0, <vari´avel>), onde <fun¸c˜ao> deve ser preenchido com a fun¸c˜ao f(x)

e <vari´avel> com a vari´avel que se pretende isolar. Logo deve ser digitado solve (f(x)

= 0, x). (ﬁgura 9) Observe tamb´em o exemplo envolvendo uma fun¸c˜ao do segundo grau
g(x) = x2 + x + 1 na ﬁgura 10. Primeiramente, a fun¸c˜ao ´e deﬁnida, tem algumas imagens

calculadas, determinando-se posteriormente as ra´ızes. Note que foi usado o comando %pi

para se referir ao n´umero irracional π. Nas ra´ızes da ﬁgura 10, %i signiﬁca a unidade

imagin´aria, mostrando que a fun¸c˜ao g(x) possui ra´ızes complexas. Para fun¸c˜oes de mais

de uma vari´avel, o processo ´e feito de forma an´aloga. Na ﬁgura 11, tem-se a fun¸c˜ao
r(x, y, z) = x2 + y3 − z
3 e o c´alculo de algumas imagens. Duas equa¸c˜oes foram resolvidas

20

na ﬁgura 12 usando a fun¸c˜ao r, sendo a primeira equa¸c˜ao

r(s, 2, −9) = 0 ⇒ s2 + 8 + 3 = 0 ⇒ s2 = −11 ⇒ s = ±

√

11i

e a segunda

√

r(

t, t, 0) = 0 ⇒ t + t3 + 0 = 0 ⇒ t(1 + t2) = 0 ⇒ t ∈ {0, −i, +i}.

O c´alculo de limites, derivadas e integrais de fun¸c˜oes ser´a detalhado em se¸c˜oes posteriores.

Figura 9: C´alculo de imagens e zero da fun¸c˜ao f(x) = 3x + 1

Figura 10: C´alculo de imagens e zero da fun¸c˜ao g(x) = x2 + x + 1

21

Figura 11: C´alculo das imagens r(1, 2, 3) , r(−1, 0, −6) e r(

√

√
a, 3

a, 12a)

Figura 12: Resolvendo as equa¸c˜oes r(s, 2, −9) = 0 e r(

√

t, t, 0) = 0

22

3 PLOTAGEM DE GR ´AFICOS

3.1 DUAS DIMENS ˜OES

O wxMaxima tamb´em constr´oi gr´aﬁcos de fun¸c˜oes bidimensionais. Para isso h´a quatro

comandos b´asicos:

(i) plot2d

(ii) wxplot2d

(iii) draw2d

(iv) wxdraw2d

3.1.1 Fun¸c˜oes expl´ıcitas

O comando plot2d plota gr´aﬁcos de fun¸c˜oes expl´ıcitas de duas dimens˜oes em uma

janela separada da janela do wxMaxima, utiliza-se a seguinte sintaxe:

plot2d([<lista de fun¸c˜oes>],[x,<xmin>,<xmax>][y,<ymin>,<ymax>])

Os campos <xmin>, <xmax>, <ymin> e <ymax> indicam as dimens˜oes da janela

de visualiza¸c˜ao do gr´aﬁco. Assim, a janela de visualiza¸c˜ao ´e um retˆangulo com v´ertices

opostos, (<xmin>,<ymin>) e (<xmax>,<ymax>). No campo <lista de fun¸c˜oes> devem

ser colocadas todas as fun¸c˜oes a serem plotadas observando duas coisas:

(a) Todas as fun¸c˜oes devem estar entre colchetes e separadas por v´ırgulas. (Lista)

(b) S´o deve ser digitado o segundo membro de cada fun¸c˜ao.

Na ﬁgura 13 foram plotados os gr´aﬁcos de f (x) = x · sen(x) e g(x) = sen(x) em uma

´unica janela usando o plot2d, j´a na ﬁgura 14 foi usado o wxplot2d para que o leitor note

as diferen¸cas. Foi criada uma lista [x · sen(x) , sen(x)] e utilizada uma janela com v´ertices

(-4,-2) e (4,2) nos dois casos. A diferen¸ca entre os comandos plot2d e wxplot2d ´e que no

segundo o gr´aﬁco ´e exibido dentro do pr´oprio ecr˜a do wxMaxima.

23

Figura 13: Gr´aﬁco de fun¸c˜oes expl´ıcitas usando o plot2d.

Figura 14: Gr´aﬁco de fun¸c˜oes expl´ıcitas usando o wxplot2d.

24

3.1.2 Fun¸c˜oes impl´ıcitas e param´etricas

Para o plotagem de fun¸c˜oes impl´ıcitas e param´etricas, em duas dimens˜oes, ´e utili-
zado o comando draw2d ou wxdraw2d, que s˜ao carregados no pacote draw1 digitando-se

“load(draw)”. O wxdraw2d possui as seguintes sintaxes:

(i) wxdraw2d(implicit(<fun¸c˜ao impl´ıcita>, x,<xmin>,<xmax>, y,<ymin>,

<ymax>))

(ii) wxdraw2d(parametric(< X > , < Y > , t,<tmin>,<tmax>))

Em (i), <fun¸c˜ao impl´ıcita> n˜ao ´e uma lista mas uma ´unica fun¸c˜ao. Em (ii), < X >

e < Y > s˜ao fun¸c˜oes do parˆametro t. Se o usu´ario quiser mais gr´aﬁcos em uma ´unica

janela, deve usar um comando implict ou parametric para cada fun¸c˜ao dentro do mesmo

comando draw2d. Os outros parˆametros tˆem o mesmo signiﬁcado que aqueles citados no

plot2d. As diferen¸cas entre o draw2d e wxdraw2d s˜ao an´alogas `as do plot2d e wxplot2d.

Resumindo, implicit indica ao wxdraw2d que a fun¸c˜ao digitada deve ser considerada

impl´ıcita enquanto parametric(ii) indica que a fun¸c˜ao deve ser param´etrica. Exemplos do

comando draw2d para fun¸c˜oes impl´ıcitas est˜ao nas ﬁguras 15, 16 , 17. Na ﬁgura 18, foi

utilizada uma cicloide de equa¸c˜oes param´etricas

(cid:40)

X(t) = t − sen(t)

Y (t) = 1 − cos(t)

t ∈ [0, 8π].

Foi utilizado tamb´em o comando “nticks” que indica o n´umero de pontos que devem ser

calculados para a constru¸c˜ao do gr´aﬁco. J´a “xrange“ e “yrange“ servem para dar um

melhor ajuste a janela.

1Um pacote cont´em um conjunto de comandos nele organizados para um determinado ﬁm. Draw ´e

um pacote especializado em gr´aﬁcos de duas ou trˆes dimens˜oes.

25

Figura 15: Comando wxdraw2d em uma equa¸c˜ao de el´ıpse.

Figura 16: Comando wxdraw2d em uma equa¸c˜ao de hip´erbole.

26

Figura 17: Comando wxdraw2d para duas fun¸c˜oes impl´ıcitas.

Figura 18: Comando wxdraw2d para fun¸c˜ao param´etrica.

3.2 TRˆES DIMENS ˜OES

No caso dos gr´aﬁcos em trˆes dimens˜oes, usa-se:

27

(i) plot3d

(ii) wxplot3d

(iii) draw3d

(iv) wxdraw3d

A diferen¸ca entre os comandos sem o “wx”, no espa¸co, ´e que os gr´aﬁcos podem ser

rotacionados, aproximados ou distanciados enquanto no segundo caso isso,com o “wx”,

isso n˜ao acontece. Para o comando draw3d(sem “wx”) deve-se carregar sempre o pacote

draw atrav´es da sintaxe load(draw).

3.2.1 Fun¸c˜oes expl´ıcitas

Ser´a usado, nesta se¸c˜ao, plot3d2 para fun¸c˜oes expl´ıcitas com a seguinte sintaxe que ´e

completamente an´aloga ao wxplot2d:

plot3d([<Lista de fun¸c˜oes>, [x,<xmin>,<xmax>], [y,<ymin>,<ymax>]])

Plot3d d´a um bom acabamento em superf´ıcies tridimensionais, atribuindo cores di-

ferentes as partes da superf´ıcie dependendo do intervalo da vari´avel z, mas tem suas

limita¸c˜oes na hora de desenhar fun¸c˜oes impl´ıcitas. Como exemplo de fun¸c˜ao expl´ıcita,
considere o paraboloide el´ıptico P : z = 3x2 + 4y2 secionada pelo plano paralelo ao

plano πXY , π : z = 200 (ﬁgura 19). Observe que no argumento, <Lista de fun¸c˜oes>, a

vari´avel “z” n˜ao deve ser digitada, somente o segundo membro. Para o caso de fun¸c˜oes

param´etricas e impl´ıcitas, usa-se o draw3d, que ´e um comando mais completo e ser´a visto

na pr´oxima se¸c˜ao.

2A sintaxe do wxplod3d ´e idˆentica.

28

Figura 19: Exemplo plot3d em paraboloide e plano

3.2.2 O draw3d

O comando ´e mais completo que o plot3d para criar gr´aﬁcos tridimensionais. Consegue

desenhar, em uma mesma janela, varias fun¸c˜oes escritas de diversas formas, sejam elas

param´etricas, impl´ıcitas e at´e mesmo as expl´ıcitas feitas pelo plot3d. Para isso, deve-se

entender quatro subcomandos b´asicos que precisam ser digitados dentro dos parˆentesis do

draw3d. S˜ao eles:

(i) explicit(<fun¸c˜ao>, x,<xmin>,<xmax>, y,<ymin>,<ymax>)

(ii) parametric(< X >, < Y >, < Z >, t, < tmin >, < tmax >)

(iii) parametric surface(< X >, < Y >, < Z >, u, < umin >, < umax >, v, < vmin >,

< vmax >))

(iv) implicit(<fun¸c˜ao>, x,<xmin>,<xmax>, y,<ymin>,<ymax>,z,<zmin>,

<zmax>)

O item (i) ´e usado para fun¸c˜oes expl´ıcitas onde <fun¸c˜ao> ´e apenas o segundo membro da
fun¸c˜ao. Na ﬁgura 20, est´a representado um paraboloide hiperb´olico de equa¸c˜ao z = x2−y2

e cor laranja selecionada, pelo subcomando “color=orange”. A tabela 2 mostra algumas

op¸c˜oes de < cor > para “color=< cor >” que podem ser usadas no draw 2d ou 3d. J´a

(ii) serve para fun¸c˜oes param´etricas onde <X>, <Y> e <Z> s˜ao fun¸c˜oes de um ´unico

parˆametro t. A ﬁgura 21 contem exemplo da h´elice de equa¸c˜oes param´etricas

29






X(t) = 2 · cos(t)

Y (t) = 3 · sen(t)

t ∈ [−2π, 2π]

Z(t) = 3 · t

usando parametric. O comando parametric surface (iii), deve ser utilizado quando a

superf´ıcie tem dois parˆametros. Um toro de equa¸c˜oes param´etricas





X(u, v) = (R + r · cos(v)) · cos(u)

Y (u, v) = (R + r · cos(v)) · sen(u)

u, v ∈ [0, 2π]

Z(u, v) = r · sen(v)

foi criado com o parametric surface na ﬁgura 22. Implicit, no item (iv), plota uma fun¸c˜ao

impl´ıcita. No campo <fun¸c˜ao>, dever ser digitado os dois membros da equa¸c˜ao a ser
plotada. A ﬁgura 23 mostra, um cone de equa¸c˜ao z2 = 3x2 + 3y2, constru´ıdo com implicit.

A ﬁgura 24 mostra os quatro subcomandos juntos e mais op¸c˜oes de cores em um ´unico
draw3d. Utilizou-se os comandos xrange, yrange e zrange para ﬁxar um cubo no R3

onde os gr´aﬁcos ser˜ao visualizados. A omiss˜ao destes faz com que o wxMaxima escolha as
dimens˜oes do cubo automaticamente. Foram usados um cilindro parab´olico z = (x−5)2−7
no explicit3, um segmento parametrizado






X(t) = r

Y (t) = 0

Z(t) = −r

r ∈ [−10, 10]

no parametric, uma esfera (x + 5)2 + y2 + z2 = 25 no implicit e um plano parametrizado






X(u, v) = 3 − u

Y (u, v) = 1 + 2u + v

u, v ∈ [−30, 30]

Z(u, v) = −10 + u

no parametric surface. As imagens 25 e 26 mostram janelas resultantes do comando

draw3d em perspectivas diferentes.

A qualquer momento, os gr´aﬁcos constru´ıdos neste cap´ıtulo podem ser salvos ou copi-

ados para a ´area de transferˆencia a ﬁm de que possam ser usados, futuramente, em outros

aplicativos como editores de texto. Se o comando possuir o preﬁxo “wx”, basta clicar

3Como no explicit do draw3d ´e necess´ario apenas o segundo membro da fun¸c˜ao, usou-se rhs para
extrair somente esse membro. Rhs e lhs retornam respectivamente os membros direito e esquerdo de uma
equa¸c˜ao.

30

Cor
branco
preto
cinza
vermelho
amarelo
verde
azul
rosa escuro
rosa claro
laranja
marrom
violeta
roxo

Op¸c˜ao < cor >
white
black
gray
red
yellow
green
blue
magenta
pink
orange
brown
violet
purple

Tabela 2: Op¸c˜oes de cores para o draw.

com o bot˜ao direito sobre a ﬁgura e escolher a op¸c˜ao salvar imagem. O gr´aﬁco ser´a salvo

em um arquivo de imagem separadamente. Se o comando n˜ao possuir o preﬁxo, clica-se

no ´ıcone “salvar na ´area de transferˆencia”, para ent˜ao usar-se a op¸c˜ao colar em um editor

de texto ou imagem.

Figura 20: Explicit:Paraboloide hiperb´olico

31

Figura 21: Parametric:H´elice

Figura 22: Parametric Surface:Toro

Figura 23: Implicit: Cone

32

Figura 24: Quatro comandos dentro de um mesmo draw3d

Figura 25: Quatro gr´aﬁcos em ´unico draw3d.

Figura 26: Outra perspectiva para os quatro gr´aﬁcos

33

3.3 USANDO GR ´AFICOS PARA ENCONTRAR RA´IZES NUM´ERICAS

Dependendo do grau de diﬁculdade de uma equa¸c˜ao, o comando solve, discutido em

se¸c˜oes anteriores, n˜ao consegue encontrar a raiz de uma equa¸c˜ao. Um bom exemplo ´e

cos(x) = logex que n˜ao pode ser resolvida pelo solve (ﬁgura27). Temos que cos(x) =

logex ⇔ cos(x) − logex = 0 ⇔ f (x) = cos(x) − logex = 0. Dessa forma, encontrar a raiz

da equa¸c˜ao ´e equivalente a encontrar o zero da fun¸c˜ao. Plotando-se o gr´aﬁco de f(x) (ﬁgura

28), que foi obtida pela diferen¸ca dos comandos lhs e rhs, encontra-se o intervalo (1,2) no

qual a raiz se encontra. Ap´os o intervalo ser determinado, basta utilizar o comando ﬁnd

root com a seguinte sintaxe:

ﬁnd root(f(x)=0,x,<xmin>, <xmax> ).

O ﬁnd root encontrar´a a raiz da equa¸c˜ao cos(x) − logex = 0 no intervalo (1 , 2) encon-

trando x = 1, 302964001216013.

Figura 27: Ineﬁc´acia do comando solve e fun¸c˜ao f(x).

Figura 28: Gr´aﬁco de f(x) e utiliza¸c˜ao do ﬁnd root.

34

4 C ´ALCULO DIFERENCIAL E ´ALGEBRA LINEAR

4.1 LIMITES DE FUNC¸ ˜OES

Limites s˜ao usados quando se quer saber o comportamento de uma fun¸c˜ao f(x) quando

x est´a na vizinhan¸ca de um valor xo,

quando x tende ao inﬁnito positivo

ou inﬁnito negativo.

lim
x→xo

f (x)

lim
x→∞

f (x)

lim
x→−∞

f (x)

No caso dos limites tendendo a um valor xo, ainda podem ser calculados os limites laterais

quando x se aproxima de xo pela direita

ou pela esquerda.

f (x)

lim
x→x+
o

f (x)

lim
x→x−
o

O limite de f (x) com x tendendo a xo s´o existe quando os limites laterais existem e s˜ao

iguais. O sofware wxMaxima faz o c´alculo de limites atrav´es do comando limit. Para os

limites tendendo a um n´umero ´e real ´e usado

limit(<fun¸c˜ao>,<vari´avel>,<n´umero>)

e para limites laterais tendendo a esquerda e a direita

limit(<fun¸c˜ao>,<vari´avel>,<n´umero>,minus)

e

limit(<fun¸c˜ao>,<vari´avel>,<n´umero>,plus),

35

respectivamente. No campo <n´umero> deve ser digitado o n´umero para o qual a vari´avel

x tende. Al´em dos n´umeros reais retornados por limit, podem aparecer as palavras und,

ind ou inﬁnity, signiﬁcando que o limite ´e indeterminado. Considere o exemplo contido
na ﬁgura 29 para saber o valor do limite da fun¸c˜ao f (x) = 1
3x−6 quando x tende a 2 pela
esquerda, direita e bilateralmente. Deﬁniu-se a fun¸c˜ao f, como feito em se¸c˜ao anterior,

calculando posteriormente os limites.

Figura 29: Limites laterais e bilateral.

Para os limites tendendo a mais ou a menos inﬁnito usam-se, respectivamente, as

sintaxes

e

limit(<fun¸c˜ao>,<vari´avel>,inf)

limit(<fun¸c˜ao>,<vari´avel>,minf)

signiﬁcando inf, mais inﬁnito e minf, menos inﬁnito. Na ﬁgura 30,foi tomada uma fun¸c˜ao
g deﬁnida como o quociente entre dois polinˆomios de 3º grau e calculado seus limites

tendendo a mais e menos inﬁnito. Trˆes limites fundamentais do c´alculo diferencial est˜ao

presentes na ﬁgura 31. S˜ao eles:

(i) limx→0

sen(x)

x = 1

(ii) limx→∞

(cid:0)1 + 1

x

(cid:1)x = e

(iii) limx→0

ax−1
x = ln(a)

O resultado do limite (ii), %e , ´e a constante de Euler e. ´E um n´umero irracional aproxi-
madamente igual a 2,71828182 . ´E tamb´em importante lembrar que qualquer logaritmo

que apare¸ca no programa ´e neperiano, ou seja, na base e, conforme dito na primeira se¸c˜ao

do cap´ıtulo 02.

36

Figura 30: Limites tendendo ao inﬁnito.

Figura 31: Alguns limites fundamentais.

4.2 DERIVADAS

A derivada f’(x) de uma fun¸c˜ao f(x) pode ser interpretada como taxa de varia¸c˜ao

instantˆanea da fun¸c˜ao, ou como coeﬁciente angular da reta tangente ao gr´aﬁco de f no
ponto (x,f(x)). ´E deﬁnida atrav´es do limite

f (cid:48)(x) = lim
∆x→0

f (x + ∆x) − f (x)
∆x

.

Se esse limite n˜ao existir, diz-se que a fun¸c˜ao n˜ao ´e deriv´avel. O s´ımbolo dy

dx tamb´em
´e outra maneira de se simbolizar a derivada da fun¸c˜ao f(x)=y em rela¸c˜ao a x. Caso f’
for deriv´avel, sua derivada f”(x) ´e chamada derivada de 2ª ordem, se f”(x) existir. Se
f (n−1)(x) for deriv´avel, sua derivada f (n)(x) ´e dita de ordem “n” (se f (n)(x) existir) .

37

Usando o wxMaxima, a derivada de uma fun¸c˜ao ´e calculada atrav´es do comando diﬀ da

seguinte forma:

diﬀ(<fun¸c˜ao>,<vari´avel>, <ordem>)

Devem ser declarados no comando diﬀ, a fun¸c˜ao, a vari´avel independente e a ordem

da derivada desejada. Derivadas de primeira, segunda, terceira e d´ecima ordens foram

obtidas para a fun¸c˜ao composta f (x) = cos(2t − 5) na ﬁgura 32.

Para fun¸c˜oes de duas ou mais vari´aveis, podem ser calculadas derivadas parciais que

s˜ao deﬁnidas pelo limite

∂f
∂xi

= lim
∆xi→0

f (x1, x2, · · · , xi + ∆xi, · · · , xn) − f (x1, x2, · · · , xi, · · · , xn)
∆xi

.

Resumindo, deriva-se em rela¸c˜ao a vari´avel xi considerando as outras vari´aveis constantes.
Na ﬁgura 33, foi deﬁnida uma fun¸c˜ao de duas vari´aveis g(w, x) = loge(x2w5 − xw2). Ap´os
isso, foram calculadas derivadas parciais de primeira ordem em rela¸c˜ao as vari´aveis w e x.

Figura 32: Derivada de uma fun¸c˜ao composta.

Figura 33: Exemplo de derivada parcial.

4.3 INTEGRAIS

Integrais podem ser calculadas atrav´es dos comandos integrate e romberg com as se-

38

guintes sintaxes:

(i) integrate(<fun¸c˜ao>,<vari´avel>)

(ii) integrate(<fun¸c˜ao>,<vari´avel>, <lim-inf> , <lim-sup>)

(iii) romberg(<fun¸c˜ao>,<vari´avel>, <lim-inf> , <lim-sup>)

Para o c´alculo de integrais indeﬁnidas usa-se (i) e para as deﬁnidas (ii). Os campos

<lim-inf> e <lim-sup> s˜ao respectivamente os limites de integra¸c˜ao inferior e superior.

Quando n˜ao ´e poss´ıvel obter a integral deﬁnida por integrate, utiliza-se romberg, em

(iii), com mesma sintaxe de integrate em (ii). Na ﬁgura 34, foram calculadas a integral

deﬁnida e indeﬁnida por integrate. A ﬁgura 35 mostra uma situa¸c˜ao quando o integrate

n˜ao consegue determinar o valor da integral deﬁnida

(cid:90) 2

√

0

m4 + 1 dm.

Na ﬁgura 36, romberg ´e utilizado para resolver a mesma integral, numericamente.1

Figura 34: Comando integrate.

1O comando romberg deve ser carregado atrav´es de load(romberg)

39

Figura 35: Incapacidade de integrate para integrar algumas fun¸c˜oes.

Figura 36: O uso de romberg para integrais deﬁnidas.

4.4 SISTEMAS LINEARES

Um sistema linear pode ser resolvido atrav´es do comando

solve([< listae >], [< listav >])

em que [< listae >] ´e uma lista das equa¸c˜oes a serem resolvidas e [< listav >] um lista

das vari´aveis envolvidas. Determinou-se, atrav´es de solve, a solu¸c˜ao do sistema






2x − 3y + 4z + 6t + 2w = − 59
10
4x − y + 5z + 3t + 3w = − 41
10
7x + 9y + 3z − 6t + 11w = 134
5
2x − 2y − 3z + 5t + 8w = 877
30
x + 3y − z + t + 7w = 653
30

de cinco equa¸c˜oes e cinco vari´aveis na ﬁgura 37. Quando o sistema ´e poss´ıvel e indeter-

minado como no sistema,






2x − 3y + 4z − t = 9

4x − y + 5z + 3t = 10

2x + 10y + 3z − 6t = 15

solve ir´a usar como parˆametro n´umeros reais como %r1, %r2, ...

, %rn.

(ﬁgura 38).

Quando o sistema ´e imposs´ıvel conforme

40






2x − 3y + 4z = 7

4x − y + 5z = 15

−6x + 9y − 12z = 17

o solve retornar´a colchetes vazios (ﬁgura 39).

Figura 37: Solucionando sistemas lineares com solve.

Figura 38: Sistema poss´ıvel e indeterminado.

41

Figura 39: Sistema imposs´ıvel.

4.5 MATRIZES

Uma matriz ´e declarada no wxMaxima atrav´es do comando

matrix([linha1], [linha2],

· · ·

, [linhan])

sendo cada [linhai] uma lista dos elementos da linha. A sess˜ao 2.2 cont´em detalhes sobre

como trabalhar com listas. Quando uma matriz ´e criada, podem ser feitas chamadas de

alguns elementos da matriz, como:

(i) < matriz > [i, j] para um elemento da linha i e coluna j.

(ii) row(< matriz >, i) para chamar toda a linha i.

(iii) col(< matriz >, j) para chamar toda a coluna j

Outros comandos podem ser utilizados sobre ela. Determinant calcula o determinante da

matriz, invert a inverte e echelon d´a sua forma escalonada. (ﬁguras 40, 41, 42 e 43). A

sintaxes s˜ao, respectivamente,

(iv) determinant(< matriz >)

(v) invert(< matriz >)

(vi) echelon(< matriz >)

Para opera¸c˜oes entre matrizes tem-se, o produto de uma matriz por um escalar, a

soma e a subtra¸c˜ao e produto entre matrizes nas ﬁguras 44, 45 e 46. A parte referente a

autovalores e autovetores ser˜ao tratados na pr´oxima sess˜ao.

42

Figura 40: Deﬁnindo uma matriz

Figura 41: Alguns elementos da matriz A.

Figura 42: Determinante e escalonamento.

Figura 43: Matriz inversa.

43

Figura 44: Matriz B e produto por escalar.

Figura 45: Produto entre matrizes.

Figura 46: Adi¸c˜ao e diferen¸ca.

4.6 POLIN ˆOMIO CARACTER´ISTICO, AUTOVALORES E AUTOVETORES

O polinˆomio caracter´ıstico p(λ) de uma matriz ´e aquele usado para obter os autova-

lores desta mesma matriz. ´E obtido atrav´es da equa¸c˜ao

44

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

a1,1 − λ

a1,2

a2,1

a3,1
...
an,1

a2,2 − λ

a3,2
...
an,2

a1,3

a2,3

· · ·

· · ·

a1,n

a2,n

a3,3 − λ · · ·
. . .
· · · an,n − λ

...
an,3

a3,n
...

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

= 0 .

Onde ai,j s˜ao os elementos de uma matriz quadrada A. No Maxima, o polinˆomio carac-

ter´ıstico pode ser obtido atrav´es de charpoly(< matriz >,< var >). O comando depende

somente de uma matriz e da vari´avel independente do polinˆomio. A ﬁgura 47 cont´em

exemplo do comando charpoly na vari´avel “w” e o uso de solve para determinar os auto-

valores.

Os autovalores de uma matriz tamb´em podem ser calculados atrav´es de um pacote

especializado chamado eigen que deve ser carregado atrav´es do comando load(eigen). Para

o obten¸c˜ao dos autovalores usa-se

eigenvalues(< matriz >)

Na ﬁgura 48, deve-se observar no resultado de eigenvalues, que a primeira lista cont´em os

autovalores e a segunda a multiplicidade de cada um como raiz do polinˆomio caracter´ıstico.

Quando se deseja tamb´em os autovetores da matriz, faz-se uso de outra ferramenta

do pacote eigen, o eigenvectors.

eigenvectors(< matriz >)

Eigenvectors calcula, al´em dos autovetores, todos os autovalores e suas respectivas multi-

plicidades. Retorna uma lista contendo os autovalores, uma contendo as multiplicidades

e outra contendo os autovetores nesta ordem. A ﬁgura 49 cont´em exemplo da ferramenta

eigenvectors e a tabela 3 a interpreta¸c˜ao dos resultados.

45

Figura 47: Autovalores da matriz C.

Figura 48: Autovalores usando o pacote eigen.

Figura 49: Autovetores da matriz C.

Autovalor Multiplicidade Autovetor
1
1
1

(1,0,-1)
(1,1,1)
(1,-2,1)

2
3
6

Tabela 3: Interpreta¸c˜ao do resultado da ﬁgura 49.

46

5 EQUAC¸ ˜OES DIFERENCIAIS ORDIN ´ARIAS

5.1 REVISANDO A TEORIA

Segundo Zill e Cullen [8], uma equa¸c˜ao contendo derivadas de uma ou mais vari´aveis

dependentes, em rela¸c˜ao a uma ou mais vari´aveis independentes ´e dita equa¸c˜ao diferencial.

Se a equa¸c˜ao diferencial possui apenas derivadas de uma ou mais vari´aveis dependentes, em

rela¸c˜ao a uma s´o vari´avel independente ´e classiﬁcada como equa¸c˜ao diferencial ordin´aria.

O objetivo de se resolver uma equa¸c˜ao diferencial ´e determinar as fun¸c˜oes inc´ognitas

(vari´aveis dependentes). A ordem de uma EDO ´e a maior ordem entre as derivadas que

ﬁguram na equa¸c˜ao. Por exemplo, sendo y = f (x), considere a EDO

any(n) + an−1y(n−1) + · · · + a1y(cid:48) + a0y = b

onde an (cid:54)= 0. Diz-se que n ´e a ordem da equa¸c˜ao diferencial e cada ai e b constantes ou

fun¸c˜oes de x.

5.1.1 Equa¸c˜oes de de 1ª ordem

5.1.1.1 Equa¸c˜oes de vari´aveis separ´aveis

´E toda equa¸c˜ao diferencial da forma

dy
dx

= p(x)q(y).

(5.1)

O interessante desse tipo de equa¸c˜oes ´e que suas vari´aveis podem ser separadas em cada

membro da equa¸c˜ao, o que torna simples sua resolu¸c˜ao. Assim 5.1 pode ser escrita como

1
q(y)

dy = p(x)dx

que quando tem os membros integrados chega-se a

(cid:90)

(cid:90)

dy =

1
q(y)

p(x)dx + C

que muitas vezes pode ser resolvida utilizando-se os m´etodos de integra¸c˜ao aprendidos no

47

c´alculo b´asico.

5.1.1.2 Equa¸c˜oes exatas

´E qualquer equa¸c˜ao da forma

com

M (x, y) + N (x, y)

dy
dx

= 0

My(x, y) = Nx(x, y)

(5.2)

(5.3)

sendo M (x, y) e N (x, y) fun¸c˜oes de x e y. As fun¸c˜oes My(x, y) e Nx(x, y) s˜ao derivadas

parciais e y ´e fun¸c˜ao de x. Se a condi¸c˜ao 5.3 for satisfeita, existe um fun¸c˜ao ψ(x, y) tal

que:

∂ψ
∂x
∂ψ
∂y

= M (x, y)

= N (x, y)

Assim 5.2 pode ser escrita como

∂ψ
∂x

+

∂ψ
∂y

dy
dx

=

dψ
dx

⇒

dψ
dx

= 0 ⇒ dψ = 0dx

que, atrav´es de integra¸c˜ao nos dois membros, possui solu¸c˜ao impl´ıcita ψ(x, y) = c.

5.1.1.3 Equa¸c˜oes lineares e os fatores integrantes

A teoria do fator integrante µ(t) ´e usada para se resolver uma EDO linear de primeira

ordem, na sua forma geral, ou seja

dy
dt

+ m(t)y = n(t)

(5.4)

onde m(t) e n(t) s˜ao fun¸c˜oes da vari´avel independente t. O fator integrante para a equa¸c˜ao

5.4 deve ser

µ(t) = e

(cid:82) m(t)dt

(5.5)

pois se multiplicado em ambos os membros da equa¸c˜ao 5.4, tem-se

dy
dt

dy
dt

⇒ µ(t)

+ m(t)y = n(t)

+ µ(t)m(t)y = n(t)µ(t)

⇒ (e

(cid:82) m(t)dt)

dy
dt

+ (e

(cid:82) m(t)dt)m(t)y = n(t)(e

(cid:82) m(t)dt)

onde o primeiro membro da ´ultima equa¸c˜ao ´e uma derivada do produto, ent˜ao

d[y(e

= n(t)(e

(cid:82) m(t)dt)]
dt
(cid:82) m(t)dt)] = [n(t)(e

(cid:82) m(t)dt)

(cid:82) m(t)dt)]dt

⇒ d[y(e

integrando-se os dois membros

(cid:90)

d[y(e

(cid:82) m(t)dt)] =

(cid:90)

[n(t)(e

(cid:82) m(t)dt)]dt

⇒ y(e

(cid:82) m(t)dt) − C =

(cid:90)

[n(t)(e

(cid:82) m(t)dt)]dt

⇒ y =

(cid:82) [n(t)(e

(cid:82) m(t)dt)]dt + C
(e(cid:82) m(t)dt)

⇒ y =

(cid:20)(cid:90)

1
µ(t)

n(t)µ(t)dt + C

(cid:21)

48

(5.6)

Assim a equa¸c˜ao 5.4 pode ser resolvida usando o fator integrante 5.5 e possui solu¸c˜ao

geral 5.6.

5.1.2 EDOs de 2ª ordem com coeﬁcientes constantes

5.1.2.1 Equa¸c˜ao caracter´ıstica e resolu¸c˜ao da equa¸c˜ao homogˆenea

Uma equa¸c˜ao geral de segunda ordem com coeﬁcientes constantes a,b e c tem a forma

ay(cid:48)(cid:48) + by(cid:48) + cy = f (x)

e ´e resolvida determinando-se, primeiro, a solu¸c˜ao da equa¸c˜ao homogˆenea

ay(cid:48)(cid:48) + by(cid:48) + cy = 0

(5.7)

(5.8)

e somando-se a ela uma solu¸c˜ao particular. 1 Observando 5.8 nota-se que, quando c ´e n˜ao

nulo, a fun¸c˜ao inc´ognita y ´e uma combina¸c˜ao linear de suas derivadas primeira e segunda.

Caso c seja nulo e b n˜ao, a derivada primeira ´e m´ultipla da derivada segunda. Uma das

fun¸c˜oes que satisfaz essas propriedades, ´e a fun¸c˜ao exponencial

1O caso da solu¸c˜ao particular n˜ao ser´a tratado neste texto, mas pode ser encontrado em qualquer bom

livro de equa¸c˜oes diferenciais. Vide bibliograﬁa [2] no ﬁnal deste trabalho.

y = erx, r ∈ R

(5.9)

49

pois y(cid:48) = rerx e y(cid:48)(cid:48) = r2erx. Substituindo 5.9 e suas derivadas em 5.8 tem-se

ay(cid:48)(cid:48) + by(cid:48) + cy = 0 ⇒ ar2erx + brerx + cerx = 0 ⇒ (ar2 + br + c)erx = 0

como erx (cid:54)= 0,

ar2 + br + c = 0

(5.10)

O express˜ao 5.10 ´e chamada equa¸c˜ao caracter´ıstica da equa¸c˜ao diferencial 5.8. Por ser

uma equa¸c˜ao do segundo grau, temos 3 casos a considerar nas pr´oximas se¸c˜oes.

5.1.2.2 Duas ra´ızes reais distintas

Se a equa¸c˜ao caracter´ıstica 5.10 tem duas ra´ızes reais distintas r1 e r2, o que acontece

quando b2 − 4ac > 0, a solu¸c˜ao geral da equa¸c˜ao 5.8 ser´a

y = C1er1x + C2er2x

(5.11)

pois substituindo 5.11 em 5.8

ay(cid:48)(cid:48) + by(cid:48) + cy = a(C1r2

1er1x + C2r2

2er2x) + b(C1r1er1x + C2r2er2x) + c(C1er1x + C2er2x) =

= C1er1x(ar2

1 + br1 + c) + C2er2x(ar2

2 + br2 + c) = C1er1x.0 + C2er2x.0 = 0

pois r1 e r2 s˜ao ra´ızes da equa¸c˜ao caracter´ıstica.

5.1.2.3 Duas ra´ızes complexas

Se b2 − 4ac < 0, a equa¸c˜ao caracter´ıstica 5.10 possuir´a duas ra´ızes complexas

r1 = p ± qi,

p, q ∈ R .

Tem-se ent˜ao, como solu¸c˜ao, a fun¸c˜ao 5.11 com expoentes complexos. Neste ponto, faz-se

necess´aria a f´ormula de Euler

eit = cos(t) + isen(t)

para potˆencias de n´umeros complexos. Assim, a solu¸c˜ao com ra´ızes complexas ﬁca

y = C (cid:48)

1er1x + C (cid:48)

2er2x = C (cid:48)

1e(p+qi)x + C (cid:48)

2e(p−qi)x = C (cid:48)

1epxeqix + C (cid:48)

2epxe−qix =

= C (cid:48)

1epx(cos(qx) + isen(qx)) + C (cid:48)

2epx(cos(qx) − isen(qx)) =

= (C (cid:48)

1epx + C (cid:48)

2epx)cos(qx) + i(C (cid:48)

1epx − C (cid:48)

2epx)sen(qx) =

50

= (C (cid:48)

1 + C (cid:48)

2)epxcos(qx) + i(C (cid:48)

1 − C (cid:48)

2)epxsen(qx) = C1epxcos(qx) + C2epxsen(qx)

Logo a solu¸c˜ao ´e

5.1.2.4 Uma raiz real

y = C1epxcos(qx) + C2epxsen(qx) .

(5.12)

anteriores, pois tem-se uma ´unica raiz r = − b

Quando o discriminante b2 − 4ac ´e nulo, n˜ao ´e poss´ıvel utilizar nenhuma das solu¸c˜oes
2a para a equa¸c˜ao caracter´ıstica 5.10. As
solu¸c˜oes 5.11 e 5.12 n˜ao s˜ao apropriadas pois r1 = r2 e n˜ao existem solu¸c˜oes complexas,

respectivamente. Neste caso, procura-se uma segunda solu¸c˜ao, y2 que seja um produto
da conhecida exponencial e− bx

2a e uma fun¸c˜ao desconhecida d(x).

y2 = d(x)e− bx

2a

(5.13)

Calculando as derivadas primeira e segunda de 5.13

2 = d(cid:48)(x)e− bx
y(cid:48)

2a −

2 = d(cid:48)(cid:48)(x)e− bx
y(cid:48)(cid:48)

2a −

b
2a

d(cid:48)(x)e− bx

2a −

e substituindo-as na equa¸c˜ao 5.8, tem-se

b
2a

b
2a

d(x)e− bx

2a

d(cid:48)(x)e− bx

2a +

b2
4a2 d(x)e− bx

2a

(cid:18)

d(cid:48)(cid:48)(x)e− bx

2a −

a

b
2a

d(cid:48)(x)e− bx

2a −

b
2a

d(cid:48)(x)e− bx

2a +

b2
4a2 d(x)e− bx

2a

(cid:19)

+

(cid:18)

d(cid:48)(x)e− bx

2a −

(cid:19)

d(x)e− bx

2a

(cid:16)

+ c

d(x)e− bx

2a

(cid:17)

= 0 ⇒

b
2a

(cid:26)

a

e− bx

2a

(cid:18)

d(cid:48)(cid:48)(x) −

+b

b
2a

d(cid:48)(x) −

b
2a

d(cid:48)(x) +

(cid:26)

e− bx

2a

ad(cid:48)(cid:48)(x) +

(cid:18)

−

b
2

−

b
2

+ b

(cid:26)

ad(cid:48)(cid:48)(x) + 0.d(cid:48)(x) +

e− bx

2a

b
2a
(cid:19)

(cid:19)

(cid:27)

d(x)

+ cd(x)

= 0 ⇒

(cid:27)

+ c

d(x)

= 0 ⇒

(cid:27)

d(x)

= 0 ⇒

(cid:19)

+ b

(cid:18)

d(cid:48)(x) −

b2
4a2 d(x)
(cid:19)

d(cid:48)(x) +

(cid:18) b2
4a

−

b2
2a
(cid:19)

(cid:18) b2 − 2b2 + 4ac
4a
(cid:18) b2 − 4ac
4a

(cid:19)

(cid:26)

e− bx

2a

ad(cid:48)(cid:48)(x) + 0.d(cid:48)(x) −

(cid:27)

= 0 ⇒

d(x)

(cid:26)

ad(cid:48)(cid:48)(x) + 0.d(cid:48)(x) +

e− bx

2a

(cid:27)

.d(x)

0
4a

= 0 ⇒ d(cid:48)(cid:48)(x) = 0

Concluindo-se ent˜ao que a derivada segunda de d(x) ´e nula, a derivada primeira uma
constante e a fun¸c˜ao d(x) uma fun¸c˜ao do primeiro grau da forma d(x) = C (cid:48)

1 + C2x. Logo

a solu¸c˜ao geral ser´a

y = C (cid:48)(cid:48)

1 y1 + C2y2 = C (cid:48)(cid:48)

1 y1 + C2d(x)y1 = C (cid:48)(cid:48)

1 e− bx

2a + C2(C (cid:48)

1 + C2x)e− bx

2a =

= (C (cid:48)(cid:48)

1 + C2C (cid:48)

1)e− bx

2a + C2xe− bx

2a = C1e− bx

2a + C2xe− bx

2a ⇒

y = C1e− bx

2a + C2xe− bx

2a

51

(5.14)

5.2 USANDO O WXMAXIMA PARA SOLUCIONAR EDOS

O wxMaxima usa o comando “ode2” para resolver equa¸c˜oes de primeira ou segunda

ordens da seguinte forma:

ode2(<equa¸c˜ao>,<vardep>,<varindep>)

Sendo <equa¸c˜ao>, a equa¸c˜ao diferencial, <vardep>, a vari´avel dependente (fun¸c˜ao) e

<varindep>, a vari´avel independente. Quando se deseja resolver problemas envolvendo

condi¸c˜oes iniciais, utiliza-se

ic1(<solu¸c˜ao>,< x1 >,< y1 >)

para solu¸c˜oes de equa¸c˜oes de primeira ordem, onde ´e necess´ario um ponto, (< x1 >,<

y1 >), e

bc2(<solu¸c˜ao>,< x1 >,< y1 >,< x2 >,< y2 >)

para solu¸c˜oes de equa¸c˜oes de segunda ordem, onde precisa-se de dois pontos, (< x1 >,<

y1 >,< x2 >,< y2 >). Como exemplo, tem-se as equa¸c˜oes diferenciais

e

y(cid:48)(x) + 10y = 0,

2x + y2 + 2xyy(cid:48) = 0

y(cid:48)(cid:48)(x) − 5y(cid:48)(x) + 6y = 0

resolvidas com suas respectivas condi¸c˜oes de iniciais nas ﬁguras 50, 51 e 52.

O ap´ostrofo, visto antes do comando diﬀ, faz com que o programa n˜ao tente calcular

a derivada de y, conforme visto na se¸c˜ao 4.2. Com seu uso, wxMaxima n˜ao calculas as
derivadas mas sim as entende como deriva¸c˜oes da fun¸c˜ao inc´ognita, y(cid:48) e y(cid:48)(cid:48).

52

Figura 50: Equa¸c˜ao diferencial de 1ª ordem com condi¸c˜ao inicial (π, 3).

Figura 51: Equa¸c˜ao diferencial de 1ª ordem com condi¸c˜ao inicial (−2,

√

5)

Figura 52: Equa¸c˜ao diferencial de 2ª ordem com condi¸c˜oes de contorno (1, 5; 0, 5) e (2; 6).

5.3 CAMPO DE DIREC¸ ˜OES

O campo de dire¸c˜oes de uma EDO dy

dx = f (x, y) ´e um gr´aﬁco que relaciona, a cada
ponto do plano cartesiano (xP , yP ), um segmento de reta com inclina¸c˜ao igual ao valor da
derivada primeira dy
dx neste ponto. O campo direcional sugere a aparˆencia que a solu¸c˜ao
da EDO deve ter, pois se a fun¸c˜ao solu¸c˜ao passa por um determinado ponto do plano,

deve ser tangente ao segmento relativo a este mesmo ponto.

A plotagem de campos direcionais pode ser feita no wxMaxima atrav´es de

plotdf(<equa¸c˜ao>,[trajectory at,< xo >, < yo >])

sendo <equa¸c˜ao> o segundo membro da EDO quando esta tem isolada a derivada dy

dx no

primeiro membro. Para usar-se plotdf deve-se antes carregar seu devido pacote atrav´es de

load(plotdf ). A op¸c˜ao trajectory at serve para informar uma condi¸c˜ao inicial y(xo) = yo. A

t´ıtulo de exemplo,nas ﬁguras 53,54 e 55 foram criados os campos de dire¸c˜oes das seguintes

equa¸c˜oes com condi¸c˜oes iniciais:

53

dy
dx

= x , y(−1) = −2

dy
dx

= ex , y(0) = 1

dy
dx

= y2 − 1 , y(2) = 4

Figura 53: Campo de dire¸c˜oes com condi¸c˜ao inicial.

Para a equa¸c˜ao

dy
dx

= y2x − ey(y2 − 2y + 2)

n˜ao foi usada uma condi¸c˜ao inicial atrav´es de trajectory at, mas usou-se o mouse para

escolher diversas condi¸c˜oes iniciais e plotar v´arias curvas em uma mesma janela. Para

isso, basta clicar no par ordenado do plano cartesiano correspondente a condi¸c˜ao inicial

desejada.(ﬁgura 56)

54

Figura 54: Campo de dire¸c˜oes com condi¸c˜ao inicial.

Figura 55: Campo de dire¸c˜oes com condi¸c˜ao inicial.

55

Figura 56: Condi¸c˜oes iniciais escolhidas atrav´es de “clics” do mouse

56

6 CONSIDERAC¸ ˜OES FINAIS

Como visto, o software analisado neste trabalho, possui in´umeras ferramentas que

podem ser utilizadas na apresenta¸c˜ao, ilustra¸c˜ao/representa¸c˜ao e complementa¸c˜ao da te-

oria de diversos conte´udos matem´aticos. Entretanto ´e importante ressaltar, que n˜ao se

pretende, aqui, substituir o tratamento formal baseado em demostra¸c˜oes, que s˜ao t˜ao

importantes para o estudo da Matem´atica, mas apresentar formas de comprova¸c˜ao com-

putacional que facilitem a compreens˜ao de fatos que devem tamb´em ser vistos sobre o

olhar da mais pura Matem´atica.

O programa ´e diferencial tecnol´ogico que torna o estudo da disciplina envolvida mais

interessante para os alunos na hora dos estudos, podendo comprovar resultados j´a conhe-

cidos. J´a para professores, h´a a possibilidade de conferir resolu¸c˜oes de quest˜oes que, por

exemplo, ser˜ao usadas em uma avalia¸c˜ao ou explana¸c˜ao.

O software tamb´em tem muita utilidade para proﬁssionais, que possuem o conheci-

mento da teoria matem´atica e precisam apenas de uma r´apida solu¸c˜ao para determinado

problema. Em outros casos, a resolu¸c˜ao pode necessitar grande quantidade de c´alculos, o

que torna invi´avel sua resolu¸c˜ao sem aux´ılio computacional.

Apesar do software possuir uma imensidade de comandos e aplica¸c˜oes, ´e de f´acil apren-

dizagem, podendo ser operado com poucas horas de dedica¸c˜ao. O aplicativo tamb´em per-

mite resolver problemas pontuais, bastando para isso apenas o entendimento do cap´ıtulo 2

e a consulta dos comandos espec´ıﬁcos necess´arios para realizar a tarefa desejada. Pode-se

citar, por exemplo, a plotagem de gr´aﬁcos ou resolu¸c˜ao de uma EDO.

Outro ponto forte do Maxima ´e sua gratuidade, pois pode ser distribu´ıdo livremente

e utilizado amplamente em institui¸c˜oes de ensino ou para uso pessoal sem qualquer custo

de instala¸c˜ao ou direitos autorais. Vale lembrar que o aplicativo est´a dispon´ıvel nos trˆes

mais conhecidos sistemas operacionais: Linux, Windows e MacOS.

57

Referˆencias

[1] BOLDRINI, Jos´e Luiz . ´Algebra linear. 3a. edi¸c˜ao. S˜ao Paulo:HARBRA, 1986 .405p

[2] BOYCE, William E. e DiPrima, Richard C. Equa¸c˜oes Diferenciais Elementares
E Problemas De Valores De Contorno. 9a edi¸c˜ao. Rio de Janeiro:LTC , 2010.
607p

[3] LEITHOLD, Louis . O C´alculo Com Geometria Anal´ıtica:Volume 1. 3a. edi¸c˜ao.

S˜ao Paulo:HARBRA, 1994 . 685p

[4] LEITHOLD, Louis . O C´alculo Com Geometria Anal´ıtica:Volume 2. 3a. edi¸c˜ao.

S˜ao Paulo:HARBRA, 1994 . 1178p

[5] SANTOS, Bruna . Introdu¸c˜ao ao Software MAXIMA. Porto, 2009. Dispon´ıvel
em: <http://cmup.fc.up.pt/cmup/v2/include/ﬁledb.php?id=289&table=publicacoes
&ﬁeld=ﬁle>. Acesso em: 15 out. 2012.

[6] SWOKOSWSKI, Earl Willian. C´alculo com geometria anal´ıtica. 2 ed. S˜ao Paulo:

Makron Books, 1994. 744p

[7] VILLATE, Jaime E. Introdu¸c˜ao aos Sistemas Dinˆamicos: uma abordagem
pr´atica com Maxima. Porto, 2007. Dispon´ıvel em: <http://villate.org/doc/ sistemas-
dinamicos/ sistdinam-1 2.pdf>. Acesso em: 12 out. 2012.

[8] ZILL, Dennis G.; CULLEN, Michael R. Equa¸c˜oes diferenciais. 3 ed. S˜ao Paulo:

Makron Books, 2010. 473p

