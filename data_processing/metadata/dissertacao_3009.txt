Universidade Federal de Vi¸cosa
Disserta¸c˜ao de Mestrado

D´arcio Costa Nogueira J´unior

Grafos e problemas de caminhos

Florestal
Minas Gerais – Brasil
2017

D´arcio Costa Nogueira J´unior

GRAFOS E PROBLEMAS DE CAMINHOS

Disserta¸c˜ao apresentada `a Universidade Federal de Vi¸cosa,
como parte das exigˆencias do Programa de P´os-Gradua¸c˜ao
Mestrado Proﬁssional em Matem´atica em Rede Nacional,
para obter o t´ıtulo Magister Scientiae.

Florestal
Minas Gerais – Brasil
2017

Dedicat´oria

Em cada instante est´a l´a. Desde a primeira busca at´e a
constante procura pelo conhecer a si mesmo. No respirar,
em cada sentimento, no pulsar do cora¸c˜ao est´a l´a. A Deus.
Somente a Deus.

ii

Agradecimentos

Se h´a mem´oria do cora¸c˜ao, certamente ela ´e a gratid˜ao.
Agrade¸co ao professor, orientador e amigo, Lu´ıs Felipe, pelo ex-
cepcional planejamento e condu¸c˜ao das orienta¸c˜oes. A sua dedica¸c˜ao
e contribui¸c˜oes foram fundamentais para essa pesquisa. Cada en-
contro foi um aprendizado com marcas perenes em minha trajet´oria
como educador.

`A Coordena¸c˜ao de Aperfei¸coamento de Pessoal de N´ıvel Superior

(CAPES) por todo apoio ﬁnanceiro e suporte.

Aos meus pais, D´arcio e Vanilda, pelas ora¸c˜oes, presen¸ca e

momentos inesquec´ıveis. Vocˆes s˜ao parte dessa conquista.

Aos meus pais, Jane e Oswaldo, pelas intercess˜oes, presen¸ca e
momentos memor´aveis. Cada caf´e e almo¸co, conversas e partilhas,
s˜ao como refrig´erio, presente de Deus.

Aos meus irm˜aos Tatiana e Douglas, com respectivas fam´ılias:

somos um. Isso ´e o mais importante.

Andr´eia: nos momentos mais importantes e felizes, mais dif´ıceis
e tristes, vocˆe ´e a prova de que h´a amigos mais chegados que um
irm˜ao. Vocˆe ´e minha irm˜a de caminhada. Sempre.

`A primeira turma do mestrado da UFV - Florestal: apesar
dos momentos quentes do ver˜ao, vocˆes s˜ao incr´ıveis! Momentos
marcantes! Muito obrigado!

Aos professores, em especial Lu´ıs Felipe (orientador), Luis D-
’Afonseca (coorientador) e Mehran (coordenador), obrigado pelas
li¸c˜oes e ensinamentos.

Aos professores da banca da defesa: obrigado pelas contribui¸c˜oes,

corre¸c˜oes e sugest˜oes.

Aos amigos e colegas, que apoiaram esse trabalho, obrigado pela

presen¸ca e suporte.

Aos alunos do segundo ano do CMBH (2016): obrigado pelo
apoio na caminhada e pelas in´umeras contribui¸c˜oes. Sou muito
agradecido a cada um de vocˆes.

iii

Lista de S´ımbolos

S´ımbolos e nota¸c˜oes utilizadas neste trabalho:

N U LL Algo sem valor deﬁnido

(cid:15)

Letra grega ´Epsilon

O

∅

Complexidade

Conjunto vazio

VIN D Conj. de v´ertices independentes

min

M´ınimo

χ(G) N´umero crom´atico de G

α(G) N´umero de independˆencia de G

:=

Deﬁnido por

d(v)

Grau do v´ertice v

∞

∼=

Inﬁnito

Isomorﬁsmo

∈

≺

(cid:83)

Pertence

Precede

Uni˜ao

iv

Lista de Figuras

1.1 As sete pontes de K¨onigsberg e o grafo associado. [38]
. . . . . . . . . .
1.2 As oito pontes no centro de Recife e o grafo associado. [14] . . . . . . . .

2.1 O problema de Euler: as pontes de K¨onigsberg. [44] . . . . . . . . . . . .
2.2 Desenho no artigo de Euler, de 1736, mas publicado apenas em 1741. [45]
. . . . . . . . . . . . . . . . . . . . . . . .
2.3 O problema de Kirchhoﬀ. [27]
2.4 O problema de Cayley. [27]
. . . . . . . . . . . . . . . . . . . . . . . . .
2.5 O problema de Guthrie. [11] . . . . . . . . . . . . . . . . . . . . . . . . .
2.6 Deﬁni¸c˜ao de grafo. [44] . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.7 Exemplo de grafo com arestas m´ultiplas e la¸co . . . . . . . . . . . . . . .
2.8 Grafos simples, valorado e direcionado. No grafo direcionado temos as

1
2

4
5
5
5
6
7
7

arestas (a,b); (b,c); (c,d); (d,e); (a,e).

9
. . . . . . . . . . . . . . . . . . . . .
2.9 Grafos planares. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.10 Grafos regular, completo, bipartido e rotulado. . . . . . . . . . . . . . . . 10
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
2.11 Multigrafo e subgrafo.
11
2.12 Exemplo de isomorﬁsmo em grafos [30]. . . . . . . . . . . . . . . . . . . .
2.13 Exemplo de isomorﬁsmo em grafos [5].
11
. . . . . . . . . . . . . . . . . . .
2.14 Caminhos e ciclos em grafos . . . . . . . . . . . . . . . . . . . . . . . . . 12
. . . . . . . . . . . . . . . . . . . . 13
2.15 Grafo euleriano e semieuleriano. [21]
2.16 Grafos euleriano e hamiltoniano. [44]
. . . . . . . . . . . . . . . . . . . . 14
2.17 Grafo: ´arvore . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.18 Aplica¸c˜ao de colora¸c˜ao de grafos: Sudoku.
. . . . . . . . . . . . . . . . . 16
2.19 O desaﬁo das trˆes casas. [26] . . . . . . . . . . . . . . . . . . . . . . . . . 19
. . . . . 20
2.20 Aplica¸c˜ao de colora¸c˜ao de grafos: programa¸c˜ao de hor´arios. [15]
2.21 Conjunto independente. [35] . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.22 Um dos ciclos hamiltonianos na solu¸c˜ao do problema do cavalo. [4]
. . . 24
2.23 Exemplo de aplica¸c˜ao do algoritmo de Dijkstra. [16] . . . . . . . . . . . . 25

3.1 Exemplo de algoritmo: recepcionista de cinema. [19]
3.2 Exemplo de ﬂuxograma: recepcionista de cinema.
3.3 Exemplo de algoritmo na computa¸c˜ao: multiplica¸c˜ao de dois n´umeros

. . . . . . . . . . . 28
. . . . . . . . . . . . . 28

inteiros positivos. [19]

. . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.4 Hierarquia de fun¸c˜oes. [43] . . . . . . . . . . . . . . . . . . . . . . . . . . 30

v

Lista de Figuras

vi

. . . . . . . . . . . . . . . . . . .

3.5 Exemplo de matriz de adjacˆencia. [33]
3.6 Matriz de adjacˆencia para grafo e para digrafo. [28]
3.7 Lista de adjacˆencias para grafo e para digrafo. [28]
3.8 Implementa¸c˜ao de matriz de adjacˆencias. [29]
3.9 Implementa¸c˜ao de matriz de adjacˆencias. [29]
3.10 Caminho m´ınimo do v´ertice a at´e g - exemplo do resultado obtido pelo

31
. . . . . . . . . . . . 32
. . . . . . . . . . . . 32
. . . . . . . . . . . . . . . 33
. . . . . . . . . . . . . . . 34

algoritmo de Dijkstra. [8]

. . . . . . . . . . . . . . . . . . . . . . . . . . 34

3.11 Caminho m´ınimo do v´ertice a at´e g - tabela com passos e distˆancias do

algoritmo de Dijkstra. [8]

. . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.12 Implementa¸c˜ao do algoritmo de Dijkstra. [11]
. . . . . . . . . . . . . . . 35
3.13 Exemplo da execu¸c˜ao do algoritmo de Dijkstra. [20] . . . . . . . . . . . . 36
3.14 Passos obtidos com a modiﬁca¸c˜ao do algoritmo de Dijkstra. [20]
. . . . . 36
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
3.15 Grafo G. [42]
3.16 Matriz de adjacˆencia M e matriz de roteamento R. [42] . . . . . . . . . . 38
3.17 Matrizes de roteamento com v´ertices intermedi´arios. [42]
. . . . . . . . . 38
3.18 O algoritmo de Floyd. [11] . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3.19 Exemplo de aplica¸c˜ao algoritmo de Kruskal. [13] . . . . . . . . . . . . . . 40
3.20 O algoritmo de Kruskal. [11] . . . . . . . . . . . . . . . . . . . . . . . . .
41
. . . . . . . . . . . . . 42
3.21 Exemplo de aplica¸c˜ao do algoritmo de Prim. [36]
. . . . . . . . . . . . . . . . . . . . . . . . . . 43
3.22 O algoritmo de Prim. [11]

4.1 Interface do Code::Blocks [2] . . . . . . . . . . . . . . . . . . . . . . . . . 48
4.2 Esquema do laborat´orio de inform´atica e a disposi¸c˜ao dos alunos . . . . . 50
4.3 Atividade 1.1.1 apresentada pelo aluno 6 . . . . . . . . . . . . . . . . . . 52
4.4 Atividade 1.2.1 apresentada pelo aluno 1 . . . . . . . . . . . . . . . . . . 53
4.5 Atividade 1.4.1 apresentada pelo aluno 3 . . . . . . . . . . . . . . . . . . 54
4.6 Atividade 2.1.1 apresentada pelo aluno 4 . . . . . . . . . . . . . . . . . . 55
4.7 Atividade 2.1.2 apresentada pelo aluno 15 . . . . . . . . . . . . . . . . . 55
4.8 Atividade 2.2.1 apresentada pelo aluno 13 . . . . . . . . . . . . . . . . . 56
4.9 Atividade 2.2.2 apresentada pelo aluno 9 . . . . . . . . . . . . . . . . . . 56
4.10 Atividade 2.2.4 apresentada pelo aluno 13 . . . . . . . . . . . . . . . . . 57
4.11 Atividade 2.3.1 apresentada pelo aluno 13 . . . . . . . . . . . . . . . . . 58
4.12 Atividade 2.3.3 apresentada pelo aluno 13 . . . . . . . . . . . . . . . . . 58
4.13 Atividade 3.1.1: conjunto de arestas dirigidas de um digrafo. Padr˜ao de

resposta dos alunos abaixo da ﬁgura dada. [18]

. . . . . . . . . . . . . . 59

4.14 Atividade 3.2.1: Padr˜ao de resposta dos alunos na execu¸c˜ao do programa.

[18] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59

4.15 Atividade 3.2.1: ´arvore de caminho m´ınimo obtida pelo algoritmo de

Dijkstra. [18]

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60

Resumo

NOGUEIRA J ´UNIOR, D´arcio Costa, M.Sc., Universidade Federal de Vi¸cosa, fevereiro
de 2017. Grafos e problemas de caminhos. Orientador: Lu´ıs Felipe Gon¸calves
Fonseca. Coorientador: Luis Alberto D’Afonseca.

A Teoria dos Grafos est´a associada a situa¸c˜oes que podem ser descritas por meio de

diagramas representados por um conjunto de pontos (v´ertices) e linhas que ligam

alguns pares destes pontos (arestas). Seu in´ıcio remonta a visita de Leonhard Euler

`a cidade de K¨onigsberg, em 1736, quando foi apresentado a ele um desaﬁo que

intrigava os moradores da cidade. Eles se perguntavam se era poss´ıvel sair de casa,

passar em cada ponte, apenas uma vez, e retornar ao ponto inicial. O diagrama

montado por Euler para representar o mapa das sete pontes da cidade ´e um esquema

de grafo. O desenvolvimento e a consolida¸c˜ao da Teoria dos Grafos proporcionou

signiﬁcativas contribui¸c˜oes para a F´ısica, Qu´ımica, Biologia e Ciˆencia da Computa¸c˜ao.

Os algoritmos associados a problemas de caminho m´ınimo, colora¸c˜ao e busca de

´arvore geradora m´ınima s˜ao amplamente utilizados na pr´atica de linguagem de

programa¸c˜ao. Nessa pesquisa, o problema de caminho m´ınimo e a busca da ´arvore

geradora m´ınima s˜ao usados para o trabalho de algoritmos envolvendo grafos com

alunos do Ensino M´edio em uma escola de Belo Horizonte. Uma sequˆencia did´atica

com trˆes aulas foi aplicada, sendo a primeira aula sobre a introdu¸c˜ao `a teoria dos

grafos, a segunda aula sobre algoritmos e grafos e a terceira aula com a implementa¸c˜ao

desses algoritmos usando a linguagem de programa¸c˜ao C. Os algoritmos utilizados

foram Dijkstra, Prim, Kruskal e Floyd. Resultados apontam para a possibilidade de

inclus˜ao da Teoria dos Grafos no Ensino M´edio tendo em vista as intera¸c˜oes com

An´alise Combinat´oria, Probabilidade e Poliedros. O estudo de grafos por meio de

algoritmos e sua aplica¸c˜ao em linguagem de programa¸c˜ao ´e uma nova abordagem a

ser considerada para o Ensino M´edio.

vii

Abstract

NOGUEIRA J ´UNIOR, D´arcio Costa, M.Sc., Universidade Federal de Vi¸cosa, Febru-
ary, 2017. Graphs and path problems. Adviser: Lu´ıs Felipe Gon¸calves Fonseca.
Co-adviser: Luis Alberto D’Afonseca.

The Theory of Graphs is associated with situations that can be described by means

of diagrams represented by a set of points (vertices) and lines that connect some pairs

of these points (edges). Its beginning dates back to Leonhard Euler’s visit to the

town of K¨onigsberg in 1736, when he was presented with a challenge that intrigued

the city’s residents. They wondered if it was possible to get out of the house, pass

on each bridge only once, and return to the starting point. The diagram assembled

by Euler represent the map of the city’s seven bridges is a graph diagram. The

development and consolidation of Graph Theory provided signiﬁcant contributions

to Physics, Chemistry, Biology and Computer Science. The algorithms associated

with minimum path, coloring, and minimum generation tree search algorithms are

widely used in programming language practice. In this research, the minimum path

problem and the minimum generation tree search are used to work with algorithms

involving graphs with high school students in a school in Belo Horizonte. A didactic

sequence with three sections was applied, being the ﬁrst class on the introduction

to the graph theory, the second class on algorithms and graphs and the third class

with the implementation of these algorithms using the C programming language.

The algorithms used were Dijkstra, Prim, Kruskal and Floyd. Results point to

the possibility of including the Theory of Graphs in High School in view of the

interactions with Combinatorial Analysis, Probability and Polyhedra. The study of

graphs through algorithms and their application in programming language is a new

approach to be considered for High School.

viii

Sum´ario

1

Introdu¸c˜ao

1

No¸c˜oes de Grafos

4
2
6
2.1 Primeiras ideias de Grafos . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.2 Alguns tipos de grafos . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3
11
Isomorﬁsmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4 Deﬁni¸c˜oes relacionadas a caminhos e ciclos . . . . . . . . . . . . . . . . . 12
´Arvores . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.5
2.6 Colora¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2.7 Teoremas, problemas e outros resultados . . . . . . . . . . . . . . . . . . 17

Grafos, problemas e algoritmos

3
26
3.1 Algoritmos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
3.2 Matriz de Adjacˆencia.
31
3.3 Algoritmo de Dijkstra e a busca de caminho mais curto . . . . . . . . . 34
3.4 O algoritmo de Floyd e o problema do menor caminho . . . . . . . . . . 37
3.5 O algoritmo de Kruskal e a ´arvore geradora m´ınima
. . . . . . . . . . . 39
3.6 O algoritmo de Prim e a ´arvore geradora de custo m´ınimo . . . . . . . . 42

. . . . . . . . . . . . . . . . . . . . . . . . . . . .

A sequˆencia did´atica
44
4
Introdu¸c˜ao ao estudo de grafos com aux´ılio de algoritmos de programa¸c˜ao 45
4.1
4.1.1 Aula 1: Grafos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
4.1.2 Aula 2: Grafos - problemas e algoritmos . . . . . . . . . . . . . . . . . . 46
4.1.3 Aula 3: Grafos - algoritmos de programa¸c˜ao . . . . . . . . . . . . . . . . 48
4.2 A aplica¸c˜ao da sequˆencia did´atica . . . . . . . . . . . . . . . . . . . . . . 49
4.3 An´alise dos dados coletados . . . . . . . . . . . . . . . . . . . . . . . . .
51
4.3.1 Os grafos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.3.2 Grafos: problemas e algoritmos . . . . . . . . . . . . . . . . . . . . . . . 54
4.3.3 Grafos: algoritmos de programa¸c˜ao . . . . . . . . . . . . . . . . . . . . . 58
4.3.4 Aula extra: socializa¸c˜ao das impress˜oes sobre a sequˆencia did´atica . . . . 60

5

Considera¸c˜oes ﬁnais

A Apˆendice - Sequˆencia did´atica

62

64

ix

Sum´ario

Bibliograﬁa

x

87

Introdu¸c˜ao

1

Os grafos, devido a sua natureza combinat´oria, servem de modelos para v´arios
problemas na Matem´atica. A teoria dos grafos se mostrou um eﬁciente assunto para
abordar aplica¸c˜ao de algoritmos para resolu¸c˜ao de problemas pr´aticos.

A hist´oria da Matem´atica teve um epis´odio espec´ıﬁco quando Euler foi visitar a
cidade de K¨onigsberg em meados da primeira metade do s´eculo XVIII. A teoria dos
grafos surgiu de um problema, proposto como uma desaﬁo pelos moradores daquela
cidade. O desaﬁo, conhecido como o “Problema das Sete Pontes de K¨onigsberg”,
consistia em saber se era poss´ıvel sair de casa, passar uma vez em cada ponte e
voltar para casa. Euler resolveu o desaﬁo e publicou a resolu¸c˜ao em um artigo no
ano de 1741. Ap´os um s´eculo sem registros relevantes, al´em dos publicados por
Euler, o s´eculo XIX foi um momento de retomada e desenvolvimento dos grafos. Os
problemas foram se tornando not´orios devido `as suas implica¸c˜oes pr´aticas.

Figura 1.1: As sete pontes de K¨onigsberg e o grafo associado. [38]

Ao longo da hist´oria, muitos dos problemas da teoria dos grafos foram associados
a algoritmos, o que resultou em quest˜oes de complexidade computacional. O teorema
das quatro cores mostra que ´e poss´ıvel colorir um mapa com apenas quatro cores,
de modo que pa´ıses vizinhos n˜ao sejam coloridos com a mesma cor. Esse teorema
exempliﬁca tal complexidade, j´a que um per´ıodo de v´arias d´ecadas separa a primeira
tentativa de demonstra¸c˜ao da prova em que se utilizou computadores.

Nesta disserta¸c˜ao, a teoria dos grafos ´e introduzida por meio de um breve contexto
hist´orico, ressaltando sua origem em problema de aplica¸c˜ao pr´atica. Ap´os a deﬁni¸c˜ao,
alguns elementos e as suas representa¸c˜oes s˜ao descritos. Os conceitos fundamentais
antecedem os tipos de grafos, que s˜ao abordados de acordo com suas utiliza¸c˜oes nos

1

Cap´ıtulo 1.

Introdu¸c˜ao

2

algoritmos propostos. H´a uma preocupa¸c˜ao em apresentar teoremas e lemas, com
suas respectivas demonstra¸c˜oes matem´aticas.

Os algoritmos s˜ao apresentados de maneira sucinta, seguido da deﬁni¸c˜ao e aplica-
¸c˜ao da matriz de adjacˆencia. Dois algoritmos (Dijkstra e Floyd) s˜ao propostos para
problemas que buscam o caminho m´ınimo e dois algoritmos (Kruskal e Prim) para
a ´arvore geradora m´ınima. Os algoritmos apresentados podem ser adaptados para
qualquer linguagem de programa¸c˜ao.

A teoria dos grafos e as possibilidades de intera¸c˜oes com outras ´areas da Mate-
m´atica foram balizadores para uma sequˆencia did´atica. Dividida em trˆes aulas, cada
uma de 100 minutos, as atividades permearam cada passo da sequˆencia. A primeira
aula trouxe uma introdu¸c˜ao `a teoria dos grafos, enquanto a segunda aula iniciou
a aplica¸c˜ao de algoritmos como Dijkstra e Kruskal, por exemplo. A terceira aula
aborda a linguagem de programa¸c˜ao C, escolhida para essa pesquisa devido ao seu
uso na Olimp´ıada Brasileira de Inform´atica (OBI).

As aulas ocorreram numa escola federal de Belo Horizonte ao longo de duas
semanas. Dezesseis alunos do segundo ano do Ensino M´edio foram volunt´arios para
participar das aulas. Os dados coletados por meio de observa¸c˜ao das aulas, execu¸c˜ao
e recolhimento das atividades, assim como as anota¸c˜oes da socializa¸c˜ao realizada
duas semanas ap´os a ´ultima das trˆes aulas, foram analisados com vi´es de pesquisa
qualitativa.

Esses dados foram analisados e os resultados mostraram a possibilidade de
inclus˜ao de grafos no Ensino M´edio, tendo em vista a s´erie em que se ensina An´alise
Combinat´oria, Probabilidades e Poliedros.

O uso da linguagem C para a programa¸c˜ao dos algoritmos se mostrou eﬁciente
apenas para alunos com conhecimento pr´evio. Nesse contexto, destacam-se aqueles
que j´a participaram da OBI ou que est˜ao matriculados em algum curso t´ecnico.

Algumas quest˜oes levantadas na observa¸c˜ao e an´alise de dados s˜ao apresentadas
nas considera¸c˜oes ﬁnais. A oportunidade de inserir grafos nos curr´ıculos pode trazer
benef´ıcios para o estudo de algoritmos, a demonstra¸c˜ao de teoremas e a resolu¸c˜ao de
problemas pr´aticos.

Figura 1.2: As oito pontes no centro de Recife e o grafo associado. [14]

O caminho para as aplica¸c˜oes ´e repleto de possibilidades de contextualiza¸c˜ao de

Cap´ıtulo 1.

Introdu¸c˜ao

3

grafos tendo em vista `as regionalidades de nossa na¸c˜ao. Uma delas est´a representada
na ﬁgura 1.2, que pode ser considerada a K¨onigsberg brasileira do s´eculo XXI. A
mesma impossibilidade encontrada por Euler pode ser percebida em Recife, uma
vez que ´e imposs´ıvel obter um ciclo euleriano, isto ´e, um caminho que passasse por
todas as pontes apenas uma vez e retornasse ao ponto inicial. Esse exemplo de
contextualiza¸c˜ao atesta a relevˆancia e as possibilidades de trabalho quando se introduz
grafos na Educa¸c˜ao B´asica, em especial, no Ensino M´edio, conforme abordado na
pesquisa.

No¸c˜oes de Grafos

2

A Teoria dos Grafos ´e relativamente contemporˆanea na Matem´atica. Seus registros
iniciais remontam a um problema que foi resolvido por Leonhard Euler ao visitar a
cidade de K¨onigsberg em 1736. Localizada numa pequena regi˜ao da R´ussia, a cidade
possu´ıa uma intensa atividade intelectual e um relevante com´ercio mar´ıtimo. ´E nesse
contexto que Euler, ao visitar a cidade, se depara com um problema de aparˆencia
simples, mas que estava sendo amplamente discutido pela elite intelectual da cidade.
O desaﬁo consistia em determinar um trajeto iniciado em uma das margens do
Pregel, rio que corta a cidade, e passasse por todas as pontes apenas uma ´unica vez,
retornando ao ponto de partida.

(cid:15)(cid:12)
c
(cid:14)(cid:13)

(cid:15)(cid:12)
b
(cid:14)(cid:13)

(cid:15)(cid:12)
d
(cid:14)(cid:13)

(cid:15)(cid:12)
a
(cid:14)(cid:13)

grafo

(cid:64)

(cid:0)

(cid:64)
(cid:0)

b

(cid:8)(cid:8)(cid:8)
(cid:8)
(cid:116)
(cid:72)(cid:72)

(cid:72)(cid:72)(cid:72)

(cid:8)(cid:8)(cid:8)

c
(cid:116)
(cid:4)
(cid:7)
(cid:8)

(cid:116)
(cid:4)
(cid:5)(cid:7)
(cid:6)
d

(cid:72)(cid:72)(cid:72)
(cid:116)
(cid:5)
(cid:6)
a

Figura 2.1: O problema de Euler: as pontes de K¨onigsberg. [44]

Ele mostrou que era imposs´ıvel realizar tal trajeto, a n˜ao ser que cada margem
fosse ligada a uma ilha por um n´umero par de pontes. O desaﬁo proposto a Euler
resultou num artigo escrito em 1736 [17]. Mais tarde, o esquema apresentado por
Euler recebeu o nome de grafo.

Apenas 111 anos mais tarde, o f´ısico alem˜ao Gustav Kirchhoﬀ pensou em algo
parecido quando publicou alguns resultados em que se utilizava modelos de grafos.
Na ﬁgura 2.3, pode ver-se o uso de “´arvores matem´aticas” para a investiga¸c˜ao de
circuitos el´etricos. A lei das correntes de Kirchhoﬀ pode ser enunciada como “para
qualquer rede de parˆametros concentrados, para qualquer de seus cortes, e a qualquer
instante, a soma alg´ebrica de todas as correntes atrav´es dos bra¸cos do corte ´e zero”.
[27]

4

Cap´ıtulo 2. No¸c˜oes de Grafos

5

Figura 2.2: Desenho no artigo de Euler, de 1736, mas publicado apenas em
1741. [45]

Figura 2.3: O problema de Kirchhoﬀ. [27]

Alguns anos depois, mas precisamente em 1857, o matem´atico britˆanico Arthur
Cayley usou a ideia de grafos para enumerar todos os isˆomeros dos hidrocarbonetos
alif´aticos, sendo estes compostos de carbono e hidrogˆenio com cadeias abertas,
conforme indicado na ﬁgura 2.4. Neles, a cadeia carbˆonica ´e ac´ıclica e por serem
isˆomeros, possuem a mesma f´ormula molecular mesmo com f´ormulas estruturais
distintas.

Figura 2.4: O problema de Cayley. [27]

Cap´ıtulo 2. No¸c˜oes de Grafos

6

Nessa mesma ´epoca, Francis Guthrie apresentou a conjectura das quatro cores
enquanto tentava colorir um mapa dos condados da Inglaterra. Ele notou que
apenas quatro cores eram suﬁcientes para colorir o mapa, sendo que cada regi˜ao
n˜ao apresentava a mesma cor das demais regi˜oes com as quais se fazia fronteira.
Associando pontos a cada condado, Guthrie uniu dois pontos por uma linha se as
duas regi˜oes faziam fronteira, conforme a ﬁgura 2.5. Cerca de 124 anos se passaram
e muitos m´etodos foram desenvolvidos para resolver o problema das quatro cores.
Apenas em 1976, com a ajuda de um IBM 360, Kenneth Appel e Wolfgang Haken
apresentaram uma demonstra¸c˜ao para o teorema das quatro cores [10].

Figura 2.5: O problema de Guthrie. [11]

No s´eculo XX, muitos matem´aticos contribu´ıram com Teoria dos Grafos. Diversas
´areas do conhecimento como a Ciˆencia da Computa¸c˜ao, Biologia e a estrutura do
DNA, Qu´ımica e o projeto de novos compostos qu´ımicos foram beneﬁciadas.

2.1 Primeiras ideias de Grafos

A seguir, uma breve apresenta¸c˜ao da Teoria Matem´atica dos Grafos.

Deﬁni¸c˜ao 2.1.1. Um grafo n˜ao direcionado G = (V, E) ´e uma estrutura matem´atica
formada por dois conjuntos, o conjunto V dos v´ertices e o conjunto E das arestas.
Uma aresta existe se dois v´ertices est˜ao associados a ela.

A compreens˜ao de um grafo depende de saber quais s˜ao os v´ertices e como eles
se interligam dois a dois. Isso proporciona uma r´apida visualiza¸c˜ao gr´aﬁca devido `a
facilidade na sua representa¸c˜ao por meio de esquemas. A seguir, alguns conceitos
sobre grafos.

Cap´ıtulo 2. No¸c˜oes de Grafos

e

(cid:116)

a
(cid:116)

(cid:39)

a
(cid:116)
(cid:64)
(cid:0)

(cid:116)b

(cid:116)d

(cid:116) c

grafo

450

(cid:64)

(cid:64)
(cid:0)

(cid:0)

(cid:64)
(cid:0)
400
350
(cid:116)(cid:0)
(cid:116)(cid:64)
100
e
b
(cid:72)(cid:72)
(cid:8)(cid:8)
(cid:72)(cid:72)(cid:72)
(cid:8)(cid:8)(cid:8)
170
170
100
100
(cid:116)
(cid:72)
(cid:116)
(cid:8)
(cid:38)
100
c
d

7

(cid:36)
400

(cid:37)

Figura 2.6: Deﬁni¸c˜ao de grafo. [44]

• La¸co: aresta da forma {v,v};

• V´ertices adjacentes: v´ertices de uma mesma aresta;

• Aresta incidente ao v´ertice v: aresta que cont´em v;

• Extremidade de uma aresta: v´ertice da aresta;

• Grafo nulo: aquele para o qual V = ∅.

• Ordem de um grafo G = (V, E): ´e a cardinalidade do seu conjunto de v´ertices,

ou seja, o n´umero de v´ertices de G.

• Tamanho de um grafo G = (V, E): ´e o n´umero de arestas de G.

O v´ertice de um grafo ´e representado por um c´ırculo ou ponto; a aresta ´e

representada por uma linha.

Exemplo 2.1.2. No grafo G = (V,E) temos trˆes v´ertices e cinco arestas. A ordem
de G ´e 3.

• G = (V, E), em que:

– V = {a,b,c};

– E = {{a,b},{a,c},{b,c},{b,c},{c,c}}.

• Uma representa¸c˜ao geom´etrica:

(cid:16)

(cid:116)b
(cid:19)
(cid:116)(cid:80)(cid:80)(cid:80)(cid:80)(cid:80)(cid:80)
a(cid:16)(cid:16)(cid:16)(cid:16)(cid:16)(cid:16)

(cid:116)
(cid:16)
(cid:17)(cid:19)
(cid:18)

c

(cid:18)

(cid:17)

Figura 2.7: Exemplo de grafo com arestas m´ultiplas e la¸co

Cap´ıtulo 2. No¸c˜oes de Grafos

8

Em um grafo, o grau do v´ertice v ´e o n´umero de vezes que as arestas incidem
sobre v, sendo representado por d(v). No exemplo da ﬁgura 2.7, d(a) = 2, d(b) = 3 e
d(c) = 5. Observe que cada la¸co ´e contado duas vezes e que se a ﬁgura apresentasse
algum v´ertice isolado, esse v´ertice apresentaria grau zero. Um resultado, conhecido
como o Lema do Aperto de M˜aos foi provado por Leonhard Euler em 1736. [17]

Lema 2.1.3. do Aperto de M˜aos: A soma dos graus dos v´ertices de um grafo ´e
sempre o dobro do n´umero de arestas.

Prova. Por deﬁni¸c˜ao, basta notar que cada aresta, incluindo os la¸cos, contribui com
duas unidades para a soma.

Corol´ario 2.1.4. Todo grafo G possui um n´umero par de v´ertices de grau ´ımpar.

Prova. Uma soma de n´umeros naturais ´e par, se, e somente se, a quantidade de
n´umeros ´ımpares ´e par. Assim, pelo lema do aperto de m˜aos, a soma dos graus ´e par
e, portanto, o n´umero de v´ertices de grau ´ımpar ´e par.

2.2 Alguns tipos de grafos

Os conceitos de grafos s˜ao relativamente simples e podem ser utilizados na
resolu¸c˜ao de problemas de An´alise Combinat´oria, Probabilidades, Geometria e
Programa¸c˜ao de Computadores.

• Um grafo simples ´e aquele que n˜ao apresenta la¸cos e nem arestas m´ultiplas.

• Um grafo valorado ´e aquele em que cada aresta possui um valor (peso) associado.

• Um grafo direcionado ou orientado apresenta arestas determinadas por pares
ordenados. Nesse caso, a aresta (a,b) deve ser desenhada por meio de uma seta
que vai de a at´e b.

Um dos tipos de grafos que pode ser aplicado `a representa¸c˜ao de mapas de bairros
de uma cidade ´e o grafo planar. Se o bairro n˜ao apresentar nenhum viaduto, as
ruas se cruzar˜ao apenas nos cruzamentos. ´E um caso de grafo em que as arestas se
interceptam apenas nas extremidades, quando representado em um plano.

• Quando um grafo G admite uma representa¸c˜ao numa superf´ıcie S
sem que existam arestas que se interceptam, diz que ele ´e realiz´avel
em S. Um grafo diz-se planar se ´e realiz´avel no plano. [32]

Os poliedros platˆonicos s˜ao exemplos de grafos planares. Da associa¸c˜ao com cada
planiﬁca¸c˜ao dessas ﬁguras espaciais ´e poss´ıvel identiﬁcar a quantidade de v´ertices,
arestas e faces de um poliedro.

Cap´ıtulo 2. No¸c˜oes de Grafos

9

Figura 2.8: Grafos simples, valorado e direcionado. No grafo direcionado temos
as arestas (a,b); (b,c); (c,d); (d,e); (a,e).

Figura 2.9: Grafos planares.

• Um grafo ´e dito regular se todos os seus v´ertices apresentam o mesmo grau.

• Um grafo ´e completo se qualquer par de v´ertices ´e conectado por uma aresta.
S˜ao denotados por Kn, sendo n a ordem do grafo. Todo grafo completo Kn
´e tamb´em regular de ordem n − 1, visto que todos os seus v´ertices tem grau
n − 1.

• Um grafo ´e conexo (ou conectado) quando existe um caminho entre qualquer
par de v´ertices. Caso contr´ario, demonina-se desconexo. Se todos os v´ertices
apresentam grau zero, temos um grafo totalmente desconexo.

• Um grafo ´e bipartido quando seu conjunto de v´ertices V pode ser particionado
em dois subconjuntos V1 e V2 tais que toda aresta do grafo associa um v´ertice de
V1 a outro v´ertice de V2. Um grafo ´e bipartido completo quando todos os v´ertices
de um subconjunto est˜ao ligados a todos os v´ertices do outro subconjunto.

• Um grafo ´e rotulado em v´ertices ou arestas quando a cada v´ertice ou aresta,

respectivamente, um r´otulo estiver associado.

Cap´ıtulo 2. No¸c˜oes de Grafos

10

Figura 2.10: Grafos regular, completo, bipartido e rotulado.

• Um multigrafo ´e um grafo que apresenta m´ultiplas arestas entre pares de seus

v´ertices.

• Subgrafo de um grafo ´e aquele em que o conjunto de seus v´ertices e o conjunto
de suas arestas s˜ao, respectivamente, subconjuntos do conjunto de v´ertices e
do conjunto de arestas do grafo dado.

Figura 2.11: Multigrafo e subgrafo.

Cap´ıtulo 2. No¸c˜oes de Grafos

11

2.3 Isomorﬁsmo

Dois grafos G e G(cid:48) s˜ao isomorfos (G ∼= G(cid:48)) quando existe uma fun¸c˜ao bijetora

f : V (G) → V (G(cid:48)) tal que se (u,v) ∈ E(G), ent˜ao (f (u), f (v)) ∈ E(G(cid:48)).

Figura 2.12: Exemplo de isomorﬁsmo em grafos [30].

Ou seja, dois grafos s˜ao isomorfos quando existe uma correspondˆencia v´ertice a

v´ertice, de modo a preservar as adjacˆencias, como visto na ﬁgura 2.12

Determinar se dois grafos s˜ao isomorfos nem sempre ´e uma tarefa simples. Apesar
da possibilidade de se fazer correspondˆencia v´ertice a v´ertice, preservando as adjacˆen-
cias, a quantidade de permuta¸c˜oes poss´ıvel pode revelar uma alta complexidade em
problemas desse tipo. No entanto, h´a uma t´ecnica [5] (n˜ao simples de implementar)
que mant´em os r´otulos dos v´ertices, mas no entanto modiﬁca o seu desenho, obtendo
um novo grafo. Na ﬁgura 2.13, os v´ertices f, g, h, i, j foram colocados para fora e os
v´ertices a, b, c, d, e foram colocados no meio, obtendo um grafo isomorfo.

Figura 2.13: Exemplo de isomorﬁsmo em grafos [5].

O isomorﬁsmo, denotado por ∼=, ´e uma rela¸c˜ao de equivalˆencia no conjunto dos

grafos, pois satisfaz as propriedades:

Cap´ıtulo 2. No¸c˜oes de Grafos

12

1) a simetria (G1
2) reﬂexidade (Se G1
3) transitividade (G1

∼= G1 para todo o grafo G1);

∼= G2, ent˜ao G2
∼= G2 e G2

∼= G3 → G1

∼= G3).

∼= G1, para quaisquer grafos G1 e G2);

2.4 Deﬁni¸c˜oes relacionadas a caminhos e ciclos

Um passeio em um grafo G = (V,E) ´e uma sequˆencia de v´ertices consecutivos
ligados por meio de arestas ou arcos. Desse modo, uma sequˆencia v1,...vk ∈ V , ´e um
passeio de v1 a vk, se (vj, vj+1) ∈ E para todo j = 1,...,m − 1. Logo, um passeio com
j v´ertices apresenta j − 1 arestas. Essa quantidade de arestas ´e o comprimento do
passeio. Se as arestas s˜ao todas distintas, esse passeio denomina-se trilha.

Um caminho ´e um passeio que n˜ao cont´em v´ertices repetidos. Seu comprimento

´e dado pelo n´umero de arestas desse passeio.

Um circuito ´e um passeio em que o v´ertice de partida coincide com o v´ertice de
chegada. O ciclo, por sua vez, ´e um circuito com todos os v´ertices distintos entre o
primeiro e o ´ultimo.

Na ﬁgura 2.14, por exemplo, temos o passeio a, b, c, d, e, b, c, a trilha a, b, e, d, a,
o caminho a, d, c, b, e, o circuito a, c, e, b, c, d, a, o ciclo a, b, e, c, d, a e o triˆangulo
c, d, e, c.

Figura 2.14: Caminhos e ciclos em grafos

Um grafo conexo ´e euleriano quando existe uma trilha fechada contendo cada

uma das suas arestas.

Teorema 2.4.1. Teorema de Euler [17]: Um grafo conexo ´e euleriano se, e
somente se o grau de cada v´ertice ´e par.

Prova [21]. (⇒) Seja G um grafo euleriano. Logo, ele cont´em um circuito euleriano.
Por cada v´ertice desse caminho, existe uma aresta que chega nesse v´ertice e outra que
sai desse v´ertice. Uma vez que toda aresta faz parte do caminho, necessariamente o
n´umero de arestas por cada v´ertice ´e par.

(⇐) Suponha que todos os v´ertices possuem grau par. Seja vi um v´ertice qualquer
do grafo. A partir de vi, tenta-se construir um caminho que n˜ao passa duas vezes
pela mesma aresta, at´e que n˜ao seja mais poss´ıvel continuar. Se os v´ertices possuem
grau par, ´e poss´ıvel entrar e sair de um v´ertice, com exce¸c˜ao de vi, onde o caminho
vai terminar. Se esse caminho C1 cont´em todas as arestas de G, temos um circuito

Cap´ıtulo 2. No¸c˜oes de Grafos

13

euleriano. Caso contr´ario, retira-se todas as arestas de G que fazem parte de C1.
No grafo resultante G(cid:48), todos os v´ertices tem grau par e um deles necessariamente
faz parte de C1 (a ﬁm de garantir que o grafo seja conexo). Recome¸cando o mesmo
processo em G(cid:48) a partir do v´ertice comum com C1, obtendo C2. Portanto, temos um
circuito ´unico que cont´em todas as arestas de G(cid:48).

Um circuito ou caminho ´e euleriano quando todas as suas arestas s˜ao contempladas
no circuito ou caminho uma ´unica vez, respectivamente. Ora, se um grafo n˜ao
apresenta circuito euleriano, mas apresenta um caminho euleriano, esse grafo ´e
denominado semieuleriano.

Figura 2.15: Grafo euleriano e semieuleriano. [21]

Com a deﬁni¸c˜ao de grafos eulerianos e o teorema 2.4.1, o problema das sete pontes
de K¨onigsberg se torna trivial. Como o grafo n˜ao ´e euleriano, ﬁca imposs´ıvel partir
de um lugar, atravessar todas as pontes uma ´unica vez e voltar ao ponto de partida,
conforme indicado na ﬁgura 2.1.

Um caminho ´e hamiltoniano quando ´e poss´ıvel passar por todos os v´ertices sem
repeti¸c˜ao. No caso em que come¸ca e termina no mesmo ponto, temos um ciclo
hamiltoniano. Se um grafo possui um ciclo desse tipo, ele ´e denominado grafo
hamiltoniano.

2.5

´Arvores

Uma ´arvore ´e um grafo conexo que n˜ao apresenta ciclos. Uma ﬂoresta ´e um grafo
n˜ao necessariamente conexo ac´ıclico, isto ´e, sem ciclos. Segundo Jurkiewicz (2009)
[24], “para um dado n´umero de v´ertices n, uma ´arvore ´e o grafo conexo com menor
n´umero de arestas.”O teorema 2.5.1 re´une as v´arias caracteriza¸c˜oes das ´arvores.

Teorema 2.5.1. Seja T um grafo com n v´ertices. As seguintes aﬁrma¸c˜oes s˜ao
equivalentes:

I. T ´e uma ´arvore.
II. T n˜ao cont´em ciclos e tem n − 1 arestas.
III. T ´e conexo e tem n − 1 arestas.

Cap´ıtulo 2. No¸c˜oes de Grafos

14

(cid:116)a

(cid:116)

d

(cid:116)b

(cid:116)
c

(cid:116)a
(cid:81)

(cid:116)

d

(cid:81)

(cid:81)

(cid:81)

(cid:116)b

(cid:81)

(cid:81)

(cid:116)
c

Euleriano, Hamiltoniano

n˜ao Euleriano, Hamiltoniano

(cid:116)a
(cid:81)

(cid:116)
(cid:17)

e

(cid:81)

(cid:17)

(cid:116)b
(cid:81)
(cid:17)
(cid:81)
(cid:17)

(cid:17)

(cid:81)

(cid:116)c

(cid:17)

(cid:81)
(cid:116)
d

Euleriano, n˜ao Hamiltoniano

(cid:116)a

(cid:116)
b
n˜ao Euleriano, n˜ao Hamiltoniano

Figura 2.16: Grafos euleriano e hamiltoniano. [44]

IV. T ´e conexo e toda aresta ´e uma ponte 1.
V. Todo par de v´ertices de T ´e ligado por um ´unico caminho.
VI. T n˜ao cont´em ciclos, mas a adi¸c˜ao de uma aresta produz um ´unico ciclo.

Prova [24].

(I) ⇒ (II) Se T ´e uma ´arvore com n v´ertices, por deﬁni¸c˜ao, T n˜ao cont´em ciclos.
Ao retirar uma aresta uv, separando os v´ertices u e v, tem-se um par de ´arvores T (cid:48) e
T (cid:48)(cid:48) com n(cid:48) e n(cid:48)(cid:48) v´ertices respectivamente. Logo, n = n(cid:48) + n(cid:48)(cid:48). Por indu¸c˜ao, os n´umeros
de arestas de T (cid:48) e T (cid:48)(cid:48) s˜ao n(cid:48) − 1 e n(cid:48)(cid:48) − 1 arestas, respectivamente. Acrescentando
a aresta uv, conclui-se que o n´umero de arestas de T ´e (n(cid:48) − 1) + (n(cid:48)(cid:48) − 1) + 1 =
(n(cid:48) + n(cid:48)(cid:48)) − 1 = n − 1.

(II) ⇒ (III) Se T fosse desconexo, cada componente seria uma ´arvore. Por
indu¸c˜ao, o n´umero de arestas em cada componente ´e inferior em uma unidade ao
n´umero n de v´ertices e o n´umero total de arestas seria inferior a n − 1. Portanto, T
´e conexo e tem n − 1 arestas.

(III) ⇒ (IV ) A retirada de qualquer aresta separa o grafo, uma vez que n − 2
arestas n˜ao s˜ao suﬁcientes para conectar o grafo. Portanto, T ´e conexo e toda aresta
´e uma ponte.

(IV ) ⇒ (V ) Supondo que exista mais de um caminho entre dois v´ertices, o grafo
apresentaria um ciclo e uma aresta que n˜ao separaria o grafo. Portanto, todo par de
v´ertices de T ´e ligado por apenas um caminho.

(V ) ⇒ (V I) Supondo que T cont´em um ciclo, obteria-se um par de v´ertices ligado
por mais de um caminho. A adi¸c˜ao de uma aresta uv encadeada com o ´unico caminho
entre u e v resulta num ciclo. Se este ciclo n˜ao fosse ´unico, a retirada da aresta uv
deixaria dois caminhos distintos entre u e v.

(V I) ⇒ (I) Cada aresta e de T ´e uma ponte, pois n˜ao est´a contida em qualquer
ciclo. Logo, todo par de v´ertices de T ´e ligado por um ´unico caminho. Se T contivesse
um ciclo, haveria um par de v´ertices com mais de um caminho. Assim, T n˜ao cont´em

1Uma aresta de um grafo ´e uma ponte se n˜ao pertence a um circuito

Cap´ıtulo 2. No¸c˜oes de Grafos

15

ciclos, mas a adi¸c˜ao de uma aresta produz um ´unico ciclo. Portanto T ´e conexo e
n˜ao cont´em ciclos. Logo, T ´e uma ´arvore.

Figura 2.17: Grafo: ´arvore

Deﬁni¸c˜ao 2.5.2. Seja G = (V,E) um grafo conexo n˜ao orientado. Uma ´arvore
geradora A = (V (cid:48), E(cid:48)) de G ´e um subgrafo conexo sem ciclos que possui todos os
v´ertices de G.

´Arvore geradora ´e deﬁnida para componentes conexos de grafos. Um subgrafo de

um grafo G ´e gerador se cont´em todos os v´ertices de G.

Teorema 2.5.3. Todo grafo conexo cont´em uma ´arvore geradora.

[3] Seja G um grafo conexo. Se G n˜ao apresenta circuitos, temos uma
Prova:
´arvore geradora. Se G tem um circuito, ent˜ao podemos tirar uma aresta do circuito,
resultando um subgrafo conexo de G. Repetindo esse processo at´e n˜ao restar nenhum
circuito, obt´em-se uma ´arvore geradora de G.

Teorema 2.5.4. Toda ´arvore geradora de um grafo G = (V, E) com n v´ertices tem
exatamente n − 1 arestas.

Prova: A prova ser´a feita por indu¸c˜ao em n.

(i) Para n = 1. Tem-se uma ´arvore com apenas um v´ertice e nenhuma aresta.
(ii) Suponha que o teorema ´e v´alido para n = k, k ≥ 1 (hip´otese de indu¸c˜ao). Se
a ´arvore tem k v´ertices, ent˜ao ela ter´a k − 1 arestas. Seja A uma ´arvore geradora
qualquer com k + 1 v´ertices e seja |EA| o seu n´umero de arestas. Como k ≥ 1, temos
|EA| ≥ 1, a ﬁm de que A seja conexo. Retirando uma aresta qualquer de A, temos
uma nova ´arvore geradora A(cid:48) com k v´ertices e |EA| − 1 arestas. Se a ´arvore tem k
v´ertices, pela hip´otese de indu¸c˜ao ela deve ter k −1 arestas. Portanto, |EA|−1 = k −1
e, assim, |EA| = k.

Cap´ıtulo 2. No¸c˜oes de Grafos

16

2.6 Colora¸c˜ao

Os problemas de colora¸c˜ao est˜ao associados com a colora¸c˜ao de mapas, de modo
que regi˜oes adjacentes n˜ao podem ter a mesma cor. Considera-se cada regi˜ao como
um v´ertice do grafo e cada fronteira entre duas regi˜oes como aresta que liga os dois
v´ertices correspondentes.

Se G ´e um grafo simples, a atribui¸c˜ao de cores para cada um dos v´ertices, de
modo que v´ertices adjacentes apresentem cores diferentes, ´e uma colora¸c˜ao para G.
O n´umero crom´atico de G ´e o menor n´umero de cores necess´ario para colorir G e
´e denotado por χ(G). Se χ(G) = 1, temos um grafo nulo. Se χ(G) = 2 temos um
grafo bipartido n˜ao nulo como mostra o pr´oximo teorema.

Teorema 2.6.1. Um grafo G ´e bipartido se, e s´o se, χ(G) = 2.

Prova: (⇒) Se G ´e bipartido, basta corresponder cada um dos dois subconjuntos de
v´ertices a uma cor distinta. (⇐) Se um grafo ´e tal que χ(G) = 2, ent˜ao basta separar
os v´ertices em dois subconjuntos de acordo com as duas cores usadas na colora¸c˜ao
do grafo. Por deﬁni¸c˜ao, n˜ao podemos ter dois v´ertices adjacentes com a mesma cor.
Desse modo, s´o haver´a arestas de um v´ertice de um dos subconjuntos a um v´ertice
do outro subconjunto. Logo, o grafo ´e bipartido.

Em termos de colora¸c˜ao de grafos, o teorema das quatro cores foi um desaﬁo que
perdurou por mais de cem anos. Uma consequˆencia do Teorema das Quatro Cores
´e que o n´umero crom´atico de um grafo planar n˜ao ´e maior que 4. Uma prova do
teorema foi feita por K. Appel e W. Haken em 1976. [10]

Uma das aplica¸c˜oes mais conhecidas de colora¸c˜ao est´a no Sudoku [15]. A resolu¸c˜ao
de uma instˆancia equivale a encontrar uma 9-colora¸c˜ao num grafo de 81 v´ertices,
conforme indicado na ﬁgura 2.18.

Figura 2.18: Aplica¸c˜ao de colora¸c˜ao de grafos: Sudoku.

Cap´ıtulo 2. No¸c˜oes de Grafos

17

2.7 Teoremas, problemas e outros resultados

Alguns teoremas e resultados da Teoria de Grafos tem contribu´ıdo para a resolu¸c˜ao
de problemas de localiza¸c˜ao, organiza¸c˜ao de campeonatos esportivos, simula¸c˜ao de
redes el´etricas, estruturas moleculares e novos compostos qu´ımicos.

Leonhard Euler, no s´eculo XVIII, provou um teorema que originalmente tratava
de arestas, faces e v´ertices de poliedros convexos. Esse teorema pode tamb´em ser
aplicado a grafos. A correspondˆencia entre v´ertices de um poliedro com os v´ertices
de um grafo j´a foi vista antes. No caso das faces, em um grafo se trata das regi˜oes
obtidas pela representa¸c˜ao geom´etrica de grafos com pelos menos um ciclo.

Teorema 2.7.1. (Rela¸c˜ao de Euler). Se um grafo planar conexo apresenta v
v´ertices, a arestas e f faces, ent˜ao v + f = a + 2.

Prova: A prova ser´a feita por indu¸c˜ao em a (n´umero de arestas).

(i) Para a = 1, tem-se f = 1 e v = 2.
(ii) Suponha que o teorema seja v´alido para um grafo planar conexo qualquer
com menos de a + 1 arestas. Se for uma ´arvore, f = 1 (apenas uma regi˜ao, pois
´arvores s˜ao ac´ıclicas) e v = a + 1. Temos v + f − a = a + 1 + 1 − a = 2. Se apresentar
um ciclo, ao retirar uma aresta, o grafo ﬁca com f − 1 faces. Pela hip´otese de indu¸c˜ao,
a rela¸c˜ao vale para o novo grafo. Assim, (f − 1) + v = (a − 1) + 2 e ﬁnalmente,
f + v = a + 2.

Outra rela¸c˜ao importante ocorre em grafo maximal planar, que se trata de um
grafo no qual n˜ao se pode acrescentar uma aresta sem comprometer sua planaridade.

Teorema 2.7.2. Em um grafo planar conexo G, temos a ≤ 3v − 6. Se a = 3v − 6,
ent˜ao G ´e maximal planar.

Prova: Cada aresta ´e contada duas vezes quando se conta as faces do grafo. Como
o grafo ´e conexo, ent˜ao cada face tem pelo menos 3 arestas. Assim:

Pela rela¸c˜ao de Euler:

Logo,

Portanto

3f ≤ 2a

f + v − a = 2,

3f + 3v − 3a = 6

2a − 3a + 3v ≥ 6

a ≤ 3v − 6

Cap´ıtulo 2. No¸c˜oes de Grafos

18

Corol´ario 2.7.3. Se n > 4, ent˜ao Kn n˜ao ´e planar

Prova: Em um grafo completo Kn temos n v´ertices e (n − 1)n/2 arestas. Pelo
teorema 2.7.2, sabe-se que 3v − a ≥ 6 em um grafo conexo e planar com v v´ertices e
a arestas. Assim, 3n − n(n − 1)/2 = (−n2 + 7n)/2 ≥ 6. Os ´unicos valores naturais
que veriﬁcam essa desigualdade s˜ao 3 e 4. Portanto, todos os grafos completos Kn,
com n ≥ 5, n˜ao s˜ao planares.

Sobre grafos bipartidos, seguem dois teoremas, sendo o primeiro necess´ario para

a compreens˜ao do segundo.

Teorema 2.7.4. Um grafo G ´e bipartido se, e somente se, n˜ao cont´em ciclos ´ımpares.

Prova: (⇒) Seja G bipartido. Sejam V1 e V2 dois subconjuntos de v´ertices de G
independentes e disjuntos. Se G cont´em um ciclo, este alterna os v´ertices de V1 e V2.
Partindo de um desses subconjuntos, para voltar ao ponto de partida, tem-se um
n´umero par de arestas. Nesse caso, o ciclo tem comprimento par. Se G n˜ao apresenta
ciclo, n˜ao h´a o que mostrar.

(⇐) Seja G um grafo onde todo ciclo ´e de comprimento par. Particione os v´ertices
em dois subconjuntos V1 e V2 independentes e disjuntos. Se n˜ao tiver nenhuma aresta
ligando dois v´ertices de V1 ou dois v´ertices de V2, G ´e bipartido. Se existir uma
outra aresta entre dois v´ertices u e w de V1 ou de V2, obt´em-se um ciclo ´ımpar, o
que contraria a hip´otese. Portanto, n˜ao pode existir outra aresta entre qualquer par
de v´ertices que est´a em V1 (igualmente para V2). Logo, G ´e bipartido.

Teorema 2.7.5. Em um grafo planar bipartido conexo G, temos a ≤ 2v − 4.

Prova: Um grafo bipartido possui apenas ciclos pares. Desse modo, cada face tem
no m´ınimo 4 arestas. Assim:

Pela rela¸c˜ao de Euler:

Logo,

Portanto

4f ≤ 2a

f + v − a = 2

4f + 4v − 4a = 8

2a − 4a + 4v ≥ 8

a ≤ 2v − 4

A partir deste teorema, percebe-se que o grafo bipartido completo de seis v´ertices
K3,3 n˜ao ´e planar. Esse resultado soluciona um problema que muitas vezes ´e
apresentado como desaﬁo ou passatempo. Trata-se do problema de conectar trˆes

Cap´ıtulo 2. No¸c˜oes de Grafos

19

casas a cada uma de trˆes infraestruturas b´asicas como energia, ´agua e telefone.
Pelo teorema 2.7.5, percebe-se que n˜ao h´a solu¸c˜ao para tal desaﬁo, pois a = 9 e
2v − 4 = 2 × 6 − 4 = 8.

Figura 2.19: O desaﬁo das trˆes casas. [26]

Corol´ario 2.7.6. Se G ´e um grafo simples conexo e planar, ent˜ao G tem um v´ertice
de grau menor ou igual a 5.

Prova:

1o caso: G com um ou dois v´ertices. A aﬁrmativa ´e v´alida.
2o caso: G com pelo menos trˆes v´ertices. Pelo teorema 2.7.2, sabe-se que a ≤ 3v−6
e, da´ı, 2a ≤ 6v − 12. Supondo que o grau de cada v´ertice fosse maior ou igual a 6,
o grafo teria um grau total maior ou igual a 6v. A representa¸c˜ao do grau total do
grafo com a quantidade de arestas resultaria em 2a ≥ 6v. Tem-se uma contradi¸c˜ao.
Portanto, um v´ertice, pelo menos, deve ter grau menor ou igual a 5.

Considere a hip´otese de que os v´ertices de um grafo possuam grau maior ou igual

a 3. Tal considera¸c˜ao ´e essencial para o resultado a seguir.

Teorema 2.7.7. Sendo o mapa um grafo plano, todo mapa tem ao menos duas faces
com n´umero m´aximo de 5 arestas cada

Prova: [40] Considere um grafo planar com v v´ertices, a arestas e f faces. Se cada
v´ertice ´e extremidade de pelo menos trˆes arestas e cada aresta possui dois v´ertices
como extremidades, ao contar o menor n´umero poss´ıvel de extremidades de arestas
do mapa, conta-se o triplo do n´umero total de v´ertices.

Assim, 3v ≤ 2a e, da´ı, 3v − 2a ≤ 0. Pela Rela¸c˜ao de Euler, temos:

6 = 3v − 3a + 3f ≤ 2a − 3a + 3f = 3f − a

Sendo fn o n´umero de faces delimitadas por n arestas, temos:

3f − a ≥ 6

f1 + f2 + f3 + ... = f

Cap´ıtulo 2. No¸c˜oes de Grafos

20

Ao contar as arestas de todas as faces, cada aresta ser´a contada duas vezes:

Levando em conta que

f1 + 2f2 + 3f3 + ... = 2a

6f − 2a ≥ 12,

temos

Portanto

(6f1 + 6f2 + 6f3 + 6f4 + ...) − (f1 + 2f2 + 3f3 + ...) ≥ 12

5f1 + 4f2 + 3f3 + 2f4 + f5 − f7 − 2f8 − 3f9 − ... ≥ 12

Desse modo, f1, f2, f3, f4, f5 n˜ao podem ser todos nulos. Se 5f1 +4f2 +3f3 +2f4 +f5 ≥
12, na lista f1, f2, f3, f4, f5 h´a pelo menos dois n˜ao nulos ou um deles ´e maior ou
igual a 12. A conclus˜ao imediata ´e que o mapa tem ao menos duas faces com um
m´aximo de 5 arestas.

Essa prova mostra que todo mapa tem dois pa´ıses com no m´aximo 5 vizinhos
cada. Essa propriedade ´e essencial para provar o teorema das cinco cores que diz que
um grafo G ´e planar simples quando seu n´umero crom´atico ´e menor ou igual a 5 [23].

Figura 2.20: Aplica¸c˜ao de colora¸c˜ao de grafos: programa¸c˜ao de hor´arios. [15]

Uma das aplica¸c˜oes de colora¸c˜ao de grafos est´a na programa¸c˜ao de hor´arios. Esse
tipo de problema consiste em determinar os hor´arios das disciplinas de modo que
todos os alunos matriculados assistam as aulas sem conﬂitos de hor´arios. No grafo
que representa a situa¸c˜ao problema, as disciplinas s˜ao os v´ertices. Quando existir
alunos em comum, os v´ertices s˜ao adjacente, como ilustrado no exemplo da ﬁgura
2.20.

Sobre os poliedros de Plat˜ao, os grafos platˆonicos est˜ao associados a cada um
deles: tetraedro, hexaedro, octaedro, dodecaedro e icosaedro. Aﬁrma-se que existem
somente cinco tipo de poliedros de Plat˜ao ou regulares.

Teorema 2.7.8. H´a somente cinco poliedros regulares ou de Plat˜ao.

Prova: [41] Seja x o n´umero de lados de cada face do poliedro e y o n´umero de
arestas incidentes em cada v´ertice. Sejam A, F e V, respectivamente, o n´umero de

Cap´ıtulo 2. No¸c˜oes de Grafos

21

arestas, faces e v´ertices do poliedro. Sabe-se que:

Assim,

e

2A = xF = yV.

A = xF/2

V = xF/y

Pela rela¸c˜ao de Euler, tem-se:

de onde segue que

xF/2 − xF/y + F = 2

F = 4y/(2y + 2x − yx)

Uma vez que o numerador 4y ´e sempre positivo, deve-se ter o denominador

2y + 2x − yx maior que zero. Logo, 2x/(x − 2) > y.

Sabe-se que y ≥ 3, o que implica em x < 6. Desse modo, as possibilidades s˜ao:

x = 3 → F = 4y/(6 − y) → y = 3 → F = 4(T etraedro)

x = 3 → F = 4y/(6 − y) → y = 4 → F = 8(Octaedro)

x = 3 → F = 4y/(6 − y) → y = 5 → F = 20(Icosaedro)

x = 4 → F = 4y/(8 − 2y) → y = 3 → F = 6(Hexaedro)

x = 5 → F = 4y/(10 − 3y) → a = 3 → F = 12(Dodecaedro)

Outro problema ´e o de conex˜ao de peso m´ınimo, associado `a deﬁni¸c˜ao 2.5.2 de
´arvore geradora. Dado G um grafo valorado qualquer, qual ´e a ´arvore geradora de
menor valor? A resposta desse problema ´e obtida por meio do Algoritmo de Kruskal.
Nesse procedimento, escolhe-se uma aresta de menor valor, de modo que n˜ao se forme
ciclo, e acrescenta-se `a ´arvore. A ´arvore ser´a ﬁnalizada quando a − 1 arestas tiverem
sido tomadas. Essa ´e a ´arvore ´otima, isto ´e, a ´arvore geradora minimal.

Em rela¸c˜ao aos grafos eulerianos, o problema Chinˆes do Carteiro ´e uma importante
aplica¸c˜ao. Dado um grafo pesado 2 conexo G = (V, E), deseja-se encontrar um
caminho fechado de peso m´ınimo que atravesse cada aresta de G ao menos uma
vez. Chama-se percurso do carteiro qualquer caminho fechado que atravesse cada

2Se `as arestas tiverem associado um peso ou custo, o grafo passa a chamar-se grafo pesado

Cap´ıtulo 2. No¸c˜oes de Grafos

22

aresta de G pelo menos uma vez. Esse caminho n˜ao precisa ser necessariamente de
peso m´ınimo. Um caminho nessa condi¸c˜oes ´e denominado percurso ´otimo do carteiro
chinˆes.

Se o grafo G for euleriano, ent˜ao qualquer circuito euleriano ´e um percurso
´otimo do carteiro chinˆes. Se G n˜ao for euleriano, constr´oi-se um grafo euleriano G1
duplicando algumas arestas de G. Tais arestas devem ser escolhidas de modo a obter
um grafo euleriano com peso m´ınimo. A ideia de fazer o carteiro percorrer ruas
repetidas de forma econˆomica refor¸ca a ideia de que n˜ao h´a necessidade de visitar
cada aresta mais do que duas vezes. [39]

Corol´ario 2.7.9. Um grafo G conexo ´e semieuleriano se, e somente se, possui no
m´aximo um par de v´ertices de grau ´ımpar.

Prova:

(⇒) Seja G um grafo de comprimento m semieuleriano. G representa uma trilha
m´axima aberta de comprimento m que come¸ca em vk e termina em vp. Como a
trilha ´e aberta, temos que vk (cid:54)= vp. Logo, tanto vk e vp possuem graus ´ımpares, pois
a trilha n˜ao volta por onde come¸cou.

(⇐) Seja G o grafo conexo com um par de v´ertices de grau ´ımpar, vk e vp. Pelo
teorema de Euler sobre grafos eulerianos, acrescentando uma aresta de vk a vp, os
graus de todos os v´ertices se tornam pares. Assim, existe uma trilha fechada de
comprimento m + 1 que come¸ca em vk e termina em vp. Tamb´em existe uma trilha
aberta de comprimento m que come¸ca em vk e termina em vp, descrevendo assim um
caminho semieuleriano.

Um grafo hamiltoniano ´e a solu¸c˜ao do problema do Caixeiro Viajante. Nesse
problema, sup˜oe-se que a ´area de venda de um caixeiro viajante inclua v´arias cidades.
Muitas delas est˜ao conectadas aos pares por rodovias. O caixeiro precisa visitar cada
cidade. Procura-se estabelecer uma viagem que o leve novamente para o ponto de
partida, de modo que ele visite cada cidade apenas uma vez.

O problema do Caixeiro Viajante pode ser modelado por meio de um grafo

G(V,E), sendo:

V = {x/x ´e uma cidade}

E = {(x1, x2)/existe uma estrada que conecta as cidades x1 e x2}

A estrada que conecta as cidades x1 e x2 n˜ao passa por nenhuma outra cidade.
Desse modo, resolve-se o problema veriﬁcando se G ´e hamiltoniano. O teorema a
seguir fornece uma condi¸c˜ao suﬁciente para um grafo ser hamiltoniano.

Teorema 2.7.10. (Teorema de Dirac) Se G ´e um grafo simples de ordem n ≥ 3
e d(v) ≥ n/2 para todo v ∈ V (G), ent˜ao G ´e hamiltoniano.

Prova:

A demonstra¸c˜ao ser´a feita por absurdo. Supondo que a aﬁrma¸c˜ao seja falsa.
Assim, existe um grafo simples n˜ao hamiltoniano maximal G de ordem n ≥ 3 que

Cap´ıtulo 2. No¸c˜oes de Grafos

23

satisfaz a condi¸c˜ao do teorema. Em um grafo maximal n˜ao hamiltoniano, qualquer
par de v´ertices n˜ao adjacentes u, v em G proporciona um grafo G + uv hamiltoniano,
o que implica na existˆencia de um caminho que percorre todos os v´ertices.

´E ´obvio que G n˜ao ´e completo, pois caso contr´ario seria hamiltoniano. Portanto,
existem v´ertices u e v n˜ao adjacentes em G. Seja H := G + uv. Pela maximalidade
de G, temos que H ´e hamiltoniano. Assim, todo circuito hamiltoniano em H precisa
conter a aresta uv. Ent˜ao G tem um caminho hamiltoniano (u = v1, v2, v3,..., vn = v).
Se vi ´e adjacente a u, ent˜ao vi−1 n˜ao ´e adjacente a v. Caso contr´ario, ter´ıamos um
circuito hamiltoniano em G, contrariando a escolha de G.

Portanto, qualquer que seja o v´ertice adjacente a u, existe um v´ertice pertencente
a V (G)\{v} que n˜ao ´e adjacente a v. Assim, d(v) ≤ n − 1 − d(u). Sendo g(u) ≥ n/2,
temos g(v) ≤ n − 1 − n/2 = n/2 − 1. Dessa contradi¸c˜ao, conclui-se que a aﬁrma¸c˜ao
´e verdadeira.

Em um grafo G = (V, E), um conjunto independente de v´ertices VIN D de G ´e um
subconjunto de V em que n˜ao existe nenhuma aresta entre qualquer par de elementos
de VIN D, conforme exemplo da ﬁgura 2.21. Um conjunto independente (maximal) em
um grafo ´e um conjunto de v´ertices n˜ao adjacentes entre si que n˜ao est´a estritamente
contido em outros conjuntos independentes. O n´umero de independˆencia, denotado
por α(G), ´e o tamanho do maior conjunto independente. [35]

Figura 2.21: Conjunto independente. [35]

Teorema 2.7.11. Se α(G) > n/2, ent˜ao G n˜ao ´e hamiltoniano (n ´e o n´umero de
v´ertices).

Prova: Em um conjunto independente, dois v´ertices fazem parte de um mesmo
percurso somente se houver pelo menos um v´ertice intermedi´ario. Esse v´ertice dever´a
ser vizinho de ambos. Se o grafo G apresenta um conjunto independente com mais de
n/2 v´ertices, n˜ao existir´a v´ertices intermedi´arios em quantidade suﬁciente de modo
que exista um percurso fechado. Logo, G n˜ao ´e hamiltoniano.

Outro problema cuja solu¸c˜ao poder ser modelada com grafos est´a relacionado
ao jogo de xadrez. O problema do cavalo questiona se ´e poss´ıvel percorrer todo o

Cap´ıtulo 2. No¸c˜oes de Grafos

24

tabuleiro visitando cada casa uma ´unica vez e retornando `a casa de origem. No jogo
de xadrez, o movimento do cavalo ocorre duas casas em um sentido (horizontal ou
vertical) e uma casa no outro sentido (vertical ou horizontal). Esse problema pode
ser modelado por um grafo G(V, E) sendo:

V = {x/x ´e uma casa do tabuleiro de xadrez}

E = {(x1, x2)/x2 ´e atingida por um ´unico movimento de cavalo}

.

.

A solu¸c˜ao do problema consiste em veriﬁcar se G ´e hamiltoniano. O grafo G
cont´em 64 v´ertices e 168 arestas, com in´umeros ciclos hamiltonianos, um dos quais
est´a indicado na ﬁgura 2.22.

Figura 2.22: Um dos ciclos hamiltonianos na solu¸c˜ao do problema do cavalo.
[4]

O problema do menor caminho consiste em obter o caminho de menor custo entre
dois v´ertices v1 e v2 em um grafo G com pesos nas arestas. O algoritmo que soluciona
este problema foi determinado pelo cientista da computa¸c˜ao Edsger Wybe Dijkstra
em 1952. O algoritmo de Dijkstra considerava que para ir do v´ertice v1 ao v´ertice
v2 deve-se partir do v´ertice v1 e, ao longo do processo, adicionar a ele os v´ertices
cujos menores custos (ou distˆancias de v1) j´a foram determinadas. Se o v´ertice vi
est´a fora desse conjunto, toma-se o seu custo a partir de v1 e avalia-se se esse custo
efetivamente ´e maior ou menor que v´ertice atual (v´ertice que est´a sendo considerado
como o de menor custo at´e o momento). O procedimento se encerra ao chegar em v2.
No exemplo da ﬁgura 2.23, foram necess´arias seis itera¸c˜oes para determinar o
menor caminho. No grafo em quest˜ao, deseja-se sair do v´ertice 5 e chegar ao v´ertice 2.
A solu¸c˜ao ´e dada pela sequˆencia de v´ertices 5, 6, 4, 1, 3, 2 com custo correspondente
igual a 9.

Cap´ıtulo 2. No¸c˜oes de Grafos

25

Figura 2.23: Exemplo de aplica¸c˜ao do algoritmo de Dijkstra. [16]

Grafos, problemas e algoritmos

3

Os grafos s˜ao estruturas discretas que podem ser utilizadas na representa¸c˜ao e
resolu¸c˜ao de v´arios problemas em Topologia, Programa¸c˜ao, L´ogica, Cartograﬁa, entre
outras. Os algoritmos associados a esses problemas permitem veriﬁcar a existˆencia
de caminhos para ir de um objeto a outro seguindo determinadas conex˜oes.

O modelo b´asico de grafo permite veriﬁcar quais s˜ao os elementos envolvidos
(v´ertices) e quais elementos est˜ao associados (arestas). “Um modelo ´e uma estrutura
de uma realidade com a qual nos interessa trabalhar, constru´ıda de modo a conter
aquilo que mais nos interessa e de forma que nos permita obter as respostas de que
necessitamos”. [11] Os modelos podem se apresentar prontos, podem ser adaptados
ou mesmo constru´ıdos. Resolver um modelo consiste em encontrar respostas ao
problema que a ele est´a associado. Por´em, nem todo modelo tem solu¸c˜ao e, mesmo
sendo solucion´avel, o procedimento pode ser dif´ıcil de se encontrar.

Com o avan¸co da Ciˆencia da Computa¸c˜ao, alguns problemas, como o da colora¸c˜ao
de grafos usando apenas quatro cores, passaram a ser abordados com ˆexito por meio
de algoritmos.

3.1 Algoritmos

Deﬁni¸c˜ao 3.1.1. Um algoritmo ´e um conjunto de passos para realizar uma tarefa,
aplicado em etapas repetitivas e com eventuais desvios l´ogicos (aberturas de caminhos
para duas op¸c˜oes, conforme a condi¸c˜ao que ele cont´em seja satisfeita ou n˜ao). [11]

Exemplos simples de algoritmos podem ser encontrados no cotidiano como uma

receita de bolo ou quem vai da casa para escola:

• passo 1: pegar ˆonibus at´e a esta¸c˜ao.

• Passo 2: pegar o metrˆo.

• Passo 3: andar da esta¸c˜ao at´e a escola.

26

Cap´ıtulo 3. Grafos, problemas e algoritmos

27

Na Ciˆencia da Computa¸c˜ao, um algoritmo ´e um conjunto de passos para que
um programa de computador, utilizado determinada linguagem, possa realizar uma
tarefa. Encontrar bons algoritmos e saber quando aplic´a-los ´e fundamental para a
escrita de programas relevantes.

Alguns conceitos s˜ao essenciais para a compreens˜ao e pr´atica na implementa¸c˜ao

dos algoritmos envolvendo grafos que ser˜ao apresentados nesse cap´ıtulo.

• Vari´avel: espa¸co reservado na mem´oria do computador para guardar informa-
¸c˜oes que ser˜ao utilizadas ao longo do c´odigo do programa. Pode ter seu valor
alterado ao longo do programa de acordo com a conveniˆencia.

• Matriz (array): cole¸c˜ao de vari´aveis de mesmo tipo, acess´ıveis com um ´unico
nome e armazenados contiguamente na mem´oria. Esse conceito ´e diferente do
conceito de matriz em ´Algebra Linear.

• Vetor: matriz de uma s´o dimens˜ao. A individualiza¸c˜ao de cada vari´avel de um

vetor ´e feita por meio do uso de ´ındices.

• Instˆancia de um problema computacional: ´e uma caso particular do problema,
esp´ecie de exemplo, amostra ou ilustra¸c˜ao. Cada instˆancia ´e deﬁnida por um
conjunto de dados.

• Loop: estruturas de repeti¸c˜ao executadas at´e que alguma condi¸c˜ao seja atendida.

• Programa¸c˜ao dinˆamica: nome fantasia para recurs˜ao com uma tabela. Em
vez de resolver subproblemas recursivamente, resolve-se sequencialmente e
armazena-se suas solu¸c˜oes em uma tabela.

• Complexidade de tempo: medida que expressa a eﬁciˆencia em termos de tempo
de execu¸c˜ao. Na an´alise de algoritmos veriﬁca-se o n´umero de opera¸c˜oes
consideradas relevantes que foram realizadas pelo algoritmo. Em seguida,
expressa-se esse n´umero como uma fun¸c˜ao de n, sendo n um parˆametro que
caracteriza o tamanho da entrada do algoritmo.

Exemplo 3.1.2. Um recepcionista de cinema precisa conferir os bilhetes e mostrar
qual ´e a sala que vai passar o ﬁlme escolhido. Caso o cliente esteja 30 minutos
adiantado, o recepcionista informa que a sala ainda n˜ao est´a aberta. Em caso de
atraso de 30 minutos, ele ´e informado que n˜ao pode entrar.

Nesse algoritmo, h´a um ﬂuxo que pode seguir diferentes caminhos de acordo com
a situa¸c˜ao encontrada. Tratam-se dos desvios l´ogicos, aqui representados pelo “se”.
Esse algoritmo possui uma representa¸c˜ao gr´aﬁca, denominada ﬂuxograma. Nele,
os losangos indicam as decis˜oes que s˜ao tomadas a ﬁm de executar o passo seguinte,
conforme indicado na ﬁgura 3.2.

Exemplo 3.1.3. Algoritmo da multiplica¸c˜ao de dois n´umeros inteiros positivos.

Cap´ıtulo 3. Grafos, problemas e algoritmos

28

Figura 3.1: Exemplo de algoritmo: recepcionista de cinema. [19]

Figura 3.2: Exemplo de ﬂuxograma: recepcionista de cinema.

A boa deﬁni¸c˜ao do algoritmo, isto ´e, clareza nos procedimentos, ´e essencial para
a execu¸c˜ao eﬁciente. Uma calculadora, ao realizar a multiplica¸c˜ao de dois n´umeros
positivos, executa um algoritmo que efetua somas at´e um n´umero determinado de
vezes conforme indicado na ﬁgura 3.3.

Cap´ıtulo 3. Grafos, problemas e algoritmos

29

Figura 3.3: Exemplo de algoritmo na computa¸c˜ao: multiplica¸c˜ao de dois n´umeros
inteiros positivos. [19]

No algoritmo da ﬁgura 3.3 temos quatro vari´aveis:

numero1, numero2,

resultado,

contador : Inteiro.

A vari´avel armazena dados em um espa¸co alocado na mem´oria. O s´ımbolo <-
atribui valor `a vari´avel enquanto o comando ler(numero1) indica que o algoritmo
est´a lendo o que o usu´ario digita e, em seguida, armazena na vari´avel indicada. O
comando Enquanto ´e uma estrutura de repeti¸c˜ao para controle de ﬂuxo. Finalmente,
o comando escrever(resultado) exibe o valor da vari´avel resultado.

A an´alise de algoritmo proporciona uma medida objetiva de desempenho que ´e
proporcional ao tempo de execu¸c˜ao do algoritmo. Sabe-se que o tempo de execu¸c˜ao
depende do algoritmo, do conjunto de instru¸c˜oes do computador, da qualidade do
compilador e da habilidade de quem realiza a programa¸c˜ao. Entretanto, o tempo
de execu¸c˜ao de um algoritmo, pode ser dimensionado pela quantidade de opera¸c˜oes
primitivas executadas. Por essa raz˜ao, a complexidade tamb´em ´e conhecida como
esfor¸co requerido ou quantidade de trabalho. No pior caso, considera-se a instˆancia
que faz o algoritmo funcionar mais lentamente. A sua m´edia ´e dada pela considera¸c˜ao
de todas as poss´ıveis instˆancias e seus respectivos tempos.

O c´alculo da complexidade se d´a atrav´es do espa¸co de mem´oria que est´a sendo
utilizado pelo algoritmo ou pelo tempo necess´ario para computador o resultado
segundo uma instˆancia do problema de tamanho n (parˆametro que caracteriza o

Cap´ıtulo 3. Grafos, problemas e algoritmos

30

tamanho da entrada do algoritmo). A lista a seguir apresenta uma compara¸c˜ao entre
as complexidades (nota¸c˜ao O).

• O(1) : constante, isto ´e, n˜ao cresce com o tamanho do problema.

• O(log2(log2(n))) : muito r´apido.

• O(log2(n)) : logar´ıtmico (muito bom).

• O(n) : linear (se algo n˜ao pode ser determinado sem o exame total da entrada,

´e o melhor que se pode esperar).

• O(n(log2(n))) : considerado o limite de diversos problemas pr´aticos como a

ordena¸c˜ao de uma cole¸c˜ao num´erica, por exemplo.

• O(nk) : polinomial (aceit´avel se n for pequeno).

• O(kn), O(n!), O(nn) : exponecial (deve ser evitado).

A seguinte hierarquia de fun¸c˜oes pode ser deﬁnida do ponto de vista assint´otico:

1 ≺ log2(log2(n)) ≺ log2(n) ≺ n(cid:15) ≺ nc ≺ n(log2(n)) ≺ cn ≺ nn ≺ ccn.

onde (cid:15) e c s˜ao constantes em que 0 < (cid:15) < 1 < c.

Figura 3.4: Hierarquia de fun¸c˜oes. [43]

Cap´ıtulo 3. Grafos, problemas e algoritmos

31

3.2 Matriz de Adjacˆencia.

A representa¸c˜ao computacional de um grafo ´e feita atrav´es de uma estrutura que
corresponde de forma ´unica a um grafo dado, al´em da possibilidade de se armazenar
e manipular em um computador. No entanto, a representa¸c˜ao por meio de diagramas
de pontos de um grafo, n˜ao ´e vi´avel de armazenar e nem manipular. Nesse caso, a
matriz de adjacˆencia e a lista de adjacˆencias s˜ao estruturas usadas como forma de
representa¸c˜ao computacional de um grafo.

Deﬁni¸c˜ao 3.2.1. Seja G um grafo com n v´ertices e m arestas. A matriz de adjacˆencia,
de ordem n × n, denotada por X = [xij] ´e deﬁnida como xij = 1 se existe uma aresta
entre os v´ertices vi e vj ou xij = 0 caso contr´ario.

Para grafos com pesos em suas arestas, cada termo aij cont´em o r´otulo ou peso
correspondente a cada aresta. Caso n˜ao exista uma aresta de i para j, atribui-se zero
para o termo aij.

A matriz de adjacˆencia deve ser usada para grafos densos, isto ´e, grafos em que
o n´umero de arestas ´e pr´oximo do n´umero m´aximo. ´E muito ´util para algoritmos
nos quais precisa-se saber com agilidade se existe uma aresta ligando dois v´ertices.
Nesse caso, examinar a matriz tem complexidade de tempo O(n2) tendo em vista
que a ordem da matriz de adjacˆencia ´e n × n. Observa-se tamb´em que os elementos
da diagonal principal s˜ao todos nulos quando o grafo n˜ao possui la¸cos. Se h´a um
la¸co em um v´ertice vi temos xij = 1. E em um grafo simples, o grau de um v´ertice ´e
igual `a soma dos elementos de sua ﬁla (linha ou coluna) correspondente.

Figura 3.5: Exemplo de matriz de adjacˆencia. [33]

Al´em do grafo, existe o conceito de digrafo ou quiver. A distin¸c˜ao entre os
conceitos consiste no fato de que as arestas do grafo s˜ao simplesmente formadas por

Cap´ıtulo 3. Grafos, problemas e algoritmos

32

dois v´ertice, enquanto que no digrafo, as arestas possuem um v´ertice inicial e um
v´ertice ﬁnal (arestas dirigidas). Sendo assim, ´e poss´ıvel aﬁrmar que dado um digrafo
D com n v´ertices, cada termo da matriz de adjacˆencia X ´e deﬁnido por xij = 1 se
existe uma aresta direcionada do v´ertice vi para o v´ertice vj ou xij = 0 caso contr´ario.
No caso do digrafo, a matriz s´o ser´a sim´etrica se o digrafo for sim´etrico. O grau de
sa´ıda de um v´ertice vi ´e dado pela soma dos elementos da linha i e o grau de entrada,
pela soma dos elementos da coluna i. A transposta da matriz de adjacˆencia de um
digrafo D ´e a matriz de adjacˆencia do digrafo obtido pela invers˜ao da orienta¸c˜ao das
arestas de D.

Figura 3.6: Matriz de adjacˆencia para grafo e para digrafo. [28]

A lista de adjacˆencia consiste em um vetor de n listas para um grafo de n v´ertices.
Em cada posi¸c˜ao i existe uma lista onde cada elemento ´e um v´ertice adjacente ao
v´ertice i. Para grafos n˜ao orientados, as adjacˆencias s˜ao armazenadas em ambos
devem ser armazenadas em ambos os v´ertices de adjacˆencia. Em digrafos, somente
as arestas de sa´ıda devem ser armazenadas, conforme exemplo da ﬁgura 3.6.

Figura 3.7: Lista de adjacˆencias para grafo e para digrafo. [28]

Cap´ıtulo 3. Grafos, problemas e algoritmos

33

Na ﬁgura 3.7, NULL representa algo sem um valor deﬁnido. Nas listas de adja-
cˆencias, os v´ertices, em geral, s˜ao armazenados em uma ordem arbitr´aria. Por ser
compacta, ´e muito utilizada em grande parte das aplica¸c˜oes. Sua complexidade de
espa¸co ´e O(n + m) para um grafo com n v´ertices e m arestas. Por essa raz˜ao, ´e
indicada para grafos esparsos (aqueles cujos complementos s˜ao densos). Um ponto
negativo ´e a possibilidade de complexidade de tempo O(n) para determinar a existˆen-
cia ou n˜ao de uma aresta entre os v´ertices i e j uma vez que pode existir n v´ertices
na lista de adjacentes do v´ertice i.

Ao comparar a matriz de adjacˆencia com a lista de adjacˆencias, em termos de
complexidade, a matriz requer espa¸co suﬁciente para armazenar todas as arestas
do grafo completo (O(n2)). A lista requer espa¸co apenas para armazenar as arestas
existentes (O(n + m)). Desse modo, grafos pequenos usualmente s˜ao representados
por matrizes. Os grafos com arestas paralelas (aquelas que come¸cam num mesmo
v´ertice e terminam em um mesmo v´ertice) n˜ao pode, ser armazenados por meio de
matriz de adjacˆencia.

A escolha da representa¸c˜ao depende do algoritmo que ser´a implementado e da
natureza do grafo (se ele ´e disperso ou denso). Nas ﬁguras 3.8 e 3.9, s˜ao apresen-
tados exemplos de implementa¸c˜ao do preenchimento de uma matriz de adjacˆencia
considerando uma entrada de v´arios x, y, indicando rela¸c˜ao entre x − y (y − x) at´e
que x = 0 e y = 0 Observa-se que o grafo n˜ao ´e orientado.

Figura 3.8: Implementa¸c˜ao de matriz de adjacˆencias. [29]

Na ﬁgura 3.9, o operador ++ consiste em incrementar a vari´avel depois da instru¸c˜ao

atual.

Cap´ıtulo 3. Grafos, problemas e algoritmos

34

Figura 3.9: Implementa¸c˜ao de matriz de adjacˆencias. [29]

3.3 Algoritmo de Dijkstra e a busca de caminho

mais curto

O algoritmo de Dijkstra calcula o caminho com menor custo entre os v´ertices
de um grafo. Dado um v´ertice como origem da busca, o procedimento calcula o
custo m´ınimo deste v´ertice at´e todos os demais v´ertices do grafo. Apresenta pontos
positivos como a simplicidade e boa performance. Um ponto negativo ´e falta de
garantia de uma solu¸c˜ao exata com arestas de pesos negativos.

O algoritmo se inicia por meio de uma estimativa para o custo m´ınimo. Em
seguida, vai ajustando a estimativa durante a execu¸c˜ao. Para isso, considera o
fechamento de um v´ertice apenas quando obt´em-se um caminho de custo m´ınimo
do v´ertice escolhido como origem at´e o v´ertice em quest˜ao. Desse modo, mant´em-se
dois conjuntos de v´ertices:

• S ´e o conjunto dos v´ertices para os quais j´a foram determinados o caminho

mais curto.

• Q = V − S ´e o conjunto dos v´ertices que ainda est˜ao na ﬁla.

Figura 3.10: Caminho m´ınimo do v´ertice a at´e g - exemplo do resultado obtido
pelo algoritmo de Dijkstra. [8]

Cap´ıtulo 3. Grafos, problemas e algoritmos

35

No exemplo da ﬁgura 3.10 tem-se um grafo em que busca-se o menor caminho a
partir do v´ertice a at´e o v´ertice g. Na ﬁgura 3.11 est´a a tabela com passos e distˆancias
correspondentes `a aplica¸c˜ao do algoritmo de Dijkstra no grafo dado. Percebe-se a
manuten¸c˜ao de dois conjuntos, sendo que o S (v´ertices j´a determinados) est´a indicado
e o Q (v´ertices em ﬁla) est´a impl´ıcito. A indica¸c˜ao das distˆancias em cada passo
permite conhecer o menor caminho at´e aquele momento para cada v´ertice. S´o assim
o v´ertice ´e adicionado ao conjunto S, mantendo assim, as distˆancias atualizadas at´e
o ﬁnal. No grafo da ﬁgura 3.10 o menor caminho tem distˆancia igual a 6 e n˜ao passa
pelos v´ertices e e f .

Figura 3.11: Caminho m´ınimo do v´ertice a at´e g - tabela com passos e distˆancias
do algoritmo de Dijkstra. [8]

O algoritmo de Dijkstra est´a formalmente exposto na ﬁgura 3.12. O vetor utilizado
´e denominado anterior, uma vez que trata da ´ultima linha da tabela que cont´em os
passos e distˆancias atualizadas. O conjunto A, denominado aberto cont´em todos os
v´ertices do in´ıcio. O conjunto F , denominado f echado ´e vazio. Os ´ındices num´ericos
s˜ao utilizados para determinar os v´ertices.

Figura 3.12: Implementa¸c˜ao do algoritmo de Dijkstra. [11]

Cap´ıtulo 3. Grafos, problemas e algoritmos

36

Percebe-se no algoritmo formalizado que as distˆancias sempre s˜ao consideradas
a partir da origem. Os v´ertices que est˜ao em ﬁla v˜ao sendo tomados com base na
proximidade com o v´ertice de origem (partindo do mais pr´oximo). O v´ertice sai
da ﬁla para o conjunto S quando, ap´os a compara¸c˜ao das distˆancias atualizadas,
percebe-se que o menor caminho foi encontrado at´e aquele v´ertice. O processo ´e
ﬁnalizado quando o ´ultimo v´ertice ´e contemplado.

Na ﬁgura 3.13 ´e apresentado um exemplo de grafo direcionado e as etapas de

execu¸c˜ao do algoritmo.

Figura 3.13: Exemplo da execu¸c˜ao do algoritmo de Dijkstra. [20]

A partir da descri¸c˜ao apresentada na ﬁgura 3.12 ´e poss´ıvel identiﬁcar o caminho
m´ınimo. Para tal, acrescenta-se mais um vetor P [2..n], onde P [v] indica o v´ertice
que precede v no caminho mais curto. As altera¸c˜oes s˜ao simples e consistem em
inicializar o vetor P e atualiz´a-lo no mesmo momento em que D ´e atualizado. As
etapas de execu¸c˜ao est˜ao indicadas na ﬁgura 3.14.

Figura 3.14: Passos obtidos com a modiﬁca¸c˜ao do algoritmo de Dijkstra. [20]

No ﬁnal, o estado do vetor P ´e [3,1,5,1]. Para saber qual ´e caminho mais curto
entre os v´ertices 1 e 2, procura-se o valor na posi¸c˜ao 2 desse vetor (sendo que P e D
s˜ao indexados a partir de 2). O vetor indica que o ´ultimo v´ertice antes do v´ertice 2
´e o v´ertice 3. Repete-se o processo para ver o caminho mais curto entre 1 e 3. No
vetor, a posi¸c˜ao 3, tem-se o valor 1, que ´e a origem. Ent˜ao, o caminho mais curto ´e
1,3,2. [20]

A an´alise do algoritmo mostra que a sua inicializa¸c˜ao exige um tempo em O(n).
O loop ´e executado n − 2 vezes e os v´ertices de Q s˜ao visitados a cada itera¸c˜ao. Se
na primeira itera¸c˜ao, visita-se n − 1 v´ertices, na segunda, n − 2 v´ertices e assim

Cap´ıtulo 3. Grafos, problemas e algoritmos

37

sucessivamente. Sendo a soma dos termos 1 a n − 1 igual a n(n − 1)/2, deduz-se que
o tempo de execu¸c˜ao ´e em O(n2).

3.4 O algoritmo de Floyd e o problema do

menor caminho

O algoritmo de Floyd resolve o problema do menor caminho considerando todos
os pares de v´ertices de um grafo orientado e ponderado (grafo que apresenta pesos
em suas arestas). Seus resultados s˜ao os valores de tais caminhos sem se preocupar
com a listagem da sequˆencia de arestas que foram percorridas.

Possui algumas aplica¸c˜oes como a veriﬁca¸c˜ao se um dado grafo n˜ao dirigido ´e
bipartido e a determina¸c˜ao do v´ertice central (aquele que ´e acess´ıvel a partir de um
v´ertice v, isto ´e, existe um caminho de v at´e ele).

Figura 3.15: Grafo G. [42]

Uma das vantagens do algoritmo de Floyd em rela¸c˜ao ao de Dijkstra ´e a pos-
sibilidade de peso negativo na aresta, conforme grafo G indicado na ﬁgura 3.15.
Os seguintes crit´erios ser˜ao utilizados para atribui¸c˜ao dos valores na aplica¸c˜ao do
algoritmo:

• Valor inﬁnito: no caso das posi¸c˜oes das arestas n˜ao existirem.

• Valor nulo: em todos os termos da diagonal principal.

• Pesos das arestas: correspondentes aos valores das arestas que existem. [11]

A matriz de adjacˆencia ´e obtida direto do grafo, enquanto a matriz de roteamento
busca descrever o caminho m´ınimo entre cada par de v´ertice, conforme indicado na
ﬁgura 3.16. Na matriz de roteamento, todos os elementos de uma coluna devem ter
o valor de seus ´ındices, exceto aqueles que correspondem ao valor inﬁnito e aqueles
que recebem o valor nulo.

Em seguida, o algoritmo veriﬁca se existem caminhos mais curtos do que os que
est˜ao nas arestas, utilizando cada v´ertice como sendo um intermedi´ario. Se Mn×n ´e
a matriz de adjacˆencia e Rn×n ´e a matriz de roteamento, a veriﬁca¸c˜ao ´e feita por

Cap´ıtulo 3. Grafos, problemas e algoritmos

38

Figura 3.16: Matriz de adjacˆencia M e matriz de roteamento R. [42]

meio da condi¸c˜ao: mik + mkj < mij, sendo k ´e v´ertice utilizado como intermedi´ario,
i e j s˜ao, respectivamente, os ´ındices da linha e coluna. A veriﬁca¸c˜ao ´e feita em
todos os elementos da matriz de adjacˆencia, sendo que os v´ertices s˜ao utilizados como
intermedi´arios de modo ordenado, come¸cando do v´ertice n´umero 1 e prosseguindo
para os v´ertices seguintes. Se a condi¸c˜ao estabelecida ´e verdadeira, o elemento mij
recebe o valor de mik + mkj, assim como o elemento rij da matriz de roteamento
recebe o valor de rkj. Caso contr´ario, as matrizes de adjacˆencia e roteamento n˜ao
sofrer˜ao altera¸c˜oes. [42]

Figura 3.17: Matrizes de roteamento com v´ertices intermedi´arios. [42]

Para calcular o caminho m´ınimo entre cada par de v´ertices de um grafo, o
algoritmo faz n itera¸c˜oes. A cada itera¸c˜ao corresponde uma matriz n × n em que os
valores s˜ao modiﬁcados por meio da seguinte recorrˆencia:

ij = min{dk−i
dk

ik + dk−1

kj

, dk−1
ij }

Nessa recorrˆencia, dk

ij ´e o caminho entre os v´ertices i e j na k-´esima matriz de
itera¸c˜ao. O fundamento desse procedimento ´e veriﬁcar a cada itera¸c˜ao se ao incluir

Cap´ıtulo 3. Grafos, problemas e algoritmos

39

um v´ertice intermedi´ario k no caminho de i para j tem-se uma redu¸c˜ao do tamanho
do caminho j´a determinado.

Nesse algoritmo, o grafo pode conter arestas com pesos negativos, por´em n˜ao
pode conter ciclos negativos. Al´em disso, o algoritmo utiliza t´ecnica de programa¸c˜ao
dinˆamica. Nesse contexto, temos a matriz de roteamento, cujo princ´ıpio consiste em
tornar um v´ertice k pertencente a um caminho dij se, e somente se dik + dkj = dij.

A estrutura do algoritmo apresenta dois passos: [13]

• 1o passo: O v´ertices s˜ao numerados de 1 a n. Deﬁne-se uma matriz D0, cujos
ij correspondem ao valor das arestas ij, caso exista a aresta no grafo.

valores d0
Caso contr´ario, dij = ∞. Os elementos da diagonal s˜ao nulos para todo i.

• 2o passo: Para cada k = 1 . . . n s˜ao determinados sucessivamente elementos da
matriz Dk a partir dos elementos da matriz Dk−1 por meio de recorrˆencia.

Na matriz Dn, o valor do caminho m´ınimo de todos os pares de v´ertices ij do
grafo estar˜ao deﬁnidos. Nesse resultado ´e poss´ıvel determinar o centro de um grafo,
que ´e dado pelo v´ertice que apresenta a menor das distˆancias m´aximas aos demais
v´ertices do grafo. Na ﬁgura 3.18 segue a formaliza¸c˜ao do algoritmo de Floyd.

Figura 3.18: O algoritmo de Floyd. [11]

Como o algoritmo de Floyd toma um v´ertice como base da itera¸c˜ao e examina
todos os pares de v´ertices em rela¸c˜ao a ele, sua complexidade ´e O(n3). Como h´a n
v´ertices e o n´umero de pares orientados ´e n(n − 1), temos n2(n − 1) testes e, portanto,
ordem c´ubica.

3.5 O algoritmo de Kruskal e a ´arvore geradora

m´ınima

Se G(V,E) ´e um grafo conexo n˜ao direcionado e valorado, o algoritmo de Kruskal
encontra um subconjunto T de E, tal que T forme uma ´arvore em que a soma dos

Cap´ıtulo 3. Grafos, problemas e algoritmos

40

pesos ´e a menor poss´ıvel. A ´arvore geradora m´ınima ´e aquela que liga todos os
v´ertices do grafo usando as arestas com um custo total m´ınimo.

Lema 3.5.1. Uma aresta de peso m´ınimo e de um grafo estar´a em pelo menos uma
ﬂoresta com uma ou mais arestas.

Prova. [34] Por contradi¸c˜ao. Suponha que e n˜ao esteja em nenhuma ﬂoresta m´ınima
(isto ´e, grafo cujas componentes conexas s˜ao ´arvores com a menor extens˜ao poss´ıvel
em cada uma delas). Ao inserir e em uma dessas ﬂorestas, temos duas possibilidades:

• 1. Forma-se um ciclo no grafo. Assim, basta retirar qualquer outra aresta do

ciclo de modo a formar uma ﬂoresta de custo menor ou igual `a original.

• 2. N˜ao se forma um ciclo no grafo. Nesse caso, a retirada de qualquer aresta

da ﬂoresta vai formar uma solu¸c˜ao de custo que n˜ao supera a original.

Em qualquer um dos casos, temos uma contradi¸c˜ao.

Teorema 3.5.2. Sabe-se encontrar uma ﬂoresta F = (V,E) contendo arestas, isto ´e,
|E| = a, cuja soma de suas arestas ´e m´ınima.

Prova. [34] Por indu¸c˜ao no n´umero de arestas a. Para a = 0 o caso ´e trivial. Fixando
o n´umero de v´ertices, existe uma ´unica ﬂoresta com nenhuma aresta e peso nulo.
Suponha que seja poss´ıvel determinar uma ﬂoresta de peso m´ınimo com a = k − 1
arestas, 1 ≤ k < |V | (hip´otese de indu¸c˜ao). Deseja-se provar que o teorema ´e v´alido
para a = k. Pelo lema 3.5.1 conclui-se a prova.

A prova desse teorema fornece o algoritmo porque a ´arvore geradora m´ınima ´e o

mesmo que uma ﬂoresta m´ınima com |V | − 1 arestas.

No algoritmo de Kruskal, a escolha da aresta ´e feita a cada passo, iniciando pela
de menor peso. Em seguida, acrescenta-se arestas em ordem crescente de valores,
obtendo-se uma ´arvore. O processo ´e ﬁnalizado na conex˜ao da (n − 1)-´esima aresta.

Figura 3.19: Exemplo de aplica¸c˜ao algoritmo de Kruskal. [13]

Na ﬁgura 3.19, o n´umero de v´ertices ´e 6, deseja-se uma ´arvore com 5 arestas.
As arestas do grafo dado, colocadas em ordem crescente, constituem o conjunto
B = {(3,4), (3,2), (1,2), (3,5), (6,5), (1,4), (3,6), (3,1), (2,6)}. Para formar o conjunto
A com a sequˆencia de arestas que foram a ´arvore m´ınima, inicia-se pela aresta de

Cap´ıtulo 3. Grafos, problemas e algoritmos

41

menor peso (3,4). Passo a passo, as arestas v˜ao sendo inclu´ıdas at´e obter n − 1
arestas, nesse caso 5 arestas. O pr´oximo passo ´e a inclus˜ao da aresta (3,2). No
passo seguinte existem duas possibilidades: (1.4) ou (1,2). Ambas apresentam o
mesmo peso. As duas simultaneamente n˜ao podem ser escolhidas pois a´ı formaria um
ciclo. Toma-se arbitrariamente a aresta (1,2). Os dois ´ultimos passos, considerando a
ordem crescente das arestas em B, consistem em acrescentar as arestas (3,5) e (5,6).
Pelo algoritmo de Kruskal, a sequˆencia de arestas (3,4),(3,2),(1,2),(3,5),(5,6) ´e uma
´arvore m´ınima.

Nesse algoritmo, ´e melhor representar o grafo por meio de um conjunto de arestas.
Por se tratar de um algoritmo guloso, deseja-se visitar todas as arestas de uma vez.
O algoritmo guloso ´e usado em problemas de otimiza¸c˜ao com o objetivo de encontrar
um conjunto de candidatos que otimizam o valor de uma fun¸c˜ao objetivo. A partir do
conjunto vazio, o algoritmo continua passo a passo, sempre tentando pegar o melhor
peda¸co, por´em n˜ao se preocupa com as consequˆencias da escolha. Na ﬁgura 3.20, o
algoritmo de Kruskal est´a formalizado.

Figura 3.20: O algoritmo de Kruskal. [11]

Teorema 3.5.3. Se G(cid:48) ´e um subgrafo constru´ıdo pelo algoritmo de Kruskal, ent˜ao
G(cid:48) ´e uma ´arvore ´otima de G.

Prova: Seja G(cid:48) um subgrafo constru´ıdo pelo algoritmo de Kruskal. G(cid:48) ´e um subgrafo
sem ciclos maximal de G, isto ´e, n˜ao pode mais ser expandido. Portanto G(cid:48) ´e uma
´arvore geradora de G. Basta provar que G(cid:48) ´e uma ´arvore ´otima. Seja G(cid:48) uma ´arvore
geradora obtida sem peso m´ınimo. Assim, existe uma ´arvore geradora G(cid:48)(cid:48) com peso
menor que G(cid:48).

Seja e a primeira aresta escolhida para G(cid:48) de modo que e /∈ G(cid:48)(cid:48). Se e for adicionado
a G(cid:48)(cid:48) tem-se um ciclo que cont´em uma aresta ek /∈ G(cid:48). Retirando ek, obt´em-se uma
´arvore T com peso menor que G(cid:48). Assim, pelo algoritmo de Kruskal, ek seria a aresta
escolhida em lugar de e. Efetivamente, a ´arvore obtida seria a de menor peso.

A complexidade do algoritmo de Kruskal, considerando um grafo com n v´ertices
e a arestas, leva em conta o n´umero de opera¸c˜oes. Para ordenar as arestas, tem-se

Cap´ıtulo 3. Grafos, problemas e algoritmos

42

O(a · log(n)). Para inicializar os conjuntos distintos de cada componente conexa,
tem-se O(n). No pior caso, tem-se O((2a + n − 1)log(n)) para determinar e misturar
as componentes conexas. O restante das opera¸c˜oes, obt´em-se O(a). Assim, em um
grafo que apresenta a arestas, tem-se uma complexidade O(a · log(n)). [12]

3.6 O algoritmo de Prim e a ´arvore geradora de

custo m´ınimo

O algoritmo de Prim inicia em um v´ertice qualquer. Em seguida, escolhe-se a
aresta (u,v) de menor custo tal que u perten¸ca `a ´arvore e v n˜ao pertence `a essa
´arvore. A expans˜ao da ´arvore ocorre por adi¸c˜ao de arestas e respectivos v´ertices
sucessivamente. A cada v´ertice adicionado, procura-se aumentar o custo o menos
poss´ıvel. Esse procedimento se assemelha com o algoritmo de Dijkstra.

Figura 3.21: Exemplo de aplica¸c˜ao do algoritmo de Prim. [36]

O problema s´o apresenta solu¸c˜ao se o grafo for conexo. O algoritmo faz crescer
uma ´arvore at´e que ela se torne geradora. A escolha da aresta mais barata em uma
determinada etapa n˜ao leva em conta o efeito global dessa escolha. Desse modo, o
algoritmo de Prim tem perﬁl guloso. A diferen¸ca entre os algoritmos de Prim e de
Kruskal est´a na forma como cada um escolha a aresta em cada passo. No algoritmo
de Kruskal, o conjunto das arestas tomadas ´e uma ﬂoresta em que as componentes
conexas v˜ao se unindo a cada itera¸c˜ao. No algoritmo de Prim, esse conjunto nunca
deixa de ser uma ´arvore, j´a que cada aresta acrescentada une um v´ertice que est´a
fora da ´arvore com um v´ertice dentro dela.

Inicialmente considere o conjunto B com um v´ertice arbitr´ario do grafo G. Em
cada passo, o algoritmo seleciona a aresta de menor peso a partir de todas as arestas

Cap´ıtulo 3. Grafos, problemas e algoritmos

43

que incidem em algum v´ertice do conjunto B. A outra extremidade da aresta
escolhida passa a fazer parte de B. O procedimento encerra quando todos os v´ertices
de G pertencerem a B.

Figura 3.22: O algoritmo de Prim. [11]

A an´alise da complexidade desse algoritmo necessita do conceito de heap. Uma
heap ´e uma estrutura de dados organizada como uma ´arvore bin´aria equilibrada,
implementando uma ﬁla de prioridade. Por essa raz˜ao, faz-se O(log(n)) opera¸c˜oes.
[37] Portanto, a complexidade ´e O(a(log(n))) com uso de heaps e listas de adjacˆencias
de um grafo com n v´ertices e a arestas. No uso de matriz de adjacˆencia, pela
similaridade com o algoritmo de Dijkstra, a complexidade ´e O(n2).

A sequˆencia did´atica

4

A teoria dos grafos pode ser uma oportunidade de introdu¸c˜ao mais signiﬁcativa
da Matem´atica Discreta no Ensino B´asico. Os diferentes tipos de grafos e os
problemas correlatos, bem como os algoritmos correspondentes, podem contribuir
para a aprendizagem de An´alise Combinat´oria, Probabilidades e Poliedros de Plat˜ao,
assuntos previstos nos Parˆametros Curriculares Nacionais. [[7] [31] [6]]

Uma an´alise desses Parˆametros Curriculares Nacionais (PCN) evidencia que a
teoria dos grafos n˜ao ´e formalmente prevista como um dos temas curriculares. Mas
h´a competˆencia que favorece a inclus˜ao da teoria de grafos na Educa¸c˜ao B´asica, como
por exemplo, “selecionar diferentes formas de representar um dado ou conjunto de
dados e informa¸c˜oes, reconhecendo as vantagens e limites de cada uma delas”. [7]

A utiliza¸c˜ao de algoritmos tamb´em est´a contemplada em competˆencia como
“identiﬁcar as rela¸c˜oes envolvidas e elaborar poss´ıveis estrat´egias para enfrentar uma
dada situa¸c˜ao problema”. E ainda, “interpretar, fazer uso e elaborar modelos e
representa¸c˜oes matem´aticas para analisar situa¸c˜oes”.[7]

A expans˜ao do alcance da Olimp´ıada Brasileira de Inform´atica (OBI) nas escolas
da Educa¸c˜ao B´asica ´e um sinal de que h´a possibilidade de trabalho com linguagem e
l´ogica de programa¸c˜ao.

A OBI est´a organizada em trˆes modalidades. [9]

• Modalidade Inicia¸c˜ao, com resolu¸c˜ao de problemas de l´ogica e de computa¸c˜ao,

usando apenas l´apis e papel.

N´ıvel 1 - alunos at´e s´etimo ano do Ensino Fundamental.

N´ıvel 2 - alunos at´e nono ano do Ensino Fundamental.

• Modalidade Programa¸c˜ao, composta de tarefas de programa¸c˜ao com n´ıveis
variados de diﬁculdade. H´a a presen¸ca de tarefas que envolvem algoritmos e
grafos.

N´ıvel J´unior - alunos do Ensino Fundamental.

N´ıvel 1 - alunos at´e o primeiro ano do Ensino M´edio.

N´ıvel 2 - alunos at´e o terceiro ano do Ensino M´edio.

44

Cap´ıtulo 4. A sequˆencia did´atica

45

• Modalidade Universit´aria com para alunos que est˜ao cursando, pela primeira

vez, o primeiro ano de um curso de gradua¸c˜ao.

Assim como ocorre com a Olimp´ıada Brasileira de Matem´atica (OBM), h´a a
distribui¸c˜ao de medalhas de ouro, prata e bronze. Uma equipe dos quatro melhores
alunos da modalidade programa¸c˜ao ´e formada, anualmente, para representar o pa´ıs
na Olimp´ıada Internacional de Inform´atica.

A estrat´egia para resolu¸c˜ao de problemas que envolvam grafos ´e similar `a estrat´egia

proposta por Lima (1998) [25] na resolu¸c˜ao de problemas combinat´orios.

1. Postura. Coloque-se no papel da pessoa que ir´a realizar a tarefa proposta e

assim, tra¸car estrat´egias para a sua resolu¸c˜ao.

2. Divis˜ao. Sempre que poss´ıvel, divida as decis˜oes a serem tomadas em decis˜oes

mais simples, similar a subitens.

3. N˜ao adiar diﬁculdades. Se determinada decis˜ao a ser tomada for mais restrita

que as demais, essa decis˜ao deve ser tomada em primeiro lugar.

As competˆencias aqui citadas, bem como a estrat´egia apresentada em trˆes passos
para a resolu¸c˜ao de problemas que envolvem grafos, s˜ao referenciais para a sequˆencia
did´atica que ser´a apresentada a seguir.

4.1 Introdu¸c˜ao ao estudo de grafos com aux´ılio

de algoritmos de programa¸c˜ao

As atividades sobre grafos e os principais algoritmos para resolver problemas
envolvendo grafos foi estabelecida na perspectiva de sequˆencia did´atica. Segundo
Zabala (1998) [46], a sequˆencia did´atica ´e “um conjunto de atividades ordenadas,
estruturadas e articuladas para a realiza¸c˜ao de certos objetivos educacionais, que
tˆem um princ´ıpio e um ﬁm conhecidos tanto pelos professores como pelos alunos”.
A sequˆencia de atividades ´e organizada e fundamentada para a realiza¸c˜ao de certos
objetivos educacionais.

A sequˆencia did´atica foi planejada para ser realizada em trˆes aulas de 100 minutos.
O objetivo geral consistia em introduzir o estudo de grafos por meio de problemas e
algoritmos j´a bem estabelecidos para suas respectivas resolu¸c˜oes. Como objetivos
espec´ıﬁcos, esperava-se utilizar a representa¸c˜ao de grafos como representa¸c˜ao auxiliar
de modelos que resolvessem alguns problemas combinat´orios e probabil´ısticos. Al´em
disso, esperava-se uma aprendizagem mais signiﬁcativa de poliedros de Plat˜ao e a
rela¸c˜ao de Euler. Finalmente, a implementa¸c˜ao de algoritmos com uso de linguagem
de programa¸c˜ao.

Cap´ıtulo 4. A sequˆencia did´atica

46

Desse modo, a atividade foi direcionada para o segundo ano do Ensino M´e-
dio devido `a matriz curricular vigente dessa s´erie abranger An´alise Combinat´oria,
Probabilidade e Poliedros de Plat˜ao.

4.1.1 Aula 1: Grafos

A aula 1, denominada Grafos, tem como objetivo apresentar a deﬁni¸c˜ao de grafo,
suas representa¸c˜oes, conceitos fundamentais e os tipos essenciais para a segunda
se¸c˜ao.

A primeira parte inicia-se com um breve hist´orico sobre o desaﬁo das sete pontes
de K¨onigsberg, proposto para Euler, quando este visitou a cidade em 1736. O
problema inicial proposto aos alunos ´e o mesmo que foi proposto para Euler: existe
algum passeio que atravesse cada ponte uma ´unica vez e volte ao ponto de partida?
A partir do esquema usado por Euler, ´e deﬁnido grafo, apresentada sua repre-
senta¸c˜ao gr´aﬁca e estabelecido o conjunto de v´ertices e o conjunto de arestas. Uma
breve atividade sobre enumera¸c˜ao desses conjuntos ﬁnaliza essa parte.

As no¸c˜oes b´asicas de grafos inicia a segunda parte da aula, com a no¸c˜ao de
v´ertices adjacentes, la¸co e grau de um v´ertice. A ideia de matriz de adjacˆencia ´e
apresentada no decorrer da atividade que encerra a segunda parte.

A terceira parte refor¸ca alguns conceitos importantes como ordem e tamanho de
um grafo, percurso, caminho, percursos simples e complementar, ciclo, circuito, grafo
complementar e subgrafo. Uma atividade de identiﬁca¸c˜ao encerra a terceira parte e
refor¸ca os fundamentos para a ´ultima parte.

Na quarta parte, alguns grafos especiais, que ser˜ao essenciais para os algoritmos
da segunda se¸c˜ao, s˜ao apresentados. O grafo completo ´e o primeiro, seguido de uma
breve atividade de esbo¸co do grafo completo K6. Os grafos bipartido, orientado,
conexo, k-regular, ´arvore e planar s˜ao deﬁnidos sucessivamente com seus respectivos
exemplos, encerrado a primeira se¸c˜ao.

As atividades que comp˜oem a aula foram programadas para a dura¸c˜ao de apro-
ximadamente 100 minutos, incluindo a discuss˜ao das ideias, perguntas e eventuais
interven¸c˜oes da aplica¸c˜ao.

4.1.2 Aula 2: Grafos - problemas e algoritmos

A aula 2, envolvendo problemas com grafos e seus respectivos algoritmos para
solu¸c˜ao, tem como objetivo apresentar os problemas fundamentais e os respectivos
algoritmos usados para solucion´a-los. Desse modo, espera-se explorar o uso de
algoritmos e expandir horizontes para eventuais aplica¸c˜oes envolvendo linguagens
programa¸c˜ao, como j´a ocorreu am alguns problemas propostos pela OBI.

Cap´ıtulo 4. A sequˆencia did´atica

47

A aula foi dividida em trˆes partes, buscando agrupar os algoritmos de acordo com
o tipo de problema proposto. Sempre que poss´ıvel, foram apresentados algoritmos
diferentes para resolu¸c˜ao de cada tipo de problema.

A primeira parte, trata dos problemas de caminho m´ınimo. O problema ´e

apresentado usando grafos e, em seguida, o primeiro algoritmo ´e apresentado.

O algoritmo de Dijkstra ´e apresentado numa linguagem acess´ıvel e uma atividade
´e proposta. A partir de um grafo, deseja-se preencher uma tabela, obtendo-se assim,
uma trajet´oria de menor caminho. Em seguida, as etapas s˜ao apresentadas de modo
detalhado, preparando para o uso de linguagem de programa¸c˜ao.

Em seguida, o algoritmo de Floyd ´e apresentado com a sugest˜ao do uso de
matrizes. Na atividade seguinte, buscou-se determinar todas as distˆancias dos
menores caminhos entre todos os pares de v´ertices do grafo dado. Assim, por meio
da matriz de adjacˆencia, das matrizes de roteamento e o roteamento com v´ertice
intermedi´ario, busca-se solucionar o problema.

Os problemas de interliga¸c˜ao s˜ao tratados na segunda parte. Por meio da deﬁni¸c˜ao
de ´arvore, um problema de probabilidade ´e proposto para o uso da ´arvore de decis˜ao.
A ´arvore de decis˜ao ´e uma ferramenta que ao ser utilizada, d´a ao aluno a capacidade
de aprender e tomar decis˜oes. O problema proposto ´e sobre trˆes moedas lan¸cadas
ao ar com a inten¸c˜ao de saber a probabilidade de sa´ırem exatamente duas vezes o
mesmo lado (seja cara ou coroa).

Em seguida, apresenta-se a diferen¸ca entre problema de caminho m´ınimo e
problema de ´arvore e interliga¸c˜ao. Enquanto no primeiro procura-se saber o menor
custo para se ir de um v´ertice ao outro, no segundo se procura chegar ao destino de
modo mais econˆomico poss´ıvel.

Apresenta-se ent˜ao o problema da ´arvore parcial de custo m´ınimo com a aplica¸c˜ao
do algoritmo de Kruskal. O procedimento, que consiste em incluir a aresta de menor
valor, sem formar ciclo, at´e que todos os v´ertices estejam ligados, ´e usado na segunda
atividade dessa parte. Em seguida, o algoritmo ´e apresentado na forma detalhada
para a explica¸c˜ao de sua caracteriza¸c˜ao como do tipo guloso. Um teorema ´e enunciado
com sua respectiva prova, com o objetivo de mostrar que o algoritmo funciona bem.
Tendo em vista a demonstra¸c˜ao do teorema, uma atividade de ilustra¸c˜ao ´e proposta
logo a seguir.

Finalmente, essa parte se encerra com o algoritmo de Prim e uma atividade sobre
a ´arvore parcial de custo m´ınimo de um grafo dado. Para evidenciar as diferen¸cas
em rela¸c˜ao ao algoritmo anterior, a atividade apresenta o mesmo grafo usado no
algoritmo de Kruskal.

Na terceira e ´ultima parte da aula s˜ao apresentados os problemas de colora¸c˜ao.
Explicam-se os signiﬁcados de n´umero crom´atico de um grafo e n´umero crom´atico
das arestas de um grafo. Em seguida, uma atividade contextualizada ´e proposta, com
vistas a apresentar o teorema das quatro cores. Ap´os enunciar o teorema e apresentar
um exemplo, a mesma atividade ´e proposta com a utiliza¸c˜ao desse teorema.

Apesar da extens˜ao da aula, espera-se concluir as atividades em 100 minutos,
uma vez que os conceitos e propriedades essenciais foram abordadas na se¸c˜ao anterior.
Essa aula, assim como a anterior, n˜ao necessitam do uso de computador, sendo

Cap´ıtulo 4. A sequˆencia did´atica

48

opcional a consulta via internet.

4.1.3 Aula 3: Grafos - algoritmos de programa¸c˜ao

Na terceira aula foi usado o mesmo programa utilizado na OBI pela escola
pesquisada. O programa Code::Block ´e um ambiente integrado de desenvolvimento
de c´odigo aberto para a linguagem C/C++ com recursos voltados para programadores
iniciantes. Tamb´em conta com realce de sintaxe, m´ultiplos compiladores, depurador
personalizado, al´em da possibilidade de utiliza¸c˜ao de plugins que se encontram
dispon´ıveis na pagina do projeto Codeblocks. [1]

Figura 4.1: Interface do Code::Blocks [2]

A terceira aula foi adaptada do trabalho realizado por Paulo Feoﬁloﬀ com al-
goritmos para grafos em C e dispon´ıvel na p´agina da internet desenvolvida pelo
Instituto de Matem´atica e Estat´ıstica e o Departamento de Ciˆencia da Computa¸c˜ao
da Universidade de S˜ao Paulo (USP). [18]

O tema das notas dispon´ıveis na p´agina da internet [18] ´e a constru¸c˜ao de
programas eﬁcientes, capazes de resolver grandes problemas em pouco tempo. Nesse
tipo de problema ´e dado um grafo e o objetivo ´e encontrar algum tipo de objeto
dentro dele.

Todos os programas s˜ao escritos em linguagem C. Entretanto, os objetos tratados
s˜ao mais gerais que grafos: os digrafos ou grafos dirigidos. Sendo assim, alguns pontos

Cap´ıtulo 4. A sequˆencia did´atica

49

mais importantes foram transcritos tendo em vista o p´ublico alvo das atividades
(segundo ano do Ensino M´edio) e os problemas propostos na se¸c˜ao 2. Evidentemente,
n˜ao h´a a inten¸c˜ao de esgotar o assunto e nem a pretens˜ao de aprofundar nas aplica¸c˜oes
e implementa¸c˜oes dos algoritmos.

A terceira aula se inicia com a deﬁni¸c˜ao de digrafo e uma atividade para especiﬁcar
um digrafo por meio de seu conjunto de arestas dirigidas (ou arcos). Em seguida,
lista-se uma s´erie de procedimentos para representa¸c˜ao de um digrafo por meio da
matriz de adjacˆencia.

A segunda parte se inicia com a implementa¸c˜ao do algoritmo de Dijkstra, seguida
de uma atividade de programa¸c˜ao para encontrar a ´arvore de custo m´ınimo com raiz
zero (v´ertice de origem da busca, com estimativa do custo m´ınimo igual a zero).

Logo em seguida, o algoritmo de Kruskal tem sua implementa¸c˜ao indicada. Uma
atividade para encontrar a ´arvore geradora de custo m´ınimo no grafo dado ﬁnaliza a
atividade.

4.2 A aplica¸c˜ao da sequˆencia did´atica

A sequˆencia did´atica come¸cou a ser aplicada ap´os o convite extensivo `a todas as
turmas do segundo ano do Ensino M´edio da escola. O p´ublico foi formado por 16
alunos que se voluntariaram para participar das atividades, tendo em vista o universo
de 112 alunos do ano pesquisado.

Entre os alunos volunt´arios indicados na ﬁgura 4.2, temos dois medalhistas de
Olimp´ıadas de Matem´atica (alunos 9 e 16), sendo que nenhum deles tinha conhe-
cimento pr´evio do assunto, nem mesmo nas atividades do Programa de Inicia¸c˜ao
Cient´ıﬁca Jr (PIC). Dois outros alunos (10 e 11) haviam participado de duas Olim-
p´ıadas Brasileira de Inform´atica (OBI) e tinham conhecimento da linguagem de
programa¸c˜ao C. Apenas mais um aluno (14) tinha no¸c˜ao dessa linguagem de progra-
ma¸c˜ao, por´em sem nenhuma participa¸c˜ao registrada na OBI.

Entre os demais alunos, temos perﬁs diversiﬁcados, sendo cinco alunos com
desempenho maior que oito (alunos 1, 3, 7, 8 e 12), quatro alunos com desempenho
maior que cinco e n˜ao superior a oito (alunos 5, 6, 13 e 15), dois alunos (2 e 4)com
diﬁculdades cognitivas e desempenho menor que cinco (numa escala de zero a dez,
onde a m´edia para aprova¸c˜ao na escola ´e cinco).

As trˆes aulas foram realizadas no Laborat´orio de Inform´atica da escola, onde cada
um dos 16 alunos tinham `a sua disposi¸c˜ao um computador com sistema operacional
Windows/ Linux e a multiplataforma Code::Blocks. O laborat´orio conta com projetor
multim´ıdia, 29 computadores (sendo 1 para o professor) e sistema de som integrado.
As m´aquinas ﬁcam dispostas em 7 ﬁlas conforme esquema da ﬁgura 4.2, em que est´a
indicado a disposi¸c˜ao de cada um dos 16 alunos.

A aplica¸c˜ao das aulas ocorreram durante trˆes dias alternados, ao longo de duas
semanas, no contraturno (turno da tarde), com o acompanhamento do pesquisador e

Cap´ıtulo 4. A sequˆencia did´atica

50

Figura 4.2: Esquema do laborat´orio de inform´atica e a disposi¸c˜ao dos alunos

o monitor do laborat´orio da institui¸c˜ao.

A primeira aula foi aplicada numa ter¸ca-feira, de 13h30min at´e 15h10min. Os
alunos entraram no laborat´orio, ligaram suas respectivas m´aquinas e receberam a
primeira se¸c˜ao do professor. Foram repassadas as instru¸c˜oes da sequˆencia did´atica e
ap´os dez minutos, a exposi¸c˜ao do assunto se iniciou, sempre com a participa¸c˜ao dos
alunos envolvidos. As atividades foram projetadas no quadro branco do laborat´orio
para ﬁns de discuss˜ao ao longo da resolu¸c˜ao. Apesar de n˜ao ter a necessidade do uso
de computador nas duas primeiras sess˜oes, muitos alunos procuraram informa¸c˜oes
complementares na internet e alguns buscaram a fonte das ﬁguras, a ﬁm de coletar
informa¸c˜oes.

Na aula seguinte, ocorrida dois dias ap´os (numa quinta-feira), no mesmo hor´ario
do primeiro dia, os mesmos alunos compareceram e realizaram as atividades na mesma
dinˆamica do primeiro dia. As atividades ocorreram com pequenos debates entre uma
solu¸c˜ao e outra. Pelo fato de ter sido ﬁnalizada em oitenta e cinco minutos, nos
instantes ﬁnais, o professor explicou como seriam as pr´oximas atividades, envolvendo
a linguagem de programa¸c˜ao C. Apenas trˆes alunos, j´a com conhecimento pr´evio,
manifestaram interesse imediato em participar. Entre os demais alunos, nenhum
mostrou interesse em continuar ou mesmo aprender os fundamentos da linguagem de

Cap´ıtulo 4. A sequˆencia did´atica

51

programa¸c˜ao.

No ´ultimo dia, ocorrido na segunda-feira da semana seguinte, entre 13h30min e
15h00min, participaram apenas os alunos que j´a utilizaram pelo menos uma vez a
linguagem de programa¸c˜ao C, sendo que dois deles j´a haviam participado da OBI.
Nessa atividade, o pesquisador apenas distribuiu a atividade e ﬁcou observando o
desempenho dos alunos participantes. Os alunos consultaram o site que serviu de
inspira¸c˜ao para as atividades para eventuais complementos de c´odigos ou implemen-
ta¸c˜oes. [18] O trabalho com o programa Code::Block ocorreu com boa ﬂuidez, uma
vez que o programa ´e utilizado pela escola na fase de programa¸c˜ao da OBI.

4.3 An´alise dos dados coletados

A pesquisa qualitativa, com alguns poucos dados relativos a pesquisa quantitativa,
´e a base da coleta e an´alise de dados dessa pesquisa. Segundo Garnica (2004) [22], a
pesquisa qualitativa ´e caracterizada por

1. “ a transitoriedade de seus resultados;

2. a impossibilidade de uma hip´otese a priori, cujo objetivo da pesquisa ser´a

comprovar ou refutar;

3. a n˜ao neutralidade do pesquisador que, no processo interpretativo, vale-se
de suas perspectivas e ﬁltros vivenciais pr´evios dos quais n˜ao consegue se
desvencilhar;

4. que a constitui¸c˜ao de suas compreens˜oes d´a-se n˜ao como resultado, mas numa
trajet´oria em que essas mesmas compreens˜oes e tamb´em os meios de obtˆe-las
podem ser (re)conﬁguradas; e

5. a impossibilidade de estabelecer regulamenta¸c˜oes, em procedimentos sistem´ati-

cos, pr´evios, est´aticos e generalistas”.

Tais caracter´ısticas n˜ao tem efeito de regras, uma vez que o conceito de pesquisa
qualitativa ´e dinˆamico. Desse modo, optou-se pela observa¸c˜ao das atividades e
anota¸c˜oes do comportamento, recolhendo ao ﬁnal de cada se¸c˜ao, a atividade para
posterior an´alise qualitativa e, quando for o caso, quantitativa. Uma socializa¸c˜ao
com todos os alunos foi realizada ap´os os trˆes dias de atividades, proporcionando
mais dados para serem analisados.

Cap´ıtulo 4. A sequˆencia did´atica

52

4.3.1 Os grafos

Na aula 1, denominada Grafos, as deﬁni¸c˜oes foram apresentadas, bem como
caracter´ısticas e propriedades. Os alunos participaram atentamente e as atividades
foram realizadas ao longo do tempo previsto. A curiosidade em rela¸c˜ao ao tema
logo deu lugar para a associa¸c˜ao com problemas que envolvem a ideia de grafo. O
mais citado pelos alunos foi o diagrama de ´arvore (´arvore de decis˜ao) usado em
probabilidades. Outros lembraram de matrizes e apenas um aluno associou com
poliedros.

A primeira atividade 1, sobre as pontes de K¨onigsberg, a totalidade dos alunos
percebeu que n˜ao ´e poss´ıvel encontrar uma solu¸c˜ao sem acrescentar pelo menos uma
ponte. Alguns realizaram a tarefa por tentativa e erro at´e perceber a insolubilidade
do problema. O aluno 6 realizou a atividade por meio da consulta da fonte da ﬁgura
e transcreveu as informa¸c˜oes para sua folha de respostas, conforme indicado na ﬁgura
4.3. N˜ao foi percebido preju´ızo na aprendizagem devido `as fontes dispon´ıveis abaixo
das ﬁguras. A busca pelos links se mostrou como mais uma fonte de consulta.

Figura 4.3: Atividade 1.1.1 apresentada pelo aluno 6

A totalidade dos alunos tamb´em encontrou facilmente as respostas para a atividade
1.1.2. Por´em a atividade 1.2.1 teve aproveitamento m´edio de 83%, sendo o item que

1As atividades se encontram no apˆendice.

Cap´ıtulo 4. A sequˆencia did´atica

53

trata da matriz de adjacˆencia o item com maior n´umero de pequenos equ´ıvocos. Isso
decorre de outros pequenos equ´ıvocos que aconteceram de itens anteriores e que ap´os
pequenos esclarecimentos, foram amplamente compreendidos e sinalizados durante a
atividade.

Figura 4.4: Atividade 1.2.1 apresentada pelo aluno 1

Na ﬁgura 4.4, percebe-se um caso em que o la¸co n˜ao foi compreendido adequada-
mente. Entretanto, a concep¸c˜ao de matriz de adjacˆencia n˜ao ﬁca comprometida e o
aluno 1 determina a matriz esperada.

A atividade 1.3.1 ocorreu sem altera¸c˜oes, com pequenas d´uvidas apresentadas por
alguns alunos e esclarecidas por colegas pr´oximos, sem a necessidade de interven¸c˜ao
do pesquisador.

Na parte sobre grafos especiais, a atividade 1.4.1 propunha um esbo¸co de um
grafo completo K6. O aluno 3 percebeu que, assim como o K5 tinha como esbo¸co um
pent´agono com todas as diagonais tra¸cadas, o K6 poderia ser algo similar. A partir
desse racioc´ınio, usando compasso e r´egua, o aluno tra¸cou um hex´agono regular
inscrito numa circunferˆencia e, em seguida, tra¸cou todas as suas diagonais a ﬁm de
obter o grafo solicitado, conforme indicado na ﬁgura 4.5.

`A medida que os demais tipos grafos foram sendo mostrados, alguns alunos
procuravam veriﬁcar as caracter´ısticas contidas nos respectivos exemplos, encerrando
a atividade com uma s´erie de perguntas sobre as aplica¸c˜oes desse assunto, em especial,

Cap´ıtulo 4. A sequˆencia did´atica

54

Figura 4.5: Atividade 1.4.1 apresentada pelo aluno 3

na Ciˆencia da Computa¸c˜ao.

4.3.2 Grafos: problemas e algoritmos

Com os fundamentos j´a trabalhados na aula anterior, os alunos foram apresentados
aos algoritmos que resolvem problemas envolvendo grafos. Cada tipo de problema ´e
apresentado, seguido de seu algoritmo de resolu¸c˜ao e uma atividade de aplica¸c˜ao.

O primeira atividade abordava o algoritmo de Dijkstra para a solu¸c˜ao de problema
de caminho m´ınimo. A princ´ıpio, houve certo estranhamento dos alunos que n˜ao
participaram das Olimp´ıadas de Matem´atica ou Inform´atica. Ap´os uma breve
interven¸c˜ao, algumas solu¸c˜oes foram apresentadas, conforme a apresentada pelo
aluno 4, indicada na ﬁgura 4.6.

O aluno 4, usando uma nota¸c˜ao pr´opria, procura resolver o problema apresentando,
passo a passo, o procedimento do algoritmo de Dijkstra. Apesar da diﬁculdade em
Matem´atica relatada pelo pr´oprio aluno, ele mesmo disse sentir-se conﬁante com
esses tipos de problemas, que em sua percep¸c˜ao, n˜ao s˜ao convencionais.

A atividade seguinte, sobre o algoritmo de Floyd, apresentou uma diﬁculdade
crescente, `a medida que as matrizes de roteamento consideravam determinado v´ertice
intermedi´ario. Por se tratar de um problema de caminho m´ınimo, onde se determina
todas as distˆancias dos menores caminhos entre todos os pares de v´ertices do grafo
dado, alguns alunos apresentaram pequenos equ´ıvocos. A interven¸c˜ao foi mais incisiva,
a ponto de ser proposto que todos discutissem juntos a solu¸c˜ao do problema.

Na ﬁgura 4.7, o aluno 15 constr´oi corretamente a matriz de roteamento conside-
rando o v´ertice intermedi´ario 1. Ao passar para os v´ertices intermedi´arios 2 e 3, as
diﬁculdades surgem na montagem da matriz, resultando em pequenos equ´ıvocos, que
foram amplamente debatidos durante a atividade. As discuss˜oes se iniciaram entre
colegas pr´oximos e logo tomou alcance de toda a turma, sendo necess´ario mediar as

Cap´ıtulo 4. A sequˆencia did´atica

55

Figura 4.6: Atividade 2.1.1 apresentada pelo aluno 4

Figura 4.7: Atividade 2.1.2 apresentada pelo aluno 15

d´uvidas de valores que foram surgindo.

A segunda parte envolvia os problemas de interliga¸c˜ao. Inicialmente, foi abordada
a ´arvore de decis˜ao, utilizada para c´alculos de probabilidades. Por ser uma atividade
com assunto amplamente trabalhado poucos meses antes, 91% dos alunos observados
conseguiram fazer a atividade usando o diagrama de ´arvore proposto. Apenas um

Cap´ıtulo 4. A sequˆencia did´atica

56

aluno respondeu por meio de lista, sendo que os demais responderam conforme
indicado na ﬁgura 4.8.

Figura 4.8: Atividade 2.2.1 apresentada pelo aluno 13

O algoritmo de Kruskal foi abordado logo em seguida e grande parte da diﬁculdade
observada ocorreu devido ao n˜ao cumprimento do procedimento correto. Nesse
algoritmo, procura-se incluir a aresta de menor valor, sem formar ciclos, at´e que
todos os v´ertices estejam ligados. Dos dezesseis participantes da atividade, cinco
formaram ciclos e quatro n˜ao contemplaram todos os v´ertices. Sete alunos resolveram
corretamente o problema, conforme indicado na ﬁgura 4.9.

Figura 4.9: Atividade 2.2.2 apresentada pelo aluno 9

Ap´os a demonstra¸c˜ao do teorema 2.2.3 sobre esse algoritmo, a atividade 2.2.4
prop˜oe uma ilustra¸c˜ao para a demonstra¸c˜ao do teorema, tendo-se destacado o aluno
13 com seus trˆes desenhos indicados na ﬁgura 4.10.

A ´ultima atividade dessa parte retoma o mesmo problema do algoritmo de
Kruskal, s´o que dessa vez com a perspectiva de utiliza¸c˜ao do algoritmo de Prim. O

Cap´ıtulo 4. A sequˆencia did´atica

57

Figura 4.10: Atividade 2.2.4 apresentada pelo aluno 13

uso do mesmo problema provocou compara¸c˜ao imediata entre ambos os algoritmos.
A maioria considerou o algoritmo de Prim mais simples de lidar. Isso pode ser
observado pela quantidade acertos, uma vez que o algoritmo de Prim teve 30% mais
acertos que o de Kruskal.

Na terceira parte, foram tratados os problemas de colora¸c˜ao. Um problema
contextualizado inicia a atividade e o grau de diﬁculdade foi considerado elevado
por uma parte dos alunos. Ao serem questionados o motivo, apresentaram como
justiﬁcativa a resolu¸c˜ao por tentativa e erro. Entretanto, alguns alunos, como, por
exemplo, o aluno 13, conseguiram fazer com certa agilidade esse mesmo problema
(ﬁgura 4.11). O problema foi um facilitador para o teorema das 4 cores, que foi
apresentado logo a seguir.

Ap´os o teorema ser enunciado, grande parte dos alunos conseguiu resolver o
mesmo problema com aux´ılio de grafos. Usando o teorema das quatro cores, o aluno
13 resolveu conforme indicado na ﬁgura 4.12. Apesar de um pequeno equ´ıvoco na
solu¸c˜ao apresentada, o aluno 13 logo reconheceu o problema e identiﬁcou que o
v´ertice C7 deveria ser preto.

No ﬁnal do segundo dia, com uma pequena sobra de tempo, foi apresentada para
os alunos a parte inicial da terceira atividade. Apenas trˆes alunos, com conhecimentos
pr´evios em linguagem de programa¸c˜ao C, manifestaram o desejo de participar.

Cap´ıtulo 4. A sequˆencia did´atica

58

Figura 4.11: Atividade 2.3.1 apresentada pelo aluno 13

Figura 4.12: Atividade 2.3.3 apresentada pelo aluno 13

4.3.3 Grafos: algoritmos de programa¸c˜ao

A ´ultima aula contou com a participa¸c˜ao de apenas trˆes alunos. Com o conheci-
mento pr´evio da linguagem utilizada e pleno dom´ınio do Code::Blocks, a atividade
n˜ao teve nenhum tipo de interferˆencia. Os trˆes alunos permaneceram concentrados
durante atividade. Todos consultaram o site de autoria do professor Paulo Feoﬁloﬀ
em busca de mais recursos ou facilitadores para implementa¸c˜ao. [18]

A primeira atividade do dia, sobre digrafo, foi registrada no computador, a pedido
dos alunos. Os trˆes alunos especiﬁcaram corretamente o que a atividade solicitava.
Um aluno percebeu que, exibindo seu conjunto de arestas dirigidas, o digrafo ﬁcava
bem especiﬁcado, conforme exemplo da ﬁgura 4.13. Cada aresta dirigida ´e um par
ordenado de v´ertices.

A atividade apresentou um conjunto de ferramentas fundamentais para a constru-
¸c˜ao e manipula¸c˜ao de digrafos. Dois dos alunos testaram algumas dessas ferramentas,

Cap´ıtulo 4. A sequˆencia did´atica

59

Figura 4.13: Atividade 3.1.1: conjunto de arestas dirigidas de um digrafo.
Padr˜ao de resposta dos alunos abaixo da ﬁgura dada. [18]

mas logo partiram para a atividade seguinte, sobre a aplica¸c˜ao do algoritmo de
Dijkstra para a determina¸c˜ao de uma ´arvore de custo m´ınimo a partir do v´ertice 0.
Essa atividade demandou mais tempo. Algumas d´uvidas sobre o que ´e franja (isto ´e,
o conjunto de todas as arestas do grafo dado que tem uma ponta inicial na ´arvore e a
ponta ﬁnal fora da ´arvore) e sobre a utiliza¸c˜ao de vetores logo foram esclarecidas com
o suporte da p´agina do professor Feoﬁloﬀ [18]. Percebeu-se a partir dessa atividade,
um certo automatismo a partir das ferramentas dadas e pequenas d´uvidas sobre
a compila¸c˜ao e posterior execu¸c˜ao. Pequenos erros de sintaxe promoveram, em
determinado momento, uma pequena troca de ideias para eventuais ajustes, a ﬁm de
veriﬁcar a execu¸c˜ao, indicada na ﬁgura 4.14.

Figura 4.14: Atividade 3.2.1: Padr˜ao de resposta dos alunos na execu¸c˜ao do
programa. [18]

Na ﬁgura 4.14, f rj se refere a franja da ´arvore com raiz no v´ertice 0. Os registros
de vetores em pai cont´em a ´arvore em quest˜ao, sua franja e a distˆancia do v´ertice 0

Cap´ıtulo 4. A sequˆencia did´atica

60

a cada v´ertice da ´arvore, al´em dos pesos de cada v´ertice externo na itera¸c˜ao dada.
Finalmente, dist cont´em as distˆancias a partir do v´ertice 0 at´e cada v´ertice da ´arvore,
sendo que a ´ultima linha fornece a ´arvore de caminho m´ınimo. A ﬁgura 4.15 mostra
a ´arvore de custo m´ınimo da atividade 3.2.1.

Figura 4.15: Atividade 3.2.1: ´arvore de caminho m´ınimo obtida pelo algoritmo
de Dijkstra. [18]

A ´ultima atividade, sobre o algoritmo de Kruskal, necessitou de uma consulta
mais apurada na p´agina do professor Feoﬁloﬀ [18]. Alguns termos utilizados no
enunciado n˜ao estavam evidenciados ao longo das ferramentas que estavam na folha
impressa. Pelo fato dos alunos n˜ao terem conclu´ıdo a tempo, foi proposto aos alunos
a realiza¸c˜ao da atividade para posterior entrega.

4.3.4 Aula extra: socializa¸c˜ao das impress˜oes sobre a

sequˆencia did´atica

Duas semanas ap´os a terceira aula, todos os alunos participantes foram convidados
para um encontro extra, em que seriam compartilhadas as impress˜oes sobre a
experiˆencia vivenciada. As respostas foram transcritas pelo pesquisador `a medida
que as opini˜oes foram sendo manifestadas. Os itens da pauta do debate foram:

• a relevˆancia do assunto grafos no curr´ıculo;

• a experiˆencia com algoritmos para resolu¸c˜ao de problemas que envolvem grafos;

• as diﬁculdades advindas das resolu¸c˜oes das atividades propostas;

• as intera¸c˜oes com outros assuntos da Matem´atica;

• linguagem de programa¸c˜ao e algoritmos para grafos.

Cap´ıtulo 4. A sequˆencia did´atica

61

Sobre o primeiro ponto, a maioria dos alunos se mostrou surpresa com a exis-
tˆencia de um assunto novo e que pode ajudar na compreens˜ao de outros t´opicos
da Matem´atica no segundo ano do Ensino M´edio. O aluno 4 se mostrou muito
entusiasmado com a possibilidade de uma nova abordagem em An´alise Combinat´oria
e Probabilidades, assuntos que ele apresentou, segundo autoexame, diﬁculdades ao
longo dos meses iniciais do ano em que ocorreu a pesquisa. O aluno 13 questionou
a organiza¸c˜ao curricular e apontou que grafos teria um signiﬁcado maior do que
Binˆomio de Newton, por exemplo. O aluno 9 apresentou grafos como uma possibi-
lidade de aplicar matrizes em outra parte da Matem´atica. At´e ent˜ao, segundo seu
argumento, n˜ao havia percebido importˆancia no assunto de matrizes, mesmo sendo
medalhista de Olimp´ıadas de Matem´atica.

A respeito dos algoritmos, o aluno 16 mostrou surpresa com a l´ogica e racioc´ınio

articulados em cada um dos problemas apresentados na aula 2.

As diﬁculdades nas atividades foram apontadas pelos alunos 2, 4, 6 e 13. Eles
alegaram que, a princ´ıpio, a novidade do assunto e a aplica¸c˜ao de algoritmos foram
complexas. Uma demanda de tempo maior foi detectada pelos demais alunos no in´ıcio
da aula 2. No entanto, todos chegaram ao consenso que as atividades se encerraram
nesse dia com consider´avel ﬂuidez, dentro da perspectiva r´ıtmica de cada um.

O aluno 13 comentou sobre a liga¸c˜ao que ele percebeu entre planiﬁca¸c˜ao de
poliedros e grafos planares, sendo grande facilitador para a compreens˜ao do rela¸c˜ao
de Euler. Segundo seu argumento, nem sempre ´e f´acil visualizar a quantidade de faces,
arestas e v´ertices do dodecaedro e comparar com o icosaedro. O aluno 1 concordou e
completou que a ´arvore de decis˜ao ajuda a resolver problemas de Probabilidades.

Questionados sobre a ausˆencia em rela¸c˜ao `a linguagem de programa¸c˜ao, os alunos
6 e 7 se manifestaram com argumentos similares. A especiﬁcidade da atividade (pelo
fato de ser da ´area de computa¸c˜ao) foi a raz˜ao. Um gesto de concordˆancia foi quase
geral entre os presentes. Os alunos que participaram da OBI (10 e 11) aﬁrmaram
que, mesmo se copiassem e colassem as ferramentas indicadas, a compila¸c˜ao e a
execu¸c˜ao requerem certo conhecimento da linguagem. O aluno 10 completou que,
para participar da OBI, existe um pr´evio treinamento com o objetivo de potencializar
o desempenho dos participantes.

Dos dezesseis alunos participantes, apenas um discorda da inclus˜ao do assunto
grafos no curr´ıculo, alegando poss´ıvel incha¸co. Os demais concordaram entre si sobre
a importˆancia que grafos teria no aprendizado de Matem´atica durante o Ensino
M´edio.

Considera¸c˜oes ﬁnais

5

A contemporaneidade das aplica¸c˜oes de grafos e a possibilidade de intera¸c˜ao com

outras ´areas da Matem´atica foram os argumentos para realiza¸c˜ao da pesquisa.

A sequˆencia did´atica, formato escolhido para desenvolvimento das aulas, mostrou-
se um meio eﬁciente para reunir toda a complexidade da pr´atica e da interven¸c˜ao
reﬂexiva (planejamento, aplica¸c˜ao e avalia¸c˜ao).

As trˆes partes que comp˜oem a sequˆencia did´atica apresentaram uma coerˆencia
que foi percebida pela execu¸c˜ao das atividades, participa¸c˜ao dos alunos e as respostas
apresentadas e brevemente analisadas. Apesar da terceira aula ter a participa¸c˜ao de
apenas trˆes alunos, percebeu-se que as duas primeiras aulas foram voltadas para o
Ensino M´edio, especialmente segundo ano. A atividade de probabilidade mostrou
que os alunos que apresentam diﬁculdades numa abordagem mais tradicional, na
abordagem diferenciada, com o uso de grafos, apresentaram resultados signiﬁcativos
na aprendizagem.

A primeira aula apresentou uma introdu¸c˜ao `a teoria de grafos e foi essencial para
o desenvolvimento das partes seguintes. As atividades e o desenvolvimento te´orico
proporcionaram reﬂex˜oes sobre o uso informal de grafos em diversos problemas ao
longo da vida escolar. H´a uma clara indica¸c˜ao da possibilidade do uso de grafos
com suporte a outros temas como An´alise Combinat´oria (princ´ıpio fundamental
da contagem), Probabilidades (´arvore de decis˜ao), Poliedros (planiﬁca¸c˜ao e grafos
planares), matrizes (como ferramenta de representa¸c˜ao) entre outros. Portanto,
existem benef´ıcios que levam a considerar a possibilidade de incluir grafos no curr´ıculo
do Ensino M´edio.

A segunda aula, sobre algoritmos, mostrou que h´a possibilidade de trabalho com
algoritmos sem a necessidade de se manter na reprodu¸c˜ao tecnicista de procedimentos
pr´e-estabelecidos. As pequenas discuss˜oes entre um problema e outro, al´em das
trocas de ideias sobre as estrat´egias utilizadas, refor¸cam a oportunidade que existe no
estudo dos algoritmos. Entender e aplicar corretamente um algoritmo proporciona a
identiﬁca¸c˜ao de um amplo leque de situa¸c˜oes problemas a serem modeladas.

Contudo, a terceira aula mostrou-se voltada para um p´ublico mais espec´ıﬁco,
com desej´avel conhecimento pr´evio em no¸c˜oes de linguagem de programa¸c˜ao. A
aplica¸c˜ao da Olimp´ıada Brasileira de Inform´atica (OBI), mesmo que em algumas

62

Cap´ıtulo 5. Considera¸c˜oes ﬁnais

63

escolas do ensino b´asico, atestam a possibilidade do uso de linguagem de programa¸c˜ao
na implementa¸c˜ao de algoritmos que resolvam problemas (no caso dessa pesquisa,
grafos). A escolha da linguagem C e o uso de Code::Blocks se revelaram eﬁcientes no
contexto da escola observada, uma vez que ambos j´a eram usados na OBI.

A implementa¸c˜ao dos algoritmos para grafos em C (ou outra linguagem de
programa¸c˜ao conveniente) pode ser uma realidade para alunos do Ensino M´edio.
Seja como uma introdu¸c˜ao `a linguagem de programa¸c˜ao ou aprofundamento. O
desenvolvimento do racioc´ınio l´ogico ´e um dos benef´ıcios veriﬁcados por meio dos
alunos que participam da OBI.

A breve abordagem hist´orica apresentada no cap´ıtulo 2 mostra que a teoria de
grafos pode ser utilizada na Qu´ımica Orgˆanica para enumerar todos os isˆomeros dos
hidrocarbonetos alif´aticos. Na F´ısica, circuitos el´etricos podem ser investigados via
grafos. Percebem-se algumas signiﬁcativas oportunidades para abordagens interdisci-
plinares envolvendo grafos na Matem´atica com outras ´areas de conhecimento.

Algumas quest˜oes foram apontadas durante as observa¸c˜oes e an´alise de dados.
Mesmo n˜ao fazendo parte do objeto central da pesquisa, mostram-se como potenciais
recortes para futuras eventuais an´alises:

• Qual a contribui¸c˜ao da teoria dos grafos para a Matem´atica Discreta ao longo

da hist´oria?

• A teoria dos grafos pode ser inserida em que parte do curr´ıculo do Ensino
Fundamental? (Sem a necessidade de abordar algum tipo de linguagem de
programa¸c˜ao).

• Como utilizar a linguagem de provas da teoria dos grafos para ampliar os

fundamentos utilizados nas provas de teoremas?

Os dados coletados e a socializa¸c˜ao validaram a estrutura das atividades que
foram utilizadas na observa¸c˜ao de campo. Uma evidˆencia ´e a demonstra¸c˜ao associada
ao algoritmo de Kruskal, que foi compreendida, sem maiores problemas, devido `a
linguagem mais acess´ıvel ao estudante do Ensino M´edio.

Enﬁm, a possibilidade de inclus˜ao da teoria dos grafos traz uma nova abordagem
de certos assuntos correlatos. O uso de linguagem de programa¸c˜ao n˜ao ´e um fator
determinante, mas ´e potencializador da aprendizagem. A diversidade veriﬁcada no
cen´ario educacional nacional ´e a oportunidade de estabelecer novas intera¸c˜oes, e,
nesse sentido, grafos se destacam.

Apˆendice - Sequˆencia did´atica

A

A sequˆencia did´atica das p´aginas seguintes est´a dividida em trˆes aulas.

• Aula 1: breve hist´orico, deﬁni¸c˜oes e conceitos relacionados a grafos. Atividades

exploram as caracter´ısticas e propriedades mais relevantes.

• Aula 2: explora quatro algoritmos sobre grafos, relacionados a caminho m´ınimo
e ´arvore geradora m´ınima. Apresenta atividades complementares sobre ´arvore
de decis˜ao e o teorema das quatro cores.

• Aula 3: atividades relacionadas aos algoritmos de Dijkstra e Kruskal utilizando

linguagem de programa¸c˜ao C.

Caso seja necess´ario o acesso ao arquivo numa extens˜ao de f´acil edi¸c˜ao, solicite

por email: darcio.nogueirajr@gmail.com

64

	65						66		67		68		69		70		71		72		73		74		75		76		77		78		79		80		81		82		83		84		85		86		Bibliograﬁa

[1] Code::Blocks - Main Page. http://wiki.codeblocks.org. Acessado em 28/12/2016.

[2] Code::Blocks - Screenshots. http://www.codeblocks.org/screenshots. Acessado

em 28/12/2016.

[3] Every connected graph has a spanning tree. https://www.coursehero.com/file/

p6tfdb4/Proposition-Every-connected-graph-has-a-spanning-tree-Proof-Let-G-be-any.
Acessado em 08/01/2017.

[4] Grafos Hamiltonianos.

http://www.inf.ufsc.br/grafos/temas/hamiltoniano/

cavalo.htm. Acessado em 15/11/2016.

[5] Isomorﬁsmo de Grafos. http://www.igm.mat.br/aplicativos/index.php?option=
com_content&view=article&id=811:isomorfismos-grafos&catid=80:grafos.
Acessado em 20/10/2016.

[6] Parˆametros Curriculares Nacionais - Ensino M´edio. http://portal.mec.gov.br/

seb/arquivos/pdf/ciencian.pdf. Acessado em 27/12/2016.

[7] PCN+ Ensino M´edio.

http://portal.mec.gov.br/seb/arquivos/pdf/

CienciasNatureza.pdf. Acessado em 27/12/2016.

[8] Teoria dos Grafos - aula 9. http://www.land.ufrj.br/~classes/grafos/slides/

aula_9.pdf. Acessado em 12/01/2017.

[9] XVIII Olimp´ıada Brasileira de Inform´atica. http:olimpiada.ic.unicamp.br/info/

geral. Acessado em 27/12/2016.

[10] Appel, Kenneth I e Wolfgang Haken: Every planar map is four colorable, volume 98.

American mathematical society Providence, RI, 1989.

[11] Boaventura Netto, Paulo Oswaldo e Samuel Jurkiewicz: Grafos: introdu¸c˜ao e pr´atica.

2009.

[12] Brassard, Gilles e Paul Bratley: Algorithmics: theory & practice. Prentice-Hall, Inc.,

1988.

[13] Campos, Vˆania Barcelos G.: Algoritmos para resolu¸c˜ao de problemas em rede. http:
//aquarius.ime.eb.br/~webde2/prof/vania/apostilas/Apostila-Redes.pdf.
Acessado em 20/12/2016.

[14] Carvalho, Marco Antonio M.: Teoria dos Grafos. http://www.decom.ufop.br/marco/

site_media/uploads/bcc204/16_aula_16.pdf. Acessado em 31/12/2016.

[15] Carvalho, Marco Antonio M.: Teoria dos Grafos. http://www.decom.ufop.br/marco/

site_media/uploads/bcc204/12_aula_12.pdf. Acessado em 25/10/2016.

[16] Castro, Marcos: Caminhos m´ınimos - Algoritmo de Dijkstra. http://pt.slideshare.
Acessado em

net/mcastrosouza/caminhos-mnimos-algoritmo-de-dijkstra.
12/12/2016.

[17] Euler, Leonhard: Solutio problematis ad geometriam situs pertinentis, volume 8. 1741.

[18] Feoﬁloﬀ, Paulo: Algoritmos para Grafos em C via Sedgewick. https://www.ime.usp.

br/~pf/algoritmos_para_grafos. Acessado em 05/10/2016.

87

Bibliograﬁa

88

[19] Furtado, Gustavo: O que ´e um algoritmo? http://www.dicasdeprogramacao.com.

br/o-que-e-algoritmo/. Acessado em 20/12/2016.

[20] Gagnon, Michel: Algoritmos e teoria dos grafos. http://www.professeurs.polymtl.
ca/michel.gagnon/Disciplinas/Bac/Grafos/CaminhoMin/caminho_min.html.
Acessado em 20/12/2016.

[21] Gagnon, Michel: Grafos Eulerianos e Hamiltonianos. http://www.professeurs.
polymtl.ca/michel.gagnon/Disciplinas/Bac/Grafos/EulerHam/euler_ham.
html. Acessado em 20/10/2016.

[22] GARNICA, Antonio Vicente Maraﬁoti: Hist´oria oral e educa¸c˜ao matem´atica. Pesquisa
qualitativa em educa¸c˜ao matem´atica. Belo Horizonte: Autˆentica, p´aginas 77–98, 2004.

[23] Heawood, Percy John: Map-colour theorem. Proceedings of the London Mathematical

Society, 2(1):161–175, 1949.

[24] Jurkiewicz, Samuel: Grafos, uma introdu¸c˜ao. http://www.obmep.org.br/docs/

apostila5.pdf. Acessado em 22/11/2016.

[25] Lima, Elon Lages, Paulo Cezar Pinto Carvalho, Eduardo Wagner e Augusto C´esar

Morgado: A matem´atica do ensino m´edio - volume 2. SBM, 1998.

[26] Loureiro, Antˆonio Alfredo Ferreira: Grafo planar. http://homepages.dcc.ufmg.br/

~loureiro/md/md_9Grafos_MaterialExtra.pdf. Acessado em 10/12/2016.

[27] Loureiro, Antonio Alfredo Ferreira: Grafos.

http://homepages.dcc.ufmg.br/

~loureiro/md/md_9Grafos.pdf. Acessado em 05/10/2016.

[28] M. Toﬀolo, T´ulio ˆAngelo: Algoritmos e programa¸c˜ao avan¸cada. http://www.decom.
ufop.br/toffolo/site_media/uploads/2011-1/bcc402/slides/03._grafos.pdf.
Acessado em 09/01/2017.

[29] Madeira, Tiago: Representando grafos na programa¸c˜ao. https://tiagomadeira.com/
2006/01/representando-grafos-na-programacao/. Acessado em 20/12/2016.

[30] Medeiros, Esdras: Teoria dos Grafos. http://www.mat.ufc.br/~esdras/matdisc/

aula_grafos.pdf. Acessado em 20/10/2016.

[31] Nacionais-PCN, Parˆametros Curriculares: Matem´atica. Bras´ılia: Secretaria de Educa-

¸c˜ao Fundamental, 1998.

[32] Nunes, Fl´avio Humberto Cabral: Grafos Planares. http://homepages.dcc.ufmg.br/

~rainerpc/cursos/grafos/aulas/a12.pdf. Acessado em 22/11/2016.

[33] N´ıvio Ziviani, Charles Ornelas Almeida e: Algoritmos em grafos. http://www2.dcc.
ufmg.br/livros/algoritmos-edicao2/cap7/transp/completo4/cap7.pdf. Aces-
sado em 20/12/2016.

[34] Poggi, Marcus: Grafos e algoritmos via indu¸c˜ao. https://www-di.inf.puc-rio.br/

~poggi//chap4.pdf. Acessado em 20/12/2016.

[35] Prestes, Edson: Grafos A2 - UFRGS.

http://www.inf.ufrgs.br/~prestes/

Courses/Graph%20Theory/GrafosA2.pdf. Acessado em 15/11/2016.

[36] Ribeiro, Cristina: ´Arvores de expans˜ao m´ınimas - Algoritmo de Prim. https://web.

fe.up.pt/~aed2/acetatos/arvexpan.pdf. Acessado em 26/12/2016.

[37] Ribeiro, Pedro: ´Arvores de Suporte de Custo M´ınimo. http://www.dcc.fc.up.pt/
~pribeiro/aulas/daa1415/slides/7_mst_30112014.pdf. Acessado em 13/01/2017.

[38] Rodrigues, Helder: As pontes de Konigsberg. http://www.helderrodrigues.eu/
2008/03/28/o-problema-das-pontes-de-konigsberg/. Acessado em 11/01/2017.

[39] Rossetti, R.: Algoritmos em Grafos: Circuitos de Euler e Problema do Carteiro Chi-
http://paginas.fe.up.pt/~rossetti/rrwiki/lib/exe/fetch.php?media=

nˆes.
teaching:1011:cal:08_2.09_1.grafos6.pdf. Acessado em 10/12/2016.

Bibliograﬁa

89

[40] Sampaio, Jo˜ao Carlos V.: Quatro Cores e Matem´atica.

http://www.dm.
ufscar.br/profs/sampaio/Quatrocores_2aBienalsbmretocado.pdf. Acessado em
10/12/2016.

[41] Sousa, Diego: Por que s´o existem 5 s´olidos platˆonicos? http://gigamatematica.
blogspot.com.br/2013/07/por-que-so-existem-5-solidos-platonicos.html.
Acessado em 08/01/2017.

[42] Sousa, Rafael Castro de: Uma abordagem paralela do algoritmo de Floyd para solu¸c˜ao
do problema do caminho m´ınimo. http://cdsid.org.br/sbpo2015/wp-content/
uploads/2015/08/142081.pdf. Acessado em 12/01/2017.

[43] Toﬄo, T´ulio: Estrutura de Dados

I

- An´alise de Algoritmos.

http:

//www.decom.ufop.br/reinaldo/site_media/uploads/2013-02-bcc202/aula_
06_-_analise_de_algoritmos_(parte_3)_(v4).pdf. Acessado em 08/01/2017.

[44] Vieira, Newton Jos´e: Introdu¸c˜ao `a Teoria dos Grafos baseado em Townsend. http:
//homepages.dcc.ufmg.br/~nvieira/cursos/md/slides/cap6.tex. Acessado em
05/10/2016.

[45] Wakabayashi, Yoshiko: Euler e as origens da Teoria de Grafos.

http://www.
ime.usp.br/~yw/2016/grafinhos/aulas/Euler-yw-usp-2007.pdf. Acessado em
05/10/2016.

[46] Zabala, Antoni: A pr´atica educativa: como ensinar. Artmed, 1998.

