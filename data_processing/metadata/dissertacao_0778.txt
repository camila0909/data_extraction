VICTOR MENDONÇA ORTIZ SIQUEIRA

CURVAS DE PREENCHIMENTO DE ESPAÇO:
ESTUDO E APLICAÇÃO COMPUTACIONAL

Santo André, 2020

UNIVERSIDADE FEDERAL DO ABC

CENTRO DE MATEMÁTICA, COMPUTAÇÃO E COGNIÇÃO

VICTOR MENDONÇA ORTIZ SIQUEIRA

CURVAS DE PREENCHIMENTO DE ESPAÇO:
ESTUDO E APLICAÇÃO COMPUTACIONAL

Orientador: Prof. Dr. Rodrigo Roque Dias

Dissertação de mestrado apresentada ao Centro de

Matemática, Computação e Cognição para

obtenção do título de Mestre Proﬁssional

ESTE EXEMPLAR CORRESPONDE À VERSÃO FINAL DA DISSERTAÇÃO

DEFENDIDA PELO ALUNO VICTOR MENDONÇA ORTIZ SIQUEIRA,

E ORIENTADA PELO PROF. DR. RODRIGO ROQUE DIAS.

SANTO ANDRÉ, 2020

Sistema de Bibliotecas da Universidade Federal do ABCElaborada pelo Sistema de Geração de Ficha Catalográfica da UFABCcom os dados fornecidos pelo(a) autor(a).MENDONÇA ORTIZ SIQUEIRA, VICTOR     Curvas de preenchimento de espaço : estudo e aplicaçãocomputacional / VICTOR MENDONÇA ORTIZ SIQUEIRA. — 2020.     73 fls. : il.     Orientador: RODRIGO ROQUE DIAS     Dissertação (Mestrado) — Universidade Federal do ABC, MestradoProfissional em Matemática em Rede Nacional - PROFMAT,Santo André, 2020.     1. curvas de preenchimento de espaço. I. ROQUE DIAS,RODRIGO. II. Mestrado Profissional em Matemática em RedeNacional - PROFMAT, 2020. III. Título.O presente trabalho foi realizado com apoio da

Coordenação de Aperfeiçoamento de Pessoal de

Nível Superior - Brasil (CAPES) - Código de Fi-

nanciamento 001

v

“Matemática não é apenas números, e sim envolve letras

e toda a capacidade que o ser humano conseguir expres-

sar.”

(François Viète)

vii

R E S U M O

Curvas que preenchem o espaço (outrora conhecidas como Curvas de Peano ou Cur-

vas de Hilbert) são representações de funções que estabelecem uma relação entre um

espaço euclidiano unidimensional (uma reta) e um bidimensional (uma superfície). A

inquietação gerada pelo fato de ser possível preencher uma através da outra, consi-

derando a diferença de dimensões entre elas, foi motivo de muita pesquisa nas áreas

de Análise Real e Teoria dos Números. Nesta obra encontra-se uma proposta de aná-

lise sob perspectiva geométrica. Um grande entrave no estudo, a visualização dos

resultados obtidos pela manipulação da função envolvida, será superado pelo uso de

uma ferramenta de uso intuitivo elaborada pelo autor, de modo a levantar conclusões,

sugestões, e mesmo aplicabilidade em outras áreas de estudo como a do fractal.

Palavras-chave: Curva de Preenchimento de Espaço, Curva de Peano, Curva de

Lebesgue

ix

A B S T R A C T

Space-ﬁlling curves (sometimes known as Peano Curves or Hilbert Curves) are repre-

sentations of functions that establish a relation between an one-dimensional euclidean

space (a straight line) and a two-dimensional Euclidean space (a surface). The un-

easiness brought by the fact that it is possible to ﬁll one into another, considering the

difference between their dimensions, has motivated researches in areas such as Real

Analysis and Number Theory. In this study, there is a suggestion to analyze it under a

geometric perspective. A big obstacle, the preview of results obtained by manipulating

the given function, will be surpassed by using a tool of intuitive use, elaborated by the

author, in a way readers can raise conclusions, suggestions, or even applicability in

other study areas like fractals.

Keywords: Space-Filling Curve, Peano Curve, Lebesgue Curve

xi

C O N T E Ú D O

I N T R O D U Ç Ã O

1 T E R M I N O L O G I A

1.1 Notações . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.2 Terminologia Básica . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2 C U R VA D E P E A N O

1

5

5

6

13

2.1 Motivação . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

2.2 A Função de Peano . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

2.3 A Curva Geométrica de Peano . . . . . . . . . . . . . . . . . . . . . . . . 19

3 C U R VA D E H I L B E R T

23

3.1 Aritmetização da Curva de Hilbert

. . . . . . . . . . . . . . . . . . . . . 26

4 C U R VA D E L E B E S G U E

33

4.1 Conjunto de Cantor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33

4.2 Deﬁnição de Lebesgue para Curva de Preenchimento de Espaço . . . . . 38

4.3 Aproximação Poligonal para Curva de Lebesgue . . . . . . . . . . . . . . 40

5 M O D E L A G E M C O M P U TA C I O N A L

45

5.1 Ambiente de programação . . . . . . . . . . . . . . . . . . . . . . . . . . 46

5.2 Restrições adotadas no projeto . . . . . . . . . . . . . . . . . . . . . . . 46

5.3 Implementação do programa . . . . . . . . . . . . . . . . . . . . . . . . 47

6 D E M O N S T R A Ç Ã O D E U S O

7 A N Á L I S E D E R E S U LTA D O S

49

53

7.1 Continuidade do projeto . . . . . . . . . . . . . . . . . . . . . . . . . . . 53

7.2 Passeio do cavalo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54

7.3 Fractais

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54

7.4 Estudo de Caso . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55

8 C O N S I D E R A Ç Õ E S F I N A I S

63

xiii

xiv

Conteúdo

A

A P Ê N D I C E A

B

A P Ê N D I C E B

Bibliograﬁa

65

67

73

I N T R O D U Ç Ã O

Curva de preenchimento de espaço é o nome dado a uma função matemática sobre-

jetora cujo domínio está contido em um conjunto unidimensional e cuja imagem está

contida em um conjunto de dimensão maior.

Segundo Byrne [2], Müller [7] e Sagan [10], o estudo de teoria dos conjuntos é

um ramo relativamente novo da matemática, ganhando grande impulsão nos últimos

séculos. O cuidado do detalhamento dos conhecidos conjuntos numéricos ganhou

força com a caracterização dos números naturais através de G. Peano e seus axiomas

em 1879, junto com a expansão para os inteiros, racionais e reais.

Grande parte do estudo de conjuntos está no estudo da pertinência de seus elemen-

tos e da quantidade de entes que os compõem. No estudo de conjuntos numéricos,

o principal motivador dos estudos foi a caracterização da quantidade tomada por “in-

ﬁnito” que caracterizaria a inﬁnidade de números que cada conjunto numérico com-

porta.

Era sabido que da expansão do conjunto dos números naturais para os inteiros, dos

inteiros para os racionais, racionais para reais, e assim sucessivamente, mais e mais

elementos iam se agregando aos conjuntos, tornando-os cada vez “maiores”; mas este

termo carecia de deﬁnição, uma vez que “inﬁnito” não é um número, e portanto não

era capaz de descrever uma quantidade para tais conjuntos.

Até que em 1878, G. Cantor apresenta ao mundo o conceito de cardinalidade: era

possível “contar” os elementos no conjunto dos números inteiros utilizando os núme-

ros naturais; logo, havia tantos números inteiros quanto números naturais, tornando

ambos os conjuntos igualmente grandes em mesma "ordem"– dizendo-se, portanto,

que ambos os conjuntos possuem mesma cardinalidade.

O conceito de cardinalidade se justiﬁca no fato de existir uma bijeção entre os con-

juntos: existe como se mapear univocamente cada elemento de um conjunto sobre

outro através de uma função que desempenha o papel de “contagem de elementos”.

Através deste conceito, nasce também o conceito de conjuntos ﬁnitos, inﬁnitos enume-

ráveis e inﬁnitos não enumeráveis (caso em que recai nos números reais).

1

2

I N T R O D U Ç Ã O

Neste ambiente da descoberta da possibilidade de se mapear funções de um conjunto

sobre outro aparentemente maior, surge a pesquisa da possibilidade de se mapear

funções em dimensões diferentes. Seria possível criar uma bijeção entre um conjunto
de dimensão x em um conjunto de dimensão y, sendo x (cid:54)= y (unidimensional em
bidimensional, como no exemplo)? Com isto, a curva de preenchimento de espaço

começa a ganhar forma.

A esta curva, deu-se o nome de “preencher espaço” por causa da primeira curva in-

vestigada ter todos os pontos da imagem (de domínio bidimensional) relacionados a

pontos pertencentes a um intervalo de números reais, sendo hoje mais correto nomear

esta primeira curva de “curva que preenche superfície”, limitando o termo espaço para

quando se preenche três dimensões. Como há de se mostrar adiante, tal curva é neces-

sariamente não injetora, o que consequentemente implica não haver bijeção entre tais

conjuntos.

Nascem aqui os primeiros estudos do ramo hoje conhecido por Topologia como uma

expansão da Geometria Euclidiana tradicional, investigando o comportamento dessas

funções e conjuntos quanto à sua continuidade, compacidade e conexidade. Nossa

curva de preenchimento de espaço, hoje, pode ser vista de maneira mais geral como a

existência de uma relação, nesta obra tratada por funções, entre espaços de dimensões

não necessariamente iguais.

Mas um dos grandes entraves no estudo destas curvas era a análise dos resulta-

dos obtidos. O primeiro estudo desenvolvido no tema, por Peano, era meramente

algorítmico e de difícil interpretação de como a mudança nas variáveis acarretaria o

preenchimento de uma região plana. D. Hilbert, em 1891, foi o primeiro a sugerir tal

curva com uma visualização de como cada ponto num espaço plano era imagem de

um ponto do segmento de reta através de sucessivas iterações. Finalmente, em 1904,

H. Lebesgue estende os conceitos existentes até então para um modelo ainda mais ge-

ral de curva criada por interpolação e relação com conjuntos particionados, trabalho

possível graças ao notável conjunto de Cantor, descrito por G. Cantor em 1883.

O propósito desta obra, além de gerar interesse pelo estudo do tema sobre curvas

e dimensões espaciais, é o de também criar uma ferramenta de uso bastante básico

capaz de gerar tais curvas. Com ela, será capaz de se analisar quais parâmetros que

são necessários para a criação da curva; como a alteração destes parâmetros implica

(ou não) a criação de uma nova curva; e como, dada uma curva, é possível intuir seus

aspectos básicos e, com eles, obter os parâmetros.

I N T R O D U Ç Ã O

3

Os capítulos subsequentes tratarão das deﬁnições matemáticas básicas do tema (cur-

vas de Peano, Hilbert e Lebesgue, a última na qual se baseia esta obra); deﬁnirá como

construir um software computacional capaz de visualizar sua curva, baseada nos al-

goritmos de construção das curvas propostos pelos autores estudados; mostrará como

o software criado é capaz de auxiliar cognitivamente na construção e parametrização

das curvas; e, por ﬁm, mostrará alguns exemplos de abordagens do mundo real capa-

zes de serem modelados pelo software (e, consequentemente, explorados como tais

curvas).

Esta obra não tem a pretensão de servir como um curso completo sobre o tema,

mas sim servir de motivação e fomento para mais pesquisas no tema, bem como ins-

tigar a criação de plataformas computacionais mais soﬁsticadas capazes de de gerar

visualizações para níveis multidimensionais (como, por exemplo, para o cubo).

1

T E R M I N O L O G I A

Comecemos, então, a deﬁnir a terminologia básica que será utilizada ao longo deste

trabalho.

Introduziremos as notações adotadas, bem como conceitos tomados por

básicos para a correta interpretação dos temas. O conteúdo das deﬁnições pode ser

consultado em Kaplansky [4]; e Lima [5, 6].

Por ﬁm, sempre que útil, adotaremos proposições e demonstrações que reforcem

temas especíﬁcos, utilizando os axiomas básicos para desenvolver um raciocínio que

complete asserções primitivas em mais complexas.

Note que, de forma a fomentar a construção do raciocínio que acompanha o estudo

histórico do tema, alguns conceitos e deﬁnições deixarão para ser abordados no ca-

pítulo correspondente da curva estudada, para que se prove que, dadas as formas de

concepção iniciais, o nível de abstração foi sendo construído com o tempo de forma a

poder abranger e caracterizar curvas do tipo de preenchimento de espaço com maior

precisão.

1.1 N O TA Ç Õ E S

Comecemos então introduzindo as notações utilizadas neste trabalho:

Deﬁnição 1.1. O corpo ordenado completo dos números reais será denotado por R;
o espaço cartesiano n-dimensional por Rn e o corpo dos números complexos por C.
Usaremos letra cursiva maiúscula para denotar subconjuntos de Rn como:

I = [0, 1] para o intervalo fechado unitário;

Q = [0, 1]2 para o quadrado fechado unitário; e

C = [0, 1]3 para o cubo fechado unitário.

5

6

T E R M I N O L O G I A

Deﬁnição 1.2. O complementar de um conjunto S será denotado por S C quando for

claro o contexto de qual conjunto universo o complementar será tomado. Caso con-

trário, escreveremos U \S para denotar o complementar de S em relação ao conjunto

U .

(cid:113)

Deﬁnição 1.3. A norma euclidiana de um vetor x = (ξ1, . . . , ξn) será denotada por
k; e o espaço euclidiano n-dimensional (que consiste de Rn com a norma
(cid:107)x(cid:107)=
euclidiana deﬁnindo a métrica) denotado por En.

k=1 ξ2

∑n

Deﬁnição 1.4. Matrizes serão denotadas por letras góticas maiúsculas: H, P, S.

Deﬁnição 1.5. Uma injeção de A em B será denotada por f : A 1−1→ B; uma sobreje-
ção de A em B será denotada por f : A em→ B; e uma bijeção de A em B será denotada
por f : A ↔ B.

Deﬁnição 1.6. Seja n > 1 um número inteiro. A representação na base n de um
número inteiro será dada por:

[x0x1x2 . . . xj]n = x0nj + x1nj−1 + x2nj−2 + · · · + xj, com xj ∈ {0, 1, 2, . . . , n − 1}.

A representação na base n de um número em I será dada por:

[0, x1x2x3 . . . ]n =

x1
n

+

x2
n2 +

x3
n3 + . . . , com xj ∈ {0, 1, 2, . . . , n − 1}.

Usaremos barras superiores para indicar períodos como em:

0, a1a2a3 . . . anb1b2b3 . . . bn = 0, a1a2a3 . . . anb1b2b3 . . . bnb1b2b3 . . . bnb1 . . .

1.2 T E R M I N O L O G I A B Á S I C A

A seguir, introduziremos alguns conceitos-chave bastante empregados na concepção

histórica de curvas de preenchimento de espaço, que culminarão formalmente em sua

caracterização:

Deﬁnição 1.7. Chamaremos de vizinhança δ de a ∈ En o subconjunto de En Nδ(a) =
{x ∈ En; (cid:107)x − a(cid:107)< δ}; e chamaremos de vizinhança δ estrita de a ∈ En o subconjunto
de En N(cid:48)

δ(a) = {x ∈ En; 0 < (cid:107)x − a(cid:107)< δ} = Nδ(a) − {a}.

Deﬁnição 1.8. Chamaremos um ponto a ∈ A ⊆ En de ponto interior de A se existe
δ > 0 tal que Nδ(a) ⊆ A; e denotaremos o conjunto de todos os pontos interiores de
A por int(A), também chamado de interior de A.

1.2 T E R M I N O L O G I A B Á S I C A

7

Deﬁnição 1.9. Diremos que o conjunto A é aberto se int(A) = A; e diremos que o
conjunto A é fechado se AC é aberto.

Deﬁnição 1.10. Diremos que um ponto a ∈ En é ponto de acumulação de um con-
junto A ⊆ En se, para qualquer δ > 0, tivermos N(cid:48)

δ(a) ∩ A (cid:54)= ∅.

Diremos que a ∈ R é ponto de acumulação à esquerda de A se, para todo δ > 0,
(a − δ, a) ∩ A (cid:54)= ∅; e é ponto de acumulação à direita de A se, para todo δ > 0,
(a, a + δ) ∩ A (cid:54)= ∅.

O fecho de A, denotado por A, é deﬁnido como a união de A com o conjunto de

todos os seus pontos de acumulação.

Lema 1.11. Um conjunto é fechado se, e somente se, contém todos os seus pontos de
acumulação; ou seja, A = A.

Demonstração. Suponha A fechado e a um ponto de acumulação com a /∈ A. Então,
a ∈ AC. Como AC é aberto, então existe δ > 0 tal que Nδ(a) ⊆ AC. Mas então a não
pode ser ponto de acumulação de A pois N(cid:48)

δ(a) é disjunto de A.

Suponha agora que A = A. Se x /∈ A, então x /∈ A. Logo, x não é ponto de
acumulação de A e, portanto, x possui uma vizinhança que é disjunta de A. Assim, x
é ponto interior de AC. Isto é verdadeiro para todo x /∈ A, portanto AC é aberto; logo,
A é fechado.

Deﬁnição 1.12. Se f é uma função de um subconjunto de Em em En, então f [A] =
{ f (x); x ∈ A ∩ D( f )}, onde D( f ) denota o domínio de f e A ⊆ Em, é chamada de
imagem direta de A por f .

Deﬁnição 1.13.

f −1[B] = {x ∈ D( f ); f (x) ∈ B} é chamado de imagem inversa de B

sobre f . CD( f ) denota o contradomínio de f .

Destas últimas duas, notemos algumas propriedades:

f −1[ f [A]] ⊇ A ∩ D( f ) , f [ f −1[B]] = B ∩ Im( f )

f [A1 ∪ A2] = f [A1] ∪ f [A2] , f −1[B1 ∪ B2] = f −1[B1] ∪ f −1[B2]
f [A1 ∩ A2] ⊆ f [A1] ∩ f [A2] , f −1[B1 ∩ B2] = f −1[B1] ∩ f −1[B2]
f [A] = ∅ ⇒ A ∩ D( f ) = ∅ , f −1[B] = ∅ ⇒ B ∩ Im( f ) = ∅
( f ◦ g)−1[A] = g−1[ f −1[A]]

(1.1)

(1.2)

(1.3)

(1.4)

(1.5)

8

T E R M I N O L O G I A

Deﬁnição 1.14. Sejam A ⊆ Em e B ⊆ En. Uma função f : A → B é dita contínua
em a ∈ A se para todo (cid:101) > 0 existir um δ((cid:101), a) > 0 tal que f [Nδ((cid:101),a)(a)] ⊆ N(cid:101)( f (a)).
Uma função é contínua em A se é contínua em todo ponto de A.

Deﬁnição 1.15. Uma função f : R → A ⊆ En é dita contínua à esquerda de a ∈ R
se para todo (cid:101) > 0 existir um δ((cid:101), a) > 0 tal que para todo x ∈ ]a − δ((cid:101), a), a] temos
(cid:107) f (a) − f (x)(cid:107)< (cid:101).

Deﬁnição 1.16. Uma função f : R → A ⊆ En é dita contínua à direita de a ∈ R
se para todo (cid:101) > 0 existir um δ((cid:101), a) > 0 tal que para todo x ∈ [a, a + δ((cid:101), a)[ temos
(cid:107) f (x) − f (a)(cid:107)< (cid:101).

Deﬁnição 1.17. Se f

: I → En é contínua, então f é chamada de curva.

f (0) é

chamado de ponto inicial da curva e f (1) o ponto ﬁnal.

Deﬁnição 1.18. Se a curva f : I → I n, n ≥ 2 é sobrejetora, então f é chamada de
curva de preenchimento de espaço.

Demonstraremos nos capítulos subsequentes alguns casos particulares que se enqua-

dram como curvas de preenchimento de espaço.

Deﬁnição 1.19. Dados A (cid:54)= ∅ e B (cid:54)= ∅, a notação |A|≤ |B| indica existir f : A → B
injetora (ou, equivalentemente, indica existir g : B → A sobrejetora). A notação
|A|= |B| indica existir h : A → B bijetora (caso em que dizemos que A e B possuem
mesma cardinalidade).

Teorema 1.20 (Cantor-Bernstein). Se |A|≤ |B| e |B|≤ |A|, então |A|= |B|.

A demonstração do teorema acima foge do escopo deste trabalho. Como G. Cantor

demonstrou em 1878, quaisquer dois espaços euclidianos de dimensão ﬁnita µ0, µ1,
não importa suas dimensões, têm a mesma cardinalidade; consequentemente, podem

ser colocados em correspondência um para um. Isto signiﬁca existir uma bijeção f :
µ0 → µ1. Em particular, existem as bijeções g : I → Q, h : I → C, etc.

Entretanto, para que uma curva seja de preenchimento de espaço, como deﬁnida

acima, ela é necessariamente uma função não injetora, conforme propõe o Teorema

de Netto a seguir (cuja demonstração para o caso m = 1 pode ser encontrada em [11,

Teorema 6.4]):

Teorema 1.21 (Netto). Se f representa uma bijeção de [0, 1]m em [0, 1]n e m (cid:54)= n, então
f é necessariamente descontínua.

1.2 T E R M I N O L O G I A B Á S I C A

9

O Teorema de Netto implica não haver curvas bijetoras de preenchimento de espaço.

Vamos, então, nos capítulos seguintes, procurar demonstrar que os casos particulares

de curvas de preenchimento de espaço estudados são funções contínuas e sobrejetoras

de domínio no segmento de reta e imagem em uma superfície.

As seguintes deﬁnições e teoremas também se farão úteis no desenvolvimento de

deﬁnições utilizados nos capítulos a seguir:

Deﬁnição 1.22. Uma sequência de funções é uma sequência ( fn)n∈N, onde cada fn
é uma função.

Deﬁnição 1.23. Seja A um conjunto qualquer. Diz-se que uma sequência de funções
fn : A → En converge pontualmente para uma função f : A → En quando, para
cada a ∈ A, a sequência ( f1(a), f2(a), . . . , fn(a), . . .) de pontos fn(a) ∈ En converge para
o ponto f (a) ∈ En.

Deﬁnição 1.24. Diz-se que a sequência de funções fn : A ⊆ Em → En converge
uniformemente em A para a função f : A ⊆ Em → En quando, para todo número
real (cid:101) > 0 dado, for possível obter n0 ∈ N tal que, qualquer que seja a ∈ A, n > n0 ⇒
(cid:107) fn(a) − f (a)(cid:107)< (cid:101).

Teorema 1.25. Se uma sequência de funções fn : A → B, contínuas no ponto a ∈ A,
converge uniformemente em A para uma função f : A → B, então f é contínua no ponto
a.

Demonstração. Para provar que f é contínua no ponto a, supomos dado (cid:101) > 0 e es-
colhemos um número natural n0 tal que n > n0 implica (cid:107) fn(x) − f (x)(cid:107)< (cid:101)
3 para todo
x ∈ A. Como fn0+1 é contínua no ponto a, existe δ > 0 tal que (cid:107)x − a(cid:107)< δ em A
implica (cid:107) fn0+1(x) − fn0+1(a)(cid:107)< (cid:101)

3 . Então, para todo x ∈ A com (cid:107)x − a(cid:107)< δ, temos:

(cid:107) f (x) − f (a)(cid:107) ≤ (cid:107) f (x) − fn0+1(x)(cid:107)+(cid:107) fn0+1(x) − fn0+1(a)(cid:107)+(cid:107) fn0+1(a) − f (a)(cid:107)<

<

(cid:101)
3

+

(cid:101)
3

+

(cid:101)
3

= (cid:101).

Para o seguinte teorema, faz-se necessário introduzir as seguintes nomenclaturas:

Deﬁnição 1.26. Dados um conjunto A ⊆ R e x ∈ R, dizemos que x é limitante
superior de A se, para todo a ∈ A, a ≤ x. Um conjunto que admite um limitante

superior é dito limitado superiormente.

10

T E R M I N O L O G I A

Deﬁnição 1.27. Dado um conjunto A ⊆ R não vazio e limitado superiormente, seja
B ⊆ R o conjunto de todos os limitantes superiores de A. Deﬁnimos o supremo de
A como sendo o menor elemento de B. (O Axioma da Completude garante que o

supremo de A sempre existe nestas condições.)

Teorema 1.28. Seja I ⊇ I1 ⊇ . . . ⊇ In−1 ⊇ In ⊇ . . . uma sequência de intervalos
fechados encaixantes, de extremidades aj < bj, com Ij (cid:54)= ∅ e |bj − aj|→ 0 quando n → ∞.
Então (cid:84)
n∈N In (cid:54)= ∅; além disso, existe um único ponto a ∈ I pertencente a todos os
intervalos Ij.

Demonstração. Tomemos In = [an, bn]. Como In+1 ⊆ In, temos que an+1 ≥ an e
bn+1 ≤ bn para todo n ∈ N. Mais do que isso, por indução podemos mostrar que, se
n > m, an ≥ am e bn ≤ bm. Disso segue, para todos m, n ∈ N, que an ≤ bm. De fato,
tomemos, k o máximo entre m e n. Temos então que an ≤ ak < bk ≤ bm. Logo, o
conjunto {an : n ∈ N} é limitado superiormente, e claramente não vazio. Tomemos
a o supremo deste conjunto. Temos que an ≤ a para todo n ∈ N. Por outro lado,
se existisse n tal que bn < a, por deﬁnição de supremo teríamos que bn < am para
algum m ∈ N, que contradiz nossa hipótese inicial. Logo, a < bn para todo n ∈ N.
Concluímos, então, que a ∈ [an, bn] para todo n, provando que a ∈ (cid:84)
n∈N In, ou seja, a
interseção dos intervalos encaixantes é não vazia.

Além disso, no caso em que limn→∞|bn − an|= 0, podemos ver facilmente que a
será o único elemento pertencente à interseção: de fato, se b ∈ (cid:84)
n∈N In, teremos
|b − a|≤ |bn − an| para todo n ∈ N. Fazendo n crescer indeﬁnidamente, concluímos
que |b − a| deve ser zero, donde b = a.

Os próximos dois resultados fazem parte da problematização inicial de como se

construir uma curva de preenchimento de espaço, problema este analisado e superado

por ser percursor:

Teorema 1.29. Seja o número em base b escrito em representação ﬁnita de dígitos x =
[0, d1d2d3 . . . dnd]b, com d (cid:54)= 0, e o número também em base b escrito em representação
inﬁnita de dígitos x(cid:48) = [0, d1d2d3 . . . dn(d − 1)(b − 1)]b. Temos que x = x(cid:48).

Demonstração. Note que:

x = [0, d1d2d3 . . . dnd]b =

d1
b1 +

d2
b2 +

d3
b3 + . . .

dn
bn +

d
bn+1 +

0
bn+2 +

0
bn+3 + . . . =

∞
∑
k=1

dk
bk .

1.2 T E R M I N O L O G I A B Á S I C A

11

Podemos, então, escrever x(cid:48) segundo mesmo somatório, como segue:

x(cid:48) =

n
∑
k=1

dk
bk +

d − 1
bn+1 +

∞
∑
k=n+2

b − 1
bk

.

meiro termo igual a b−1

Note que a última parcela é a soma de uma progressão geométrica inﬁnita de pri-
b . Como S = a1 · (1 − q)−1:
bn+2 e razão 1
(cid:18)

(cid:19)−1

S =

b − 1
bn+2

·

1 −

1
b

=

b − 1
bn+2

·

b
b − 1

=

1
bn+1 .

∴ x(cid:48) =

n
∑
k=1

dk
bk +

d − 1
bn+1 +

1
bn+1 =

n
∑
k=1

dk
bk +

d
bn+1 +

0
bn+2 +

0
bn+3 + . . . = x.

Proposição 1.30. Sejam [0, d1d2d3 . . .]b e [0, t1t2t3 . . .]b duas representações distintas em
base b para um mesmo número. Então uma delas é uma representação ﬁnita (ou seja,

terminada por uma sequência inﬁnita de zeros).

Demonstração. Seja n ∈ N o menor natural com dn (cid:54)= tn. Supondo, sem perda de
generalidade, que dn < tn, temos que dn + 1 ≤ tn ⇒ tn − dn ≥ 1.

Como [0, d1d2d3 . . .]b =

∞
∑
i=1

di
bi

e [0, t1t2t3 . . .]b =

∞
∑
i=1

ti
bi

, temos que:

∞
∑
i=1

di
bi =

∞
∑
i=1

ti
bi

⇒

n−1
∑
i=1

di
bi +

dn
bn +

∞
∑
i=n+1

di
bi =

n−1
∑
i=1

ti
bi +

tn
bn +

∞
∑
i=n+1

ti
bi .

Como até a (n − 1)-ésima posição os dígitos são iguais:

dn
bn +

∞
∑
i=n+1
∞
∑
i=n+1
∞
∑
i=n+1

di
bi =
di
bi =
di
bi

≥

∞
∑
i=n+1

tn
bn +
tn − dn
bn

+

1
bn +

∞
∑
i=n+1

⇒

ti
bi
∞
∑
i=n+1
ti
bi .

ti
bi

⇒

Como di ≤ b − 1 para todo i ∈ N, temos que:

∞
∑
i=n+1

di
bi

≤

∞
∑
i=n+1

b − 1
bi = (b − 1) ·

∞
∑
i=n+1

1
bi = (b − 1) ·

1
(b − 1)bn =

1
bn .

Logo:

1
bn

≥

∞
∑
i=n+1

di
bi

≥

1
bn +

∞
∑
i=n+1

ti
bi

⇒

∞
∑
i=n+1

ti
bi

≤ 0.

12

T E R M I N O L O G I A

Mas

∞
∑
i=n+1
n-ésima posição.

ti
bi

≥ 0, donde conclui-se que

∞
∑
i=n+1

ti
bi = 0. Portanto, cada ti é zero após a

Para mostrarmos a curva que será adotada no desenvolvimento do software proposto

para visualização, mostraremos os passos formais que criaram a primeira curva a ser

dita de preenchimento de espaço, a curva de Peano; o método geométrico que possi-

bilitou o desenho de tais curvas, gerando a curva de Hilbert; até a generalização que

permite à curva adotar qualquer percurso e reproduzi-lo em todas as demais iterações:

a curva de Lebesgue.

Segue-se então como se deu a origem da primeira curva de preenchimento de espaço

documentada: a curva de Peano.

2

C U R VA D E P E A N O

Segundo Sagan [11], a primeira curva de preenchimento de espaço criada na his-

tória se deve a G. Peano, em 1890, construída de maneira analítica [8]. A função

projetada por Peano foi a primeira a se ter ciência de fazer uso de um algoritmo capaz

de fornecer uma relação entre coordenadas de um intervalo unitário e todos os pontos

de uma região plana unitária. Para tanto, ele faz uso da representação ternária para
t: t = [0, t1t2t3...]3, tj ∈ {0, 1, 2} (representação adotada para todos os números com
dígitos para este capítulo); e também faz uso de um operador que deﬁniremos a seguir.

2.1 M O T I VA Ç Ã O

Segundo nossa deﬁnição em 1.18, para criarmos uma função com a característica de

preenchimento de espaço, devemos nos preocupar com que esta seja sobrejetora em

relação à imagem, que aqui ilustraremos como a porção do plano Q. Um esforço mais

imediato de imaginar uma função com tal característica é dada pela função f como

segue:

f (0, d1d2d3d4d5d6 . . .) =

(cid:33)

(cid:32)

0, d1d3d5 . . .
0, d2d4d6 . . .

Notemos que esta função transforma os dígitos di de qualquer t ∈ I, escritos em
notação, por exemplo, de base 10, em duas sequências de dígitos que irão representar
o par de coordenadas (x, y) referente a um ponto de Q. Esta função é sobrejetora,
pois dado qualquer ponto de Q, podemos reorganizar suas coordenadas de forma a

determinar um ponto de I.

13

14

C U R VA D E P E A N O

Como um número pode possuir mais de uma representação decimal, para que f seja

antes de mais nada uma função, devemos escolher para qual das duas representações

a imagem do plano estará associada.

Por exemplo, seja o ponto de Q imagem do ponto de I de coordenada 1

2 . Como este
número possui como representações decimais 0, 499999 . . . e 0, 500000 . . ., supomos a

princípio que a função leve esta imagem no primeiro caso (números com representação

decimal inﬁnita).

Agora, para que nossa função seja chamada de curva de preenchimento de espaço,

precisamos, segundo deﬁnição 1.17, que nossa função f seja também contínua. Note-

mos pelo exemplo que ao aplicar f , obtemos:

f (0, 499999 . . .) =

(cid:32)

0, 499 . . .

0, 999 . . .

(cid:33)

(cid:32)

=

(cid:33)

0, 5

1

Mas repare que ao tomarmos, por exemplo, a imagem de 0, 501 . . ., teremos a se-

gunda coordenada em 0, 011 . . .; ao tomarmos a imagem de 0, 500001 . . ., teremos a

segunda coordenada em 0, 001 . . .; a de 0, 50000001 . . . terá coordenada em 0, 0001 . . .;
o que intuitivamente nos mostra que existem números arbitrariamente próximos de 1
2
à direita cuja segunda coordenada da imagem se aproxima de 0 e não de 1. Logo, f

não pode ser contínua à direita.

Caso similar ocorre quando supomos que f tenha sido deﬁnida como levar a imagem

à coordenada 0, 500000 . . . de I. Ao aplicar f obtemos:

f (0, 500000 . . .) =

(cid:32)

0, 500 . . .

0, 000 . . .

(cid:33)

(cid:32)

=

(cid:33)

0, 5

0

Ao tomarmos, por exemplo, a imagem de 0, 498 . . ., teremos a segunda coordenada

em 0, 999 . . .; ao tomarmos a imagem de 0, 49998 . . ., teremos a segunda coordenada

em 0, 999 . . .; e assim sucessivamente, mostrando que existem números arbitraria-
mente próximos de 1
2 à esquerda cuja segunda coordenada da imagem se aproxima

de 1 e não de 0. Logo, f não pode ser contínua à esquerda.

Portanto, para qualquer forma de representar a imagem de 1

este ponto no exemplo, o que torna a função descontínua. Logo,

2 , não existe limite para
f não pode ser

descrita como curva de preenchimento de espaço, apesar da sobrejetividade.

De fato, os números com mais de uma representação ocasionarão problema seme-

lhante, gerando inúmeros pontos de descontinuidade. Em geral não se é tão simples

2.2 A F U N Ç Ã O D E P E A N O

15

atender a estes critérios, como ilustrado acima. Vejamos como Peano, o precursor de

curvas do gênero, conseguiu contornar este problema a seguir, através de um opera-

dor. Por seu pioneirismo, curvas de preenchimento de espaço possuem sinonímia com

curvas de Peano.

2.2 A F U N Ç Ã O D E P E A N O

Deﬁnição 2.1. O operador complementar sobre dígito k será deﬁnido junto a um
dígito ternário tj da seguinte forma: ktj = 2 − tj, tj ∈ {0, 1, 2}. Logo, temos que:

k0 = 2;

k1 = 1;

k2 = 0.

Deﬁnição 2.2. A função fP : I → Q deﬁnida por fP(t) = (ϕP(t), ψP(t)), onde:

ϕP(0, t1t2t3t4t5 . . .) = 0, t1(kt2 t3)(kt2+t4 t5) . . .
ψP(0, t1t2t3t4t5 . . .) = 0, (kt1 t2)(kt1+t3 t4) . . .

é chamada de curva de Peano, onde kn é a n-ésima iteração do operador k sobre o
dígito tj.

A seguir, vamos explorar algumas propriedades interessantes decorrentes das deﬁni-

ções dadas por Peano:

Proposição 2.3. Temos que o operador k é o seu próprio inverso; isto é, (k · k)(t) = t, para
todo t ∈ I.

Demonstração. Basta notar que (k · k)(t) = (k)(kt) = (k)(2 − t) = [2 − (2 − t)] = t.

Isto implica que k operado um número ímpar de vezes irá alterar o dígito t como se

tivesse sido aplicado uma só vez; enquanto que k operado um número par de vezes

resulta no mesmo dígito t.

Proposição 2.4. Números com mais de uma forma de representação possuem imagens

iguais.

Demonstração. Conforme teorema 1.29, alguns ternários possuem mais de uma forma
de representação: todo número de representação ﬁnita 0, t1t2t3 . . . tnt, com t (cid:54)= 0, pode
ser reescrito na representação inﬁnita 0, t1t2t3 . . . tn(t − 1)2.

16

C U R VA D E P E A N O

Para provar que ambas as formas possuem a mesma imagem, considere n = 2m,

r = t2 + t4 + . . . + t2m e s = t1 + t3 + . . . + t2m−1. Note que:

ϕP(0, t1t2t3 . . . t2mt) = 0, t1(kt2 t3)(kt2+t4 t5) . . . (krt)(kr0) =
(cid:40)

0, t1(kt2 t3)(kt2+t4 t5) . . . t0
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t)2 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (3 − t)

= 0, t1(kt2 t3)(kt2+t4 t5) . . . t

se r é par;

se r é ímpar.

Para a representação inﬁnita:

ϕP(0, t1t2t3 . . . t2m(t − 1)2) = 0, t1(kt2 t3)(kt2+t4 t5) . . . (kr(t − 1))(kr+22)(kr+42) . . . =
(cid:40)

0, t1(kt2 t3)(kt2+t4 t5) . . . (t − 1)2
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − (t − 1))0 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (3 − t)

= 0, t1(kt2 t3)(kt2+t4 t5) . . . t

se r é par;

se r é ímpar.

Um raciocínio análogo é aplicado à outra coordenada da imagem:

ψP(0, t1t2t3 . . . t2mt) = 0, (kt1 t2)(kt1+t3 t4) . . . (kst2m)(ks+t0) =




= 0, t1(kt2 t3)(kt2+t4 t5) . . . t2m
0, t1(kt2 t3)(kt2+t4 t5) . . . t2m0
= 0, t1(kt2 t3)(kt2+t4 t5) . . . (t2m + 1)
0, t1(kt2 t3)(kt2+t4 t5) . . . t2m2
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)2 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (3 − t2m)
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)0 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)

se s é par e t é par;

se s é par e t é ímpar;

se s é ímpar e t é par;

se s é ímpar e t é ímpar.

E para a representação inﬁnita:

ψP(0, t1t2t3 . . . t2m(t − 1)2) = 0, (kt1 t2)(kt1+t3 t4) . . . (kst2m)(ks+t−12)(ks+t+12) . . . =




= 0, t1(kt2 t3)(kt2+t4 t5) . . . t2m
0, t1(kt2 t3)(kt2+t4 t5) . . . t2m0
= 0, t1(kt2 t3)(kt2+t4 t5) . . . (t2m + 1)
0, t1(kt2 t3)(kt2+t4 t5) . . . t2m2
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)2 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (3 − t2m)
0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)0 = 0, t1(kt2 t3)(kt2+t4 t5) . . . (2 − t2m)

se s é par e t é par;

se s é par e t é ímpar;

se s é ímpar e t é par;

se s é ímpar e t é ímpar.

Procede-se exatamente da mesma forma para o caso em que n = 2m + 1, alterando
apenas que tem-se 4 possibilidades para ϕP e 2 possibilidades para ψP, todas corres-
pondentes entre si.

Nota: na representação ﬁnita 0, t1t2t3 . . . t2mt o dígito t está representando o último
algarismo que não é zero. No decorrer das demonstrações, nos deparamos com (2 − t)
que não altera a posição do dígito t na representação. Mas para qualquer outro tj, nos
deparamos com (2 − tj) e (3 − tj), onde tj pode ser tanto 0, 1 ou 2; logo, a operação
resultante pode resultar em 3, que na representação ternária não é um dígito, mas
sim acarreta somar 1 no dígito (j − 1) (e em todos os demais subsequentes (j − 2), (j −
3), . . . , 1 caso eles sejam o algarismo 2).

2.2 A F U N Ç Ã O D E P E A N O

17

Isto esgota todas as possibilidades das várias representações para um mesmo nú-

mero, o que prova que números com representações diferentes possuem o mesmo par

(ϕP, ψP) de imagem.

Proposição 2.5. A curva de Peano é sobrejetora.

Demonstração. Tomemos (0, x1x2x3x4 . . . ; 0, y1y2y3y4 . . .) ∈ Q. Basta demonstrar que
(cid:40)

existe t = 0, t1t2t3t4 . . . ∈ I tal que fP(t) =

0, x1x2x3x4 . . .
0, y1y2y3y4 . . .

.

Comparando os dígitos correspondentes entre os ternários e convenientemente ado-

tando que t0 = 0, obtemos pela própria deﬁnição da função que:

xn = kt0+t2+t4+...+t2n−2 t2n−1 e yn = kt1+t3+t5+...+t2n−1 t2n.

Como k é seu próprio inverso (2.3), temos que:

t2n−1 = kt0+t2+t4+...+t2n−2 xn e t2n = kt1+t3+t5+...+t2n−1 yn.

Com isto, podemos operar dígito a dígito até obter:

t1 = kt0 x1 = k0x1 = x1 (funciona pela escolha conveniente de t0);
t2 = kt1 y1 (funciona pois t1 foi deﬁnido na linha anterior);
t3 = kt0+t2 x2 (funciona pois t2 foi deﬁnido na linha anterior);
t4 = kt1+t3 y2 (funciona pois t3 foi deﬁnido na linha anterior, etc).

. . .

t2n−1 = kt0+t2+t4+...+t2n−2 xn
t2n = kt1+t3+t5+...+t2n−1 yn.

E então obtemos todos os demais inﬁnitos dígitos de t de forma recursiva, o que

prova a proposição.

Proposição 2.6. A curva de Peano é contínua.

Demonstração. Vamos inicialmente provar que ϕP é contínua à esquerda em todo t0 ∈
(0, 1]. Seja (cid:101) > 0, e escolha n ∈ N tal que 1
3n < (cid:101). Tomemos t0 = 0, t1t2t3 . . . t2nt2n+1 . . .
a representação de t0 que não é ﬁnita e tome δ = 0, 000 . . . 0t2n+1t2n+2 . . .. Já que
t0 − δ = 0, t1t2t3 . . . t2n, então a representação ternária de qualquer t ∈ (t0 − δ, t0] tem
de coincidir com a de t0 nos 2n primeiros dígitos, sendo t, com seus demais dígitos,

18

C U R VA D E P E A N O

representado por t = 0, t1t2t3 . . . t2nr2n+1r2n+2 . . .. Considerando a soma s = t2 + t4 + t6 +
. . . + t2n:

|ϕP(t0) − ϕP(t)| = |0, t1(kt2 t3) . . . (kst2n+1) . . . − 0, t1(kt2 t3) . . . (ksr2n+1) . . . |≤

=

=

=

+

|ks+t2n+2 t2n+3 − ks+r2n+2r2n+3|
3n+2
1
1 − 1
3

2
3n+1

=

·

2
3n+3 + . . . =

|kst2n+1 − ksr2n+1|
3n+1
2
3n+2 +
1
3
3n
2

2
3n+1 +
2
3n+1

=

·

< (cid:101).

+ . . . ≤

Assim, mostramos que ϕP é contínua à esquerda em t0.

Para mostrar que ϕP é contínua à direita em [0, 1), seja (cid:101) > 0, e novamente escolhe-
3n < (cid:101). Escolhendo a representação de t0 que não termina com
32n − 0, 000 . . . 0t2n+1t2n+2 . . .. Já

mos n ∈ N tal que 1
uma sequência inﬁnita de dígitos 2 e tomamos δ = 1
que

t0 + δ = 0, t1t2t3 . . . t2n−1t2nt2n+1 . . . +

1
32n

− 0, 000 . . . 0t2n+1t2n+2 . . . =

= 0, t1t2t3 . . . t2n−1(t2n + 1) = 0, t1t2t3 . . . t2n−1t2n2

então qualquer t ∈ [t0, t0 + δ) tem de coincidir com t0 nos 2n primeiros dígitos, repre-
sentando os demais dígitos por t = 0, t1t2t3 . . . t2nr2n+1r2n+2 . . .. Considerando a soma
s = t2 + t4 + t6 + . . . + t2n:

|ϕP(t) − ϕP(t0)| = |0, t1(kt2 t3) . . . (ksr2n+1) . . . − 0, t1(kt2 t3) . . . (kst2n+1) . . . |≤

=

=

=

+

|ks+r2n+2r2n+3 − ks+t2n+2 t2n+3|
3n+2
1
1 − 1
3

2
3n+1

=

·

2
3n+3 + . . . =

|ksr2n+1 − kst2n+1|
3n+1
2
3n+2 +
1
3
3n
2

2
3n+1 +
2
3n+1

< (cid:101)

=

·

+ . . . ≤

Assim, mostramos que ϕP é contínua à direita em t0.

Já que ϕP é contínua à esquerda em (0, 1] e à direita em [0, 1), então ϕP é contínua

em [0, 1]. A continuidade de ψP se dá de maneira análoga, provando a proposição.

De posse das proposições 2.5 e 2.6, podemos ﬁnalmente resumir que:

Proposição 2.7. A curva de Peano fP é uma curva de preenchimento de espaço.

2.3 A C U R VA G E O M É T R I C A D E P E A N O

19

Figura 1: a) Subquadrados de Q relacionados a x1 < x2 < . . . < x9. b) Orientação de
preenchimento conforme (a), iniciando em (0; 0) e terminando em (1; 1).

2.3 A C U R VA G E O M É T R I C A D E P E A N O

Como percebe-se da seção anterior, todas as demonstrações e propriedades exibidas

foram dadas sem o uso de ilustrações ou de qualquer conexão geométrica que per-

mitisse o desenho do traço da curva. Seria possível dar a esta curva uma forma de

como ela se comporta no plano? Seria possível visualizar esta forma com a qual ela

vai percorrendo cada ponto do plano até preenchê-lo por completo?

Essas perguntas não demorariam a ser respondidas. Um ano depois de sua publica-

ção, em 1891, D. Hilbert propôs uma interpretação capaz de desenhá-la de maneira

recursiva. Seu raciocínio pode ter sido tão simples quanto se mostra a seguir.

Tome x1 = 0, 00t3t4t5 . . . ∈ I : aplicando a função de Peano, tem-se as coordenadas:

(cid:40)

fP(x1) =

0, 0(k0t3)(k0+t4 t5) . . .
0, (k00)(k0+t3 t4) . . .

(cid:40)

=

0, 0t3(kt4 t5)(kt4+t6 t7) . . .
0, 0(kt3 t4)(kt3+t5 t6) . . .

Particionando Q em 9 subquadrados congruentes, temos que cada lado mede [0, 1]3
unidades, donde nota-se que fP(x1) ∈ [0, 0; 0, 1] × [0, 0; 0, 1] pertence ao subquadrado
de rótulo 1 da Figura 1a. Note que todo número da forma de x1 é levado por fP a este
subquadrado independente da escolha de tj, j ≥ 3.

Analogamente, aplicando o mesmo processo e fazendo variar os dois primeiros dígi-

tos por todas as demais combinações possíveis, tem-se:

20

C U R VA D E P E A N O

Para x2 = 0, 01t3t4t5 . . . : fP(x2) =

(cid:40)

0, 0(k1t3)(k1+t4 t5) . . .
0, (k01)(k0+t3 t4) . . .

(cid:40)

=

0, 0(kt3)(k1+t4 t5) . . .
0, 1(kt3 t4) . . .

.

∴ fP(x2) ∈ [0, 0; 0, 1] × [0, 1; 0, 2] (subquadrado de rótulo 2 da Figura 1a.)

Para x3 = 0, 02t3t4t5 . . . : fP(x3) =

(cid:40)

0, 0(k2t3)(k2+t4 t5) . . .
0, (k02)(k0+t3 t4) . . .

(cid:40)

=

0, 0t3(k2+t4 t5) . . .
0, 2(kt3 t4) . . .

.

∴ fP(x3) ∈ [0, 0; 0, 1] × [0, 2; 1, 0] (subquadrado de rótulo 3 da Figura 1a.)

Para x4 = 0, 10t3t4t5 . . . : fP(x4) =

(cid:40)

0, 1(k0t3)(k0+t4 t5) . . .
0, (k10)(k1+t3 t4) . . .

(cid:40)

=

0, 1t3(kt4 t5) . . .
0, 2(k1+t3 t4) . . .

.

∴ fP(x4) ∈ [0, 1; 0, 2] × [0, 2; 1, 0] (subquadrado de rótulo 4 da Figura 1a.)

Para x5 = 0, 11t3t4t5 . . . : fP(x5) =

(cid:40)

0, 1(k1t3)(k1+t4 t5) . . .
0, (k11)(k1+t3 t4) . . .

(cid:40)

=

0, 1(kt3)(k1+t4 t5) . . .
0, 1(k1+t3 t4) . . .

.

∴ fP(x5) ∈ [0, 1; 0, 2] × [0, 1; 0, 2] (subquadrado de rótulo 5 da Figura 1a.)

Para x6 = 0, 12t3t4t5 . . . : fP(x6) =

(cid:40)

0, 1(k2t3)(k2+t4 t5) . . .
0, (k12)(k1+t3 t4) . . .

(cid:40)

=

0, 1t3(k2+t4 t5) . . .
0, 0(k1+t3 t4) . . .

.

∴ fP(x6) ∈ [0, 1; 0, 2] × [0, 0; 0, 1] (subquadrado de rótulo 6 da Figura 1a.)

Para x7 = 0, 20t3t4t5 . . . : fP(x7) =

(cid:40)

0, 2(k0t3)(k0+t4 t5) . . .
0, (k20)(k2+t3 t4) . . .

(cid:40)

=

0, 2t3(kt4 t5) . . .
0, 0(k2+t3 t4) . . .

.

∴ fP(x7) ∈ [0, 2; 1, 0] × [0, 0; 0, 1] (subquadrado de rótulo 7 da Figura 1a.)

Para x8 = 0, 21t3t4t5 . . . : fP(x8) =

(cid:40)

0, 2(k1t3)(k1+t4 t5) . . .
0, (k21)(k2+t3 t4) . . .

(cid:40)

=

0, 2(kt3)(k1+t4 t5) . . .
0, 1(k2+t3 t4) . . .

.

∴ fP(x8) ∈ [0, 2; 1, 0] × [0, 1; 0, 2] (subquadrado de rótulo 8 da Figura 1a.)

Para x9 = 0, 22t3t4t5 . . . : fP(x9) =

(cid:40)

0, 2(k2t3)(k2+t4 t5) . . .
0, (k22)(k2+t3 t4) . . .

(cid:40)

=

0, 2t3(k2+t4 t5) . . .
0, 2(k2+t3 t4) . . .

.

∴ fP(x9) ∈ [0, 2; 1, 0] × [0, 2; 1, 0] (subquadrado de rótulo 9 da Figura 1a.)

Temos então como determinar com precisão em qual região do quadrado a imagem

de determinado x irá recair, baseado apenas nos seus dois primeiros dígitos. Mais do
que isso: como x1 < x2 < . . . < x9, fazendo um segmento orientado que percorre
do quadrado 1 ao quadrado 9, temos como entender por quais caminhos a curva vai

"preenchendo o espaço", conforme Figura 1b.

Este raciocínio pode ser estendido: tomando os dois próximos dígitos de x (t3 e
t4), podemos também calcular sua imagem baseado nos valores que podem assumir,

2.3 A C U R VA G E O M É T R I C A D E P E A N O

21

independentemente dos valores de tj, j ≥ 5, conforme ilustraremos para os números
x11 = 0, 0000t5t6t7 . . . e x12 = 0, 0001t5t6t7 . . . :

(cid:40)

fP(x11) =

0, 0(k00)(k0+0t5)(k0+0+t6 t7) . . .
0, (k00)(k0+00)(k0+0+t5 t6) . . .

(cid:40)

=

0, 00t5(kt6 t7) . . .
0, 00(kt5 t6) . . .

∴ fP(x11) ∈ [0, 00; 0, 01] × [0, 00; 0, 01].

(cid:40)

fP(x12) =

0, 0(k00)(k0+1t5)(k0+1+t6 t7) . . .
0, (k00)(k0+01)(k0+0+t5 t6) . . .

(cid:40)

=

0, 00(kt5)(k1+t6 t7) . . .
0, 01(kt5 t6) . . .

∴ fP(x12) ∈ [0, 00; 0, 01] × [0, 01; 0, 02].

Deixamos os demais próximos pontos a cargo do leitor, visto que o processo segue-se

por exaustão. Com isso geram-se mais 9 subquadrados para cada um dos quadrados
gerados anteriormente, perfazendo um total de 32 × 32 = 27 novos subquadrados em
cada região, relacionados a 27 partições de I, conforme Figura 2a.

Repetindo este processo ad inﬁnitum, cada dois dígitos de x ocasiona uma nova
iteração de subdivisões de Q; portanto, particionando I em 32n subintervalos, teremos
relacionados 32n subregiões de Q, conforme ilustra a Figura 2 para n = 1 (a) e n = 2
(b).

Como um número cada vez maior de partições de I fazem os subintervalos se re-

duzirem a um ponto e as diagonais dos subquadrados se reduzirem a zero (um ponto

do espaço), tem-se a correspondência de qualquer ponto do espaço de Q com um ele-

mento de I. Isto sugere uma visualização para a curva iteração a iteração, mostrando

de que forma seus estágios de construção acabam por preencher mais e mais pedaços

do espaço.

Com isso, Hilbert toma nota dos principais elementos da curva: a imagem de x

entre uma iteração e a próxima ﬁca contida no subquadrado deﬁnido anteriormente;

se x1 e x2 são números bastante próximos, suas imagens estarão contidas em quadra-
dos próximos; a borda de dois quadrados pertence a dois subintervalos diferentes; e

existe sempre um caminho que liga as várias divisões subsequentes, mantendo um pa-

drão de preenchimento. Tais características seriam então generalizadas por Hilbert,

fazendo-o propor uma nova curva com tais padrões mantidos, como veremos no capí-

tulo seguinte.

22

C U R VA D E P E A N O

Figura 2: Segunda (a) e terceira (b) iterações na curva de Peano.

3

C U R VA D E H I L B E R T

De posse das características estudadas na curva de Peano, D. Hilbert propôs em

seguida daquele mesmo ano um modelo de curva inspirado no modelo de construção

geométrica passo-a-passo através de iterações recursivas, particionando cada vez mais

o plano e varrendo estas regiões conforme avançam-se as iterações.

Para tanto, partiu da seguinte heurística: se um intervalo I pode ser relacionado

continuamente em um quadrado Q, então particionando I em quatro subintervalos

congruentes e Q em quatro subquadrados congruentes, cada subintervalo pode ser

relacionado continuamente em um dos subquadrados. Então, cada subintervalo pode

ser particionado em mais 4 partes congruentes, assim como cada subquadrado por

ele relacionado pode ser particionado em mais 4 partes congruentes, e o argumento é

então repetido ad inﬁnitum.

Hilbert provou então haver uma disposição dos subquadrados a cada iteração tal que

para cada par de subintervalos particionados adjacentes correspondem subquadrados

adjacentes com um lado em comum, de sorte que é preservada a relação de inclusão:
se a um intervalo Ij corresponde um quadrado Qj, então a cada partição Ijk de Ij
corresponde um subquadrado Qjk de Qj. A Figura 3 ilustra as três primeiras iterações,
com uma linha poligonal partindo do centro de cada subquadrado indicando a ordem

em que a sequência de partições de I é reﬂetida nas partições de Q.

Podemos então estabelecer, por construção, a seguinte deﬁnição:

1, Q2

Deﬁnição 3.1. Tomemos o plano Q particionado em quatro regiões quadradas congru-
entes Q1
1, Q3
1 e o intervalo I particionado em quatro regiões de comprimentos
congruentes I 1
1 . Seja f1 a curva que visita estas quatro regiões do plano,
fazendo corresponder a cada uma delas uma região do intervalo: f [I 1
1 ] =

1, Q4
1 , I 2

1 ] = Q1

1, f [I 2

1 , I 4

1 , I 3

23

24

C U R VA D E H I L B E R T

Figura 3: (a) Um quadrado unitário e suas quatro partições congruentes. A linha poligonal

que passa pelo centro de cada quadrado representa a ordem que correspondência com os
subintervalos de I. (b) Segunda e (c) terceira iterações da Curva de Hilbert.

2

2

, Qi

2 , I 3

2 , I 2

2, Q2

2, Q3

1, f [I 3

1, f [I 4

2 e I 1

1 ] = Q3

2, . . . , Q16

2 é subregião de Qk

1 ] = Q4
Q2
tervalo) em mais quatro regiões congruentes Q1

1, então o intervalo relacionado I j
1 . Façamos também com que f2 relacione intervalos contíguos I i−1

1. Particionemos cada uma destas regiões (do plano e do in-
2 , . . . , I 16
2 .
Seja f2 a curva que visita estas dezesseis novas regiões do plano preservando a relação
de inclusão: se Qj
2 é subregião
de I k
, I i
2 a regiões
quadradas contíguas Qi−1
2 (que possuam ao menos um lado em comum). A seguir,
continuamos particionando cada uma das 22(n−1) regiões de Q e I da iteração n − 1
em 22n regiões para a iteração n, e seja fn a curva que passa por cada região, sempre
respeitando a relação de inclusão e contiguidade. Fixado t ∈ [0, 1], para cada n ∈ N
tem-se que sua imagem fn(t) = (xn(t), yn(t)) encontra-se dentro de um subquadrado
Qj
2n durante al-
guma iteração n. Como A1 ⊇ A2 ⊇ . . . ⊇ An ⊇ . . . e B1 ⊇ B2 ⊇ . . . ⊇ Bn ⊇ . . . são
sequências de intervalos encaixantes, temos pelo teorema 1.28 que existe um único
x(t) ∈ (cid:84)
logamente, existe um único y(t) ∈ (cid:84)
como a função f H(t) = (x(t), y(t)) limite desta sequência de curvas.

n∈N An(t) delimitado pela sequência de intervalos fechados encaixantes; ana-
n∈N Bn(t). Com isto, deﬁnimos a curva de Hilbert

n = An × Bn, onde An e Bn são intervalos fechados de comprimento 1

Notemos que se t é extremidade de um dos subintervalos particionados (exceto 0

ou 1), então ele pertence a dois subintervalos encaixantes em sequência. Mas como

intervalos adjacentes estão relacionados a subquadrados adjacentes com pelo menos

um lado em comum, então f H(t) leva à mesma imagem.

Proposição 3.2. A função f H : I → Q é sobrejetora.

Demonstração. Seja (ξ0, η0) ∈ Q um ponto qualquer do quadrado unitário. Decerto
este ponto está contido em uma sequência de quadrados fechados encaixantes cuja

diagonal reduz-se ao ponto em questão. Cada um destes quadrados encaixantes está

relacionado a um intervalo de uma sequência de intervalos fechados encaixantes ge-

rados por partições sucessivas, cujos comprimentos tendem a zero. Esta sequência

C U R VA D E H I L B E R T

25

de intervalos deﬁne, conforme teorema 1.28, um único ponto t0 ∈ I, e então temos
f H(t0) = (ξ0, η0).

Notemos que se um ponto repousa em um lado de um subquadrado, interior ao

quadrado unitário, então ele pertence a dois subquadrados, que podem ou não es-

tarem encaixados em sequência. Caso não estejam, então os pontos deste lado estão

relacionados a dois subintervalos diferentes (caso do lado compartilhado pelos subqua-

drados que parte e que chega a curva na Figura 3a). Porém, se um ponto repousa em

um dos vértices de um subquadrado, ponto este interior ao quadrado unitário, então

ele obrigatoriamente pertence a quatro subquadrados e, consequentemente, a vários

subintervalos não necessariamente em sequência. Tal resultado, de que mais de um

ponto no intervalo possua mesma imagem na superfície, faz com que a curva não seja

injetora, como previmos segundo o Teorema de Netto em 1.21.

Proposição 3.3. A função f H : I → Q é contínua.

Demonstração. Particionando I até a n-ésima iteração, teremos um total de 22n subin-
. Tomando dois pontos do intervalo t1, t2 ∈ I cuja distân-
tervalos de comprimento

cia um do outro seja menor que este comprimento, |t1 − t2|<
tos necessariamente pertencem a um ou a, no máximo, dois subintervalos consecutivos.

, temos que estes pon-

1
22n

1
22n

Como os subintervalos consecutivos estão relacionados a subquadrados consecutivos,
temos que a imagem destes pontos f (t1), f (t2) ∈ Q pertencem a, no máximo, dois sub-
quadrados consecutivos de lado
, com um lado em comum. Estes dois subquadrados
√

1
2n

formam um retângulo de diagonal

, conforme Figura 4. Logo, quando n → ∞, te-

5
2n

mos que a distância entre as imagens tende a zero, (cid:107) f H(t1) − f H(t2)(cid:107)≤
conclui que f H é contínua.

√

5
2n

→ 0. Isto

Alternativamente, pode-se notar que a sequência de funções contínuas fn converge

uniformemente para f H; assim, pelo teorema 1.25 tem-se a continuidade de f H.

De posse das proposições 3.2 e 3.3, podemos ﬁnalmente resumir que:

Proposição 3.4. A curva de Hilbert f H é uma curva de preenchimento de espaço.

26

C U R VA D E H I L B E R T

Figura 4: Maior distância possível entre dois pontos pertencentes a dois subquadrados em

sequência após a n-ésima iteração.

3.1 A R I T M E T I Z A Ç Ã O D A C U R VA D E H I L B E R T

Apesar de claramente estabelecido o processo de determinação da curva de Hilbert,

percebemos que determinar a imagem de um ponto t ∈ I qualquer não consegue
ser mais simples que iterando indeﬁnidamente por várias partições de Q. Determinar

a imagem de t é tarefa prática apenas quando t recai como extremidade de algum
subintervalo de I e quando o número de iterações é pequeno; para qualquer outra

possibilidade torna-se um processo muito trabalhoso. Hilbert apenas propôs a curva;

segundo Sagan [11], foi tarefa de W. Wunderlich mostrar que a construção de tal curva

pode ser obtida de maneira mais perceptível.

Ao observarmos a Figura 3, notamos que a curva tem origem no quadrado inferior

esquerdo e ﬁnal no quadrado inferior direito, durante a primeira construção em (a).

Nas construções subsequentes em (b) e (c) vemos que esta característica é mantida,

sempre iniciando no quadrado inferior mais à esquerda e sempre ﬁnalizando no qua-

drado inferior mais à direita. Como cada um destes quadrados tende para um ponto,

considerando Q no plano cartesiano, temos portanto que a curva de Hilbert se origina

na origem do sistema e termina no ponto (1, 0).

Temos de nos preocupar com a orientação de cada subquadrado durante cada pro-

cesso de iteração de forma que o ponto ﬁnal do percurso de um subquadrado coincida

com o ponto inicial do subquadrado subsequente, sempre respeitando a ordem com

que os subquadrados são tomados na iteração anterior. Na Figura 5, podemos perce-

ber, através de vetores, como cada subquadrado é percorrido através da orientação

entre pontos inicial e ﬁnal de cada subquadrado, durante as duas primeiras iterações.
Como existe uma correspondência biunívoca entre os pontos do plano E2 com os pon-

3.1 A R I T M E T I Z A Ç Ã O D A C U R VA D E H I L B E R T

27

Figura 5: Quadrado unitário percorrido da origem a (0, 1), e orientação dos subquadrados nas

duas primeiras iterações.

tos do plano complexo dada por (a, b) (cid:55)→ (a + bi), podemos, para a primeira iteração,
pensar em submeter Q às seguintes transformações lineares, com z ∈ C:

2 em relação à origem: z(cid:48) = 1

Para produzirmos o primeiro subquadrado, o qual se origina a curva, temos de con-
trair Q à razão 1
2 z. Isto deixa o vetor ainda apontando
para a direita. Para que aponte para cima, aplicamos uma rotação de 90o ao quadrado
resultante: z(cid:48)(cid:48) = z(cid:48)i. Com isto nosso quadrado muda para o segundo quadrante. Para
que volte ao quadrante original, basta reﬂetir em torno do eixo imaginário: z(cid:48)(cid:48)(cid:48) = −z(cid:48)(cid:48).
Combinando estas três operações em uma, deﬁnimos uma transformação composta
única H0 dada por: H0z = z(cid:48)(cid:48)(cid:48) = −z(cid:48)(cid:48) = −z(cid:48)i = z(cid:48)i = 1

2 zi.

Para produzirmos, na ordem que seguem os vetores, o segundo subquadrado, basta

que apliquemos a contração em Q à mesma razão e desloquemos o quadrado resul-
tante acima do primeiro, a 1
2 de distância da origem (que é agora o novo lado do
primeiro subquadrado), uma vez que a orientação já está correta. Para agilizar, dare-
mos direto a transformação composta resultante por: H1z = 1

2 z + i
2 .

Raciocínio análogo será dado ao terceiro e próximo subquadrado, uma vez que sen-

tido e orientação do vetor são os mesmos do anterior, bastando apenas que mude a
colocação do quadrado resultante a 1
2 de dis-
tância à direita do quadrado anterior. A transformação composta resultante, portanto,
é dada por: H2z = 1

2 de distância acima da origem e também 1

2 z + 1

2 + i
2 .

Por ﬁm, para o último subquadrado precisamos contrair Q à mesma razão, mas
agora mudar a orientação do vetor para baixo, aplicando uma rotação de -90o: z(cid:48) =
− 1
Isto muda nosso quadrado para o quarto quadrante. Mais ainda, isto deixa

2 zi.

o vetor preso à parede esquerda do quadrado. Note a orientação do vetor dado no

terceiro subquadrado, onde este aponta para a parede direita. Para corrigirmos isto

28

C U R VA D E H I L B E R T

basta reﬂetirmos nosso quadrado em relação ao eixo imaginário: z(cid:48)(cid:48) = −z(cid:48), o que faz
com que o quadrado ocupe, agora, o terceiro quadrante. Com orientação ajustada,
basta então transladarmos este quadrado para a sua posição correta: deslocamos 1
2
unidade para cima para que ocupe o segundo quadrante, 1
2 unidade à direita para que
2 unidade à direita para ﬁnalizar: z(cid:48)(cid:48)(cid:48) =
sobreponha o primeiro subquadrado, mais 1
z(cid:48)(cid:48) + 1

2 . A composta resultante, portanto, será dada por: H3z = − 1

2 zi + 1 + i
2 .

2 + 1

2 + i

As transformações H0z, H1z, H2z e H3z, quando aplicadas a Q, recobrem o mesmo
espaço ocupado por este e deﬁnem a primeira iteração da curva. Quando aplicamos as

mesmas quatro transformações a cada um dos subquadrados resultantes da iteração

anterior, obtemos a segunda iteração, conforme mostra a Figura 5, e assim sucessiva-

mente.

Tomemos então a seguinte deﬁnição: seja Hqj z = 1

2 hqj , j ∈ {0, 1, 2, 3} onde
H0z = zi, H1z = z, H2z = z, H3z = −zi, h0 = 0, h1 = i, h2 = 1 + i e h3 = 2 + i. Decom-
pondo as transformações em partes real e imaginária produz o seguinte catálogo de

2 Hqj z + 1

transformações de similaridades:

(cid:32)

(cid:32)

(cid:32)

H0

H1

H2

(cid:33)

(cid:33)

(cid:33)

=

=

=

(cid:32)

(cid:32)

(cid:32)

1
2

1
2

1
2

ξ

η

ξ

η

ξ

η

0 1

1 0

1 0

0 1

1 0

0 1

(cid:33) (cid:32)

(cid:33) (cid:32)

(cid:33) (cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:33)

(cid:33)

(cid:33)

+

+

+

1
2

1
2

1
2

0

0

0

1

1

1

ξ

η

ξ

η

ξ

η

(cid:33)

(cid:33)

(cid:33)

=

=

=

(cid:32)

(cid:32)

(cid:32)

1
2

1
2

1
2

H0

H1

H2

ξ

η

ξ

η

ξ

η

(cid:33)

(cid:33)

(cid:33)

+

+

+

1
2

1
2

1
2

h0

h1

h2

(3.1)

(cid:32)

(cid:33)

(cid:32)

H3

ξ

η

=

1
2

0 −1
−1

0

(cid:33) (cid:32)

(cid:33)

(cid:32)

(cid:33)

+

1
2

ξ

η

2

1

=

1
2

H3

(cid:32)

ξ

η

(cid:33)

+

1
2

h3

Estas são as fórmulas de Wunderlich apresentou. Pela natureza do processo de

geração da curva de Hilbert, temos que será bastante simples proceder os cálculos
se assumirmos t ∈ I na representação quaternária: t = [0, q1q2q3 . . .]4, onde qj ∈
{0, 1, 2, 3}.

Assim, t recai no (q1 + 1)-ésimo subintervalo da primeira partição de I em quatro
subintervalos congruentes. Consequentemente, sua imagem recai no (q1 + 1)-ésimo
subquadrado da primeira partição de Q em quatro subquadrados congruentes: f H(t) ∈

3.1 A R I T M E T I Z A Ç Ã O D A C U R VA D E H I L B E R T

29

Hq1Q. Continuando a análise tal como ﬁzemos com a curva de Peano, temos também
que a imagem de t recairá no (q2 + 1)-ésimo subquadrado da segunda partição de
Q, dentro do (q1 + 1)-ésimo subquadrado Hq1Q da primeira partição, nomeadamente
f H(t) ∈ Hq1Hq2Q.

Continuando este processo ad inﬁnitum, chegamos na deﬁnição:

f H(t) = lim
n→∞

Hq1Hq2Hq3 . . . Hqn Q

(3.2)

onde o sinal de inclusão ∈ foi trocado pelo sinal de igual uma vez que os subquadrados

reduzem-se a pontos.

Por substituições sucessivas de Hj, hj em 3.2, obtemos que, para uma representação

ﬁnita de t e com Hq0 z = z, temos:

(cid:18)

1
2

Hq1

Hq2Hq3 . . . Hqn Q
(cid:21)
(cid:19)

1
2

1
2

Hq3 . . . Hqn Q

+

hq2

+

hq1 = . . .

(cid:19)

+

1
2

hq1 =

=

(cid:18)

Hq2

Hq1

Hq1Hq2Hq3 . . . Hqn Q =
(cid:20) 1
2

1
2
1
2n Hq1 Hq2 . . . Hqn +
n
∑
j=1

=

=

1
2j Hq0 Hq1 Hq2 Hq3 . . . Hqj−1 hqj

1
2n Hq1 Hq2 . . . Hqn−1 hqn +

1
2n−1 Hq1 Hq2 . . . Hqn−2 hqn−1 + . . . +

1
2

hq1 =

Consequentemente, f H(0, q1q2q3 . . . qn) =

da continuidade de f H:

n
∑
j=1

1
2j Hq0 Hq1 Hq2 Hq3 . . . Hqj−1 hqj e, em vista

f H(0, q1q2q3 . . .) =

∞
∑
j=1

1
2j Hq0 Hq1 Hq2 Hq3 . . . Hqj−1 hqj

(3.3)

Analisemos então como simpliﬁcar esta fórmula. Primeiro, notemos que H1z =
H2z = z, o que nos permite simpliﬁcar todos estes índices por acabarem não alterando
z. Depois, tomemos nota destas seguintes características:

• H2

0 z = H0H0(a + bi) = [(a + bi)i]i = [(a − bi)i]i = (b + ai)i = (b − ai)i = a + bi = z;

• H2

3 z = H3H3(a + bi) = −[−(a + bi)i]i = −[−(a − bi)i]i = −[−(b + ai)]i =

− (−b − ai)i = −(−b + ai)i = −(−a − bi) = a + bi = z;

• H0H3z = H0H3(a + bi) = [−(a + bi)i]i = [−(a − bi)i]i = [−(b + ai)]i = (−b − ai)i =

(−b + ai)i = −a − bi = −z;

• H3H0z = H3H0(a + bi) = −[(a + bi)i]i = −[(a − bi)i]i = −(b + ai)i = −(b − ai)i =

−(a + bi) = −a − bi = −z.

30

C U R VA D E H I L B E R T

Os dois primeiros itens revelam que a cada par de vezes que utilizarmos H0 ou
H3 teremos como resultado o próprio z utilizado; os dois últimos itens revelam que
não importa se utilizamos primeiro H0 e em seguida H3 ou vice-versa, a aplicação
independe da ordem, revelando ser uma operação comutativa.

Com base nisto, podemos eliminar então todos os fatores H1 e H2 e reorganizar
todos os fatores H0 e H3 restantes de forma a agrupá-los segundo uma potência, im-
portando apenas se seu expoente resultante é aplicado um número par ou um número

ímpar de vezes. Podemos, portanto, reescrever nossa fórmula em 3.3 como segue:

f H(0, q1q2q3 . . .) =

∞
∑
j=1

1
2j H

e0j
0 H

e3j
3 hqj

(3.4)

onde ekj indica a paridade do número de vezes em que k precede qj para k = 0 ou 3;
ou seja, ekj = 0 ou 1.

Observemos também que como H0z = zi = −(−zi) = −H3z, podemos reescrever o

seguinte trecho da equação em 3.4 como segue:

H

e0j
0 H

e3j
3 hqj = (−H3)e0j H

e3j
3 hqj = (−1)e0j H

e0j+e3j
3

hqj

Observando que qj = 0 leva ao termo H

e0j
0 H

e3j
3 h0 =

(cid:33)

(cid:32)

0

0

, os demais casos se resu-

mem a:

h1 =

(cid:32)

0

1

(cid:33)

(cid:32)

; h2 =

(cid:33)

(cid:32)

; h3 =

(cid:33)

2

1

1

1

; donde hk =

(cid:32)

k − 1

1

(cid:33)

.

Como podemos eliminar cada par de vezes que H3 é aplicado, tomemos dj = e0j + e3j

(mod 2). Desmembrando H3 em sua forma de matriz, obtemos:

(−1)e0j H

dj
3 hqj = (−1)e0j

(cid:33)dj (cid:32)

(cid:32)

0 −1
−1

0

(cid:33)

qj − 1
1

(cid:40)

Como dj =

0, se e0j ≡ e3j mod 2
1, caso contrário

, analisemos ambos os valores possíveis para dj:

3.1 A R I T M E T I Z A Ç Ã O D A C U R VA D E H I L B E R T

31

dj = 0 ⇒

(cid:33)0 (cid:32)

(cid:32)

0 −1
−1

0

(cid:32)

=

(1 − 0)qj − 1
1 − 0 · qj

(cid:33)

qj − 1
1
(cid:32)

=

(cid:33)

(cid:32)

=

(cid:33)

=

1 · qj − 1
1 − 0
(cid:33)

(1 − dj)qj − 1
1 − djqj

dj = 1 ⇒

(cid:33)1 (cid:32)

(cid:32)

0 −1
−1

0

(cid:32)

=

(1 − 1)qj − 1
1 − 1 · qj

(cid:33)

qj − 1
1
(cid:32)

=

(cid:33)

(cid:32)

=

(cid:33)

=

0 − 1
(1 − qj) + 0
(cid:33)

(1 − dj)qj − 1
1 − djqj

Portanto, independente do valor que dj assuma, e considerando que estamos tra-
balhando apenas com a imagem de dígitos qj positivos, transformamos ﬁnalmente a
equação 3.4 em:

f H(0, q1q2q3 . . .) =

(cid:32)

∞
∑
j=1

1
2j (−1)e0j

(1 − dj)qj − 1
1 − djqj

(cid:33)

(3.5)

Para ilustrar o uso da fórmula concebida, vamos encontrar a imagem do quaternário

q = [0, 301]4. Temos pela fórmula em 3.4 que:

f H(0, 301) =

3
∑
j=1

1
2j H

e0j
0 H

e3j
3 hqj =

1
21 He01

0 He31

3 h3 +

1
22 He02

0 He32

3 h0 +

1
23 He03

0 He33

3 h1

e01 = número de 0’s antes de (q1 = 3) = 0

e31 = número de 3’s antes de (q1 = 3) = 0

e02 = número de 0’s antes de (q2 = 0) = 0

e32 = número de 3’s antes de (q2 = 0) = 1

e03 = número de 0’s antes de (q3 = 1) = 1

e33 = número de 3’s antes de (q3 = 1) = 1

∴ f H(0, 301) =

1
2

H0

0 H0

3 h2 +

1
4

H0

0 H1

3 h0 +

1
8

H1

0 H1

3 h3

d1 = e01 + e31 (mod 2) = 0 + 0 (mod 2) = 0

d2 = e02 + e32 (mod 2) = 0 + 1 (mod 2) = 1

d3 = e03 + e33 (mod 2) = 1 + 1 (mod 2) = 0

32

C U R VA D E H I L B E R T

Figura 6: Imagem do ponto de coordenada quaternária 0,203.

Consequentemente, como h0 = 0, temos pela fórmula simpliﬁcada em 3.5 que:

f H(0, 301) =

=

=

1
2

1
2

(cid:32)

(−1)0

(1 − 0) · 3 − 1
1 − 0 · 3

(cid:32)

2

(cid:33)

(+1)

(cid:32)

1
1/2

1
(cid:33)

−

(cid:32)

+

1
8

(−1)

(cid:32)

(cid:33)

=

0
1/8

(cid:33)

0

1
(cid:32)

+ 0 +

(−1)1

1
8

(cid:32)

(1 − 0) · 1 − 1
1 − 0 · 1

(cid:33)

=

(cid:33)

=

1
3/8

(cid:33)

Esta imagem representa o ponto de entrada no segundo subquadrado da terceira

partição dentro do primeiro subquadrado da segunda partição dentro do quarto sub-

quadrado da primeira partição, conforme ilustra a Figura 6.

4

C U R VA D E L E B E S G U E

Pelo capítulo anterior, vemos que a curva inicial de Peano pôde ser abstraída de

uma fórmula rígida para uma que oferece todas as condições necessárias para uma

abstração mais ampla através de processos de partições do quadrado unitário em sub-

quadrados congruentes. Ainda assim, o resultado encontrado, por mais geral que seja,

ainda esbarra em algumas limitações do processo de geração como o de orientação

dos subquadrados para que a imagem de pontos adjacentes recaiam em subquadrados

adjacentes.

Uma análise mais fria deste resultado nos permite intuir que podemos reorganizar

os subquadrados no plano que, sendo a curva contínua, ela preencherá o espaço da

mesma forma. O que a reorganização ocasiona é um esticamento da curva, visto que

para ir de um subquadrado a outro adjacente a curva certamente percorre um espaço

menor que a qualquer outro localizado em coordenadas mais distantes no plano.

É neste cenário que H. Lebesgue entra, em 1904, com uma proposta que permitiria

a redistribuição dos subquadrados no plano. Preenchendo o espaço de cada subqua-

drado tal como ﬁzemos com as partições anteriores, cuidamos da reorganização destes

subquadrados através de interpolações, como veremos adiante. Tudo isto foi possível

graças aos estudos sobre um conjunto que ocupa espaço zero, iniciados por G. Cantor

em 1883, conjunto este que ﬁcou mais tarde conhecido por Conjunto de Cantor. É em

cima deste conjunto que centraremos nosso próximo estudo.

4.1 C O N J U N T O D E C A N T O R

Foi no apêndice de uma obra sobre espaços vetoriais inﬁnitos, escrito em 1883, que

G. Cantor procurava uma caracterização do contínuo, oferecendo o conjunto de todos

33

34

C U R VA D E L E B E S G U E

Figura 7: Construção do conjunto de Cantor a partir de I.

os pontos que podiam ser escritos na forma 2t1

33 + . . ., tj ∈ {0, 1} como exemplo
de um conjunto perfeito (um conjunto que é igual ao conjunto de todos os seus pontos

31 + 2t2

32 + 2t3

de acumulação). Este pequeno exemplo acabou por tomar vida própria, servindo de

inspiração para os mais remotos temas da Análise Matemática.

Este conjunto, que chamaremos de conjunto de Cantor, será denotado e represen-
tado por Γ = {[0, (2t1)(2t2)(2t3) . . .]3|tj = 0 ou 1}. (A ﬁm de simpliﬁcar notação ao
longo deste capítulo, tomaremos números t na base 3, salvo mencionado contrário).

Veremos a seguir algumas propriedades intrínsecas deste conjunto.

O conjunto de Cantor é conhecido por ser obtido por remoção dos terços interme-

diários de um intervalo unitário por um número inﬁnito de iterações. Tomando I,

3 ] e [ 2

dividindo-o em três partes iguais e removendo o terço central, obtemos os intervalos
[0, 1
3 , 1]. Depois, dividimos cada subintervalo resultante em três partes e nova-
mente removemos seus terços centrais, obtendo agora os subintervalos [0, 1
9 , 1
3 ],
3 , 7
[ 2
9 , 1]. A seguir continuamos com o mesmo processo em cada subintervalo
resultante ad inﬁnitum.

9 ] e [ 8

9 ], [ 2

Note que a construção do conjunto de Cantor por este processo acaba por eliminar

todos os ternários com algum dígito 1: tomando t = 0, t1t2t3 . . . e removendo o terço
central de I compreendido em (cid:0) 1
(cid:1) durante a primeira iteração, acabamos por remo-
ver todo número escrito da forma 0, 1t2t3t4 . . . exceto 0, 1, que reescrevemos da forma
0, 02. A seguir, durante a segunda iteração, removemos todos os números das formas
0, 01t3t4t5 . . . e 0, 21t3t4t5 . . . exceto 0, 01 e 0, 21, que reescrevemos como 0, 002 e 0, 202.
Prosseguindo com as iterações ad inﬁnitum, somos levados ao seguinte lema:

3 , 2

3

Lema 4.1. Um ternário t pertence ao conjunto de Cantor, t ∈ Γ, se, e somente se, uma de
suas representações não possui nenhum dígito 1 (notando que uma representação ﬁnita

4.1 C O N J U N T O D E C A N T O R

35

Figura 8: (n + 1)-ésima iteração na construção do conjunto de Cantor, a partir de (an, bn).

terminada em 1 pode ser reescrita como uma representação terminada em inﬁnitos dígitos

2).

Demonstração. Vimos que, para n = 1, temos que um intervalo (an, bn) é removido se
a1 = 0, 1 e b1 = 0, 2. Para n = 2, um intervalo é removido se a2 = 0, 01 e b2 = 0, 02 ou se
a2 = 0, 21 e b2 = 0, 22. Em geral, um intervalo é removido se an, bn podem ser escritos
da forma:

an = 0, (2a1)(2a2)(2a3) . . . (2an−1)1 e bn = 0, (2b1)(2b2)(2b3) . . . (2bn−1)2

(4.1)

Suponha isto verdadeiro. Depois, teremos na (n + 1)-ésima iteração, de acordo com a

ﬁgura 8, que:

• an+1 = an − 2

3n+1 = 0, (2a1)(2a2)(2a3) . . . (2an−1)1 − 2

3n+1 =

0, (2a1)(2a2)(2a3) . . . (2an−1)01; e

bn+1 = an − 1
0, (2a1)(2a2)(2a3) . . . (2an−1)02; ou

3n+1 = 0, (2a1)(2a2)(2a3) . . . (2an−1)1 − 1

3n+1 =

• an+1 = bn + 1

3n+1 = 0, (2b1)(2b2)(2b3) . . . (2bn−1)2 + 1

3n+1 =

0, (2b1)(2b2)(2b3) . . . (2bn−1)21; e

bn+1 = bn + 2
0, (2b1)(2b2)(2b3) . . . (2bn−1)22.

3n+1 = 0, (2b1)(2b2)(2b3) . . . (2bn−1)2 + 2

3n+1 =

E com isto recaímos de volta no caso 4.1 com n + 1 ao invés de n. Portanto, prova-se

por indução que para todo n ∈ N o aﬁrmado vale para a n-ésima iteração.

Repare que se um ternário t está no intervalo removido, t ∈ (an, bn), então ele é
da forma t = 0, (2t1)(2t2)(2t3) . . . (2tn−1)1rn+1rn+2 . . .. Se todos rn+j forem iguais a zero,
então t = an /∈ (an, bn); e que se todos rn+j forem iguais a 2, então t = bn /∈ (an, bn).
(cid:54)= 2, o que faz com
Portanto, existe pelo menos um rn+j

(cid:54)= 0 e pelo menos um rn+j

36

C U R VA D E L E B E S G U E

que um ternário seja removido da construção de Γ se, e somente se, uma de suas

representações contenha um dígito 1, o que prova o lema.

9

(cid:1)

Tomemos:

1 = (cid:0) 1
9 , 2
27 , 8
27
n ) ∪ (a(3)

Ω
Ω2 = (cid:0) 1
(cid:1) ∪ (cid:0) 7
27 , 2
27
n , b(2)
n ) ∪ (a(2)

(cid:1)
3 , 2
3
(cid:1) ∪ (cid:0) 7
9 , 8
(cid:1) ∪ (cid:0) 25
(cid:1) ∪ (cid:0) 19
(cid:1)
27 , 26
27 , 20
n ) ∪ . . . ∪ (a(2n−1)
n , b(3)
...
onde (a(k)
n , b(k)
n ) são os 2n−1 intervalos abertos removidos de I na n-ésima iteração da
construção de Γ. Já que todos Ω
j é aberto, o
que faz de Γ fechado. Logo, Γ contém todos seus pontos de acumulação. De fato, Γ
é um conjunto perfeito: é igual ao conjunto Γ(cid:48) de todos seus pontos de acumulação,

j são abertos, então ΓC = I\Γ = (cid:83)∞

Ω3 = (cid:0) 1
n , b(1)

Ωn = (a(1)

, b(2n−1)

Ω

j=1

27

27

)

n

n

9

conforme prova o lema a seguir:

Lema 4.2. O conjunto de Cantor é igual ao conjunto de todos os seus pontos de acumula-
ção; ou seja, Γ = Γ(cid:48). Mais precisamente, todo ponto da forma 0, (2t1)(2t2)(2t3) . . . (2tn) ∈
Γ é ponto de acumulação à esquerda, todo ponto da forma 0, (2t1)(2t2)(2t3) . . . (2tn)2 ∈ Γ
é ponto de acumulação à direita, e todos os outros pontos de Γ são pontos de acumulação

à direita e à esquerda.

Demonstração. Seja t = 0, (2t1)(2t2)(2t3) . . . =

∞
∑
j=1

2tj
3j

∈ Γ, tj = 0 ou 1. Tomando δ

suﬁcientemente grande tal que

que t(cid:48) ∈ Γ. Portanto, |t − t(cid:48)|=

1
3δ
∞
∑
j=δ+1

< (cid:101), vamos deﬁnir um ponto t(cid:48) =

2tj
3j

≤

∞
∑
j=δ+1

2
3j =

2
3δ+1

·

3
2

=

1
3δ

δ
∑
j=1

2tj
3j

, e reparar

< (cid:101), o que prova,

para todo (cid:101) > 0, sempre existir pontos de vizinhança à esquerda de t. Isto faz de todo
ponto de Γ\{0} um ponto de acumulação à esquerda.

mos deﬁnir um ponto t(cid:48)(cid:48) =

De forma análoga, tomando também δ suﬁcientemente grande tal que
∞
∑
j=δ+1
1
3δ

∞
∑
j=δ+1
existir pontos de vizinhança à direita de t. Isto faz de todo ponto de Γ\{1} um ponto
de acumulação à direita.

, e reparar que t(cid:48)(cid:48) ∈ Γ. Portanto, |t(cid:48)(cid:48) − t|=

< (cid:101), o que prova, para todo (cid:101) > 0, sempre

2tj
3j +
3
2

δ
∑
j=1
2
3δ+1

2 − 2tj
3j

∞
∑
j=δ+1

2
3j =

2
3j

≤

=

·

1
3δ

< (cid:101), va-

As duas aﬁrmações provam que todo ponto t ∈ Γ\{0, 1} é ponto de acumulação à

direita e à esquerda, o que prova a proposição.

4.1 C O N J U N T O D E C A N T O R

37

Notemos que, por ser um conjunto criado a partir de I, vale a inclusão Γ ⊂ I. Se
tomarmos a função g deﬁnida, para cada t = [0, (2t1)(2t2)(2t3) . . .]3 ∈ Γ, por g(t) =
[0, t1t2t3 . . .]2, tj = 0 ou 1, teremos deﬁnido uma sobrejeção de Γ no conjunto B =
{[0, b1b2b3 . . .]2 | bj = 0 ou 1} de todos os números binários, notando que I = B.
Assim, |B|≤ |Γ|≤ |I|= |B|; portanto, pelo Teorema de Cantor-Bernstein, existe uma
bijeção entre Γ e I, provando que o conjunto de Cantor tem a mesma cardinalidade

do contínuo. Isto é de grande interesse uma vez que possibilita a criação de funções
f : Γ → Q e F : Γ → C tais como:

f ([0, (2t1)(2t2) . . .]3) =

(cid:32)

[0, t1t3t5 . . .]2
[0, t2t4t6 . . .]2

(cid:33)

e F([0, (2t1)(2t2) . . .]3) =







[0, t1t4t7 . . .]2
[0, t2t5t8 . . .]2
[0, t3t6t9 . . .]2







(4.2)

com tj ∈ {0, 1} (sendo estas funções, por 1.21, claramente não injetoras).

Proposição 4.3. As funções f : Γ → Q e F : Γ → C são sobrejetoras.

Demonstração. Ao tomar um ponto p do quadrado unitário, p ∈ Q, ou um ponto q
do cubo unitário, q ∈ C, podemos representar suas coordenadas em notação binária:




(cid:32)

p =

0, a1a2a3 . . .
0, b1b2b3 . . .

(cid:33)

e q =





0, c1c2c3 . . .
0, d1d2d3 . . .
0, e1e2e3 . . .

. Basta então tomarmos





t(cid:48) = [0, (2a1)(2b1)(2a2)(2b2)(2a3)(2b3) . . .]3 e t(cid:48)(cid:48) = [0, (2c1)(2d1)(2e1)(2c2)(2d2)(2e2) . . .]3

que teremos, respectivamente, f (t(cid:48)) = p e F(t(cid:48)(cid:48)) = q.

Proposição 4.4. As funções f : Γ → Q e F : Γ → C são contínuas.

Demonstração. Vamos supor dois pontos t, t0 ∈ Γ próximos de tal sorte que |t − t0|<
1
32n . Isto signiﬁca que estes pontos possuem invariáveis seus 2n primeiros dígitos, tendo
t0 = 0, (2t1)(2t2)(2t3) . . . (2t2n)(2t2n+1) . . . e t = 0, (2t1)(2t2)(2t3) . . . (2t2n)(2r2n+1) . . .. Su-
pondo, por absurdo, que os números sejam diferentes; tomemos, por exemplo, os
dígitos na 2n-ésima posição como diferentes: t2n (cid:54)= r2n. Como tj = 0 ou 1, temos
obrigatoriamente que |t2n − r2n|= 1. Temos que t − t0 = 2t2n−2r2n
+ . . .,
cujo numerador pode unicamente assumir os valores −2, 0 ou 2. Como o módulo da
primeira parcela obrigatoriamente terá numerador 2, então a soma será certamente

+ 2t2n+1−2r2n+1
32n+1

32n

maior ou igual que uma soma com o restante das parcelas possuindo numerador
9 + . . .(cid:1) =
32n−1 − 2
negativo. Portanto, |t − t0|≥ 2

32n−2 − . . . = 2

32n − 2
32n+1

32n − 2

(cid:0)1 + 1

3 + 1

38

C U R VA D E L E B E S G U E

2

32n − 2

32n+1 · 3

2 = 2

32n − 1

32n = 1

32n , que contraria a hipótese inicial de que |t − t0|< 1
32n .
(cid:33)

(cid:32) t2n+1−r2n+1

Aplicando estes pontos à função, temos f (t) − f (t0) =

donde (cid:107) f (t) − f (t0)(cid:107)=

2n+1
t2n+2−r2n+2
2n+1

+ t2n+3−r2n+3
2n+2
+ t2n+4−r2n+4
2n+2

+ . . .

+ . . .

,

(cid:115)

(cid:18) t2n+1 − r2n+1
2n+1

+

t2n+3 − r2n+3
2n+2

(cid:19)2

+ . . .

+

(cid:18) t2n+2 − r2n+2
2n+1

+

t2n+4 − r2n+4
2n+2

(cid:19)2

≤

+ . . .

(cid:115)

(cid:115)

(cid:20) 1
2n+1
(cid:18) 2
2n+1

(cid:18)

1 +

(cid:19)2

+

+

1
4

1
2
(cid:18) 2
2n+1

+ . . .

(cid:19)(cid:21)2

(cid:18)

(cid:20) 1
2n+1

+

1 +

1
2

+

1
4

(cid:19)(cid:21)2

+ . . .

=

(cid:19)2

(cid:114)

=

1
22n +

1
22n =

√

2
2n

→ 0

=

≤

=

quando n → ∞, o que prova a continuidade.

Raciocínio análogo é utilizado para a função F, mudando apenas a quantidade de
3

√

componentes na norma: (cid:107)F(t) − F(t0)(cid:107)≤

2n → 0 quando n → ∞.

Com os resultados das proposições 4.3 e 4.4, podemos garantir então que a função

que assim relaciona o conjunto de Cantor no quadrado (ou cubo) unitário são sobre-

jetoras e contínuas (ou seja, deﬁnem uma curva de preenchimento de espaço, mesmo

com domínio reduzido).

4.2 D E F I N I Ç Ã O D E L E B E S G U E PA R A C U R VA D E P R E E N C H I M E N T O D E E S PA Ç O

Em 1904, H. Lebesgue tomou proveito destas propriedades do Conjunto de Cantor

para deﬁnir uma função que permitira o espalhamento dos subquadrados gerados pe-

las partições sucessivas, retirando a necessidade do vínculo entre suas arestas, fazendo

isto por meio de interpolação linear.

Se (a, b) é um intervalo removido na construção de Γ na n-ésima iteração, então
estendemos a função em 4.2, deﬁnindo f I em termos de f naquele intervalo como
segue:

f I(t) =

1
b − a

[ f (a)(b − t) + f (b)(t − a)] , a < t < b

(4.3)

Temos, portanto, que f I é contínua em ΓC por ser uma função aﬁm deﬁnida neste
conjunto, e que leva I em Q, porque f já faz isso. Demonstraremos como unir esta

função com a função deﬁnida dentro do conjunto de Cantor com o teorema a seguir:

4.2 D E F I N I Ç Ã O D E L E B E S G U E PA R A C U R VA D E P R E E N C H I M E N T O D E E S PA Ç O

39

Teorema 4.5. A função fL deﬁnida em 4.2 e estendida em ΓC como em 4.3 é contínua
em I.

Demonstração. Para provar a continuidade da curva, analisaremos que, tomando qual-

quer ponto de Q, existe um ponto de I que corresponde àquela imagem. Ao se tomar
fL(t), temos duas possibilidades para t: ou t ∈ Γ, ou t ∈ ΓC, e como para cada um deles
a imagem é deﬁnida por uma função diferente (ou por 4.2 ou por 4.3), estudaremos a

vizinhança de cada um destes casos separadamente também.

Caso 1. t ∈ ΓC: por 4.3, temos que fL(t) = f I(t). Logo, como fL = f I num intervalo

aberto I = (a, b) contendo t e f I é contínua, então fL é contínua em t.

Caso 2.

t ∈ Γ: então pelo lema 4.2 temos que t pode ser ponto de acumulação
à esquerda, ponto de acumulação à direita, ou ponto de acumulação à esquerda e à

direita. Analisemos cada um deles.

Para mostrar que f é contínua à esquerda em t, temos que mostrar que para dado um
(cid:101) > 0 qualquer, existe δ > 0 tal que, para todo t0 ∈ (t − δ, t), tem-se (cid:107) f (t) − f (t0)(cid:107)< (cid:101).
Fixemos (cid:101) > 0. Graças à proposição 4.4, conseguimos um δ0 > 0 que garante o
desejado para todo t0 ∈ (t − δ0, t) ∩ Γ. Temos, porém, de encontrar um δ que garanta
o resultado para todo t0 ∈ (t − δ, t), não apenas para os que estão em Γ.

Para t0 ∈ ΓC, temos que t0 pertence a algum intervalo (a, b) à esquerda de t removido

durante a construção de Γ, donde, por 4.3, temos:

fL(t) − fL(t0) = f (t) − f I(t0) =

f (t) −

1
b − a

[ f (a)(b − t0) + f (b)(t0 − a)] =

1
b − a
1
b − a
1
b − a
1
b − a

[ f (t)(b − a) − f (a)(b − t0) − f (b)(t0 − a)] =

[ f (t)b − f (t)a + f (t)t0 − f (t)t0 − f (a)b + f (a)t0 − f (b)t0 + f (b)a] =

[t0( f (t) − f (b)) − a( f (t) − f (b)) + b( f (t) − f (a)) − t0( f (t) − f (a))] =

[( f (t) − f (b))(t0 − a) + ( f (t) − f (a))(b − t0)]

Novamente evocando 4.4, em que f é contínua em Γ, temos que para todo (cid:101) > 0
existe um δ(cid:48) > 0 tal que, para qualquer t0 ∈ Γ, |t − t0|≤ δ(cid:48) ⇒ (cid:107) f (t) − f (t0)(cid:107)< (cid:101). Se
t − δ(cid:48) ∈ Γ, deﬁna δ(cid:48)(cid:48) = δ(cid:48); se t − δ(cid:48) ∈ ΓC, então t − δ(cid:48) ∈ (a(cid:48), b(cid:48)) que foi removido durante
a construção de Γ, donde deﬁnimos δ(cid:48)(cid:48) = b(cid:48). Tomando então t0 ∈ ΓC ∩ (t − δ(cid:48)(cid:48), t), sejam

40

C U R VA D E L E B E S G U E

a, b ∈ Γ tais que t0 ∈ (a, b) ⊂ ΓC. Pela escolha de δ(cid:48)(cid:48), vale que t − δ(cid:48)(cid:48) ≤ a < b < t; logo
teremos (cid:107) f (t) − f (a)(cid:107)< (cid:101) e (cid:107) f (t) − f (b)(cid:107)< (cid:101), donde:

[( f (t) − f (b))(t0 − a) + ( f (t) − f (a))(b − t0)]

(cid:13)
(cid:13)
(cid:13)
(cid:13)

≤

[(cid:107) f (t) − f (b)(cid:107)(t0 − a) + (cid:107) f (t) − f (a)(cid:107)(b − t0)] <

(cid:13)
(cid:13)
(cid:13)
(cid:13)

1
b − a
1
b − a
1
b − a
1
b − a
1
b − a

[(cid:101)(t0 − a) + (cid:101)(b − t0)] =

(t0 − a + b − t0) (cid:101) =

(b − a) (cid:101) = (cid:101).

Portanto, tomando δ = min{δ0, δ(cid:48)(cid:48)}, podemos enﬁm garantir que, para todo t0 dado,

se |t − t0|< δ, então (cid:107) f (t) − f (t0)(cid:107)< (cid:101).

Prova similar é dada para pontos de acumulação à direita: se tivermos t, t0 ∈ Γ,
então pela continuidade de f em Γ temos que para todo (cid:101) > 0 existe δ > 0 tal que
exista a vizinhança; caso t ∈ Γ e t0 ∈ ΓC, temos um argumento análogo ao anterior,
com t < a < b ≤ t + δ.

Ambas as provas garantem que para todo ponto de acumulação de Γ (ou seja, para
todos os pontos de Γ) exista uma vizinhança na interpolação; e os três casos (dois
pontos em ΓC, dois pontos em Γ, ou um em cada) garantem a continuidade para todo
ponto em I.

4.3 A P R O X I M A Ç Ã O P O L I G O N A L PA R A C U R VA D E L E B E S G U E

Vamos, com base na deﬁnição, utilizar uma aproximação através de polígonos para

tentar esboçar a construção da curva de Lebesgue através de cada uma de suas ite-
rações. Vamos primeiro dividir I nos subintervalos fechados (cid:2)0, 1
(cid:3) e
9 , 1(cid:3), resultados das duas primeiras iterações na construção de Γ. A seguir, tal como
(cid:2) 8
ﬁzemos no capítulo anterior, particionaremos Q em quatro subquadrados congruentes
Q00, Q01, Q10, Q11 e vamos associar cada um deles, respectivamente, aos subintervalos
criados, conforme mostra a ﬁgura 9.

(cid:3), (cid:2) 2

(cid:3), (cid:2) 2

9 , 1

3 , 7

3

9

9

As transformações que geram estas subdivisões de Q podem ser representadas tal

como Wunderlich apresentou em 3.1, assim:

4.3 A P R O X I M A Ç Ã O P O L I G O N A L PA R A C U R VA D E L E B E S G U E

41

Figura 9: Subdivisões de Q associada à primeira iteração da construção de Γ.

(cid:32)

(cid:32)

(cid:32)

(cid:32)

L00

L01

L10

L11

(cid:33)

(cid:33)

(cid:33)

(cid:33)

=

=

=

=

(cid:32)

(cid:32)

(cid:32)

(cid:32)

1
2

1
2

1
2

1
2

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

+

+

+

+

1
2

1
2

1
2

1
2

0

0

0

1

1

0

1

1

ξ

η

ξ

η

ξ

η

ξ

η

ξ

η

ξ

η

ξ

η

ξ

η

(cid:33)

(cid:33)

(cid:33)

(cid:33)

=

=

=

=

1
2

1
2

1
2

1
2

Q +

Q +

Q +

Q +

1
2

1
2

1
2

1
2

(cid:96)00

(cid:96)01

(cid:96)10

(cid:96)11

Pela associação proposta entre os subintervalos e os subquadrados, temos que:

t ∈

t ∈

t ∈

t ∈

(cid:20)

,

0,
(cid:20) 2
9
(cid:20) 2
,
3
(cid:20) 8
9

1
9
1
3
7
9

(cid:21)

(cid:21)

(cid:21)

(cid:21)

, 1

quando t = 0, 00(2t3)(2t4)(2t5) . . .

quando t = 0, 02(2t3)(2t4)(2t5) . . .

quando t = 0, 20(2t3)(2t4)(2t5) . . .

quando t = 0, 22(2t3)(2t4)(2t5) . . .

donde podemos concluir que (cid:96)ij =

(cid:33)

(cid:32)

ti
tj

, sendo t = 0, (2t1)(2t2)(2t3) . . ..

A seguir, aplicamos estas transformações a cada subquadrado gerado anteriormente,

associando às 16 subdivisões de Q os subintervalos gerados da segunda iteração da
construção de Γ conforme ﬁgura 10.

42

C U R VA D E L E B E S G U E

Figura 10: Subdivisões de Q associada à segunda iteração da construção de Γ.

Continuamos com ese processo ad inﬁnitum até obter a imagem fL(t) de t ∈ Γ, tal

qual procedemos em 3.3:

fL(0, (2t1)(2t2)(2t3) . . .) =

∞
∑
j=1

1
2j

(cid:96)2j−1 2j =

(cid:32)

∞
∑
j=1

1
2j

t2j−1
t2j

(cid:33)

(cid:32)

=

0, t1t3t5 . . .
0, t2t4t6 . . .

(cid:33)

que é precisamente a deﬁnição dada para fL em 4.2.

Os pontos iniciais dos intervalos fechados na n-ésima iteração da construção de Γ

(cid:32)

0, t1t3 . . . t2n−1
0, t2t4 . . . t2n

(cid:33)

, en-

32n =

têm a forma ti = 0, (2t1)(2t2)(2t3) . . . (2t2n) e imagem fL(ti) =

quanto os pontos ﬁnais nesta iteração têm a forma t f = 0, (2t1)(2t2)(2t3) . . . (2t2n) + 1

(cid:32)

(cid:33)

0, t1t3 . . . t2n−11
0, t2t4 . . . t2n1

0, (2t1)(2t2)(2t3) . . . (2t2n)2 e imagem fL(t f ) =

, que está diametral-

mente oposto em relação a fL(ti) no quadrado Qt1t2...t2n de lado com medida 1
2n . Então,
a curva de Lebesgue entra o subquadrado Qt1t2...t2n na borda inferior esquerda e deixa
o quadrado na borda superior direita. Por ﬁm, ligamos o ponto de saída de um sub-

quadrado com o ponto de entrada do próximo subquadrado através de uma linha reta,

que é precisamente a representação da interpolação linear deﬁnida em 4.3 (os inter-
valos abertos de I\Γ são relacionados a pontos do quadrado através de junções que

partem da borda superior direita de um subquadrado até a borda inferior esquerda do

subquadrado seguinte).

Com isto, deﬁnimos como polígono de aproximação para a curva de Lebesgue o

polígono formado pelas diagonais, deﬁnidas pelos pontos de entrada e saída de cada

subquadrado, mais as junções. A representação do polígono de aproximação para as

duas primeiras iterações está representada pela ﬁgura 11. Notando que a cada itera-

ção temos que a distância do polígono de aproximação para a curva de Lebesgue é
2
2n , e coin-

limitada superiormente pelo comprimento da diagonal do subquadrado,

(cid:113)

4.3 A P R O X I M A Ç Ã O P O L I G O N A L PA R A C U R VA D E L E B E S G U E

43

Figura 11: Duas primeiras iterações da aproximação poligonal para curva de Lebesgue.

cidente com a curva de Lebesgue nas junções. Portanto, elas formam uma sequência
2
2n → 0
de curvas contínuas que convergem para a curva de Lebesgue, uma vez que
quando n → ∞, que forma uma prova alternativa para a continuidade da curva de
preenchimento de espaço de Lebesgue.

(cid:113)

Para encerrar, demonstremos um exemplo numérico de como determinar as imagens

de pontos do intervalo unitário, nos casos em que um ponto recaia no conjunto de

Cantor e outro recaia em seu complementar.

Tomemos, por exemplo, t = 0, 020202 . . . = 0, (2 · 0)(2 · 1)(2 · 0)(2 · 1)(2 · 0)(2 · 1) . . . ∈ Γ.

Por estar no conjunto de Cantor, temos pela linha 4.2 que fL(t) =

(cid:32)

0, 000000 . . .

0, 111111 . . .

(cid:33)

.

Tomemos, então, por exemplo, o número t(cid:48) = [0, 111111 . . .]3 = [0, 5]10 ∈ ΓC. Pri-
meiro, temos que notar que t(cid:48) ∈
, intervalo removido durante a constru-
ção de Γ. Logo, pela fórmula em 4.3, temos que a = [0, 1]3 e b = [0, 2]3. Desenvolvendo
antes algumas contas:

[0, 1]3; [0, 2]3

(cid:16)

(cid:17)

b − a = [0, 2]3 − [0, 1]3 =

2
3

−

1
3

=

t(cid:48) − a = [0, 111111 . . .]3 − [0, 1]3 =

b − t(cid:48) = [0, 2]3 − [0, 111111 . . .]3 =

;

1
3
1
2
2
3

−

−

1
3
1
2

f (a) = f (0, 022222 . . .) =

(cid:32)

Temos que:

0, 011111 . . .

0, 111111 . . .

=

=

(cid:33)

;

;

(cid:32)

1
6
1
6

=

1/6
1/2

(cid:33)

(cid:32)

e f (b) =

(cid:33)

(cid:32)

=

(cid:33)

1/3

0

0, 1

0, 0

44

C U R VA D E L E B E S G U E

fL(t(cid:48)) =

·

1
1/3
(cid:32)

= 3 ·

(cid:32)

1/3

(cid:33)

(cid:34)(cid:32)

(cid:35)

·

1
6

= 3 ·

1/36
1/12

(cid:33)

(cid:32)

+

(cid:33)(cid:35)

1/18

0

=

(cid:34)(cid:32)

1/12
1/12

1/6
1/2
(cid:33)

(cid:33)

·

1
6

+

(cid:32)

=

1/4
1/4

(cid:33)

0

.

5

M O D E L A G E M C O M P U TA C I O N A L

Para a aprendizagem de curvas que preenchem o espaço, acabamos por lidar com

demonstrações e algoritmos muitas vezes intrincados, quando na verdade podemos

partir de premissas simples que, além de motivar o interesse pelo tema, contribuem

em grande parte para a visualização de resultados e principalmente para o questio-

namento da maneira e forma como são construídos, levando o aluno a indagar sobre

como podemos reﬁnar este conhecimento adquirido e aprender mais com base no que

eles experienciam com o concreto.

É sob esta perspectiva que um software de visualização atua: é uma ferramenta que

permite “traduzir” muito do linguajar matemático de forma que o aluno não só entenda

como inﬁra diretamente aspectos de construção da curva e tire suas conclusões.

O projeto utilizado na construção desta obra visa à construção de uma curva de pre-

enchimento de espaço. Tendo um conjunto fechado e limitado bidimensional tomado

por um quadrado unitário Q, chamaremos de subquadrados as partições tomadas por

divisões sucessivas de Q em regiões congruentes, que serão manipuladas pelo usuário

da aplicação.

Para a construção da curva que passará por cada um destes subquadrados gerados

e fará o papel de nossa função de preenchimento de espaço, tomaremos os pontos de

coordenada central de cada subquadrado gerado dessa partição, e ligaremos dois a

dois destes pontos segundo uma ordem também deﬁnida pelo nosso usuário.

A sequência de pontos adotada deﬁnirá uma curva, e chamaremos de iteração cada

um dos níveis que a curva percorrerá, conforme subdividimos ainda mais o plano em

cada um destes níveis. Eis a estratégia adotada.

45

46

M O D E L A G E M C O M P U TA C I O N A L

5.1 A M B I E N T E D E P R O G R A M A Ç Ã O

O programa será desenvolvido na plataforma Visual Studio da Microsoft. A escolha

se dá pelo fato de a maioria das redes de ensino contarem com um ambiente de infor-

mática que conta com o sistema operacional Windows. O programa conta com todas

as bibliotecas necessárias para compilação do código-fonte neste ambiente.

O programa será desenvolvido em linguagem de programação C#, padrão da atual

versão do Visual Studio utilizada. O programa pode também ser desenvolvido de forma

que não faça uso de instaladores ou outros recursos pré-conﬁgurados na máquina

cliente, tal como ocorre com o uso de outras linguagens de programação.

A distribuição do programa pode ser tão simples quanto apenas transferir seu ar-

quivo executável para as máquinas correspondentes e colocá-lo em execução. A única

limitação técnica é, como todo programa que replica imagens ad inﬁnitum, a capaci-

dade de memória do computador em que será alocado. Mas o projeto contemplará

níveis de replicação o suﬁciente para que mesmo as máquinas com menor capacidade

não se encontrem impossibilitadas de usar o software.

5.2 R E S T R I Ç Õ E S A D O TA D A S N O P R O J E T O

O projeto contemplará algumas restrições que visam a uma boa utilização pelo usuá-

rio de forma a contornar possíveis falhas e percalços.

Por deﬁnição, uma reta pode ser traçada por no mínimo dois pontos; logo, não faz

sentido adotarmos como subquadrado um quadrado na iteração de ordem 1. Subdi-

visões de ordem 1 vão gerar exatamente o mesmo quadrado inicial, e o centro deste

não será ligado a nenhum outro por só existir um quadrado. Temos, portanto, como

conﬁguração mínima a ordem de 2, que criará duas divisões de largura e altura e, com

isso, serão gerados quatro outros quadrados congruentes ao primeiro.

Por segurança de implementação, nenhuma curva será gerada enquanto o usuário

está fazendo a seleção de pontos que irão compor a função. Muitos níveis de iteração

podem já estar sendo executados quando a inclusão ou exclusão de um ponto pode

gerar sobrecarga no recarregamento da imagem.

Por padrão, deixaremos o nível inicial de iteração em um para simbolizar a tela

inicial que a curva ocupará, com os pontos fornecidos. Em respeito ao limite físico de

5.3 I M P L E M E N TA Ç Ã O D O P R O G R A M A

47

processamento e memória característicos de cada computador a que se destinará o uso

do programa, o máximo de iterações possível foi deﬁnido para dez e o maior valor de

ordem de subdivisões em grupos autossimilares foi deﬁnido para dez.

5.3 I M P L E M E N TA Ç Ã O D O P R O G R A M A

O programa contará com interface única de interação com o usuário, onde nela o

usuário pode tanto deﬁnir a ordem de divisões do quadrado unitário Q (número de
partições em subquadrados congruentes, que deﬁne a quantidade destes na ordem 2n
a cada n iterações) quanto a ordem dos pontos que nossa função percorrerá. Nesta

mesma tela, também, estarão os botões responsáveis por iterar entre os diferentes

níveis de preenchimento do espaço pela curva.

Para tanto, precisamos de uma classe que servirá de repositório para os atributos

necessários à execução (ordem, iteração e conjunto de pontos de nossa função mapa),

além dos métodos acessores convenientes; bem como a classe de formulário que ser-

virá para visualização e interação com o usuário.

Nossa classe repositório de dados armazenados pelo usuário será, por padrão, uma

classe estática. Não haverá necessidade de instanciação de vários objetos para os pro-

pósitos deste projeto, uma vez que apenas um nível de uma curva será visualizado em

qualquer dado momento.

O método-chave que permitirá a transformação da ordem dos pontos deﬁnida em

uma curva é, em termos de programação, um método recursivo: um método que

chama a si próprio indeﬁnidamente, até que algum critério de parada seja satisfeito

(no caso, o nível de iteração que o usuário irá fornecer deﬁnirá quantas vezes nosso

método irá recriar a curva).

Muitos dos valores, por deﬁnição, passados via método recursivo, serão, por deﬁni-

ção, passados por referência, para que a cada passagem do método os valores alterados

sejam utilizados de entrada para os próximos níveis de iteração.

Detalhes de como foram construídas estas classes através de seus códigos-fontes

estão disponíveis nos Apêndices desta obra. A modelagem de dados adotada para para

padronização de projeto pode ser consultada em Guedes [3], assim como o guia de

linguagem de programação utilizada está disponível em Saade [9].

6

D E M O N S T R A Ç Ã O D E U S O

A ﬁgura 12 mostra a tela desenvolvida pela codiﬁcação proposta nos anexos.

Nela, percebe-se a tela que será desenhada a curva e o painel de propriedades com

os seguintes elementos:

• Um selecionador da ordem de dimensão em que serão subdivididos nosso qua-

drado unitário Q;

• Um painel em que o usuário poderá clicar para deﬁnir a ordem em que os pon-

tos serão ligados em nossa curva. Esta ordem reﬂete a associação entre cada

subintervalo encaixante de I com os subquadrados gerados em tela;

• Os botões de iteração entre os diferentes níveis da replicação de nossa curva;

• Um botão de redeﬁnir, que trará de volta nosso painel para as conﬁgurações

iniciais (iteração nível 1, dimensão 2, nenhum ponto da curva escolhido).

Figura 12: Tela inicial do programa.

49

50

D E M O N S T R A Ç Ã O D E U S O

Figura 13: Aviso de ações a serem tomadas pelo usuário.

Figura 14: Exemplos de redimensionamento para 3 e para 8.

Notemos o uso de algumas precauções básicas referentes ao uso da ferramenta. Per-

cebendo que o usuário estará livre para manipular a ferramenta como preferir, ele bem

pode começar fazendo uso do botão de iteração antes da escolha de qualquer dimen-

são ou pontos de curva. Isto implica que nenhuma curva será gerada; logo, avisaremos

o usuário que a escolha de pontos é o ponto de partida para a visualização de algum

resultado. Tal mensagem também é indicada como resultado de pressionar o botão

redeﬁnir.

A alteração na escolha da dimensão acarreta na divisão automática na zona de pon-

tos que o usuário pode escolher para a nova função. A alteração da dimensão com

pontos previamente selecionados acarreta o descarte automático destes (aﬁnal, se por
exemplo escolhermos todos os nove pontos de uma região 3 × 3 e redimensionarmos
para uma região 2 × 2, teremos de descartar todos os pontos escolhidos para que o
software não tente replicar a curva num espaço inexistente).

D E M O N S T R A Ç Ã O D E U S O

51

Figura 15: Exemplo de sequenciamento das regiões do padrão.

Após a escolha da dimensão que lhe agradar, o usuário pode livremente escolher

a ordem em que desejar tomar os subquadrados no painel de escolha. A sequência

que o usuário adotar na escolha irá determinar a sequência em que as linhas da curva

serão desenhadas no painel principal. Um clique em um dos subquadrados atribuirá

a ele um número de sequência, que aparecerá no painel de escolha. Um clique em

cima de um quadrado que já possua numeração irá exclui-lo da sequência. Conforme

precaução tomada anteriormente, nenhuma curva será desenhada enquanto o usuário

estiver sequenciando os pontos, de forma que não há nenhum prejuízo na ordem,

escolha ou alteração destes (nem mesmo que haja pontos não escolhidos, conforme

veremos mais adiante). A única observação, claro, como já abordado, é o aviso que o

usuário receberá quando não houver pontos o suﬁciente para se desenhar uma linha.

Pressionar os botões de iteração navegará pelos diferentes níveis de replicação da

curva. Em um dos últimos níveis de iteração, que exige maior capacidade de proces-

samento do computador, quando houver falha de carregamento da imagem, o botão

mostrar também permite o recarregamento da curva. Os botões de navegação são

intuitivos e servem para incrementar ou decrementar o nível de iteração.

52

D E M O N S T R A Ç Ã O D E U S O

Figura 16: Diferentes níveis de exibição da curva pelos botões de iteração (respectivamente,

níveis 1, 2, 5 e 8).

7

A N Á L I S E D E R E S U LTA D O S

O uso da ferramenta permite ao usuário explorar a construção de uma curva que

preencha o espaço, e a consequente visualização de que a escolha de pontos, de fato,

acarreta em todo o espaço preenchido conforme tendemos o nível de iteração ao in-

ﬁnito. O usuário poderá acompanhar este fato pois a curva passará por mais e mais

pontos do plano até que, em alguma iteração, ﬁque indistinguível o que é o plano de

fundo e o que é a curva (o resultado é a tela toda preta, cor da curva representada,

pois o fundo é branco e a grade de divisões de subquadrados é azul).

7.1 C O N T I N U I D A D E D O P R O J E T O

O importante neste projeto, além do aprendizado que o professor poderá explorar

sobre construção de curvas que preenchem o espaço e noção de continuidade, é tam-

bém o que os alunos podem tirar de melhoria da própria ferramenta em si.

Por exemplo, este projeto é apenas um caso particular de curvas que preenchem o

espaço tomando pontos médios de quadrados autossimilares. Mas podemos expandir

esta noção tomando outros pontos quaisquer da região interna de nosso quadrado

que as curvas construídas também preencherão o espaço. Podemos inclusive tomar

pontos quaisquer de regiões que não sejam um quadrado, que também é um caso

particularizado.

O projeto também pode ser estendido a ponto de podermos provar a aﬁrmativa de

Cantor de que espaços euclidianos de dimensão ﬁnita possuem mesma cardinalidade,

não importando a dimensão que estes possuam. Logo, este projeto pode ser aplicado

a pontos de uma função que preencha uma porção do plano; podemos tomar pontos

53

54

A N Á L I S E D E R E S U LTA D O S

de uma curva que preencham uma porção de um espaço tridimensional ou mesmo

exemplos mais intrincados de estruturas n-dimensionais quaisquer.

7.2 PA S S E I O D O C A VA L O

Tão importante quanto entender os resultados e conceitos por trás da construção

de uma curva de preenchimento de espaço é a capacidade do aluno de vislumbrar

aplicações. Uma interessante aplicação de uma curva que preenche o espaço está no

problema do Passeio do Cavalo.

O cavalo é uma peça do xadrez “que se movimenta em L”. Considerando o tabuleiro
de xadrez como uma região 8 × 8 e o movimento do cavalo como sendo de duas
casas em uma direção mais uma casa noutra direção perpendicular, podemos propor o

problema de como fazer esta peça, independente de que casa inicial ocupe no tabuleiro,

visitar uma única vez todas as casas do tabuleiro com seu movimento válido

Este não é um problema de solução fácil ou imediata, mas existem inúmeras pos-

sibilidades de ser testado e inﬁnitas soluções possíveis. E uma vez que uma solução

seja encontrada (como mostrado na ﬁgura 17), é fácil veriﬁcar que o desenho formado

pelo trajeto é o de uma curva de preenchimento de espaço, uma vez que o cavalo visita

cada casa do tabuleiro.

E, após o trajeto ser desenhado no software proposto, vemos, através das iterações,

que conforme subdividimos o plano em mais e mais "tabuleiros de xadrez", o percurso

do cavalo se torna cada vez mais intrincado até que este acaba por preencher todos os

pontos visíveis do quadrado unitário (experimente!).

7.3 F R A C TA I S

Conforme sugerido anteriormente durante a demonstração de uso da ferramenta, a

curva representada de fato preencherá todo o espaço disponível do painel principal da

aplicação desde que sejam escolhidos todos os pontos de nossa área padrão.

É claro que o professor já pode partir do pressuposto de que este conhecimento seja

necessário para que o aluno visualize, de fato, como a curva preenche todo um dado

7.4 E S T U D O D E C A S O

55

Figura 17: Exemplo de uma possível trajetória do cavalo no tabuleiro.

espaço; como também pode adotar uma postura de fazer o aluno descobrir isto diante

de experimentos.

Logo, caso o aluno escolha alguns subquadrados que não todos, o resultado medi-

ante iterações não será o plano completamente preenchido. Em vez disso, o aluno

perceberá que, por mais iterações que faça, a curva não sairá dos subquadrados os

quais estão vinculados às regiões escolhidas pelo usuário.

Uma curva que preenche apenas parte do plano, se replicando indeﬁnidamente em

regiões autossimilares cada vez menores tendendo ao inﬁnito, é a precisa deﬁnição de

um fractal. Logo, são correlatos o estudo de fractais e o estudo de curvas de preenchi-

mento de espaço.

A ﬁgura 18 ilustra o mesmo padrão de dimensão e preenchimento de pontos ado-

tado na ﬁgura 16, mas com um dos pontos de padrão faltando. Conforme iteramos

pelos níveis desta ﬁgura, vemos que a mesma região continua equivalentemente em

branco em todas as demais replicações da ﬁgura, gerando o famoso fractal Triângulo

de Sierpi´nski.

7.4 E S T U D O D E C A S O

Vamos agora analisar como os conceitos estudados podem ser aplicados na mode-

lagem de um problema, proposto pela III Olimpíada Iberoamericana de Matemática

Universitária [1]:

56

A N Á L I S E D E R E S U LTA D O S

Figura 18: Construção do Triângulo de Sierpi´nski; níveis 1, 2, 5 e 10.

"No plano se move de qualquer maneira um ponto (um porco) com velocidade
não superior a 1 km/h, descrevendo uma curva contínua λ : [0, 1] → R2,
onde [0, 1] é um intervalo de tempo de uma hora. Sabe-se que o porco

encontra-se inicialmente em um quadrado de lado 8 km. No centro deste

quadrado se encontra um demônio da Tasmânia cego que não pode saber a

posição do porco, mas pode se mover com qualquer velocidade. Encontrar
uma curva contínua γ : [0, 1] → R2 (o caminho percorrido pelo demônio
da Tasmânia) tal que em algum momento de tempo t ∈ [0, 1] se obtém a
igualdade γ(t) = λ(t), isto é, o demônio da Tasmânia captura o porco inde-

pendentemente do caminho que este último escolha".

O problema de propor ao estudante uma curva que intercepte outra independente-

mente do traço que esta apresente tem íntima relação com uma curva de preenchi-

mento de espaço: dada qualquer forma de percurso na região quadrada fornecida que

λ possa fazer, ao tomarmos γ de tal sorte que esta percorra todos os pontos desta

mesma região, teremos necessariamente uma interseção. O desaﬁo neste problema é
garantir a existência de um tempo t ∈ [0, 1] no qual isto ocorra.

Para construir uma curva que seja capaz de preencher todos os pontos do espaço for-

necido, façamos como a teoria apresentada até aqui nos sugere: particionemos nossa

7.4 E S T U D O D E C A S O

57

Figura 19: Condições iniciais do problema das duas curvas.

região quadrada Q de 8km de lado em subregiões de modo que o demônio da Tasmâ-
nia demore frações do intervalo de 1h a percorrer cada uma. Para facilitar os cálculos,

como apresentado até aqui, podemos dividir esta região em quatro subquadrados con-
gruentes Q1
1 para primeira iteração, conforme mostra a ﬁgura 19, assim

1, Q3

1, Q2

1, Q4

podemos partilhar tempos iguais a serem gastos em cada subregião.

Para não sermos forçados a nos preocupar com a devida orientação do percurso de

cada subquadrado conforme fazemos mais e mais iterações de partição dos subquadra-

dos (que nos levaria a deﬁnir a curva de Hilbert), podemos deﬁnir uma rota padrão

que nosso demônio da Tasmânia percorrerá, e aplicar sempre o mesmo passo a cada

subregião deﬁnida durante as iterações (o que acaba por deﬁnir uma curva similar à

de Lebesgue). A restrição para aplicar esta solução corresponde a, durante a primeira

iteração, não particionar o intervalo de tempo em quatro subintervalos (correspon-

dente ao número de subquadrados particionados), mas sim em um número maior de

divisões de tal forma que ele leve menos tempo percorrendo cada região, mas tenha

tempo para migrar de uma região para outra. Como o demônio da Tasmânia é dito

mover-se com qualquer velocidade, por maior que seja, temos que é possível cumprir

esta restrição.

1 (1), tenha tempo hábil para migrar para Q2

uma região Q1
modo Q2
Q3
do mesmo modo Q4

Isto nos permite fazer com que o demônio da Tasmânia percorra como quisermos
1 (2), percorra do mesmo
1 (4), percorra do mesmo modo
1 (6), e por ﬁm percorra
1 (7). Com esta análise, faz sentido convencionarmos então que
particionemos, na primeira iteração, nosso intervalo de tempo em 7 subintervalos con-

1 (3), tenha tempo hábil para migrar para Q3
1 (5), tenha tempo hábil para mirar para a última região Q4

58

A N Á L I S E D E R E S U LTA D O S

Figura 20: Percorrendo a região segundo uma curva de Lebesgue.

gruentes, relacionando o período de tempo de (cid:2)0, 1
1; e de (cid:2) 6
Q3
Deﬁnido como percorreremos o percurso na primeira iteração, basta que na segunda

7 , 1(cid:3) a Q4
1.

1; de (cid:2) 2

1; de (cid:2) 4

(cid:3) a Q1

(cid:3) a Q2

7 , 5

7 , 3

(cid:3) a

7

7

7

dividamos cada subintervalo novamente em 7 e relacionemos, na mesma ordem, as fra-

ções de tempo com as frações de uma nova partição da região do quadrado percorrida

naquele intervalo de tempo em mais quatro subregiões congruentes, tal como ilustra
a ﬁgura 20: de (cid:2)0, 1
(cid:3) a Q2
2; e assim sucessivamente para todos Qj
n,
onde n é o número de iterações e j ∈ {i ∈ N∗; i ≤ 4n} é uma das subregiões existentes
pelas partições naquela iteração.

2; de (cid:2) 2

(cid:3) a Q1

49 , 3

49

49

Repetimos este processo para cada n ∈ N, deﬁnindo um conjunto de Cantor (que
não um ternário, mas sim um em que removemos intervalos pares de uma divisão de

I por 7) no qual, como as diagonais de cada subquadrado vinculado tendem a zero,

a sequência de curvas construída converge uniformemente; logo, pelo teorema 1.25,

isto deﬁne uma função contínua sobre o conjunto de Cantor. Terminamos estendendo

a função a I por interpolações conforme construímos nossa curva de Lebesgue no

teorema 4.5.

Mas analisemos agora uma sutileza encontrada no enunciado dado. Enquanto que

no instante t = 0 o demônio da Tasmânia é dito encontrar-se no centro da região

quadrada de lado 8km, o porco é dito encontrar-se em qualquer região deste quadrado

se locomovendo a velocidade limitada. Portanto, por mais rápido que o demônio se

locomova, se escolhermos como ponto inicial ocupado pelo porco alguma região da

borda ou próxima dela, dependendo da velocidade que se tome a perseguição, teremos

que o porco pode acabar ultrapassando os limites deﬁnidos por esta região quadrada.

Precisamos, portanto, revisar nossa curva.

7.4 E S T U D O D E C A S O

59

Figura 21: Como recobrir cada subregião da primeira iteração com margem. Note que esta
margem representa o máximo que o porco pode percorrer dentro do intervalo de 1

7 de hora.

Ao invés de aplicarmos a razão de semelhança 1

2 no percurso da região quadrada e
distribuí-lo em cada uma das 4 novas subregiões dada pela divisão na primeira itera-

ção, façamos com que o quadrado seja reduzido a uma razão α de tal modo que ao

realocar o novo percurso de modo justo às subregiões, possamos recobrir cada uma
com uma certa margem, conforme ilustra a ﬁgura 21, onde cada E k
1 representa um
subquadrado expandido de Qk
1 à razão α. Esta margem representa o máximo que o
porco pode percorrer para fora da subregião percorrida, dado qualquer ponto inicial

que se encontre quando o demônio da Tasmânia adentre esta subregião (incluindo de

bordas).

mos ter 1

Notemos, pelo esquema da ﬁgura, que para esta forma de particionar o plano deve-
2 < α < 1 para que a nova subregião tenha lado menor que o lado da região
da iteração anterior, mas maior que a metade deste para que haja margem. Claro que,

ao fazermos isto, estamos criando regiões de percurso redundantes, já visitados antes

pelo demônio da Tasmânia, mas fazemos isto para garantir um instante de interseção

das curvas.

Note também que, conforme avançamos nas iterações, expandimos um pouco mais

a subregião de percurso, conforme ilustra a ﬁgura 22. Por mais que haja uma pequena

expansão, estamos cada vez mais reduzindo as regiões de caça pelo porco. Como a

diagonal de cada uma destas subregiões está tendendo a zero, por mais que o porco

se afaste do quadrado original, o demônio da Tasmânia estará se aproximando o suﬁ-

ciente para que haja a captura.

60

A N Á L I S E D E R E S U LTA D O S

Figura 22: Como ﬁcam as subregiões de perseguição conforme fazemos as três primeiras itera-

ções.

Vejamos o porquê que esta perseguição resulta na captura do porco. No instante
t = 0 sabemos que o demônio da Tasmânia está no centro da região quadrada Q de
8km de lado e o porco encontra-se em algum ponto do interior deste quadrado. Isto é

verdadeiro. Para que comece a caçada, na primeira iteração temos que o porco pode
ou não estar na região E 1
1 da primeira iteração que deﬁnimos.

Se ele estiver, queremos que ele não tenha tempo hábil de deixar esta região. Mas

escolheremos um α de modo que isto não aconteça: dentro do sétimo de hora que
o demônio da Tasmânia permanecerá em E 1
1 , o porco também se encontrará. Se o
porco permanecer dentro deste quadrado neste tempo, o demônio da Tasmânia se

aproximará nas próximas iterações.

2 (αL − L

2 ) = (2α − 1) L

Se o porco escapar do quadrado de lado L

2 , temos que a distância máxima que este
percorre é dado pela margem por dmax = 1
4 . Sendo V a velocidade
máxima do porco (que é limitada) e tmin o tempo mínimo gasto pelo porco para fuga,
⇒ tmin = (2α − 1) L
como a velocidade do porco é uma constante temos que V =
4V .
Queremos que este tempo seja superior ao tempo T gasto pelo demônio da Tasmânia
L . Isto parece atender
2 < α < 1, uma vez que os valores de L, V e T
são positivos. E para os dados do enunciado isto se torna possível: temos que a região
quadrada possui lado L = 8km, a velocidade do porco é limitada em V = 1km/h e o
tempo de perseguição está restrito a T = 1h, donde α > 1

para captura: T < (2α − 1) L
4V
ao requisito de que a constante obedeça 1

⇒ 2α − 1 > 4VT
L

2 + 2VT

⇒ α > 1

∆S
∆T

2 + 2·1·1

8 = 1

2 + 1

4 = 3

4 e α < 1.

Note que isto resolve não somente a primeira iteração, mas também todas as outras:

durante a perseguição, sabemos que o porco se encontra inicialmente em alguma das
regiões E 1
1 esta região por exemplo,

1 para algum tempo t ∈ [0, 1]. Seja E 2

1 , E 2

1 , E 3

1 , E 4

7.4 E S T U D O D E C A S O

61

apenas para efeito de visualização. Sabemos que o demônio da Tasmânia adentra esta
região no instante t(cid:48) = 2
7 , período o qual o porco não
consegue escapar por uma escolha conveniente de α.

7 e a deixa no instante t(cid:48)(cid:48) = 3

2 , E 8

2 , E 6

2 , partições expandidas de E 2

Incrementando para a segunda iteração, sabemos que existe alguma dentre as re-
giões E 5
2 , E 7
1 , da qual o porco não consegue escapar
(cid:3). Temos relacionados a estas regiões os subintervalos
para algum tempo t ∈ (cid:2) 2
de tempo (cid:2) 14
49 , 19
49 , 21
49 , 17
49 , 15
2 é esta região em que
49
se encontra o porco. Temos que o demônio da Tasmânia adentra esta região no ins-
tante t(cid:48) = 18
49 , período no qual o porco ainda encontra-se
encerrado em E 2

49 e a deixa no instante t(cid:48)(cid:48) = 19
1 . E assim sucessivamente.

(cid:3). Suponha que E 7

7 , 3
7
(cid:3), (cid:2) 18

(cid:3) e (cid:2) 20

(cid:3), (cid:2) 16

49

49

49

percorrer está sendo multiplicado por 3
dispõe para percorrê-lo está sendo multiplicado por 1

Note que a cada passo da iteração, o lado máximo da região que o porco consegue
4 < α < 1; porém, o tempo de que o porco
7 . Ou seja: estamos dando ao
porco cada vez menos tempo para a fuga da região em que se encontra, ao mesmo

tempo em que tendemos a distância entre o porco e o demônio da Tasmânia para

zero. Com sua mesma velocidade limitada, o porco acaba por não conseguir escapar

de nenhuma destas sequências de regiões encaixantes.

A cada uma destas sequências de quadrados está relacionada uma sequência de

intervalos encaixantes de tempo. Graças ao teorema mostrado em 1.28, esta sequência

acaba por deﬁnir um único tempo t ∈ I, que representa quando ocorre a captura. Para
este instante t, temos que (cid:107)γ(t) − λ(t)(cid:107)< αnL para todo n ∈ N; e, como 3
4 < α < 1,
temos que αnL → 0 quando n → ∞. Ou seja, este é o instante t que demonstra onde
ocorre γ(t) = λ(t), o encontro das duas curvas. Isto conclui o problema.

8

C O N S I D E R A Ç Õ E S F I N A I S

Este trabalho destina-se à precisa deﬁnição de curva de preenchimento de espaço.

Muito do que se entende por “uma forma que passa por todos os pontos de uma região”

é descrito meramente como "curva de Peano", muito por causa da homenagem dada

à curva de preenchimento de espaço percursora do estudo de tais curvas. Fazemos,

porém, a distinção entre o que é uma curva de preenchimento de espaço, o que ela

deve cumprir para ser classiﬁcada como tal, bem como exemplos de curvas distintas.

Exempliﬁcamos como o comportamento no plano é bastante especíﬁco de uma para a

outra, sendo a curva de Peano apenas uma das várias curvas existentes apresentadas.

A obra visa ao leitor um olhar crítico das propriedades matemáticas que cada curva

apresenta. Após acompanhar as demonstrações, o leitor pode ser capaz de inferir as

condições necessárias para a construção de cada uma das curvas apresentadas, bem

como deparar com alguma curva não exposta aqui, mas mesmo assim saber requisitos

mínimos para que esta seja classiﬁcada como curva de preenchimento de espaço.

Longe de almejar ser uma obra completa acerca do tema, proporciona-se aqui uma

experiência ao leitor para que este se interesse pelo tema, busque mais sobre outros

tipos de curvas, busque outros exemplos em seu meio ou à natureza. Recomenda-se

também aos interessados estudos sobre Topologia, que muito tem a acrescentar sobre

estas curvas. A forma de caracterizar espaços métricos e topológicos que são imagens

contínuas do intervalo I diz muito acerca de como são construídas estas curvas.

Este trabalho auxilia a desmistiﬁcar um dos grandes entraves no estudo de curvas de

preenchimento de espaço: o comportamento da curva no plano. O software gerador

de curvas aqui apresentado é capaz de elaborar, iteração por iteração, uma curva de

preenchimento de espaço inspirada na curva de Lebesgue para que o usuário possa

acompanhar cada etapa de sua construção. Isto agiliza a visualização da curva, pu-

63

64

C O N S I D E R A Ç Õ E S F I N A I S

lando etapas de contas por vezes trabalhosas, apresentando um resultado consistente

na medida em que é necessária para visualizar o plano preenchido (lembrando que a

curva construída tem limite no número de iterações, ao passo que a curva de preenchi-

mento de espaço é o resultado de inﬁnitas iterações).

Por ﬁm, satisfaz ao autor da obra que novos horizontes possam ser enxergados ao

ﬁm desta leitura. Com os parâmetros apresentados, o leitor pode se interessar em

caracterizar demais curvas que se apresentem por curvas de preenchimento de espaço.

O software proposto pode ser aplicado em salas de aula pelo seu fácil manuseio e

pelo interesse que desperta ao estudante em enxergar o fenômeno de construções

destas curvas. O software, cuja codiﬁcação encontra-se presente nos Apêndices, está

aberto a modiﬁcações na sua estrutura para comportar novas funcionalidades: um

aperfeiçoamento no número de iterações; um visualizador para cada tipo de curva

(Peano, Hilbert, Lebesgue, etc.); um visualizador para curvas no espaço, não apenas

no plano; dentre tantas outras ideias cujo limite é a imaginação.

A P Ê N D I C E A

Código da classe estática Curva:

01 using System.Collections.Generic;

02 using System.Drawing;

03 namespace SpaceFillingCurves

04 {

05

06

07

08

09

10

11

12

13

14

15

16

17

18

19

20

static class Curva

{

private static int iteracao = 1;

private static int dimensao = 2;

private static List<Point> pontos = new List<Point>();

public static void alterarIteracao(int _iteracao)

{

if (_iteracao > 0 && _iteracao < 11)

iteracao = _iteracao;

}

public static void alterarDimensao(int _dimensao)

{

iteracao = 1;

dimensao = _dimensao;

pontos = new List<Point>();

}

A

65

66

A P Ê N D I C E A

public static void alterarPontos(Point _pontos)

{

if (pontos.IndexOf(_pontos) > -1)

pontos.Remove(_pontos);

else

pontos.Add(_pontos);

}

public static int retornarIteracao()

{

return iteracao;

}

public static int retornarDimensao()

{

return dimensao;

}

public static List<Point> retornarPontos()

{

return pontos;

}

public static void redefinir()

{

iteracao = 1;

dimensao = 2;

pontos = new List<Point>();

}

}

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47 }

B

A P Ê N D I C E B

Código da classe Formulário:

001 using System;

002 using System.Drawing;

003 using System.Windows.Forms;

004 namespace SpaceFillingCurves

005 {

006

007

008

009

010

011

012

013

014

015

016

017

018

019

020

public partial class Form1 :

Form

{

private Graphics tela;

private Pen caneta = new Pen(Color.Black, 2);

private Pen caneta2 = new Pen(Color.Aquamarine, 1);

private SolidBrush pincel = new SolidBrush(Color.Black);

public Form1()

{

InitializeComponent();

}

private void numericUpDownDimensao_ValueChanged

(object sender, EventArgs e)

{

Curva.alterarDimensao((int) numericUpDownDimensao.Value);

labelDimensao.Text = String.Format("{0} x {1}",

67

68

A P Ê N D I C E B

021

022

023

024

025

026

027

028

029

030

031

032

033

034

035

036

037

038

039

040

041

042

043

044

045

046

047

048

049

050

051

052

numericUpDownDimensao.Value, numericUpDownDimensao.Value);

panelPontos.Invalidate();

}

private void panelPontos_MouseClick

(object sender, MouseEventArgs e)

{

int X = e.X / (panelPontos.Size.Width /

Curva.retornarDimensao());

int Y = (panelPontos.Size.Height - e.Y) /

(panelPontos.Size.Height / Curva.retornarDimensao());

Curva.alterarPontos(new Point(X, Y));

panelPontos.Invalidate();

}

private void panelPontos_Paint

(object sender, PaintEventArgs e)

{

tela = panelPontos.CreateGraphics();

for (int i = 1; i < Curva.retornarDimensao(); i++)

{

int x = i * panelPontos.Size.Width /

Curva.retornarDimensao();

int y = i * panelPontos.Size.Height /

Curva.retornarDimensao();

tela.DrawLine(caneta, x, 0, x,

panelPontos.Size.Height);

tela.DrawLine(caneta, 0, y,

panelPontos.Size.Width, y);

}

int k = 0;

foreach (Point point in Curva.retornarPontos())

{

tela.DrawString((++k).ToString(),

A P Ê N D I C E B

69

new Font("Arial",

160 / (2 * Curva.retornarDimensao())), pincel,

point.X * panelPontos.Size.Width / Curva.retornarDimensao(),

160 - (point.Y + 1) * panelPontos.Size.Height

/ Curva.retornarDimensao());

}

}

private void buttonRetornar_Click

(object sender, EventArgs e)

{

if (Curva.retornarPontos().Count < 2)

MessageBox.Show("Escolha pelo menos dois pontos

do padrão para se definir uma reta.", "Atenção",

MessageBoxButtons.OK, MessageBoxIcon.None,

MessageBoxDefaultButton.Button1);

else

{

Curva.alterarIteracao(Curva.retornarIteracao() - 1);

panelCurva.Invalidate();

}

}

private void buttonAvancar_Click

(object sender, EventArgs e)

{

if (Curva.retornarPontos().Count < 2)

MessageBox.Show("Escolha pelo menos dois pontos

do padrão para se definir uma reta.", "Atenção",

MessageBoxButtons.OK, MessageBoxIcon.None,

MessageBoxDefaultButton.Button1);

else

{

Curva.alterarIteracao(Curva.retornarIteracao() + 1);

panelCurva.Invalidate();

}

053

054

055

056

057

058

059

060

061

062

063

064

065

066

067

068

069

070

071

072

073

074

075

076

077

078

079

080

081

082

083

084

085

086

70

A P Ê N D I C E B

087

}

088

089

090

091

092

093

094

095

096

097

098

099

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

private void panelCurva_Paint

(object sender, PaintEventArgs e)

{

tela = panelCurva.CreateGraphics();

double power = Math.Pow(Curva.retornarDimensao(),

Curva.retornarIteracao());

for (int i = 1; i < power; i++)

{

int x = i * panelCurva.Size.Width / (int) power;

int y = i * panelCurva.Size.Height / (int) power;

tela.DrawLine(caneta2, x, 0, x,

panelCurva.Size.Height);

tela.DrawLine(caneta2, 0, y,

panelCurva.Size.Width, y);

}

int ordem = 0;

double factorX = panelCurva.Size.Width / power,

factorY = panelCurva.Size.Height / power;

double[,] matriz = new double[(int)Math.Pow(

Curva.retornarPontos().Count,

Curva.retornarIteracao()), 2];

iterar(1, ref ordem, factorX, factorY,

new Point(0, 0), ref matriz);

if (matriz.GetLength(0) > 0)

{

double previousX = matriz[0, 0],

previousY = matriz[0, 1];

for (int i = 1; i < matriz.GetLength(0); i++)

{

tela.DrawLine(caneta, (int) previousX, (int) previousY,

(int) matriz[i, 0], (int) matriz[i, 1]);

A P Ê N D I C E B

71

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136

137

138

139

140

141

142

143

144

145

146

147

148

149

150

151

previousX = matriz[i, 0];

previousY = matriz[i, 1];

}

}

}

private void iterar(int nivel, ref int ordem,

double factorX, double factorY, Point padrao,

ref double[,] matriz)

{

foreach (Point point in Curva.retornarPontos())

{

Point novoPadrao = new Point(

padrao.X * Curva.retornarDimensao() + point.X,

padrao.Y * Curva.retornarDimensao() + point.Y);

if (nivel == Curva.retornarIteracao())

{

matriz[ordem, 0] = novoPadrao.X * factorX

+ factorX / 2;

matriz[ordem, 1] = panelCurva.Size.Height

- (novoPadrao.Y * factorY + factorY / 2);

}

else

{

iterar(nivel + 1, ref ordem, factorX,

factorY, novoPadrao, ref matriz);

continue;

}

ordem += 1;

}

}

private void buttonRedefinir_Click

(object sender, EventArgs e)

{

72

A P Ê N D I C E B

Curva.redefinir();

labelDimensao.Text = String.Format("0 x 1",

Curva.retornarDimensao(), Curva.retornarDimensao());

numericUpDownDimensao.Value = Curva.retornarDimensao();

panelCurva.Invalidate();

}

}

152

153

154

155

156

157

158

159 }

B I B L I O G R A F I A

[1] AMORIM, É. A curva de Peano e um demônio da Tasmânia cego puntiforme

inﬁnitamente rápido. Disponível em: http://legal.icmc.usp.br/lib/exe/

fetch.php?media=slides:tasmania.pdf (Acesso 10-2019)

[2] BYRNE, K. An Introduction to Space-Filling Curves. Disponível em: http://

www.academia.edu/28633281/An_Introduction_to_Space-Filling_Curves

(Acesso 02-2019)

[3] GUEDES, G. T. A. UML 2: Uma Abordagem Prática, 2. ed. São Paulo: Novatec,

2011. 30-41p.

[4] KAPLANSKY, I. Set Theory and Metric Spaces, University of Chicago. Allyn and

Bacon, Inc. Boston, 1972. 67-83p.

[5] LIMA, E. L. Análise Real, volume 1: Funções de Uma Variável, 12. ed. Rio de

Janeiro: IMPA, 2017.

[6] LIMA, E. L. Espaços Métricos, 5. ed. Rio de Janeiro: IMPA, 2017. 1-80p.

[7] MÜLLER, J. G. BAIER, T. Topologia: Fatos Históricos e Curiosidades, Universi-

dade Regional de Blumenau – FURB/PPGECIM, Santa Catarina, s/d.

[8] PEANO, G. Sur une courbe, qui remplit toute une aire plane. Mathematische

Annalen, 36 No 1, 1890. 157–160p.

[9] SAADE, J. C# Guia do Programador, 1. ed. São Paulo: Novatec, 2011. 117-

173p.

[10] SAGAN, H. Some Reﬂections on the Emergence of Space-ﬁlling Curves: The Way it

Could Have Happened and Should Have Happened, but did not Happen, Journal
of the Franklin Institute, Vol. 328, No 4, 1991. 419-430p.

[11] SAGAN, H. Space-Filling Curves, Springer Science+Business Media. Nova Ior-

que, 1994. 1-82p.

73

