UNIVERSIDADE FEDERAL DO CARIRI
CENTRO DE CI˚NCIAS E TECNOLOGIA
PROGRAMA DE P(cid:211)S-GRADUA˙ˆO EM MATEM`TICA
EM REDE NACIONAL - PROFMAT

LUIZ CARLOS SOARES FERNANDES

O USO DE SISTEMAS LINEARES NA TOMOGRAFIA
COMPUTADORIZADA

JUAZEIRO DO NORTE - CEAR`
2018

LUIZ CARLOS SOARES FERNANDES

O USO DE SISTEMAS LINEARES NA TOMOGRAFIA COMPUTADORIZADA

em Rede Nacional

Disserta(cid:231)ªo de Mestrado apresentada
ao Programa de P(cid:243)s-Gradua(cid:231)ªo em
-
MatemÆtica
PROFMAT do Centro e CiŒncias e
Tecnologia da Universidade Federal
do Cariri, como requisito parcial para
obten(cid:231)ªo do T(cid:237)tulo de Mestre em
MatemÆtica. `rea de concentra(cid:231)ªo:
Ensino de MatemÆtica.

Orientador:
Prof. Dr. Valdir Ferreira de Paula Ju-
nior

JUAZEIRO DO NORTE - CEAR`
2018

                             Dados Internacionais de Catalogação na Publicação Universidade Federal do Cariri Sistema de Bibliotecas F398u Fernandes, Luiz Carlos Soares. O uso de sistemas lineares na tomografia computadorizada/ Luiz Carlos Soares Fernandes. – 2018. 79f.: il.; color.; enc. ; 30 cm.  Dissertação (Mestrado) – Universidade Federal do Cariri, Centro de Ciências e Tecnologia –Programa de Pós-graduação em Matemática em Rede Nacional, Juazeiro do Norte, 2018.  Orientação: Prof. Dr. Valdir Ferreira de Paula Júnior.   1.  Tomografia Computadorizada. 2. Sistemas Lineares. 3. Pesquisa Matemática. I. Título.                        CDD 512.5 Bibliotecário: João Bosco Dumont do Nascimento – CRB 3/1355 Dedico a meus pais, ao Prof. Dr. Val-
dir Ferreira de Paula Junior, aos meus
amigos e em especial a Ramon Sales Pi-
nheiro.

AGRADECIMENTOS

Agrade(cid:231)o em primeiro lugar a Deus que Ø senhor de tudo e de todos.
Aos meus pais.
A meu orientador, Prof. Dr. Valdir Ferreira de Paula Junior , pelo apoio, dedica(cid:231)ªo
e pelos ensinamentos que foram dados na orienta(cid:231)ªo deste trabalho e nas disciplinas que
lecionou.

Gostaria de agradecer tambØm, e, de forma especial, a Professora Dra. Maria Silvana
Alc(cid:226)ntara Costa pela condu(cid:231)ªo da coordena(cid:231)ªo acadŒmica institucional do PROFMAT,
campus UFCA, Juazeiro do Norte-CE. Por (cid:28)m, (cid:224) Coordena(cid:231)ªo de Aperfei(cid:231)oamento Pes-
soal de Ensino Superior (CAPES) pelo apoio (cid:28)nanceiro.

A loucura Ø um passo para a eterni-
dade.

RESUMO

Tªo importante quanto conhecer os procedimentos prÆticos, Ø conhecer a matemÆtica
por trÆs deles. Neste trabalho estudamos um pouco da matemÆtica por trÆs da Tomogra(cid:28)a
Computadorizada (TC). Para isto, apresentaremos o modelo matemÆtico da TC usando
sistemas lineares. Veremos que resolver esses sistemas lineares equivale a encontrar uma
parte da imagem gerada pela TC. Para resolver tais sistemas, estudaremos os algoritmos
de Kaczmarz e Cimmino, mostraremos como utilizar estes algoritmos para obter solu(cid:231)ıes
aproximadas de sistema lineares que possuem muitas equa(cid:231)ıes e inc(cid:243)gnitas. Vale desta-
car que este trabalho tem como maior objetivo servir como material para o professor do
Ensino MØdio introduzir seus alunos na pesquisa matemÆtica; por isso estudaremos estes
algoritmos de forma geomØtrica, algØbrica e computacional.

Palavras-chave: Tomogra(cid:28)a Computadorizada. Sistemas Lineares. Pesquisa MatemÆ-
tica.

ABSTRACT

As important as knowing the practical procedures is knowing the mathematics behind
them. In this work, we present the mathematics behind computed tomography, that is,
we study the mathematical fundamentals used in computed tomography. For this, we will
make the mathematical model of the computed tomography using linear systems. We will
see that these linear systems are equivalent to the image search generated by the CT. To
obtain such systems, mark the algorithms of Kaczmarz and Cimmino, we will see that
these algorithms approach a solution of these systems. It is worth pointing out that this
work has as its main objective the material for the teacher of the physical, algarbrica and
computational form.

Keywords: Computed tomography. Linear Systems. Mathematical Research.

Lista de Figuras

1
Radiogra(cid:28)a simples do torÆx . . . . . . . . . . . . . . . . . . . . . . . . . . 10
2
Tomogra(cid:28)a computadorizada . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3
Caracter(cid:237)stica do tom(cid:243)grafo . . . . . . . . . . . . . . . . . . . . . . . . . . 12
4
Aparelho de Tomogra(cid:28)a computadorizada . . . . . . . . . . . . . . . . . . 12
5
Escala de Cinzentos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
6
Regiªo plani(cid:28)cada . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
7
Regiªo plani(cid:28)cada . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
8
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Corte transversal
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
9
Corte Longitudinal
10 Regiªo S . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
11 Regiªo plani(cid:28)cada . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
12 Regiªo plani(cid:28)cada . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
13 Absor(cid:231)ªo do raio Li no pixel j . . . . . . . . . . . . . . . . . . . . . . . . . 24
14 Regiªo plani(cid:28)cada . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Solu(cid:231)ªo inconsistente . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
15
16 Aplica(cid:231)ªo do Algoritmo de Gauss-Seidel
. . . . . . . . . . . . . . . . . . . 31
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
17 MØtodo de Gauss-Seidel
18 MØtodo de Jacobi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
19 Estudo do exemplo usando o mØtodo Jacobi
. . . . . . . . . . . . . . . . . 34
. . . . . . . . . . . . . . . . . . . . . . 35
20
21 Proje(cid:231)ªo de ponto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
22 Proje(cid:231)ªo ideal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
1a proje(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
23
2a proje(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
24
3a proje(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
25
4a proje(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
26
SequŒncia de solu(cid:231)ıes centradas em H2 . . . . . . . . . . . . . . . . . . . . 42
27
SequŒncia de solu(cid:231)ıes centradas em H2 para o caso m=2 . . . . . . . . . . 44
28
29 MØtodo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
30 Aplica(cid:231)ªo MØtodo de Cimmino
. . . . . . . . . . . . . . . . . . . . . . . . 49
31 MØtodo de Kaczmarz para desigualdades . . . . . . . . . . . . . . . . . . . 50

Loop no algoritmo de Gauss-Seidel

7

32 Reta ligando x e PH(x) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
. . . . . . . . . . . . . . . . . . . . . 55
33 Aplica(cid:231)ªo algoritmo de Gauss-Seidel
. . . . . . . . . . . . . . . . . . . . . . 56
Loop no Algoritmo de Gauss-Seidel
34
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
35 Algoritmo de Kaczmarz
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
36 Algoritmo de Kaczmarz
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
37 Algoritmo de Kaczmarz
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
38 Algoritmo de Kaczmarz
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
39 Algoritmo de Kaczmarz
40 MØtodo de Jacobi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
41 Algoritmo de Jacobi
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
42 Algoritmo de Jacobi
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
43 Algoritmo de Jacobi
44 Algoritmo de Jacobi
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
45 Algoritmo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
46 Algoritmo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
47 Algoritmo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
48 Algoritmo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64

1

2

3

4

5

6

7

SUM`RIO

10

Introdu(cid:231)ªo

Preliminares

Espa(cid:231)o Euclidiano n-dimesional

2.1
2.2 Matrizes e sistemas lineares

15
. . . . . . . . . . . . . . . . . . . . . . . 15
. . . . . . . . . . . . . . . . . . . . . . . . . 17

Modelo MatemÆtico da Tomogra(cid:28)a Computadorizada

21

3.1 Modelo MatemÆtico da Tomogra(cid:28)a Computadorizada Usando Sistemas

Lineares . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

Usando Algoritmos para Resolver Sistemas Lineares

30
. . . . . . . . . . . . . . . . . . . . 30
Os mØtodos de Gauss-Seidel e Jacobi
4.1
O operador proje(cid:231)ªo sobre hiperplanos
. . . . . . . . . . . . . . . . . . . 35
4.2
4.3
Algoritmos de Kaczmarz . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
4.4 MØtodo de Cimmino . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
AnÆlise das desigualdades
4.5
. . . . . . . . . . . . . . . . . . . . . . . . . . 49
Relaxa(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.6

Ensinando os Algoritmos em Sala de Aula

54

ApŒndice

66
O operador proje(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
AnÆlise de ConvergŒncia . . . . . . . . . . . . . . . . . . . . . . . . . . . 72

6.1
6.2

Considera(cid:231)ıes Finais

ReferŒncias

76

77

9

1 Introdu(cid:231)ªo

A Tomogra(cid:28)a Computadorizada (TC) Ø uma ferramenta fundamental em rotinas cl(cid:237)-
nicas, de obten(cid:231)ªo de imagem de partes internas do corpo humano, pois ela fornece um
mØtodo por meio do qual Ø poss(cid:237)vel analisar uma parte do corpo humano sem a necessi-
dade de interven(cid:231)ªo cirœrgica. AlØm disso, em compara(cid:231)ªo com outros mØtodos, como a
radiogra(cid:28)a convencional ela tem a grande vantagem de fornecer uma imagem em 3D. De
fato, enquanto a radiogra(cid:28)a convencional consiste na obten(cid:231)ªo representativa de todas as
estruturas do corpo de forma sobrepostas em uma imagem 2D, o que Ø demasiado ruim
para a dete(cid:231)ªo de pequenas diferen(cid:231)as entre os tecidos, a tomogra(cid:28)a computadorizada
(T C) nos fornece uma imagem 3D mais real e com mais detalhes da regiªo em anÆlise. A
(cid:28)gura a seguir trata de uma radiogra(cid:28)a convencional, onde a imagem Ø obtida por meio
da sobreposi(cid:231)ªo dos vÆrios tecidos, conforme se observa claramente.

Figura 1: Radiogra(cid:28)a simples do torÆx

Fonte: [9]

10

1. Introdu(cid:231)ªo

A Figura 2 representa uma imagem obtida atravØs da tomogra(cid:28)a computadorizada
(TC) onde percebemos claramente a riqueza de detalhes, sendo portanto, mais adequada
na elabora(cid:231)ªo de um disgn(cid:243)stico cl(cid:237)nico do que a radiogra(cid:28)a convencional (Figura 1).

Figura 2: Tomogra(cid:28)a computadorizada

Fonte: [10]

Para fazer a TC o paciente Ø colocado numa mesa que se desloca para o interior de um
anel de cerca de 70 cm de di(cid:226)metro. Em volta deste encontra-se uma ampola de raios-X,
num suporte circular designado gantry. Do lado oposto a ampola encontra-se o detector
responsÆvel por captar a radia(cid:231)ªo e transmitir informa(cid:231)ªo ao computador ao qual estÆ
conectado. Nestas mÆquinas, durante o exame, um aparelho emite uma quantidade de
raios X enquanto ele vai descrevendo uma volta completa (360◦
) em torno do paciente.
Os raios, ap(cid:243)s atravessarem o corpo do paciente, sªo captados na outra extremidade pelo
detector, conforme a (cid:28)gura a seguir:

11

1. Introdu(cid:231)ªo

Figura 3: Caracter(cid:237)stica do tom(cid:243)grafo

Fonte: [11]

Um computador faz a anÆlise da varia(cid:231)ªo de absor(cid:231)ªo de raios-x na regiªo analisada

e depois reconstr(cid:243)i a imagem por meio dos dados obtidos.

O aparelho responsÆvel pela tomogra(cid:28)a computadorizada recebe o nome de tom(cid:243)grafo.

Figura 4: Aparelho de Tomogra(cid:28)a computadorizada

Fonte: [12]

12

1. Introdu(cid:231)ªo

Assim, a TC Ø feita a partir da quantidade de radia(cid:231)ªo absorvida por cada parte do
corpo analisada. Como tecidos diferentes tem absor(cid:231)ıes diferentes, um computador Ø
capaz de traduzir essas varia(cid:231)ıes numa escala de cinzentos, produzindo uma imagem.

Figura 5: Escala de Cinzentos

Essa imagem, a ser reconstru(cid:237)da, Ø dividida em vÆrios quadradinhos (veja Figura 6),
que recebem o nome de pixels, logo, o conhecimento de cada pixel produz uma parte da
imagem, e a qualidade da imagem obtida Ø diretamente proporcional a quantidade de
pixels, isto Ø, quanto menor for o pixel melhor serÆ a qualidade da imagem.

Figura 6: Regiªo plani(cid:28)cada

Fonte: [10]

Associando o valor da absor(cid:231)ªo dos tecidos nessa zona (quadradinhos) podemos distri-

13

1. Introdu(cid:231)ªo

buir o conjunto das atenua(cid:231)ıes em linhas e colunas disposta de tal forma que determinam
uma matriz em que a atenua(cid:231)ªo da primeira entrada esta associada ao primeiro quadra-
dinho da imagem conforme Figura 6. Podemos representar o conjunto de pixels de uma
(cid:28)gura em forma de linhas e colunas, de modo que esse conjunto determina uma matriz.
Quanto maior o nœmero de elementos desta matriz, menor serÆ o tamanho do pixel, e
logo, melhor serÆ a qualidade da imagem obtida. Portanto, reconstruir uma imagem a
partir da TC equivale a encontrar os elementos de uma matriz formada por pixels. Isto
(cid:28)carÆ claro quando formos modelar a T C, pois o processo de obten(cid:231)ªo da imagem a partir
de uma T C Ø modelado por uma teoria matemÆtica consistente. Veremos no Cap(cid:237)tulo 3
que obter uma imagem na TC equivale a resolver um sistema linear.

Esse trabalho foi baseado no artigo dos autores Iusem e De Pierro publicado na revista
matemÆtica universitÆria (veja [1]) tendo como objetivo estudar algoritmos matemÆticos
com muitas equa(cid:231)ıes e inc(cid:243)gnitas e transformÆ-lo numa linguagem mais simples e aces-
s(cid:237)vel para que o professor possa utilizÆ-lo em sala de aula como um exemplo prÆtico de
modelagem matemÆtica e para motivÆ-los quanto a pesquisa matemÆtica. Por isso, o texto
e algumas (cid:28)guras do nosso trabalho sªo adapta(cid:231)ıes. TambØm usamos [3] no Cap(cid:237)tulo 2 e
[4] nas preliminares, como referŒncia para este trabalho. Para os professores que desejem
se aprofundarem sobre os assuntos estudados aqui, recomendamos [1], [3], [7] [4], [8] e [6].
Esse trabalho esta divido em 5 cap(cid:237)tulos e um apŒndice. No cap(cid:237)tulo 2 faremos uma
pequena revisªo sobre as ferramentas necessÆrias para a compreensªo desse trabalho. No
Cap(cid:237)tulo 3 iremos modelar a (TC) usando sistemas lineares. O Cap(cid:237)tulo 4 Ø o nosso prin-
cipal foco do trabalho, pois nele estudaremos como resolver os sistemas lineares, obtidos
da modelagem da TC, a partir de algoritmos matemÆticos. No Cap(cid:237)tulo 5 mostraremos
como o professor pode ensinar este algoritmo em sala de aula, usando apenas conhecimen-
tos do Ensino MØdio. Por (cid:28)m, no ApŒndice estudaremos a convergŒncia dos algoritmos
de Kaczmarz e Cimmino, mostraremos que estes algoritmos convergem para uma solu(cid:231)ªo
do sistema linear.

14

2 Preliminares

Neste Cap(cid:237)tulo, apresentamos os conteœdos bÆsicos que serªo necessÆrios (cid:224) modelagem
da tomogra(cid:28)a computadorizada usando sistemas lineares. Inicialmente faremos uma breve
introdu(cid:231)ªo referente ao espa(cid:231)o euclidiano Rn e depois relembraremos os conceitos de
matrizes e sistemas lineares. Mais detalhes podem ser encontrados em [4] e [5].

2.1 Espa(cid:231)o Euclidiano n-dimesional

Dado n um nœmero natural. O espa(cid:231)o euclidiano n-dimensional, denotado por Rn,
Ø o produto cartesiano de n fatores iguais a R, isto Ø, Rn = R × R × · · · × R. Seus
elementos, portanto, sªo as sequŒncias (ou listas) de n termos reais x = (x1, ..., xn). Para
cada i = 1, ..., n, o termo xi chama-se a i-Øsima coordenada de x. Se x = (x1, ..., xn) e
y = (y1, ..., yn), tem-se x = y se, e somente se, x1 = y1, ..., xn = yn. Assim, toda igualdade
entre dois elementos de Rn equivale a n igualdades entre nœmeros reais. Portanto, R1 = R
Ø o conjunto dos nœmeros reais, R2 Ø o plano euclidiano e R3 Ø o espa(cid:231)o euclidiano
tridimensional. Os elementos de Rn (cid:224)s vezes sªo chamados pontos e (cid:224)s vezes vetores,
isto vai depender muito da situa(cid:231)ªo que estamos abordando. Geralmente usa-se vetores
quando consideradas as opera(cid:231)ıes que de(cid:28)niremos agora. A adi(cid:231)ªo que faz corresponder
a cada par de elementos x = (x1, ..., xn) e y = (y1, ..., yn) a soma

x + y = (x1 + y1, ..., xn + yn)

e a multiplica(cid:231)ªo de um nœmero real α pelo elemento x = (x1, ..., xn) tendo como resultado

αx = (αx1, αx2, ..., αxn).

O vetor 0 = (0, 0, ..., 0), cujas coordenadas sªo todas zero, chama-se a origem de Rn.

Dados quaisquer x, y, z ∈ Rn e α, β ∈ R valem as seguintes igualdades:

1) Elemento neutro ou vetor nulo

x + 0 = 0 + x = x

15

Cap(cid:237)tulo 2. Preliminares

2) Comutatividade

3) SimØtrico

4) Associatividade

5) Distributividade

x + y = y + x

−x + x = x + (−x) = 0

x + (y + z) = (x + y) + z

(α + β)x = αx + βx, β(x + y) = βx + βy

A primeira igualdade assegura que o vetor nulo Ø o elemento neutro da adi(cid:231)ªo, jÆ a

segunda diz que −x Ø o inverso (ou simØtrico) aditivo de x.

De(cid:28)ni(cid:231)ªo 1 A fun(cid:231)ªo que associa a cada par de vetores x = (x1, ..., xn), y = (y1, ..., yn)
o nœmero real

Ø chamado o produto interno can(cid:244)nico de x e y.

(cid:104)x, y(cid:105) = x1y1 + · · · + xnyn,

A partir da de(cid:28)ni(cid:231)ªo 1 e das opera(cid:231)ıes em R, pode-se veri(cid:28)car que o produto interno

satisfaz as seguintes propriedades para quaisquer x, y, z ∈ Rn e α ∈ R,

a) SimØtrico:

b) Linear

(cid:104)x, y(cid:105) = (cid:104)y, x(cid:105);

(cid:104)x, y + z(cid:105) = (cid:104)x, y(cid:105) + (cid:104)x, z(cid:105)

(cid:104)αx, y(cid:105) = α(cid:104)x, y(cid:105)

e

e

(cid:104)x + y, z(cid:105) = (cid:104)x, z(cid:105) + (cid:104)y, z(cid:105);

(cid:104)x, αy(cid:105) = α(cid:104)x, y(cid:105);

c) Nªo-negativo:

(cid:104)x, x(cid:105) ≥ 0 e

(cid:104)x, x(cid:105) = 0 ⇔ x = 0.

Da de(cid:28)ni(cid:231)ªo de produto interno obtemos a seguinte de(cid:28)ni(cid:231)ªo.

De(cid:28)ni(cid:231)ªo 2 Diz-se que dois vetores x, y ∈ Rn sªo ortogonais quando

Neste caso denotamos x ⊥ y.

(cid:104)x, y(cid:105) = 0.

16

Cap(cid:237)tulo 2. Preliminares

A pr(cid:243)xima de(cid:28)ni(cid:231)ªo Ø importante, pois de(cid:28)ne tamanho de um vetor.

De(cid:28)ni(cid:231)ªo 3 Chama-se de norma (ou comprimento) de um vetor x ∈ Rn ao nœmero
nªo-negativo: (cid:107)x(cid:107) = (cid:112)(cid:104)x, x(cid:105), assim

(cid:107)x(cid:107) =

(cid:113)

1 + x2
x2

2 + · · · + x2
n.

A seguinte desigualdade, conhecida como Desigualdade de Cauchy-Schwarz serÆ usada

no Cap(cid:237)tulo 4 para provar que os algoritmos de Kaczmarz e Cimmino convergirÆ.

Proposi(cid:231)ªo 1 (Desigualdade de Cauchy-Schwarz) Se x, y ∈ R, entªo

|(cid:104)x, y(cid:105)| ≤ (cid:107)x(cid:107) (cid:107)y(cid:107).

Demonstra(cid:231)ªo: Veja [5].

A pr(cid:243)xima de(cid:28)ni(cid:231)ªo serÆ muito utilizada nos cap(cid:237)tulos seguintes, inclusive quando

formos modelar a TC via sistemas lineares.

De(cid:28)ni(cid:231)ªo 4 Dados v ∈ Rn e b ∈ R, o conjunto

H = {x ∈ Rn|(cid:104)x, v(cid:105) = b}

(1)

Ø chamado de hiperplano.

Note que para n = 3, o conjunto H Ø um plano do R3, da forma αx1 + βx2 + γx3 = b,

onde estamos tomando v = (α, β, γ) e x = (x1, x2, x3).

2.2 Matrizes e sistemas lineares

Nesta se(cid:231)ªo relembraremos a de(cid:28)ni(cid:231)ªo e algumas propriedades elementares de matrizes
e sistemas lineares. Para mais detalhes sobre o assunto veja [7]. Vale a pena destacar que
usaremos as de(cid:28)ni(cid:231)ıes que geralmente aparecem nos livros do Ensino MØdio.

A ideia geral de matriz de ordem m × n Ø a de um quadro retangular com mn ele-
mentos, dispostos em m linhas e n colunas. Matrizes sªo frequentemente utilizadas para
a organiza(cid:231)ªo de dados, como por exemplo, as notas (cid:28)nais dos alunos de uma sØrie no
colØgio podem formar uma matriz cujas colunas correspondem as matØrias lecionadas na-
quela sØrie e cujas linhas representam os alunos. Daremos agora a de(cid:28)ni(cid:231)ªo formal, de
matriz, usada no Ensino MØdio.

17

Cap(cid:237)tulo 2. Preliminares

De(cid:28)ni(cid:231)ªo 5 Uma matriz A Ø um conjunto (ou mais especi(cid:28)camente uma tabela) ou
cole(cid:231)ªo que apresenta m.n elementos dispostos em m linhas e n colunas.

A =









a11
a12
a21
a22
...
...
am1 am2

. . . a1n
. . . a2n
...
. . .
. . . amn









Para cada 1 ≤ i ≤ m, a lista ordenada (ai1, ai2, ..., ain) chama-se a i-Øsima linha ou
i-Øsimo vetor linha da matriz A, enquanto que para cada 1 ≤ j ≤ n (a1j, a2j, ..., anj) Ø a
j-Øsima coluna ou j-Øsimo vetor coluna de A.

A matriz A serÆ denotada por A = (aij)m×n, onde aij Ø o elemento cuja disposi(cid:231)ªo na
matriz ocuparÆ, a interse(cid:231)ªo da i-Øsima linha com a j-Øsima coluna. Denotaremos por O
a matriz cujos seus elementos sªo todos iguais a zero, e a chamaremos de matriz nula.

Diz-se que a matriz A Ø quadrada quando tem o mesmo nœmero de linhas e colunas.

De(cid:28)ni(cid:231)ªo 6 Duas matrizes A = (aij)m×n e B = (bij)m×n sªo iguais quando aij = bij
para todo i(i ∈ {1, 2, 3, . . . , m}) e todo j(j ∈ {1, 2, 3, . . . , n}). Isto signi(cid:28)ca que para serem
iguais duas matrizes devem ser do mesmo tipo e apresentar os elementos correspondentes
(elementos com (cid:237)ndices iguais) iguais.

No conjunto de todas as matrizes m × n podemos de(cid:28)nir a soma de matrizes e o

produto por escalar da seguinte forma:

De(cid:28)ni(cid:231)ªo 7 Dadas duas matrizes A = (aij)m×n e B = (bij)m×n, chama-se soma A + B
a matriz C = (cij)m×n tal que cij = aij + bij, para todo i e todo j. Isto signi(cid:28)ca que a
soma de duas matrizes A e B do tipo m × n Ø uma matriz C do mesmo tipo em que cada
elemento Ø a soma dos elementos correspondentes em A e B.

De(cid:28)ni(cid:231)ªo 8 Dado um nœmero α e uma matriz A = (aij)m×n, chama-se produto de um
escalar por uma matriz, denotado por αA, a matriz B = (bij)m×n tal que bij = αaij para
todo i e todo j. Isto signi(cid:28)ca que multiplicar uma matriz A por um escalar α Ø construir
uma matriz B formada pelos elementos de A todos multiplicados por α.

Teorema 1 A adi(cid:231)ªo de matrizes do tipo m × n goza das seguintes propriedades:

1) Ø associativa: (A + B) + C = A + (B + C) quaisquer que sejam A, B e C do tipo

m × n.

2) Ø comutativa: A + B = B + A quaisquer que sejam A e B, do tipo m × n.

3) tem elemento neutro: existe M tal que A + M = A qualquer que seja A do tipo

m × n.

4) todo elemento tem simØtrico: para todo A do tipo m×n existe A(cid:48)

tal que A+A(cid:48) = M

18

Cap(cid:237)tulo 2. Preliminares

Demonstra(cid:231)ªo:

1) Fazendo (A + B) + C = K e A + (B + C) = Z, temos:

kij = (aij + bij) + cij = aij + (bij + cij) = zij

para todo i e todo j.

2) Fazendo A + B = K e B + A = Z, temos:

kij = aij + bij = bij + aij = zij

3) Impondo A + M = A, resulta: aij + mij = aij donde mij = 0. Da(cid:237), M = O, isto Ø,

o elemento neutro da adi(cid:231)ªo de matriz Ø a matriz nula do tipo m × n.

4) Impondo A + A(cid:48) = M = O, resulta: aij + a(cid:48)

ij = 0 donde a(cid:48)

todo j, ou seja, a simØtrica da matriz A para a adi(cid:231)ªo Ø a matriz A(cid:48)
que A.

ij = −aij pata todo i e
de mesmo tipo

(cid:50)

Um fato interessante Ø que, considerando o espa(cid:231)o das matrizes com as opera(cid:231)ıes
de adi(cid:231)ªo de matrizes e multiplica(cid:231)ªo de um vetor por um escalar da De(cid:28)ni(cid:231)ªo 1 ele Ø
um espa(cid:231)o vetorial, isto Ø, vale as propriedades comutatividade, associatividade, etc. A
pr(cid:243)xima proposi(cid:231)ªo destaca algumas dessas propriedades, para mais detalhes veja ([7]).
Denotaremos o elementos neutro da adi(cid:231)ªo pela matriz O, que Ø a matriz em que todos

os seus elementos sªo nulos

De(cid:28)ni(cid:231)ªo 9 Dadas duas matrizes A = (aij)m×n e B = (bjk)n×p, chama-se produto AB a
matriz C = (cik)m×p tal que

cik = ai1b1k + ai2b2k + ai3b3k + . . . + ainbnk =

n
(cid:88)

j=1

aijbjk

para todo i ∈ {1, 2, . . . , m} e todo k ∈ {1, 2, . . . , p}.

Teorema 2 A multiplica(cid:231)ªo de matrizes goza das seguintes propriedades:

1. Ø associativa: (AB)C = A(BC)

2. Ø distributiva (cid:224) direita em rela(cid:231)ªo (cid:224) adi(cid:231)ªo: (A + B)C = AC + BC

3. Ø distributiva (cid:224) esquerda: C(A + B) = CA + CB

4. (kA)B = A(kB) = k(AB)

19

Cap(cid:237)tulo 2. Preliminares

De(cid:28)ni(cid:231)ªo 10 Uma equa(cid:231)ªo linear nas variÆveis x1, x2, . . . , xn Ø uma equa(cid:231)ªo da forma:

a1x1 + a2x2 + . . . + anxn = b

(2)

onde ai, com 1 ≤ i ≤ n e b sªo nœmeros reais.

Um conjunto que apresenta mais de uma equa(cid:231)ªo linear Ø um sistema de equa(cid:231)ıes

lineares. A critØrio de exemplo temos o conjunto da forma:






a11x1 + a12x2 + a13x3 + . . . + a1nxn = b1
a21x1 + a22x2 + a23x3 + . . . + a2nxn = b2
a31x1 + a32x2 + a33x3 + . . . + a3nxn = b3
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
am1x1 + am2x2 + am3x3 + ... + amnxn = bm

onde aij e bij sªo nœmeros reais para 1 ≤ i ≤ m, 1 ≤ j ≤ n. Perceba que o sistema
anterior pode ser representado por:












a11
a12
a21
a22
a31
a32
...
...
am1 am2

. . . a1n
. . . a2n
. . . a3n
...
. . .
. . . amn


































x1
x2
x3
...
xm

=























b1
b2
b3
...
bm

Da(cid:237), o sistema anterior se transforma em Ax = b.

20

3 Modelo MatemÆtico da Tomogra(cid:28)a
Computadorizada

Neste cap(cid:237)tulo, estudaremos o modelo matemÆtico por trÆs da TC, usando sistemas
lineares. Isto Ø, veremos que obter uma imagem via TC equivale a resolver um sistema
de equa(cid:231)ıes e inequa(cid:231)ıes lineares. Para os leitores que desejem se aprofundar no assunto,
recomendamos [1], no qual este cap(cid:237)tulo foi baseado, tambØm recomendamos [2], [3] e [8].

3.1 Modelo MatemÆtico da Tomogra(cid:28)a Computadori-

zada Usando Sistemas Lineares

A ideia central da constru(cid:231)ªo de imagem pela TC Ø o de produzir uma imagem de
uma parte interna do corpo humano atravØs da medi(cid:231)ªo da intensidade dos raios-X que
o atravessam. Pelas propriedades do raio-X, uma parte deste raio irÆ passar e a outra
serÆ absorvida pelos tecidos, isso depende da densidade dos tecidos, ou seja, tecidos mais
densos (como o f(cid:237)gado) ou com elementos mais pesados (como o cÆlcio presente nos ossos)
absorvem mais radia(cid:231)ªo que tecidos menos densos (como o pulmªo que estÆ preenchido
com ar). Assim, uma TC quanti(cid:28)ca a radia(cid:231)ªo absorvida por cada parte do corpo ana-
lisado (radiodensidade) e traduz essas varia(cid:231)ıes numa escala de cinzentos (veja a Figura
5), produzindo uma imagem.

Para estudarmos a quantidade do raio-X que irÆ passar, precisamos estudar a sua
atenua(cid:231)ªo (perda gradual de intensidade do raio-X). Para nosso prop(cid:243)sito iremos estudar
a atenua(cid:231)ªo do raio-X em um pequeno quadradinho. Para isto, usaremos a seguinte
de(cid:28)ni(cid:231)ªo que pode ser encontrada em [1] veja a pÆgina 57.

De(cid:28)ni(cid:231)ªo 11 Chamaremos de coe(cid:28)ciente de atenua(cid:231)ªo linear (ou apenas atenua(cid:231)ªo) do
raio-X no ponto de coordenadas (x, y) de R2 a fra(cid:231)ªo da intensidade de um raio-X que Ø
absorvida num quadradinho de lado dx com centro em (x, y). Indicaremos esse coe(cid:28)ciente
por f (x, y).

21

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

Figura 7: Regiªo plani(cid:28)cada

Como tecidos diferentes causem atenua(cid:231)ıes diferentes, o conhecimento do valor de f
em cada ponto nos permite descrever a forma e o tamanho do (cid:243)rgªos que estªo presentes
na regiªo em estudo. Portanto, encontrar f equivale a encontrar a imagem reconstru(cid:237)da
pela TC.

Antes de estudarmos como obter os valores da fun(cid:231)ªo f em cada ponto, note que uma
imagem em 3D nada mais Ø que a uniªo de vÆrias imagem em 2D, isto Ø, se tomarmos
uma imagem em 3D e (cid:28)zermos um corte transversal obteremos uma imagem em 2D, e
portanto, a imagem em 3D Ø a uniªo de cortes transversais (imagens em 2D), de acordo
com a Figura 8 e 9. Portanto, para construirmos uma imagem em 3D basta construirmos
imagens em 2D e unirmos essas imagens de forma paralela. Por isso, estudaremos como
obter uma imagem em 2D em (TC).

Figura 8: Corte transversal

Fonte: [13]

Figura 9: Corte Longitudinal

Fonte: [14]

22

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

Suponhamos que S seja um subconjunto do R2 no qual queremos obter uma imagem do
seu interior (por exemplo, pode-se imaginar que S seja um corte transversal que contenha
um (cid:243)rgªo, veja Figura 8), e que sobre S disparamos raios-X, no qual medimos a intensidade
inicial e (cid:28)nal.

Figura 10: Regiªo S

Fonte: [1]

Para (cid:28)xar ideias, podemos supor que S esteja dividido em n quadradinhos que cha-
maremos de pixels de lados (cid:52)xj (j = 1, 2, ..., n). Tomando os pixels su(cid:28)cientemente
pequenos, podemos supor que a atenua(cid:231)ªo Ø constante em cada pixel, isto Ø, a fun(cid:231)ªo f
da De(cid:28)ni(cid:231)ªo 11 Ø constante. Chamaremos de xj ao valor de f no j-Øsimo pixel. Logo,
nossa inc(cid:243)gnita nªo Ø mais a fun(cid:231)ªo f e sim o vetor x = (x1, x2, ..., xn).

Figura 11: Regiªo plani(cid:28)cada

Fonte: [1]

Suponhamos que sejam disparados sobre a regiªo S os raios-X L1, ..., Lm, cujas atenu-

23

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

a(cid:231)ıes medimos ao logo de todo S (por exemplo com um detector de part(cid:237)culas), e seja bi
a atenua(cid:231)ªo do raio-X Li sobre todo S. Denotemos por aij o comprimento da interse(cid:231)ªo
do i-Øsimo pixel com j-Øsimo raio. Assim aij serÆ zero quando nªo existe interse(cid:231)ªo)

Figura 12: Regiªo plani(cid:28)cada

Fonte: [1]

A atenua(cid:231)ªo sofrida no pixel j pelo comprimento do raio Li que atravessa esse pixel Ø

dada por aijxj como mostra a (cid:28)gura abaixo:

Figura 13: Absor(cid:231)ªo do raio Li no pixel j

Entªo, a atenua(cid:231)ªo do i-Øsimo raio-X, ao longo de S Ø dado pela soma da atenua(cid:231)ªo

em cada pixel (Figura 12), isto Ø, a seguinte soma dar a atenua(cid:231)ªo do i-Øsimo raio:

ai1x1 + ai2x2 + · · · + ainxn = bi.

24

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

Portanto, reconstruir uma imagem dentro de S equivale a resolver o sistema:






a11x1 + a12x2 + a13x3 + . . . + a1nxn = b1
a21x1 + a22x2 + a23x3 + . . . + a2nxn = b2
a31x1 + a32x2 + a33x3 + . . . + a3nxn = b3
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
am1x1 + am2x2 + am3x3 + ... + amnxn = bm

cuja forma matricial Ø












a12
a11
a22
a21
a32
a31
...
...
am1 am2

. . . a1n
. . . a2n
. . . a3n
...
. . .
. . . amn


































x1
x2
x3
...
xm












,












b1
b2
b3
...
bm

=

que denotaremos apenas por

Ax = b.

(3)

(4)

Suponhamos que tenhamos resolvido o problema acima, entªo associando os valores
encontrados de xj tons de cinza entre o branco e preto, preto se xj Ø zero, e conforme
xj aumenta diminu(cid:237)mos sua colora(cid:231)ªo do preto a tons de cinza mais claros. A colora(cid:231)ªo
numa tela de cada pixel com esses tons faz de cada vetor solu(cid:231)ªo x uma imagem da TC.

25

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

Figura 14: Regiªo plani(cid:28)cada

Fonte: [15]

Portanto, o vetor x solu(cid:231)ªo do sistema (3) Ø a imagem reconstru(cid:237)da da regiªo em
estudo. Contudo, como usamos muitas aproxima(cid:231)ıes e tambØm alguns fatores nªo foram
levados em considera(cid:231)ªo, como por exemplo: os raios sªo feixe e nªo retas e que os
raios nªo apresentam o mesmo comprimento de onda. Da(cid:237), para uma representa(cid:231)ªo mais
realista costuma-se considerar o vetor de erro (cid:15) = ((cid:15)1, (cid:15)2, . . . , (cid:15)n), com (cid:15)i > 0 e os sistemas
lineares

ak1x1 + ak2x2 + · · · + aknxn = bk,

se tornam inequa(cid:231)ıes do tipo

bk − (cid:15)k ≤ ak1x1 + ak2x2 + · · · + aknxn ≤ bk + (cid:15)k,

isto Ø,






b1 − (cid:15)1 ≤ a11x1 + a12x2 + a13x3 + · · · + a1nxn ≤ b1 + (cid:15)1
b2 − (cid:15)2 ≤ a21x1 + a22x2 + a23x3 + · · · + a2nxn ≤ b2 + (cid:15)2
b2 − (cid:15)2 ≤ a31x1 + a32x2 + a33x3 + · · · + a3nxn ≤ b3 + (cid:15)3
· · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·
bm − (cid:15)m ≤ am1x1 + am2x2 + am3x3 + ... + amnxn ≤ bm + (cid:15)m

.

Note que encontrar um vetor solu(cid:231)ªo do sistemas acima equivale a encontrar uma

26

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

solu(cid:231)ªo das seguinte inequa(cid:231)ıes:






a11x1 + a12x2 + a13x3 + · · · + a1nxn ≤ b1 + (cid:15)1
a21x1 + a22x2 + a23x3 + · · · + a2nxn ≤ b2 + (cid:15)2
a31x1 + a32x2 + a33x3 + · · · + a3nxn ≤ b3 + (cid:15)3
· · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·
am1x1 + am2x2 + am3x3 + ... + amnxn ≤ bm + (cid:15)m
−(a11x1 + a12x2 + a13x3 + · · · + a1nxn) ≤ −(b1 − (cid:15)1)
−(a21x1 + a22x2 + a23x3 + · · · + a2nxn) ≤ −(b2 − (cid:15)2)
−(a31x1 + a32x2 + a33x3 + · · · + a3nxn) ≤ −(b3 − (cid:15)3)
· · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · · ·
−(am1x1 + am2x2 + am3x3 + ... + amnxn) ≤ −(bm − (cid:15)m)

Escrevendo o sistema acima usando a matriz A = (aij), temos

(cid:40)

Ax ≤ b
−Ax ≤ −b,

que pode ser escrita da seguinte forma:

Ax ≤ b,

(5)

onde A ∈ R2m×n e b ∈ R2m.

Como cada solu(cid:231)ªo de (4) e (5) representa uma imagem da TC, entªo podemos ter
varias imagens diferentes, ilustrando o mesmo (cid:243)rgªo, pois os sistemas podem ter vÆrias
solu(cid:231)ıes. Entªo uma pergunta natural Ø: Como saber qual desta imagem (solu(cid:231)ªo) estÆ
mais pr(cid:243)xima da representa(cid:231)ªo real do (cid:243)rgªo? Para responder tal pergunta impıe-se algu-
mas restri(cid:231)ıes sobre as solu(cid:231)ıes (imagens) obtidas, isto Ø, sobre o conjunto das solu(cid:231)ıes
colocamos algumas restri(cid:231)ıes para escolher as solu(cid:231)ıes mais adequadas (imagens mais
reais). Isto em linguagem matemÆtica signi(cid:28)ca minimizar um certa fun(cid:231)ªo h : Rn −→ R,
ou seja,

ou entªo,

min h(x)

sujeito a condi(cid:231)ªo Ax = b,

min h(x)

sujeito a condi(cid:231)ªo Ax ≤ b

(6)

(7)

Por exemplo, se x0 representa a imagem da TC de um paciente saudÆvel, entªo a

fun(cid:231)ªo:

h(x) = (cid:107)x − x0(cid:107),

(x0 ∈ Rn)

27

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

representa as imagens normais para h(x) = 0. PorØm, se o paciente esta fazendo a
tomogra(cid:28)a Ø porque se espera (ou se teme) que x (cid:54)= x0. Como h Ø claramente cont(cid:237)nuo
(veja [4]), o quanto menor for h(x), x representarÆ uma imagem mais pr(cid:243)ximo do normal.
Essa fun(cid:231)ªo h Ø usada para excluir as solu(cid:231)ıes absurdas como pode ser visto na (cid:28)gura
abaixo:

Figura 15: Solu(cid:231)ªo inconsistente

Fonte: [16]

Para mais detalhes sobre essa fun(cid:231)ªo h e tambØm para outras fun(cid:231)ıes que ajudem a

selecionar as melhores imagens veja [1], pÆgina 60.

Agora, nosso pr(cid:243)ximo objetivo, Ø estudar mØtodos de resolu(cid:231)ªo dos sistemas de equa-
(cid:231)ıes e inequa(cid:231)ıes lineares. Existem vÆrios mØtodos para determinar as solu(cid:231)ıes de um
sistemas de equa(cid:231)ıes lineares ou de inequa(cid:231)ıes Lineares executando um nœmero (cid:28)nito de
opera(cid:231)ıes; um exemplo clÆssico, para resolver (4), Ø o mØtodo de elimina(cid:231)ªo gaussiana
(escalonamento). JÆ para resolver o problema (5), pode ser usado o algoritmo de Karmar-
kar e o algoritmo de Programa(cid:231)ªo Linear (veja [1]). Na prÆtica nªo se usam esses mØtodos
clÆssicos para resolver tais sistemas obtidos na TC, pois a forma da matriz A, tomada
no problema, vai impactar diretamente no resultado obtido, jÆ que para termos uma boa
aproxima(cid:231)ªo, e que a imagem obtida seja n(cid:237)tida, o nœmero n de pixels tomados tem que
ser muito grande, pois a qualidade da imagem vai depender diretamente da quantidade
de pixels, em que a regiªo for dividida. Para se ter uma ideia, segundo [1], a quantidade
m(cid:237)nima de pixels a ser tomada, deve ser de ordem superior a 105 e a quantidade de raios
incidentes deve ser superior a 104. Portanto, a matriz A de (4) Ø de ordem superior a
105 × 104, enquanto que a matriz A de (5) Ø superior a 1010 × 104. Portanto, a ordem da
matriz A Ø muito grande para se utilizar esses mØtodos.

Para a modelagem feita acima supomos que o raio-X Ø um raio (na verdade Ø um

feixo), para uma modelagem em que o raio-X Ø fecho indicamos [8]

Os artigos [2] e [8] modelam a tomogra(cid:28)a computadorizada usando transformada de
Radon. Neste caso, supondo a fun(cid:231)ªo f da De(cid:28)ni(cid:231)ªo 11 constante, obtemos o sistema
(4), portanto, a modelagem que (cid:28)zemos aqui Ø um caso particular da modelagem usando

28

Cap(cid:237)tulo 3. Modelo MatemÆtico da Tomografia Computadorizada

transformada de Radon.

29

4 Usando Algoritmos para Resolver
Sistemas Lineares

Neste cap(cid:237)tulo estudaremos a resolu(cid:231)ªo de sistemas lineares via algoritmos. Nele dare-
mos vÆrios exemplos para ilustrar a aplica(cid:231)ªo desses algoritmos na resolu(cid:231)ªo de sistemas
lineares.

4.1 Os mØtodos de Gauss-Seidel e Jacobi

Vamos come(cid:231)ar pela aplica(cid:231)ªo dos Algoritmos de Gauss-Seidel e Jacobi, ambos do
come(cid:231)o do sØculos XIX. Tais mØtodos buscam a resolu(cid:231)ªo de sistemas lineares que apre-
sentam muitas equa(cid:231)ıes e muitas inc(cid:243)gnitas. O mØtodo consiste em, dados um sistema
linear, gerar uma sequŒncia de solu(cid:231)ıes aproximadas, de tal forma que essas solu(cid:231)ıes
estarªo tªo pr(cid:243)ximas do verdadeiro resultado o quanto desejarmos, isto Ø, quanto mais
termos dessa sequŒncia obtivermos melhor serÆ a aproxima(cid:231)ªo.

Para uma melhor compreensªo do algoritmo de Gauss-Seidel, iremos aplicÆ-lo para

resolver um exemplo em que o sistema (4) possui a matriz A do tipo 2 × 2.

Exemplo 1 Seja dado o sistema linear

(cid:40)

3x − y = 7
x − y = −1

(8)

cuja solu(cid:231)ªo Ø o vetor (4, 5). Para resolver tal sistema usando o Algoritmos de Gauss-
Seidel, de(cid:28)nimos L1 := {(x, y) ∈ R2| 3x − y = 7} e L2 := {(x, y) ∈ R2| x − y = −1}.
Note que um vetor (x, y) Ø solu(cid:231)ªo do sistema (8) se, e somente se, (x, y) ∈ L1 ∩ L2. O
Algoritmos de Gauss-Seidel fornece um mØtodo de encontrar um ponto de L1 ∩ L2. Para
isso, tomemos um ponto x0 = (5, 6) (pode ser qualquer). Variando a primeira coordenada
do ponto x0, para satisfazer a equa(cid:231)ªo L1, e deixando a segunda coordenada (cid:28)xa, obtemos
o ponto y1,1 = ( 13
3 , 6). De posse do ponto y1,1, modi(cid:28)camos a sua segunda coordenada para
satisfazer a equa(cid:231)ªo L2, e deixamos a primeira coordenada (cid:28)xa, o que nos permite obter o
ponto x1 = ( 13
3 ). Modi(cid:28)cando agora a primeira coordenada do ponto x1, para satisfazer

3 , 16

30

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

9 , 16

a equa(cid:231)ªo L1, e deixamos a segunda coordenada (cid:28)xa, obtermos o ponto y2,1 = ( 37
3 ).
Agora, de posse do ponto y2,1, modi(cid:28)quemos sua segunda coordenada para satisfazer a
9 , 46
equa(cid:231)ªo L2, onde obtemos o ponto x2 = ( 37
9 ), e deixemos a primeira coordenada (cid:28)xa.
Continuando, executando o processo sucessivamente, obteremos uma sequŒncia {xn} que
se aproximarÆ da solu(cid:231)ªo do sistema (veja a Figura 16), para ver isto, note que a primeiras
coordenada da sequŒncia xn gera a seguinte sequŒncia: {5; 13
9 ; ...} = {5; 4, 33; 4, 11; ...}
donde observamos que ela estÆ se aproximando de 4, enquanto que a segunda coordenada
de {xn} gera a seguinte sequŒncia: {6; 16
9 ; ...} = {6; 5, 33; 5, 11; ...} que se aproxima de
5.

3 ; 37

3 ; 46

Figura 16: Aplica(cid:231)ªo do Algoritmo de Gauss-Seidel

Descreveremos agora o algoritmo de Gauss-Seidel, para uma matriz A ∈ Rn×n qual-
quer. Para a utiliza(cid:231)ªo deste algoritmo, devemos tomar um ponto inicial x0 de Rn. De
posse deste ponto, modi(cid:28)camos a sua 1a componente para satisfazer a 1a equa(cid:231)ªo (e dei-
xamos o restante das equa(cid:231)ıes (cid:28)xas), obtemos entªo o ponto y1,1. Agora, modi(cid:28)camos
a 2a componente de y1,1, para satisfazer a segunda equa(cid:231)ªo (e deixamos o restante das
equa(cid:231)ıes (cid:28)xas), obtemos entªo o ponto y1,2 e continuamos a itera(cid:231)ªo das equa(cid:231)ıes atØ
obtermos o ponto y1,m, que chamamos de x1, isto Ø, y1,m = x1. Repetimos o procedi-
mento com x1 no lugar de x0, donde obtemos x2. Logo, seguindo o procedimento geramos
a sequŒncia {xk} com k = 1, . . . , n (veja a Figura 17).

31

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Figura 17: MØtodo de Gauss-Seidel

Fonte: [1]

Observe que a sequŒncia gerada por esse mØtodo depende sempre do termo anterior,
ou seja, modi(cid:28)camos sempre o anterior para se obter o pr(cid:243)ximo. Este tipo de algoritmo
recebe o nome sequencial, pois seus termos sªo obtidos a partir dos anteriores.

Descreveremos agora o mØtodo de Jacobi. Esse mØtodo Ø muito parecido com o de
Gauss-Seidel, a diferen(cid:231)a Ø que no mØtodo de Jacobi modi(cid:28)camos as coordenadas dos
pontos da sequŒncia ao mesmo tempo. Para (cid:28)car claro, vamos descrevŒ-lo agora.

Tomemos um ponto inicial x0, modi(cid:28)camos a sua 1a componente para satisfazer a 1a
equa(cid:231)ªo (e deixamos o restante das equa(cid:231)ıes (cid:28)xas), obtemos entªo o ponto y1,1; modi(cid:28)-
camos a 2a variÆvel de x0, para satisfazer a segunda equa(cid:231)ªo (e deixamos o restante das
variÆveis (cid:28)xas), obtemos entªo o ponto y1,2; modi(cid:28)camos a 3a componente de x0, para
satisfazer a terceira equa(cid:231)ªo (e deixamos o restante das variÆveis (cid:28)xas), obtemos entªo o
ponto y1,3 e continuamos a itera(cid:231)ªo das equa(cid:231)ıes atØ obtermos o ponto y1,m.

De(cid:28)namos o ponto x1 ∈ Rm como sendo a primeira coordenada de y1,1 e a segunda
coordenada de y1,2. Repetimos o procedimento com x1 no lugar de x0, donde obtemos
x2. Logo, seguindo o procedimento geramos a sequŒncia {xk} com k = 1, . . . , n. Ob-
serve que calculamos os termos da sequŒncia auxiliar yi,j de maneira paralela, todas ao
mesmo tempo, para depois tomarmos o termo da sequŒncia {xk}, por isso, tal algoritmo
Ø chamado de paralelo .

Antes de analisarmos a convergŒncia destes mØtodos, observe que, do ponto de vista
geomØtrico, conforme Figura 18, a sequŒncia de Gauss-Seidel se aproxima de uma solu(cid:231)ªo
œnica x(cid:63) mais rÆpida que a sequŒncia de Jacobi. Enquanto os vetores auxiliares yk,j (com
k (cid:28)xo) no mØtodo de Gauss-Seidel tŒm que ser calculados sequencialmente, ou seja, para
se obter o vetor seguinte devemos conhecer um vetor anterior. Por outro lado, o algoritmo
de Jacobi, permite o cÆlculo simult(cid:226)neo dos yk,j (com k (cid:28)xo).

32

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Figura 18: MØtodo de Jacobi

Fonte: [1]

No exemplo a seguir, vamos aplicar o mØtodo de Jacobi para a resolu(cid:231)ªo de um sistema

linear.

Exemplo 2 Considere o sistema linear:

(cid:40)

3x − y = 7
x − y = −1

Agora, de posse do ponto x1 = ( 14

cuja solu(cid:231)ªo Ø (4, 5). Para (cid:28)xar ideias, novamente fa(cid:231)amos L1 := {(x, y) ∈ R2| 3x−y = 7},
L2 := {(x, y) ∈ R2| x − y = −1} e tomemos o ponto inicial x0 = (5, 7). Modi(cid:28)quemos a
primeira coordenada de x0, e deixemos a segunda coordenada dele (cid:28)xa, para obtermos o
ponto y1,1 = ( 14
3 , 7), que Ø solu(cid:231)ªo da equa(cid:231)ªo L1, ainda de posse do ponto x0, modi(cid:28)que-
mos a segunda coordenada deste ponto, e deixemos a primeira (cid:28)xa. Da(cid:237), obtemos o ponto
y1,2 = (5, 6) que Ø solu(cid:231)ªo da equa(cid:231)ªo L2. Logo, obtemos o primeiro iterado x1 = ( 14
3 , 6).
3 , 6), modi(cid:28)quemos a primeira coordenada deste
ponto, e deixemos a segunda (cid:28)xa. Da(cid:237), obtemos o ponto y2,1 = ( 13
3 , 6) que Ø solu(cid:231)ªo
da equa(cid:231)ªo L1. Ainda, utilizando o ponto x1, modi(cid:28)quemos a segunda coordenada e
deixemos a primeira (cid:28)xa, donde obtemos o ponto y2,2 = ( 14
3 ), que Ø solu(cid:231)ªo da equa(cid:231)ªo
L2. Da(cid:237), obtemos o segundo iterado x2 = ( 13

3 , 17
Observe que, se continuamos fazendo esse processo, Ø intuitivo que a sequŒncia, {xk} se
aproxima do ponto (4, 5). Para ver isto, note que a sequŒncia das primeiras coordenadas
de {xk} Ø dado por: {5; 14
3 , . . .} = {5; 4, 66; 4, 33, . . .}, e portanto, estÆ se aproximando
de 4 (Figura 19). Enquanto que, a sequŒncia das segundas coordenadas de {xk}, Ø dado
por: {7; 6; 17
3 ; . . .} = {7; 6; 5, 66; . . .}, onde percebemos que ela estÆ se aproximando de 5
conforme Figura 19.

3 , 17

3 , 13

3 ).

33

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Figura 19: Estudo do exemplo usando o mØtodo Jacobi

Segundo [1], num computador com processadores paralelos o mØtodo de Jacobi pode
ser mais e(cid:28)ciente que o mØtodo de Gauss-Seidel. Em geral, no mØtodo de Gauss-Seidel Ø
usado apenas um vetor da forma yk,j com k (cid:28)xo para as variÆveis, enquanto que o mØtodo
de Jacobi sªo usados dois vetores da forma yj,1 e yj,2. A distin(cid:231)ªo entre algoritmos
sequenciais, como o de Gauss-Seidel, e paralelos, como o de Jacobi, se mantØm quando
usamos mØtodos mais so(cid:28)sticados.

Discutiremos agora a convergŒncia destes algoritmos. Para tanto, tomemos o exemplo

a seguir.

Exemplo 3 Tome o sistema linear

(cid:40)

x + y = 0
x − y = 0

,

cuja solu(cid:231)ªo Ø, claramente, (0, 0). De(cid:28)na L1 := {(x, y) ∈ R2| x + y = 0} e L2 := {(x, y) ∈
R2| x − y = 0}, e tomemos um ponto x0 = (6, 3) (pode ser qualquer ponto diferente de
(0, 0)).

Para resolver tal sistema usando o Algoritmo de Gauss-Seidel, devemos variar a pri-
meira coordenada de x0, com o objetivo de satisfazer o conjunto L1, e deixar a segunda
coordenada (cid:28)xa, assim obtemos o ponto y1,1 = (−3, 3). De posse do ponto y1,1, modi(cid:28)que-
mos a segunda coordenada desse ponto, e deixemos a primeira variÆvel (cid:28)xa para satisfazer
o conjunto L2. Entªo, obtemos o ponto de coordenadas y1,2 = (−3, −3) que no caso Ø o
nosso x1.

De posse do ponto x1 modi(cid:28)quemos a primeira componente e deixemos a segunda
(cid:28)xa donde obtemos o ponto y2,1 = (−3, 3). Tomando agora y2,1 modi(cid:28)quemos a segunda
componente para satisfazer o conjunto L2. Da(cid:237), obtemos o ponto y2,2 = (3, 3) que Ø o
nosso x2.

Utilizando agora o ponto x2, modi(cid:28)quemos a primeira coordenada deste ponto, para
satisfazer o conjunto L1 donde obtemos o ponto y3,1 = (−3, 3), donde percebemos que o

34

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

algoritmo irÆ (cid:28)car alternando entre os pontos (3, 3) e (−3, −3) , isto Ø, ele entra em loop
(veja a Figura 20).

Figura 20: Loop no algoritmo de Gauss-Seidel

Pelo Exemplo 3, nªo podemos garantir a convergŒncia de tais algoritmos, portanto,
devemos buscar novos algoritmos para resolver tais sistemas lineares. A ideia central,
dos algoritmos de Gauss-Seidel e Jacobi, Ø o de obter uma sequŒncias de solu(cid:231)ıes, ou
seja, em cada passo o algoritmo deve gerar um termo que satisfaz uma equa(cid:231)ªo, nªo
necessariamente todas, mas que essa sequŒncia se aproximarÆ da solu(cid:231)ªo do sistema dado.
Esta Ø a ideia dos pr(cid:243)ximos algoritmos que estudaremos nas pr(cid:243)ximas se(cid:231)ıes, algorit-

mos de Kaczmarz e Cimmino.

4.2 O operador proje(cid:231)ªo sobre hiperplanos

Nesta se(cid:231)ªo, estudaremos o operador proje(cid:231)ªo sobre hiperplanos. Esse operador serÆ
usado para exibirmos os algoritmos de Kaczmarz e Cimmino, que serÆ o objeto de estudo
da nossa pr(cid:243)xima se(cid:231)ªo.

Pelo modelo matemÆtico feito na Se(cid:231)ªo 2.1, para a Tomogra(cid:28)a Computadorizada (TC),
vimos que reconstruir a imagem via TC equivale a encontrar uma solu(cid:231)ªo para o sistema:






a11x1 + a12x2 + a13x3 + . . . + a1nxn = b1
a21x1 + a22x2 + a23x3 + . . . + a2nxn = b2
a31x1 + a32x2 + a33x3 + . . . + a3nxn = b3
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
am1x1 + am2x2 + am3x3 + ... + amnxn = bm

Usando a de(cid:28)ni(cid:231)ªo de produto interno, podemos reescrever o sistema anterior em

35

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

forma de conjuntos da seguinte forma:






H1 = {x ∈ Rn : (cid:104)v1, x(cid:105) = b1}
H2 = {x ∈ Rn : (cid:104)v2, x(cid:105) = b2}
H3 = {x ∈ Rn : (cid:104)v3, x(cid:105) = b3}
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Hm = {x ∈ Rn : (cid:104)vm, x(cid:105) = bm}

onde vi = (ai1, ai2, ai3, ..., ain) ∈ Rn Ø (cid:28)xo e x = (x1, x2, x3, ..., xn) ∈ Rn Ø o vetor inc(cid:243)gnita
e os conjuntos Hi ⊂ Rn, 1 ≤ i ≤ n sªo chamados de hiperplanos

Note que um ponto x ∈ Rn satisfaz o sistema de equa(cid:231)ıes acima se, e somente se,
x ∈ Rn pertence a interse(cid:231)ªo de todos os conjuntos H1, H2, ..., Hm. Em outras palavras,
encontrar uma solu(cid:231)ªo para o sistema acima equivale a encontrar um ponto x em H =
∩n

i=1Hi.

De maneira anÆloga, o sistemas de inequa(cid:231)ıes lineares da forma

Ø equivalente a






a11x1 + a12x2 + a13x3 + . . . + a1nxn ≤ b1
a21x1 + a22x2 + a23x3 + . . . + a2nxn ≤ b2
a31x1 + a32x2 + a33x3 + . . . + a3nxn ≤ b3
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
am1x1 + am2x2 + am3x3 + ... + amnxn ≤ bm






T1 = {y ∈ Rn : (cid:104)v1, x(cid:105) ≤ b1}
T2 = {y ∈ Rn : (cid:104)v2, x(cid:105) ≤ b2}
T3 = {y ∈ Rn : (cid:104)v3, x(cid:105) ≤ b3}
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Tm = {y ∈ Rn : (cid:104)vm, x(cid:105) ≤ bm}

onde vi = (ai1, ai2, ai3, ..., ain) ∈ Rn Ø (cid:28)xo e x = (x1, x2, x3, ..., xn) ∈ Rn Ø o vetor inc(cid:243)gnita.
Logo, encontrar um ponto do Rn satisfazendo as inequa(cid:231)ıes acima equivale a encontrar um
ponto em Rn pertencente a interse(cid:231)ªo dos conjuntos T1, T2, ..., Tm os quais sªo chamados
de semiespa(cid:231)os do Rn. E consequentemente, com o objetivo de resolver tais sistemas de
inequa(cid:231)ıes, iremos estudar como encontrar um ponto x em T = ∩n

i=1Ti.

Portanto, a partir de agora, para resolver um sistema de equa(cid:231)ıes e sistemas de ine-
i=1Hi e de

qua(cid:231)ıes lineares , iremos estudar mØtodos de como obter um ponto de H = ∩n
T = ∩n

i=1Ti, respectivamente.

A ideia por trÆs dos Algoritmos de Kaczmarz e Cimmino Ø justamente o de gerar uma

sequŒncia {xn} que convergirÆ para um ponto da interse(cid:231)ªo desses conjuntos.

Agora vamos de(cid:28)nir o operador proje(cid:231)ªo sobre hiperplanos.

36

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Proposi(cid:231)ªo 2 Seja um hiperplano H = {y ∈ Rn : (cid:104)v, y(cid:105) = β} com v ∈ Rn e β ∈ R.
Dado qualquer x0 ∈ Rn, o ponto de H mais pr(cid:243)ximo de x0 Ø dado por:

isto Ø, PH(x0) ∈ H e (cid:107)x0 − PH(x0)(cid:107) ≤ (cid:107)x0 − y(cid:107), para todo y ∈ H.

PH(x0) = x0 − ((cid:104)v,x0(cid:105)−β)

(cid:107)v(cid:107)2

v,

Demonstra(cid:231)ªo: Devemos inicialmente mostrar que o vetor v Ø normal ao hiperplano H.
−→
Para isso, considere 0 = (0, 0, ..., 0) ∈ Rn e
0v = v − 0 = v. Dados x, y ∈ H, entªo o vetor
−→xy = y − x. Logo

Logo,

(cid:104)−→ov, −→xy(cid:105) = (cid:104)v − 0, y − x(cid:105) = (cid:104)v, y − x(cid:105) = (cid:104)v, y(cid:105) − (cid:104)v, x(cid:105) = β − β = 0.
−→
0v⊥−→xy, ∀x, y ∈ H. Portanto, o vetor −→ov Ø normal (cid:224) H. De(cid:28)na a reta s(t) =
−→
0v Ø normal ao plano H, segue que a reta s(t) Ø normal ao plano

x0 + tv. Como o vetor
H, e portanto, intersecta o plano H em um œnico ponto, digamos s(t0).

Logo, s(t0) ∈ H, e portanto,

(cid:104)s(t0), v(cid:105) = β ⇔ (cid:104)x0 + t0v, v(cid:105) = β ⇔ (cid:104)x0, v(cid:105) + t0(cid:104)v, v(cid:105) = β ⇔ t0 = β−(cid:104)x0,v(cid:105)

(cid:104)v,v(cid:105)

.

Portanto, s(t0) = x0 + t0v = x0 + β−(cid:104)x0,v(cid:105)

(cid:104)v,v(cid:105) v. Como (cid:104)v, v(cid:105) = (cid:107)v(cid:107)2 entªo:

s(t0) = x0 + β−(cid:104)x0,v(cid:105)

(cid:107)v(cid:107)2 v.

Fazendo s(t0) = PH(x0), temos:

PH(x0) = x0 −

((cid:104)x0, v(cid:105) − β)
(cid:107)v(cid:107)2

v ∈ H.

(9)

Mostremos agora que PH(x0) Ø o ponto mais pr(cid:243)ximo de x0

Figura 21: Proje(cid:231)ªo de ponto

De fato, dado qualquer y ∈ H, como x0, y e PH(x0) sªo os vØrtices de um tri(cid:226)ngulo
ret(cid:226)ngulo no ponto PH(x0) (veja a Figura 21), pois a reta S que contØm x0 e PH(x0) Ø
normal (cid:224) H, segue que:

(cid:107)PH(x0) − x0(cid:107) ≤ (cid:107)y − x0(cid:107), ∀ y ∈ H,

37

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

pois o segmento −→yx0 Ø a hipotenusa no tri(cid:226)ngulo ret(cid:226)ngulo de vØrtices y, x0, PH(x0). Pro-
(cid:50)
vando a a(cid:28)rma(cid:231)ªo.

Figura 22: Proje(cid:231)ªo ideal

Provaremos agora que para cada x0 ∈ Rn, entªo PH(x0) Ø œnico, isto Ø, ele Ø a apro-

xima(cid:231)ªo ideal de x0 a H.

Proposi(cid:231)ªo 3 (Aproxima(cid:231)ªo ideal) Seja H um hiperplano. Se x0 /∈ H e PH(x0) a proje-
(cid:231)ªo de x0 sobre H, entªo qualquer y ∈ H, com y (cid:54)= PH(x0), temos:

(cid:107)x0 − PH(x0)(cid:107) < (cid:107)x0 − y(cid:107),

(10)

Demonstra(cid:231)ªo: A prova consiste em mostrar que a menor dist(cid:226)ncia do ponto x0 atØ sua
proje(cid:231)ªo PH(x0) no hiperplano Ø o vetor perpendicular ao hiperplano tra(cid:231)ado por PH(x0).
Seja 0 = (0, 0, . . . , 0) ∈ Rn, como x0 − PH(x0) Ø normal a H e PH(x0) − y ∈ H, pois
y, PH(x0) ∈ H, segue que, x0 − PH(x0) Ø ortogonal Æ PH(x0) − y. Logo

(cid:104)x0 − y, x0 − y(cid:105) = (cid:104)x0 − y + PH(x0) − PH(x0), x0 − y + PH(x0) − PH(x0)(cid:105)

= (cid:104)x0 − PH(x0), x0 − PH(x0)(cid:105)

+ 2(cid:104)x0 − PH(x0), PH(x0) − y(cid:105) + (cid:104)PH(x0) − y, PH(x0) − y(cid:105).

Portanto

(cid:107)x0 − y(cid:107)2 = (cid:107)x0 − PH(x0)(cid:107)2 + (cid:107)PH(x0) − y(cid:107)2.

Como, por hip(cid:243)tese, y (cid:54)= PH(x0), entªo (cid:107)PH(x0) − y(cid:107) > 0, o que acarreta

(cid:107)x0 − y(cid:107)2 − (cid:107)x0 − PH(x0)(cid:107)2 = (cid:107)PH(x0) − y(cid:107)2 > 0,

Segue que,

(cid:107)x0 − y(cid:107)2 > (cid:107)x0 − PH(x0)(cid:107)2,

38

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

donde conclu(cid:237)mos que

(cid:107)x0 − y(cid:107) > (cid:107)x0 − PH(x0)(cid:107).

Portanto, a proje(cid:231)ªo ortogonal PH(x0), de x0 sobre H, Ø o œnico ponto de H mais pr(cid:243)ximo
(cid:50)
de x0.

Motivados pelas œltimas duas proposi(cid:231)ıes de(cid:28)nimos o operador proje(cid:231)ªo sobre hiper-

plano.

De(cid:28)ni(cid:231)ªo 12 Seja H um hiperplano em Rn. Entªo, de(cid:28)na o seguinte operador, PH :
Rn → H, de forma que, para cada x ∈ Rn, PH(x) Ø o œnico elemento de H que satisfaz:

(cid:107)x − PH(x)(cid:107) = min
y∈H

(cid:107)x − y(cid:107).

Ou seja, PH(x) Ø o ponto de H mais pr(cid:243)ximo de x.

A seguinte observa(cid:231)ªo serÆ muito importante, quando formos provar que os Algoritmos

de Kaczmarz e Cimmino convergem.

Observa(cid:231)ªo 1 Segue direto da de(cid:28)ni(cid:231)ªo de operador proje(cid:231)ªo que: PH(x) = x se, e
somente se, x ∈ H. Portanto, se H1, H2 ⊂ Rn sªo hiperplanos, tem-se que: se x ∈
H1 ∩ H2, entªo, PH2 (PH1(x)) = x .

Em posse deste operador, agora estamos prontos para estudarmos os Algoritmos de
Kaczmarz e Cimmino. Isto serÆ feito nas pr(cid:243)ximas se(cid:231)ıes. Come(cid:231)aremos pelo Algoritmo
de Kaczmarz, depois estudaremos o Algoritmo de Cimmino, ambos serªo utilizados para
resolver equa(cid:231)ıes lineares, e posteriormente para resolver inequa(cid:231)ıes.

4.3 Algoritmos de Kaczmarz

Come(cid:231)aremos apresentando a ideia geomØtrica do algoritmo de Kaczmarz, para depois
descreveremos o algoritmo de forma algØbrica e, por (cid:28)m, o colocaremos sob ponto de vista
de algoritmo computacional. Esse algoritmo consiste em proje(cid:231)ıes sequenciais sobre os
hiperplanos, de forma que essas proje(cid:231)ıes criem uma sequŒncia que convergirÆ para um
ponto da interse(cid:231)ªo desses hiperplanos.

Para entender a ideia geomØtrica do Algoritmos de Kaczmarz, suponhamos dois hi-

perplanos H1 e H2, com interse(cid:231)ªo nªo vazia da seguinte forma:

i) H1 = {x ∈ Rn|(cid:104)x, v1(cid:105) = b1}

ii) H2 = {x ∈ Rn|(cid:104)x, v2(cid:105) = b2}

39

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

onde v1, v2 ∈ Rn e b1, b2 ∈ R sªo (cid:28)xos.

O mØtodo come(cid:231)a no seguinte: Dado um ponto inicial x0 ∈ Rn que denotemos por
y1,0, ou seja, x0 = y1,0. Da(cid:237), projeta-se y1,0 = x0 sobre H1 obtendo o ponto PH1(x0) = y1,1.
Conforme a (cid:28)gura a seguir:

Figura 23: 1a proje(cid:231)ªo

De posse do ponto y1,1, projeta-se agora o ponto y1,1 sobre o hiperplano H2, obtendo-se

PH2(y1,1) = y1,2 conforme a (cid:28)gura a seguir:

Figura 24: 2a proje(cid:231)ªo

Projeta-se agora y1,2 = x1 sobre H1, obtendo o ponto PH1(y1,2) = PH1(x1) = y2,1

conforme a (cid:28)gura a seguir:

40

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Figura 25: 3a proje(cid:231)ªo

Projeta-se agora y2,1 = PH1(y1,2) = PH1(x1) sobre H2, obtendo o ponto,

conforme a (cid:28)gura a

x2 = PH2(y2,1) = y2,2,

Figura 26: 4a proje(cid:231)ªo

Toma-se y2,2 = x2 e repete-se o processo acima, com x2 em vez de x1, isto Ø, projeta-se
o ponto x2 sobre H1 obtendo o ponto PH1(y2,2) = PH1(x2) = y3,1, depois projeta-se y3,1
sobre H2, obtendo PH2(y3,1) = y3,2 = x3.

41

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Figura 27: SequŒncia de solu(cid:231)ıes centradas em H2

Obtendo assim uma sequŒncia da forma {xn} = {x0, x1, x2, x3, . . .}.
Iremos agora descrever o mØtodo do ponto de vista computacional, para isto usaremos
a Proposi(cid:231)ªo 2. Suponhamos, novamente, m = 2. O computador deve fazer os seguintes
passos:

Dado qualquer ponto x0 ∈ Rn ele deve executar iterativamente a proje(cid:231)ªo desse ponto
sobre todos os hiperplanos. Para isso devemos tomar y1,0 = x0, e executar os seguintes
passos:

1. y1,1 = PH1(x0) = y1,0 − ((cid:104)v1,y1,0(cid:105)−b1)

(cid:107)v1(cid:107)2

v1

2. y1,2 = PH2(y1,1) = y1,1 − ((cid:104)v2,y1,1(cid:105)−b2)

(cid:107)v2(cid:107)2

v2

Toma-se y1,2 = y2,0 = x1, e repetimos o procedimento:

1. y2,1 = PH1(x1) = PH1(y2,0) = y2,0 − ((cid:104)v1,y2,0(cid:105)−b1)

(cid:107)v1(cid:107)2

v1

2. y2,2 = PH2(y2,1) = y2,1 − ((cid:104)v2,y2,1(cid:105)−b2)

(cid:107)v2(cid:107)2

v2

Toma-se y2,2 = y3,0 = x2, e repetimos o processo. Suponhamos que tenhamos repetido
o processo, atØ o termo xk−1, isto Ø, yk−1,2 = yk,0 = xk−1. Para obtermos o termo xk da
sequŒncia, assim

1. yk,1 = PH1(yk,0) = yk,0 − ((cid:104)v1,yk,0(cid:105)−b1)

(cid:107)v1(cid:107)2

v1

2. yk,2 = PH2(yk,1) = yk,1 − ((cid:104)v2,yk,1(cid:105)−b2)

(cid:107)v2(cid:107)2

v2

Tome yk,2 = yk+1,0 = xk.

O algoritmo de Kaczmarz do ponto de vista computacional, pode ser resumido assim:

42

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Algoritmo de Kaczmarz:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(1) Passo iterativo: Dado xk, de(cid:28)na: yk+1,0 = xk. Calculemos sequencialmente

as itera(cid:231)ıes:

yk+1,i = yk+1,i−1 −

((cid:104)vi, yk+1,i−1(cid:105) − bi)vi
(cid:107)vi(cid:107)2

(1 ≤ i ≤ m)

(11)

(2) Fa(cid:231)a xk+1 = yk+1,m e volte ao passo (1).

Logo, o algoritmo de Kaczmarz, consiste em projetar sequencialmente o ponto xk sobre
todos os hiperplanos Hi = {x ∈ Rn|(cid:104)vi, x(cid:105) = βi} que determinam o sistema Ax = b, para
obter o ponto xk+1.

No nosso pr(cid:243)ximo exemplo, iremos aplicar o Algoritmo de Kaczmarz para o caso

m = 2.

Exemplo 4 Sejam entªo os hiperplanos H1 := {(x, y) ∈ R2| 3x−y = 7} e H2 := {(x, y) ∈
R2| x − y = −1} que representa o sistema:

(cid:40)

3x − y = 7
x − y = −1

Para a aplica(cid:231)ªo do Algoritmo de Kaczmarz tomemos x0 = (5, 6), e vamos aplicar o

operador proje(cid:231)ªo para encontrar o ponto y1,1. Pela de(cid:28)ni(cid:231)ªo do algoritmo temos:

y1,1 = PH1(5, 6) = (5, 6) −

((cid:104)(3, −1), (5, 6)(cid:105) − 7)
(cid:107)(3, −1)(cid:107)2

(3, −1) =

(cid:18)44
10

,

62
10

(cid:19)

,

Agora, de posse do ponto y1,1 projetamos sobre o H2 para obtermos o ponto y1,2. Pela

de(cid:28)ni(cid:231)ªo de proje(cid:231)ªo ortogonal sobre hiperplano, temos:

y1,2 = PH2

(cid:19)

(cid:18) 44
10

,

62
10

=

(cid:19)

(cid:18) 44
10

,

62
10

−

((cid:104)(1, −1), ( 44

10) − (−1)(cid:105))

10, 62
(cid:107)(1, −1)(cid:107)2

(1, −1),

onde obtemos o ponto y1,2 = (cid:0) 48

10, 58

10

(cid:1) e fa(cid:231)amos x1 = y1,2 = (cid:0) 48

10, 58

10

(cid:1).

De posse do ponto x1, projetamos sobre H1. Segue do algoritmo que

y2,1 = PH1

(cid:19)

(cid:18) 48
10

,

58
10

=

(cid:19)

(cid:18) 48
10

,

58
10

−

((cid:104)(3, −1), ( 44

10, 62
(cid:107)(3, −1)(cid:107)2

10(cid:105)) − 7)

(3, −1) =

(cid:19)

(cid:18) 432
100

,

596
100

43

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Agora, de posse do ponto y2,1 efetuemos sua proje(cid:231)ªo sobre H2. Pela de(cid:28)ni(cid:231)ªo de

proje(cid:231)ªo temos:

y2,2 = PH2

(cid:19)

(cid:18) 432
100

,

596
100

=

(cid:19)

(cid:18) 432
100

,

596
100

−

((cid:104)(1, −1), (cid:0) 432

(cid:1)(cid:105) − (−1))

100, 596
(cid:107)(1, −1)(cid:107)2

100

(1, −1) =

(cid:19)

(cid:18) 464
100

,

564
100

100, 564

(cid:1) que Ø a proje(cid:231)ªo
(cid:1). De maneira anÆloga obtemos y3,1 = (cid:0) 4256
Assim x2 = (cid:0) 464
de do ponto x2 sobre H1. Projetamos agora o ponto y3,1 de H1 sobre H2, obtemos
x3 = y3,2 = (cid:0) 4512

1000, 5768

1000

100

(cid:1).

1000, 5512

1000

Repetindo o processo indutivamente, obtemos a sequŒncia:

x1 = (cid:0) 48
x2 = (cid:0) 464
x3 = (cid:0) 4512

x0 = (5, 6)
10, 58
100, 564
1000, 5512

(cid:1) = (4, 8; 5, 8)
(cid:1) = (4, 64; 5, 64)
(cid:1) = (4, 512; 5, 512)

100

10

1000
. . . = . . .

100; 4512

Segue da(cid:237), que a sequŒncia formada pelas primeiras coordenadas de {xn} Ø da forma
10; 464
1000, . . .} = {5; 4, 8; 4, 64; 4, 512; · · · }, que tende a 4. Enquanto que a sequŒn-
1000, . . .} =

{5; 48
cia formada pelas segundas coordenadas de {xn} Ø dado por: {6; 58
{6; 5, 8; 5, 64; 5, 512; . . .} que tende a 5.

100; 5512

10; 564

A Figura 28 representa o Algoritmo de Kaczmarz. Dado um pontoinicial qualquer x0
obtemos o ponto x1, depois a partir de x1, obtemos o ponto x2, e assim sucessivamente.

Figura 28: SequŒncia de solu(cid:231)ıes centradas em H2 para o caso m=2

Pelos exposto anteriormente, se denotarmos P1 = PH1, P2 = PH2 e F = P2 ◦ P1,
onde o signi(cid:28)ca composi(cid:231)ªo de fun(cid:231)ıes, entªo a sequŒncia {xn} gerada pelo algoritmo
de Kaczmarz Ø dado por: x1 = F (x0), x2 = F ◦ F (x0), x3 = F ◦ F ◦ F (x0),..., isto Ø,
xn+1 = F n(x0), onde F n = F ◦F n−1 para n ≥ 0 Para o caso geral, seja Pi = PHi, para cada
i = 1, 2, ..., m, e F = Pm ◦ Pm−1 ◦ · · · ◦ P1, entªo a sequŒncia {xn} gerada pelo algoritmo Ø

44

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

dado por: x1 = F (x0), x2 = F ◦ F (x0), x3 = F ◦ F ◦ F (x0),..., isto Ø, xn+1 = F n(x0). No
apŒndice provaremos que esta sequŒncia vai convergir para um elemento de H = ∩m
i=1Hi.

4.4 Algoritmo de Cimmino

Enquanto que no Algoritmo de Kaczmarz, as proje(cid:231)ıes sªo efetuadas sequencialmente,
no Algoritmo de Cimmino as proje(cid:231)ıes sªo efetuadas paralelamente, e depois pega-se a
combina(cid:231)ªo convexa dessas proje(cid:231)ıes . Assim como no mØtodo de Gauss-Seidel e Kacz-
marz devemos tomar um ponto inicial x0. Dado esse ponto devemos executar parale-
lamente sua proje(cid:231)ªo sobre todos os hiperplanos. Para uma melhor compreensªo deste
algoritmo, come(cid:231)aremos descrevendo como ele funciona quando m = 2. Para isso, consi-
deraremos os hiperplanos:

i) H1 = {x ∈ Rn|(cid:104)x, v1(cid:105) = b1}

ii) H2 = {x ∈ Rn|(cid:104)x, v2(cid:105) = b2}

onde v1, v2 ∈ Rn e b1, b2 ∈ R sªo (cid:28)xos.

Figura 29: MØtodo de Cimmino

Fonte: [1]

Dado um ponto inicial x0 e os nœmeros reais λ1, λ2 > 0 (graus de liberdade), tais que
i=1 λi = 1. Tomando x0 = y1,0, e executando a proje(cid:231)ªo do ponto x0 = y1,0 sobre os

(cid:80)2

hiperplanos, temos:

1. PH1(x0) = PH1(y1,0) = y1,1

2. PH2(x0) = PH2(y1,0) = y1,2 .

Somando essas proje(cid:231)ıes y1,1, y1,2 com os pesos λ1, λ2, obteremos o primeiro termo da

nossa sequŒncia, isto Ø,

45

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

x1 = λ1y1,1 + λ2y1,2 = (cid:80)2

i=1 λiPHi(y1,0).

Usando a Proposi(cid:231)ªo 2 temos:

x1 =

=

2
(cid:88)

i=1
2
(cid:88)

i=1

λiPHi(y1,0) =

(cid:20)

λi

2
(cid:88)

i=1

y1,0 −

((cid:104)vi, y1,0(cid:105) − bi)
(cid:107)vi(cid:107)2

vi

(cid:21)

λiy1,0 −

2
(cid:88)

i=1

(cid:20) ((cid:104)vi, y1,0(cid:105) − bi)
(cid:107)vi(cid:107)2

(cid:21)

.

vi

λi

Tomando-se x1 = y2,0, e refazendo o processo para obtemos o termo x2 da sequŒncia.

Isto Ø, projeta-se x1, sobre os hiperplanos para obtermos:

1. PH1(x1) = PH1(y2,0) = y2,1

2. PH2(x1) = PH2(y2,0) = y2,2

Seja x2 a combina(cid:231)ªo convexa das proje(cid:231)ıes y2,1, y2,2 referente aos pesos λ1, λ2, isto Ø,

x2 =

=

=

2
(cid:88)

i=1
2
(cid:88)

i=1
2
(cid:88)

i=1

λiPHi(x1)

(cid:20)

λi

x1 −

λix1 −

= x1 −

2
(cid:88)

i=1

λi

(cid:21)

2
(cid:88)

vi

((cid:104)vi, x1(cid:105) − bi)
(cid:107)vi(cid:107)2
(cid:20)((cid:104)vi, x1(cid:105) − bi)
(cid:107)vi(cid:107)2
(cid:20)((cid:104)vi, x1(cid:105) − bi)
(cid:107)vi(cid:107)2

λi

vi

i=1

(cid:21)

(cid:21)

vi

Tome x2 = y3,0 e repita o processo atØ obter o termo xk−1. Para obter o termo xk,

tomemos xk−1 = yk,0, e projetando-se sobre os hiperplanos obtemos:

1. PH1(yk,0) = yk,1

2. PH2(yk,0) = yk,2

46

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Fazendo a combina(cid:231)ªo convexa, obtemos:

xk =

=

=

2
(cid:88)

i=1
2
(cid:88)

i=1
2
(cid:88)

i=1

λiPHi(xk−1)

(cid:20)

λi

xk−1 −

λixk−1 −

= xk−1 −

2
(cid:88)

i=1

λi

(cid:21)

2
(cid:88)

vi

((cid:104)vi, xk−1(cid:105) − bi)
(cid:107)vi(cid:107)2
(cid:20)((cid:104)vi, xk−1(cid:105) − bi)
(cid:107)vi(cid:107)2
(cid:20) ((cid:104)vi, xk−1(cid:105) − bi)
(cid:107)vi(cid:107)2

λi

vi

i=1

(cid:21)

.

(cid:21)

vi

Portanto, obtemos:

xk = xk−1 −

2
(cid:88)

i=1

(cid:20)((cid:104)vi, xk−1(cid:105) − bi)
(cid:107)vi(cid:107)2

(cid:21)

.

vi

λi

De forma computacional, o algoritmo de Cimmino, Ø descrito da seguinte maneira:

Algoritmo de Cimmino:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(12)

(1) Passo iterativo: Dado xk, calcule:

xk+1 = xk −

m
(cid:88)

i=1

(cid:20)((cid:104)vi, xk(cid:105) − bi)
(cid:107)vi(cid:107)2

(cid:21)

vi

λi

Onde λi > 0, para todo i = 1, 2, ..., m tal que (cid:80)m
Note que no algoritmo de Cimmino calcula-se de forma paralela (independente) to-
das as proje(cid:231)ıes, e depois, toma-se sua combina(cid:231)ªo convexa como sendo os termos da
sequŒncia, por isso, esse algoritmo Ø dito algoritmo em paralelo.

i=1 λi = 1.

Vamos fazer um exemplo ilustrativo de aplica(cid:231)ªo do Algoritmo de Cimmino na prÆtica,

para o caso m = 2.

Exemplo 5 Sejam os hiperplanos, H1 := {(x, y) ∈ R2| 3x − y = 7} e H2 := {(x, y) ∈
R2| x − y = −1}.

Tomemos um ponto inicial x0 = (5, 7) e os pesos λ1 = 0, 6 e λ2 = 0, 4. Da(cid:237), usando
a, Proposi(cid:231)ªo 2, projetamos o ponto x0 sobre H1 e obtemos o ponto y1,1. Projetamos x0

47

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

sobre H2 ,e obtemos o ponto y1,2.

y1,1 = PH1(5, 7) = (5, 7) −

((cid:104)(3, −1), (5, 7)(cid:105) − 7)
(cid:107)(3, −1)(cid:107)2

(3, −1) =

(cid:19)

(cid:18)47
10

,

71
10

y1,2 = PH2(5, 7) = (5, 7) −

((cid:104)(1, −1), (5, 7)(cid:105) + 1)
(cid:107)(1, −1)(cid:107)2

(1, −1) =

(cid:19)

(cid:18)11
2

,

13
2

Tome x1 = λ1y1,1 + λ2y1,2, ou seja

x1 = 0, 6

(cid:19)

(cid:18) 47
10

,

71
10

+ 0, 4

(cid:19)

(cid:18) 11
2

,

13
2

=

(cid:19)

(cid:18) 502
100

,

686
100

,

.

O pr(cid:243)ximo passo Ø obter o ponto x2. Para tanto, devemos executar a proje(cid:231)ªo do

ponto x1 sobre os hiperplanos H1 e H2. Veja que:

y2,1 = PH1

(cid:19)

(cid:18) 502
100

,

686
100

=

(cid:19)

(cid:18) 502
100

,

686
100

−

((cid:104)(3, −1), (cid:0) 502

100, 686
100
(cid:107)(3, −1)(cid:107)2

(cid:1)(cid:105) + 1)

(3, −1) =

(cid:19)

(cid:18) 466
100

,

698
100

y2,2 = PH2

(cid:19)

(cid:18) 502
100

,

686
100

=

(cid:19)

(cid:18) 502
100

,

686
100

−

((cid:104)(1, −1), (cid:0) 502

100, 686
100
(cid:107)(1, −1)(cid:107)2

(cid:1)(cid:105) + 1)

(1, −1) =

(cid:19)

(cid:18) 544
100

,

644
100

Assim,

x2 = λ1y2,1 + λ2y2,2 = 0, 6

(cid:19)

(cid:18)466
100

,

698
100

+ 0, 4

(cid:19)

(cid:18) 544
100

,

644
100

=

(cid:18) 4972
1000

,

6764
1000

(cid:19)

.

Calculando x3. Para tanto, vamos projetar, primeiramente o ponto x2 sobre H1 para

obtermos y3,1 e, em sequŒncia projetamos x2 sobre H2 para obtermos y3,2.

;

.

((cid:104)(3, −1), (cid:0) 4972

1000)(cid:1)(cid:105) − 7)

1000, 6764
(cid:107)(3, −1)(cid:107)2

(3, −1)

,

(cid:0)(cid:104)(1, −1), (cid:0) 4972

1000, 6764
1000
(cid:107)(1, −1)(cid:107)2

(cid:1)(cid:1)(cid:105) + 1)

(1, −1)

y3,1 = PH1

(cid:18) 4972
1000

,

6764
1000

(cid:19)

y3,2 = PH2

(cid:18) 4972
1000

,

6764
1000

(cid:19)

=

=

=

=

,

(cid:18) 4972
1000
(cid:18) 46264
10000

(cid:19)

6764
1000
68792
10000

,

−

(cid:19)

(cid:18) 4972
1000
(cid:18) 5368
1000

,

,

6764
1000
6368
1000

(cid:19)

(cid:19)

−

.

48

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Portanto,

x3 = λ1y3,1 + λ2y3,2 = 0, 6

(cid:18) 46264
10000

,

68792
10000

(cid:19)

+ 0, 4

(cid:18) 5368
1000

,

6368
1000

(cid:19)

=

(cid:18) 492304
100000

,

667472
100000

(cid:19)

.

Repetindo o processo, obtemos a sequŒncia {xn}. Note que as primeiras coordenadas
100000, . . .} = {5; 5, 02; 4, 972; 49, 2304, . . .} que con-
100000, . . .} =

de {xn} sªo dadas por: {5; 502
verge para 4; jÆ a segunda coordenada de {xn} gera a sequŒncia {7; 686
{7; 6, 86; 6, 764; 6, 67472; . . .} que converge para 5.

1000; 492304

1000; 667472

100; 6764

100; 4972

Observe a (cid:28)gura a seguir e veja o comportamento do algoritmo de Cimmino neste

exemplo.

Figura 30: Aplica(cid:231)ªo MØtodo de Cimmino

No exemplo anterior, denotando P1 = PH1, P2 = PH2 e S(x) = λ1P1(x) + λ1P2(x),
onde λ1, λ2 > 0 sªo os pesos, com (cid:80)2
i=1 λi = 1, entªo a sequŒncia {xn} gerada pelo
algoritmo de Cimmino Ø dado por x1 = S(x0), x2 = S ◦ S(x0), x3 = S ◦ S ◦ S(x0),...,
isto Ø, xn+1 = Sn(x). Para o caso geral, sejam Pi = PHi, para cada i = 1, 2, ..., m, e
S = (cid:80)m

i=1 λiPi, entªo a sequŒncia {xn} converge para a solu(cid:231)ªo.

No pr(cid:243)ximo cap(cid:237)tulo provaremos que a sequŒncia vai convergir para um elemento de

∩m

i=1Hi.

4.5 Resolu(cid:231)ªo de Inequa(cid:231)ıes via algoritmos

O objetivo desta se(cid:231)ªo Ø estudar os anÆlogos aos Algoritmos de Karzmarz e Cimmino,
para a resolu(cid:231)ªo de inequa(cid:231)ıes lineares. Para isto lembremos que resolver o sistema de
inequa(cid:231)ıes lineares do tipo

49

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares






a11x1 + a12x2 + a13x3 + . . . + a1nxn ≤ b1
a21x1 + a22x2 + a23x3 + . . . + a2nxn ≤ b2
a31x1 + a32x2 + a33x3 + . . . + a3nxn ≤ b3
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
am1x1 + am2x2 + am3x3 + ... + amnxn ≤ bm

equivale a encontrar um ponto x = (x1, x2, x3, ..., xn) ∈ Rn que pertence ao conjunto
T = ∩m

i=1Ti, onde Ti = {y ∈ Rn : (cid:104)vi, x(cid:105) ≤ bi}, e vi = (ai1, ai2, ai3, ..., ain) ∈ Rn.

Tomando um ponto xk ∈ Rn qualquer, devemos encontrar o ponto do semi-espa(cid:231)o Ti
mais pr(cid:243)xima de xk em T , que denotaremos por PT (x). O ponto PT (x) pode ser calculado
da seguinte forma: se (cid:104)v, x(cid:105) ≤ b, entªo x ∈ T e PT (x) = x. Agora, se (cid:104)v, x(cid:105) > β, entªo
PT (x) Ø o ponto do hiperplano H = {y ∈ Rn : (cid:104)v, x(cid:105) = β}, ou seja, PT (x) = PH(x).

Figura 31: MØtodo de Kaczmarz para desigualdades

Fonte: [1]

Portanto, podemos escrever:

PT (x) = x −

1
(cid:107)v(cid:107)2 max{0, (cid:104)v, x(cid:105) − β}v.

(13)

Executando iterativamente o algoritmo de Kaczmarz obtemos:

50

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Algoritmo de Kaczmarz para inequa(cid:231)ıes:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(1) Passo iterativo: Dado yk+1,0 = xk. Calculemos sequencialmente as itera-

(cid:231)ıes:

yk+1,i = yk+1,i−1 −

1
||vi||2 max{0, (cid:104)vi, yk+1,i−1(cid:105) − bi}vi

(1 ≤ i ≤ m)

(14)

(2) Fa(cid:231)a xk+1 = yk+1,m e volte ao passo (1).

Para Cimmino temos o algoritmos de inequa(cid:231)ıes dado por:

Algoritmo de Cimmino para inequa(cid:231)ıes:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(15)

(1) Passo iterativo: Dado xk, calcule:

xk+1 = xk −

m
(cid:88)

i=1

λi
(cid:107)vi(cid:107)2 max{0, (cid:104)vi, xk(cid:105) − bi}vi

4.6 Relaxa(cid:231)ªo

Nesta se(cid:231)ªo estudaremos o grau de liberdade que podemos tomar ao escolher as proje-
(cid:231)ıes sobre os hiperplanos ou sobre semi-espa(cid:231)os, isto Ø, veremos que nªo Ø obrigat(cid:243)rio que
os termos da sequŒncia ou dos algoritmos sejam proje(cid:231)ıes, bastando tomar um elemento
(ou ponto) contido na reta que passa pelos pontos x e sua proje(cid:231)ªo PH(x).

Considere x e PH(x), entªo a reta que passa por x e PH(xn) e (1 − α)x + αPH(x), com
α ∈ R. Nos algoritmos de Karzmarz e Cimmino foram tomadas as proje(cid:231)ıes de x sobre H,
ou seja, foi tomado α = 1. A ideia de relaxa(cid:231)ªo consiste em ter uma liberdade na escolha
dos termos das sequŒncias geradas pelos algoritmos. Por exemplo, para 0 < α < 1, temos
os pontos x e PH(x), em vez de tomar o ponto PH(x) como feito anteriormente.

51

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Para descrever os Algoritmos de Karzmarz e Cimmino relaxados. Seja PH(x) a proje-

(cid:231)ªo de x sobre o hiperplano H, de(cid:28)nimos

para cada α ∈ R.

(cid:101)PT (x) = (1 − α)x + αPH(x)

(16)

Figura 32: Reta ligando x e PH(x)

Agora, para descrever os Algoritmos de Karzmarz e Cimmino relaxados, para inequa-

(cid:231)ıes, seja PT (x) a proje(cid:231)ªo de x sobre o semi-espa(cid:231)o T , de(cid:28)nimos:

(cid:101)PT (x) = αPT (x) + (1 − α)x
(cid:20)

= α

x −

1
||v||2 max{0, (cid:104)V, x(cid:105) − β}v

(cid:21)

+ (1 − α)x

= x −

α
||v||2 max{0, (cid:104)v, x(cid:105) − β}v.

Assim, segue que o algoritmo de Kaczmarz relaxado

Algoritmo de Kaczmarz relaxado:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(1) Passo iterativo: Dado yk+1,0 = xk. Calculemos sequencialmente as itera-

(cid:231)ıes:

yk+1,i = yk+1,i−1 −

α
||vi||2 max{0, (cid:104)vi, yk+1,i−1(cid:105) − bi}vi

(1 ≤ i ≤ m)

(17)

(2) Fa(cid:231)a xk+1 = yk+1,m e volte ao passo (1).

Agora a versªo relaxada do Algoritmo de Cimmino Ø dado por:

52

Cap(cid:237)tulo 4. Usando Algoritmos para Resolver Sistemas Lineares

Algoritmo de Cimmino relaxado:

(0) Inicializa(cid:231)ªo:

x0 ∈ Rn

(18)

(1) Passo iterativo: Dado xk, calcule:

xk+1 = xk − α

m
(cid:88)

i=1

λi
(cid:107)vi(cid:107)2 max{0, (cid:104)vi, xk(cid:105) − bi}vi

Nos algoritmos de Kaczmarz e Cimmino relaxados, se α = 1 as itera(cid:231)ıes recairªo sobre
o algoritmo original (nªo relaxado). Observe que nªo (cid:28)zemos nenhuma restri(cid:231)ªo sobre α.
Podemos passar da proje(cid:231)ªo, tomar um ponto entre a proje(cid:231)ªo e o projetado ou tomar
antes do projetado.

PorØm, para garantir a convergŒncia desses mØtodos, veremos na Proposi(cid:231)ªo 8 do
apŒndice, que devemos ter 0 < α < 2. Do ponto de vista computacional, segundo [1], se
tomamos α ∈ (0, 2), com α (cid:54)= 1, podemos ter uma considerÆvel acelera(cid:231)ªo da convergŒncia.
Por isso, foi importante exibirmos os algoritmos subrelaxado, (quando α ∈ (0, 1)), e o
algoritmo sobrerelaxado, (quando α ∈ (1, 2)).

53

5 Ensinando os Algoritmos em Sala de
Aula

Neste cap(cid:237)tulo descreveremos como o professor pode ensinar os algoritmos estudados
aqui para resolver problemas que envolvam sistemas lineares em sala de aula. Nosso foco
neste cap(cid:237)tulo, Ø fugir um pouco do rigor matemÆtico e fornecer uma ideia geomØtrica e
anal(cid:237)tica, de como o professor pode, ensinar estes algoritmos em sala de aula.

Inicialmente, o professor deve deixar claro para o aluno que esses algoritmos sªo muito
œteis para resolver sistemas de equa(cid:231)ıes com muita variÆveis e, que a ideia deles, Ø obter
solu(cid:231)ıes aproximadas.

Faremos alguns exemplos ilustrando os algoritmos de algoritmo de Gauss-Seidel, Ja-

cobi, Karzmarz e Cimmino. Iniciaremos pelo Algoritmo de e Gauss-Seidel.

Exemplo 6 Consideremos o sistema:

(cid:40)

3x − y = 8
x − y = −3

Note que encontrar pontos x e y que satisfa(cid:231)am as duas equa(cid:231)ıes acima, equivale
a encontrar pontos (x, y) na interse(cid:231)ªo das retas: L1 = {(x, y) ∈ R2|3x − y = 8} e
L2 = {(x, y) ∈ R2|x − y = −3}. Vamos aplicar o algoritmo de Gauss-Seidel para a
resolu(cid:231)ªo do problema. Para tanto, observe a Figura 33.

De posse do ponto x0 = (8, 9), ou qualquer outro ponto, mantendo (cid:28)xa a segunda
coordenada e modi(cid:28)cando a primeira obtemos o ponto y1,1 = ( 17
3 , 9) que Ø solu(cid:231)ªo da
equa(cid:231)ªo (1). De posse do ponto y1,1 modi(cid:28)quemos a segunda coordenada e mantenhamos
a primeira (cid:28)xa e obteremos o ponto y1,2 = ( 17

3 , 26
De posse agora do ponto x1 modi(cid:28)quemos a primeira coordenada e deixemos a segunda
(cid:28)xa. Da(cid:237) obtemos o ponto y2,1 = ( 50
3 ) que Ø solu(cid:231)ªo da equa(cid:231)ªo (1). Vamos agora
modi(cid:28)car a segunda coordenada e deixar a primeira (cid:28)xa donde obtemos o ponto y2,2 =

3 ) que Ø o nosso x1.

9 , 26

54

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

9 , 77
( 50

3 ) que Ø solu(cid:231)ªo da equa(cid:231)ªo (2) que serÆ o ponto x2. Da(cid:237), obtemos os pontos:

,

x0 = (8, 9)
26
17
3
3
50
77
9
9

)

)

,

x1 = (

x2 = (

Perceba que, a primeira coordenada da sequŒncia xn gera a seguinte sequŒncia: {8; 17

3 ; 50

9 ; · · · } =

{8; 5, 666666667; 5, 555555556; · · · } donde percebemos que ela converge para 5, 5.
3 ; 77
Se observamos a segunda coordenada de xn obtemos a sequŒncia {9; 26
{9; 8, 666666667; 8, 555555556; · · · } donde percebemos que ela converge para 8, 5.

9 ; · · · } =

Figura 33: Aplica(cid:231)ªo algoritmo de Gauss-Seidel

O pr(cid:243)ximo exemplo trata de um caso em que a utiliza(cid:231)ªo do algoritmo de Gaus-Seidel

falha

Exemplo 7 Consideremos o sistema:

(cid:40)

x − y = 0 (1)
x + y = 0 (2)

cuja a solu(cid:231)ªo Ø x∗ = (0, 0), considere as retas L1 = {(x, y) ∈ R2|x − y = 0} e L2 =
{(x, y) ∈ R2|x + y = 0}. Para qualquer ponto inicial x0, o algoritmo entrar em loop, isto
Ø, vai (cid:28)car repetindo os seus valores. Observe a Figura a 34

55

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Figura 34: Loop no Algoritmo de Gauss-Seidel

Faremos agora a utiliza(cid:231)ªo do algoritmo de Kaczmarz na resolu(cid:231)ªo de um sistema

linear.

Exemplo 8 Tomando o mesmo sistema do Exemplo 6 e considere as retas L1 = {(x, y) ∈
R2|3x − y = 8} e L2 = {(x, y) ∈ R2|x − y = −3}.

Na resolu(cid:231)ªo desse exemplo nªo utilizaremos o operador proje(cid:231)ªo como foi de(cid:28)nido na
proposi(cid:231)ªo 3, mas vamos utilizar conceitos intuitivos de Geometria Anal(cid:237)tica, conteœdo
que Ø lecionado no primeiro bimestre do 30 ano. Observe a Figura 35 onde temos a
condi(cid:231)ªo inicial, ou seja, o ponto que Ø tomado aleat(cid:243)rio.

Figura 35: Algoritmo de Kaczmarz

Perceba que, o coe(cid:28)ciente angular da reta L1 Ø dado por m = 3 e qualquer reta
perpendicular a L1 admite coe(cid:28)ciente angular igual a m(cid:48)
3 . Da(cid:237), chamemos de r1
a reta perpendicular a L1 que contØm o ponto x0 = (8, 9). Logo, a equa(cid:231)ªo da reta r1
Ø r1 : x + 3y = 35 e, portanto determinar as coordenadas de y1,1 consiste em resolver o
sistema:

1 = −1

(cid:40)

x + 3y = 35
3x − y = 8

56

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Donde obtemos o ponto y1,1 = (5, 9; 9, 7) conforme observamos na Figura 36

Figura 36: Algoritmo de Kaczmarz

Agora percebemos que existe uma reta (œnica) r2 que Ø perpendicular a L2 e que passa
por y1,1. Como o coe(cid:28)ciente angular de L2 Ø m2 = 1 segue que qualquer reta perpendicular
a L2 tem coe(cid:28)ciente angular m(cid:48)

2 = −1. Da(cid:237), a equa(cid:231)ªo de r2 Ø r2 : x + y = 15, 6.

Para determinarmos o ponto de coordenadas y1,2 precisamos encontrar a solu(cid:231)ªo do

sistema a seguir:

(cid:40)

x + y = 15, 6
x − y = −3

Perceba que determinar y1,2 equivale a encontrar a solu(cid:231)ªo da intersec(cid:231)ªo de {r2} ∩
{L2}. Da(cid:237), resolvendo o sistema anterior obtemos o ponto y1,2 = (6, 3; 9, 3) que no nosso
caso Ø o x1 conforme se observa na Figura 37

Figura 37: Algoritmo de Kaczmarz

Da maneira anÆloga, existe uma reta r3 perpendicular a L1 cuja equa(cid:231)ªo Ø dada por

57

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

r3 : 3y + x = 34, 2. Logo, encontrar o ponto y2,1 equivale a resolver o sistema:

(cid:40)

x + 3y = 34, 2
3x − y = 8

que signi(cid:28)ca encontrar o conjunto solu(cid:231)ªo de {r3} ∩ {L1} donde obtemos o ponto y2,1 =
(5, 82; 9, 46) conforme se observa na Figura 38

Figura 38: Algoritmo de Kaczmarz

De maneira anÆloga escrevemos a equa(cid:231)ªo de r4 : x + y = 15, 28 e obter o ponto y2,2

o qual encontramos por meio da resolu(cid:231)ªo do sistema:

(cid:40)

x + y = 15, 28
x − y = −3

Da(cid:25), o ponto y2,2 = (6, 14; 9, 14) donde se percebe na Figura 39.

Figura 39: Algoritmo de Kaczmarz

Veja que, a primeira coordenada da sequŒncia {xn} gera a sequŒncia: {8; 6, 3; 6, 14; ·}
donde percebe-se que ela se aproxima da solu(cid:231)ªo 5, 5. De maneira anÆloga, a segunda coor-

58

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

denada de xn gera a sequŒncia: {9; 9, 3; 9, 14; · · · } donde percebemos que ela se aproxima
de 8, 5.

Vamos agora resolver o mesmo exemplo utilizando o mØtodo de Jacobi.

Exemplo 9 Tomando o mesmo sistema do Exemplo 6 e considerando L1 : {(x, y) ∈
R2|3x − y = 8} e L2 : {(x, y) ∈ R2|x − y = −3}. Vamos determinar o ponto que Ø solu(cid:231)ªo
do sistema linear dado por L1 e L2.

Observe a (cid:28)gura a seguir:

Figura 40: MØtodo de Jacobi

Para aplicar o mØtodo de Jacobi devemos fazer o seguinte: Dado um ponto inicial
qualquer, a saber A = (20, 30) conforme a Figura 40. Para encontrarmos o ponto y1,1
devemos tra(cid:231)ar por A a reta r1 paralela ao eixo Ox cuja equa(cid:231)ªo Ø dada por r1 : y = 30.
Da(cid:237), basta resolver o sistema:

(cid:40)

3x − y = 8
y = 30

donde obtemos ponto B = y1,1 = (12, 66666; 30). Agora tracemos pelo ponto A = x0 uma
reta r2 paralela ao eixo Oy de equa(cid:231)ªo r2 : x = 20. Logo, para determinarmos o ponto
C = y1,2 basta resolvermos o sistema a seguir:

(cid:40)

x − y = −3
x = 20

Observe a Figura 41 donde obtemos como solu(cid:231)ªo C = y1,2 = (20, 23).

59

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Figura 41: Algoritmo de Jacobi

Fonte:

Agora, pelo ponto C tracemos uma reta paralela ao eixo Ox que denotaremos por
r3 : y = 23. Perceba que para encontrarmos o ponto D = y2,1 devemos resolver o sistema:

(cid:40)

3x − y = 8
y = 23

donde encontramos D = (10, 33333; 23). Tran(cid:231)ando por B uma reta r4 : x = 12.6666666667.
Logo, o ponto E = x1 = (10, 3333333333; 23) conforme observamos na Figura 42.

Figura 42: Algoritmo de Jacobi

De maneira anÆloga obtemos o ponto G = x2 = (9, 871875; 15, 666) conforme se ob-

serva na Figura 43.

60

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Figura 43: Algoritmo de Jacobi

Observamos que intuitivamente a primeira entrada da sequŒncia {xn} converge para

5, 5 e a segunda entrada converge para 8, 5 que Ø a solu(cid:231)ªo procurada.

Vamos resolver agora um exemplo utilizando o algoritmo de Cimmino.

Exemplo 10 Sejam L1 : x = 10 e L2 : y = 10 retas, as quais poderiam ser quaisquer.
Encontrar o conjunto solu(cid:231)ªo equivale a resolver o sistema:

(cid:40)

x = 10 (1)
y = 10 (2)

Donde percebemos obviamente que a solu(cid:231)ªo Ø imediata, ou seja, o ponto de coorde-

nadas A(10, 10) conforme Figura 44.

61

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Figura 44: Algoritmo de Jacobi

Vamos aplicar o algoritmo de Cimmino para a resolu(cid:231)ªo desse problema. Primeira-
mente devemos tomar um ponto qualquer, tomemos entªo o ponto B = (40, 30). Tracemos
uma reta r1 : y = 30 pelo ponto B. Da(cid:1), a reta r1 e L1 se intersectam no ponto C = (10, 30)
que Ø solu(cid:231)ªo do sistema:

(cid:40)

x = 10
y = 30

De maneira anÆloga obtemos o ponto D = (40, 10) conforme a Figura 45.

Figura 45: Algoritmo de Cimmino

Fonte:

De posse do ponto C = (10, 30) e D = (40, 10), basta tomarmos agora λ1 = 0, 5 e

λ2 = 0, 5 com a condi(cid:231)ªo de que λ1 + λ2 = 1. Da(cid:237), para encontrarmos x1 devemos ter:

x1 = λ1C + λ2D

62

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

x1 = 0, 5(10, 30) + 0, 5(40, 10)

donde obtemos E = x1 = (25, 20) conforme vemos em Figura 46.

Figura 46: Algoritmo de Cimmino

Analogamente tra(cid:231)amos as retas r3 : y = 20 e r4 : x = 25 donde obtemos os pontos

F = (10, 20) e G = (25, 10).

Figura 47: Algoritmo de Cimmino

Fonte:

Agora devemos determinar o ponto H = x2. Para tanto tomemos λ1 = 0, 5 e λ2 = 0, 5.

Da(cid:237),

H = λ1F + λ2G

H = 0, 5(10, 20) + 0, 5(25, 10)

donde obtemos x2 = H = (17, 5; 15).

63

Cap(cid:1)tulo 5. Ensinando os Algoritmos em Sala de Aula

Conforme observamos na Figura 48 percebemos que os pontos B,E,H, I, J se aproxi-

mam do ponto A.

Figura 48: Algoritmo de Cimmino

64

6 ApŒndice

Neste apŒndice estudaremos a convergŒncia dos Algoritmos de Kaczmarz e Cimmino.
Isto serÆ feito de maneira rigorosa, isto Ø, tentaremos provar de forma algØbrica os concei-
tos. Para isto, iremos considerar um problema a piori mais geral, isto Ø, em vez de forcamos
no operador proje(cid:231)ªo sobre hiperplanos, vamos provar a convergŒncia do algoritmo para
qualquer operador que satisfa(cid:231)a as propriedades do operador proje(cid:231)ªo sobre hiperplanos.
Por isso, estudaremos uma generaliza(cid:231)ªo do operador proje(cid:231)ªo sobre hiperplanos, depois
diremos quais propriedades esse operador satisfaz e em sequŒncia estudaremos a conver-
gŒncia deste algoritmo. Vale ressaltar que vamos supor que as interse(cid:231)ıes dos hiperplanos
H1, H2, ..., Hm sejam nªo vazio.

6.1 O operador proje(cid:231)ªo

No cap(cid:237)tulo anterior estudamos o operador proje(cid:231)ªo sobre hiperplanos, o objetivo
desta se(cid:231)ªo Ø estudar o operador proje(cid:231)ªo sobre qualquer conjunto convexo. Para isto,
vamos come(cid:231)ar relembrando a de(cid:28)ni(cid:231)ªo de conjunto convexo.

De(cid:28)ni(cid:231)ªo 13 (Conjunto Convexo)) Um subconjunto H ⊂ Rn Ø dito convexo se, para
quaisquer x, y ∈ H e α ∈ [0, 1], tivermos:

(1 − α)x + αy ∈ H.

A pr(cid:243)xima proposi(cid:231)ªo assegura que os hiperplanos sªo conjuntos convexos do Rn.

Proposi(cid:231)ªo 4 Dados v ∈ Rn e b ∈ R. Entªo o conjunto H = {x ∈ Rn|(cid:104)v, x(cid:105) = b} Ø
convexo.

Demonstra(cid:231)ªo: De fato, dados x, y ∈ H e α ∈ [0, 1], temos:

(cid:104)v, αx + (1 − α)y(cid:105) = (cid:104)v, αx(cid:105) + (cid:104)v, (1 − α)y(cid:105)

= α(cid:104)v, x(cid:105) + (1 − α)(cid:104)v, y(cid:105) = αb + (1 − α)b

= αb + b − αb = b.

66

Cap(cid:237)tulo 6. ApŒndice

Logo αx + (1 − α)y ∈ H. Conclu(cid:237)mos que H Ø convexo, provando assim a proposi(cid:231)ªo.

(cid:50)

A pr(cid:243)xima proposi(cid:231)ªo nos diz que a interse(cid:231)ªo de conjuntos convexos Ø convexo.

Proposi(cid:231)ªo 5 Sejam H1, H2, ..., Hm conjuntos convexos. Entªo, H = ∩
i=1
junto convexo.

mHi Ø um con-

mHi = ∅, entªo H Ø convexo por vacuidade. Suponhamos, agora
Demonstra(cid:231)ªo: Se ∩
i=1
que (cid:84)m
i=1 Hi (cid:54)= ∅. Dados x, y ∈ H quaisquer, entªo, x, y ∈ Hi para todo 1 ≤ i ≤ m.
Como, por hip(cid:243)tese, Hi Ø convexo para todo 1 ≤ i ≤ m, segue que (1 − α)x + αy ∈ Hi
mHi. Provando assim que H Ø
para todo 1 ≤ i ≤ m, e portanto, (1 − α)x + αy ∈ ∩
i=1
(cid:50)
convexo.

O fato crucial da Proposi(cid:231)ªo 2 Ø o fato de H ser fechado e convexo. De fato, o pr(cid:243)ximo
Teorema que foi extra(cid:237)do do livro [6], mostra que a De(cid:28)ni(cid:231)ªo 12 poderia ter sido feita
para qualquer conjunto H que Ø convexo e fechado, veja [4] para a de(cid:28)ni(cid:231)ªo de conjunto
fechado.

Teorema 3 (Teorema da Proje(cid:231)ªo) Seja D ⊂ Rn um conjunto convexo, fechado e
nªo-vazio. Entªo para todo x ∈ Rn, existe um œnico ponto x ∈ D tal que:

(cid:107)x − PD(x)(cid:107) = min
y∈D

(cid:107)x − y(cid:107).

AlØm disso, x = PD(x) se, e somente se,

x ∈ D,

(cid:104)x − PD(x), y − PD(x)(cid:105) ≤ 0,

∀ y ∈ D.

Demonstra(cid:231)ªo: Veja o Teorema 3.2.4 de [6] pÆgina 101.

(19)

(cid:50)

Pelo Teorema da Proje(cid:231)ªo, podemos tornar a De(cid:28)ni(cid:231)ªo 12 mais geral, como segue.

De(cid:28)ni(cid:231)ªo 14 (Operador Proje(cid:231)ªo) Dado D ⊂ Rn convexo e fechado. Entªo de(cid:28)na o
operador PD : Rn → D, de forma que, para cada x ∈ Rn, PD(x) Ø o œnico elemento de D
que satisfaz:

Ou seja, PD(x) Ø o ponto de D mais pr(cid:243)ximo de x.

(cid:107)x − PD(x)(cid:107) = min
y∈D

(cid:107)x − y(cid:107).

A pr(cid:243)xima proposi(cid:231)ªo desta a primeira propriedade do Operador Proje(cid:231)ªo.

Proposi(cid:231)ªo 6 Seja D ⊂ Rn um conjunto convexo, fechado e nªo-vazio. Entªo para todo
x, y ∈ Rn,

(cid:107)PD(x) − PD(y)(cid:107)2 ≤ (cid:104)x − y, PD(x) − PD(y)(cid:105).

67

Cap(cid:237)tulo 6. ApŒndice

Demonstra(cid:231)ªo: Dados x, y ∈ Rn quaisquer. Pelo Teorema 3 os elementos PD(x) e PD(y)
satisfazem:

e

(cid:104)x − PD(x), z − PD(x)(cid:105) ≤ 0

(cid:104)y − PD(y), w − PD(y)(cid:105) ≤ 0,

para todo z, w ∈ Rn. Tomando z = PD(y) e w = PD(x), nas desigualdades acima, temos:

−(cid:104)x − PD(x), PD(x) − PD(y)(cid:105) ≤ 0

(cid:104)y − PD(y), PD(x) − PD(y)(cid:105) ≤ 0

e

.

Somando essas duas desigualdade, obtemos:

(cid:104)y − x + PD(x) − PD(y), PD(x) − PD(y)(cid:105) ≤ 0.

Como o produto interno Ø linear, entªo

(cid:104)y − x, PD(x) − PD(y)(cid:105) + (cid:104)PD(x) − PD(y), PD(x) − PD(y)(cid:105) ≤ 0.

Passando o primeiro produto interno para o segundo membro obtemos

(cid:107)PD(x) − PD(y)(cid:107)2 ≤ (cid:104)y − x, PD(x) − PD(y)(cid:105).

Terminando assim a prova da Proposi(cid:231)ªo.

(cid:50)

Como consequŒncia desta proposi(cid:231)ªo, descrevemos agora as propriedades do operador
proje(cid:231)ªo que estamos interessados em estudar, tais propriedades foram extra(cid:237)das de [1].

Proposi(cid:231)ªo 7 (Propriedades do operador proje(cid:231)ªo) Seja D ⊂ Rn um convexo e
fechado. Entªo para todo x, y ∈ Rn, temos:

i) (cid:107)PD(x) − PD(y)(cid:107) ≤ (cid:107)x − y(cid:107);

ii) se (cid:107)PD(x) − PD(y)(cid:107) = (cid:107)x − y(cid:107), entªo

a) PD(x) − PD(y) = x − y;

b) (cid:104)y − x, PD(x) − x(cid:105) = 0.

Demonstra(cid:231)ªo: Dados x, y ∈ Rn quaisquer. Sem perda de generalidade, podemos supor
x (cid:54)= y, pois se forem iguais a proposi(cid:231)ªo Ø evidente.

68

Cap(cid:237)tulo 6. ApŒndice

Para provarmos o item i). Consideraremos dois casos: Se PD(x) = PD(y), entªo i) Ø
evidente. O caso interessante Ø quando PD(x) (cid:54)= PD(y). Neste caso, usando a Proposi(cid:231)ªo
6 combinado com a desigualdade de Cauchy-Schwarz, obtemos:

(cid:107)PD(x) − PD(y)(cid:107)2 ≤ (cid:104)y − x, PD(x) − PD(y)(cid:105)

≤ (cid:107)y − x(cid:107) (cid:107)PD(x) − PD(y)(cid:107).

(20)

Como por hip(cid:243)tese, PD(x) (cid:54)= PD(y), podemos dividir os dois membros da desigualdade

acima por (cid:107)PD(x) − PD(y)(cid:107) > 0, obtendo a desigualdade desejada.

Para provar ii), se (cid:107)PD(x) − PD(y)(cid:107) = (cid:107)x − y(cid:107) entªo, em (20) vale a igualdade, logo,
na desigualdade de Cauchy-Schwarz vai valer a igualdade, e portanto, os vetores y − x e
PD(x) − PD(y) serªo colineares, isto Ø,

PD(x) − PD(y) = σ(x − y).

Pela hip(cid:243)tese (cid:107)PD(x) − PD(y)(cid:107) = (cid:107)x − y(cid:107), segue que σ = 1 ou σ = −1.

A(cid:28)rmamos que σ = 1. Suponha por contradi(cid:231)ªo que σ = −1, logo, PD(x) − PD(y) =

y − x. Pelo Teorema 3 os elementos PD(x) e PD(y) satisfazem:

(cid:104)x − PD(x), z − PD(x)(cid:105) ≤ 0

(21)

e

(cid:104)y − PD(y), w − PD(y)(cid:105) ≤ 0

para todo z, w ∈ Rn. Tomando z = PD(y) e w = PD(x), nas desigualdades acima, e
somando-as obtemos:

(cid:104)y − x + PD(x) − PD(y), PD(x) − PD(y)(cid:105) ≤ 0.

(22)

Usando que PD(x) − PD(y) = y − x, resulta:

(cid:104)2PD(x) − PD(y), PD(x) − PD(y)(cid:105) ≤ 0,

2||PD(x) − PD(y)||2 ≤ 0,

usando que o produto interno Ø bi-linear, e que ele Ø a norma ao quadrado, segue que,

2||PD(x) − PD(y)||2 ≤ 0 → PD(x) − PD(y) = 0.

69

Cap(cid:237)tulo 6. ApŒndice

Portanto, PD(x) = PD(y), e

0 = PD(x) − PD(y) = y − x ⇒ x = y.

O que Ø uma contradi(cid:231)ªo com a hip(cid:243)tese inical de x (cid:54)= y. Provando o a). Para concluir
a prova desta proposi(cid:231)ªo, resta provar o item b) de ii). Para isto, usando que o produto
interno Ø bilinear em (22). Podemos reescrever essa desigualdade como segue:

(cid:104)y − x, PD(x) − PD(y)(cid:105) + (cid:104)PD(x) − PD(y), PD(x) − PD(y)(cid:105) ≤ 0.

Passando o primeiro nœmero para o segundo membro desta desigualdade e usando

de(cid:28)ni(cid:231)ªo de norma, obtemos:

0 ≤ (cid:107)PD(x) − PD(y)(cid:107)2

≤ (cid:104)y − x, PD(x) − PD(y)(cid:105)

≤ (cid:107)u − x(cid:107)(cid:107)PD(x) − PD(y)(cid:107)
≤ (cid:107)PD(x) − PD(y)(cid:107)2.

Portanto, se (cid:107)PD(x) − PD(y)(cid:107) = (cid:107)x − y(cid:107), por (20), a desigualdade acima, na verdade Ø
uma igualdade, e portanto, todas as contas feitas para chagar nesta f(cid:243)rmula vale igualdade,
em particular, vale a igualdade em (21) quando tomamos z = PD(y), isto Ø,

(cid:104)x − PD(x), PD(y) − PD(x)(cid:105) = 0.

Usando agora o item a) temos:

(cid:104)x − PD(x), y − x(cid:105) = 0.

Terminando assim, a prova do item b) e consequentemente da proposi(cid:231)ªo.

A pr(cid:243)xima proposi(cid:231)ªo justi(cid:28)ca por que, ao estudarmos os algoritmos relaxados, temos

que tomar α ∈ (0, 2).

Proposi(cid:231)ªo 8 Seja D ⊂ Rn um subconjunto convexo e fechado. Se α ∈ (0, 2) entªo o
operador P α = (1 − α)x + αPD(x), satisfaz:

(cid:107)P α(x) − P α(y)(cid:107) ≤ (cid:107)x − y(cid:107),

∀ x ∈ Rn.

Demonstra(cid:231)ªo: Dividiremos em dois casos:

70

Cap(cid:237)tulo 6. ApŒndice

i) Caso 0 < α ≤ 1, para este caso, temos:

(cid:107)P α(x) − P α(y)(cid:107) = (cid:107)(1 − α)x + αPD(x) − (1 − α)y − αPD(y)(cid:107)

= (cid:107)(1 − α)(x − y) + α (PD(x) − PD(y)) (cid:107)

≤ (1 − α)(cid:107)x − y(cid:107) + α (cid:107)PD(x) − PD(y)(cid:107)

≤ (1 − α)(cid:107)x − y(cid:107) + α (cid:107)x − y(cid:107)

= (cid:107)x − y(cid:107).

Onde na œltima desigualdade utilizamos que:

(cid:107)PD(x) − PD(y)(cid:107) ≤ (cid:107)x − y(cid:107).

ii) Caso 1 < α < 2, temos que:

(cid:107)P α(x) − P α(y)(cid:107)2 = (cid:107)(1 − α)x + αPD(x) − (1 − α)y − αPD(y)(cid:107)2

= (cid:107)(1 − α)(x − y) + α (PD(x) − PD(y)) (cid:107)2
≤ ((1 − α)(cid:107)x − y(cid:107) + α (cid:107)PD(x) − PD(y)(cid:107))2
≤ (1 − α)2(cid:107)x − y(cid:107)2 + α2 (cid:107)PD(x) − PD(y)(cid:107)2

+2(1 − α)α(cid:104)x − y, PD(x) − PD(y)(cid:105).

Combinando o Proposi(cid:231)ªo 6 com o fato de 1 − α < 0, temos

(cid:107)P α(x) − P α(y)(cid:107)2 ≤ (1 − α)2(cid:107)x − y(cid:107)2 + α2 (cid:107)PD(x) − PD(y)(cid:107)2

+2(1 − α)α(cid:104)x − y, PD(x) − PD(y)(cid:105)
≤ (1 − α)2(cid:107)x − y(cid:107)2 + α2 (cid:107)PD(x) − PD(y)(cid:107)2

+2(1 − α)α(cid:107)PD(x) − PD(y)(cid:107)2

= (1 − α)2(cid:107)x − y(cid:107)2 + (cid:2)α2 + 2(1 − α)α(cid:3) (cid:107)PD(x) − PD(y)(cid:107)2
= (1 − α)2(cid:107)x − y(cid:107)2 + α(2 − α) (cid:107)PD(x) − PD(y)(cid:107)2 .

Usando a hip(cid:243)tese de 1 < α < 2 e tambØm o fato do operador PD ser nªo expansivo,
resulta:

(cid:107)P α(x) − P α(y)(cid:107)2 ≤ (1 − α)2(cid:107)x − y(cid:107)2 + α(2 − α) (cid:107)PD(x) − PD(y)(cid:107)2

≤ (1 − α)2(cid:107)x − y(cid:107)2 + α(2 − α) (cid:107)x − y(cid:107)2
= (cid:2)(1 − α)2 + α(2 − α)(cid:3) (cid:107)x − y(cid:107)2,

71

Cap(cid:237)tulo 6. ApŒndice

Desenvolvendo a equa(cid:231)ªo em α, obtemos (1 − α)2 + α(1 − α) = 1. Portanto,

(cid:107)P α(x) − P α(y)(cid:107) ≤ (cid:107)x − y(cid:107)

.

6.2 AnÆlise de ConvergŒncia

Sejam K1, . . . , Kn ⊂ Rn conjuntos convexos e fechados. Para estudar a convergŒncia

dos Algoritmos de Kaczmarz e Cimmino, usaremos a seguinte de(cid:28)ni(cid:231)ªo:

De(cid:28)ni(cid:231)ªo 15 Para cada i = 1, ..., m e cada α ∈ (0, 2), denotemos os operadores Pi, P α
i
Rn → Rn, por:

:

e

Pi(x) = PKi(x)

P α

i = (1 − α)x + αPi(x)

(23)

(24)

para todo x ∈ R, respectivamente.

Usando a de(cid:28)ni(cid:231)ªo anterior, podemos de(cid:28)nir agora as fun(cid:231)ıes S, F : Rn → Rn, por:

F (x) = (P α

moP α

m−1o . . . oP α

2 oP α

1 )(x)

e

S(x) =

m
(cid:88)

i=1

λiP α

i (x)

onde o s(cid:237)mbolo o indica a composi(cid:231)ªo de fun(cid:231)ªo.

A partir dos algoritmos estudados, podemos representar as sequŒncias {xn} por:

e para Cimmino por:

xk+1 = F (xk)

xk+1 = S(xk)

(25)

(26)

(27)

(28)

Ou seja, agora os algoritmos estªo sendo vistos como composi(cid:231)ªo de operadores. Logo,
basta provar que essas sequŒncias de composi(cid:231)ıes de operadores convergem para um ponto,
para isto a hip(cid:243)tese de K = ∩m

i Ki nªo seja vazio serÆ importante (veja Observa(cid:231)ªo 8).

Motivados, pela Observa(cid:231)ªo 8, temos a seguinte de(cid:28)ni(cid:231)ªo, que serÆ usado para enunciar

o Teorema de convergŒncia dos algoritmos.

De(cid:28)ni(cid:231)ªo 16 Dado o operador F : K ⊂ Rn → K. Diremos que x(cid:63) ∈ K Ø ponto (cid:28)xo do
operador F , quando F (x(cid:63)) = x(cid:63). Denotaremos por F ix(F ) o conjunto de todos os pontos
(cid:28)xos do operador F , ou seja, F ix(F ) = {x∗ ∈ K : F (x(cid:63)) = x(cid:63)}

72

Cap(cid:237)tulo 6. ApŒndice

Observe que encontrar ponto (cid:28)xo do operador proje(cid:231)ªo equivale a encontrar um ponto
na interser(cid:231)ªo dos conjuntos convexos, isto Ø, F (x(cid:63)) = x(cid:63) se, e somente se, x(cid:63) ∈ ∩n
i=1Ki.
Portanto, para mostrar que as sequŒncias (27) e (28) convergem, basta encontrar um
ponto (cid:28)xo do operador proje(cid:231)ªo.

Pelas Propriedades da Proje(cid:231)ªo Ortogonal, vistos na Proposi(cid:231)ªo 7, usaremos a seguinte

de(cid:28)ni(cid:231)ªo:

De(cid:28)ni(cid:231)ªo 17 Denotaremos por F ao conjunto de todas as fun(cid:231)ıes cont(cid:237)nuas Q : Rn →
Rn tais que:

i) (cid:107)Q(x) − Q(y)(cid:107) ≤ (cid:107)x − y(cid:107)

ii) se (cid:107)Q(x) − Q(y)(cid:107) = (cid:107)x − y(cid:107) entªo:

a) Q(x) − Q(y) = x − y

b) (cid:104)y − x, Q(x) − x(cid:105) = 0

Segundo [1] o conjunto de fun(cid:231)ıes F Ø fechado para composi(cid:231)ıes de fun(cid:231)ıes e por

combina(cid:231)ıes convexas, isto Ø,

Qmo · · · oQ2oQ1 ∈ F,

e,

m
(cid:88)

i=1

λiQi ∈ F,

para todo Q1, ..., Qm ∈ F e todo λi ∈ [0, 1].

Como as proje(cid:231)ıes Pi sobre os conjuntos convexos fechados Ki pertencem Æ F, veja
a Proposi(cid:231)ªo 7, resulta que F e S estªo em F, pois eles sªo combina(cid:231)ıes convexas ou
composi(cid:231)ıes de Pi.

O pr(cid:243)ximo Teorema Ø o principal resultado desse trabalho, pois garante que os Algo-

ritmos de Kazmarz e Cimmino convergem sempre que ∩m

i=1Ki (cid:54)= ∅.

Teorema 4 (Teorema do Ponto Fixo) Sejam Q ∈ F e x0 ∈ Rn. De(cid:28)na a sequŒncia
xk+1 = Q(xk) com k ∈ N ∪ {0}.
Entªo a sequŒncia {xk} converge se, e somente se, F ix(Q) (cid:54)= ∅. AlØm disso, se lim
k→∞
x∗, entªo x∗ ∈ F ix(Q).

xk =

Demonstra(cid:231)ªo: Suponhamos que {xk} converge, isto Ø, lim
k→∞
Como Q Ø cont(cid:237)nua, temos:

xk = x∗ com xk+1 = Q(xk).

xk

x∗ = lim
k→∞
(cid:16)

= Q

lim
k→∞

xk−1(cid:17)

= Q(x∗),

73

Cap(cid:237)tulo 6. ApŒndice

logo, x∗ = Q(x∗), ou seja, x∗ ∈ F ix(Q), e portanto, F ix(Q) (cid:54)= ∅.

Para provar a reciproca, devemos mostrar que, se F ix(Q) (cid:54)= ∅, entªo a sequŒncia
da forma {xK} converge. Para isto, (cid:28)xemos z ∈ F ix(Q), entªo Q(z) = z. Usando a
propriedade 1) da classe de fun(cid:231)ıes F, temos:

(cid:107)xk+1 − z(cid:107) = (cid:107)Q(xk) − Q(z)(cid:107) ≤ (cid:107)xk − z(cid:107),

(29)

Portanto, a sequŒncia {(cid:107)xk − z(cid:107)} Ø decrescente. Repetindo (29), vÆrias vezes, obtemos

(cid:107)xk+1 − z(cid:107) ≤ (cid:107)xk − z(cid:107) ≤ . . . ≤ (cid:107)x1 − z(cid:107) ≤ (cid:107)x0 − z(cid:107),

(30)

provando que a sequŒncia {xk} estÆ contida numa bola de centro z e raio (cid:107)x0 − z(cid:107), e
portanto, Ø limitada. Como {xk} se limitada ela possui uma subsequŒncia convergente,
digamos {xpk} a subsequŒncia de {xk} para k ∈ N ∪ {0} que converge para um ponto x(cid:63),
isto Ø,

xpk = x(cid:63). ( para mais detalhes veja corolÆrio 1, pg 123 de [5]).

lim
k→∞

Usando (29), e que pk + 1 ≤ pk+1 ( subsequŒncia anda mais rÆpido que Æ sequŒncia),

temos:

(cid:107)xpk+1 − z(cid:107) ≤ (cid:107)Q(xpk) − Q(z)(cid:107) ≤ (cid:107)xpk − z(cid:107).

Aplicando o limite quando k → ∞ em (31) temos:

(cid:107)x(cid:63) − z(cid:107) ≤ (cid:107)Q(x(cid:63)) − Q(z)(cid:107) = (cid:107)Q(x(cid:63)) − z(cid:107) ≤ (cid:107)x(cid:63) − z(cid:107)

ou seja,

(cid:107)Q(x(cid:63)) − Q(z)(cid:107) = (cid:107)x(cid:63) − z(cid:107)

Usando a propriedade 2)a) da De(cid:28)ni(cid:231)ªo 16, temos:

Q(x(cid:63)) − Q(z) = Q(x(cid:63)) − z = x(cid:63) − z

(31)

(32)

(33)

(34)

donde temos Q(x(cid:63)) = x(cid:63), e portanto, x(cid:63) ∈ F ix(Q). Provando assim a primeira parte do
Teorema.

Para provar a segunda parte, tomando-se x(cid:63) no lugar de z em (29), obtemos que a
sequŒncia {(cid:107)xk − x(cid:63)(cid:107)} Ø decrescente, nªo negativa e possui uma subsequŒncia {(cid:107)xk − x(cid:63)(cid:107)}
que converge para zero, portanto, a pr(cid:243)pria sequŒncia {(cid:107)xk − x(cid:63)(cid:107)} converge a zero, isto
xk = x(cid:63) (qualquer dœvida veja [5]). Terminando assim a prova do Teorema.
lim
Ø,
k→∞
Pelo Teorema 4 garantimos a convergŒncia dos Algoritmos de Kaczmarz e Cimmino,
porØm a condi(cid:231)ªo a ser assumida Ø que o conjunto de pontos (cid:28)xos de F e F sejam nªo
vazios. No artigo do professor Iusem [1] ele estuda as condi(cid:231)ıes para que tal hip(cid:243)tese

74

Cap(cid:237)tulo 6. ApŒndice

aconte(cid:231)a. Nªo faremos isso aqui, pois o foco Ø apenas introduzir a pesquisa matemÆ-
tica. Para o leitor que deseja, se aprofundar sobre a matemÆtica pro trÆs da tomogra(cid:28)a
computadorizada, recomendamos [1], [2], [3], [8] e as referŒncias neles contidas.

75

7 Considera(cid:231)ıes Finais

O professor pode usar a modelagem da tomogra(cid:28)a computadorizada, feita no Cap(cid:237)tulo
2, via sistemas lineares, para motivar seus alunos quanto a import(cid:226)ncia deste conteœdo na
sua vida cotidiana. Em rela(cid:231)ªo aos algoritmos estudados aqui, o professor pode usa-los
para motivar seus alunos sobre a pesquisa em matemÆtica, bem como fornecer mØtodo
diferentes para resolver sistemas lineares, para isto, os exemplos podem fornecer o caminho
mais rÆpido e natural, para que o aluno compreenda esses algoritmos. Para os alunos que
tenham um conhecimento um pouco mais avan(cid:231)ado em matemÆtica, o professor poderÆ
ensinÆ-los, como se prova a convergŒncia de tais algoritmos. Para os professores que
desejam um aprofundamento sobre os assuntos aqui estudados, recomendamos [1], no
qual foi nossa principal fonte bem como as referŒncias.

76

REFER˚NCIAS

[1]

[2]

Iusem, A. ; De Pierro, A. Fundamentos MatemÆticos da Tomogra(cid:28)a Compu-
tadorizada: MØtodo de Expansªo em SØries. Revista matemÆtica UniversitÆria
n: 12, dezembro de 1990, pag. 57-85.

Iusem, A. ; De Pierro, A. Fundamentos MatemÆticos da Tomogra(cid:28)a Com-
putadorizada: MØtodo de Transforma(cid:231)ªo. Revista matemÆtica UniversitÆria n:
11, junho de 1990, pag. 53-65 .

[3] De Cezaro, A.; De Cezaro, F. T. Problemas Inversos e a matemÆticos da Tomo-
gra(cid:28)a Computadorizada. V Bienal da SBM Sociedade Brasileira de MatemÆtica
UFPB-Universidade Federal da Para(cid:237)ba 18 a 22 de outubro de 2010.

[4] Lima, E. L. AnÆlise Real volume 2. Cole(cid:231)ªo MatemÆtica UniversitÆria. Editora:

IMPA Ano: 2004.

[5] Lima, E. L. Curso de AnÆlise Real volume 1. cole(cid:231)ªo MatemÆtica UniversitÆria.

Editora: IMPA. ed. 12. Ano: 2009.

[6]

Izmailov, A.; Solodov, M. Otimiza(cid:231)ªo volume 1: Condi(cid:231)ıes de Otimalidade,
Elementos de AnÆlise Convexa e de Dualidade. Rio de Janeiro, Editora IMPA.
ed. 2. Ano: 2009.

[7]

Iezzi, Gelson; Hazzan, Samoel. Fundamentos da MatemÆtica Elementar, Vo-
lume 4. Sªo Paulo, Editora Atual, ed.5. Ano 1977.

[8] Da Silva, S. M. T. TOMOGRAFIA COMPUTADORIZADA: Uma Proposta
para a Aplica(cid:231)ªo de MatemÆtica no Ensino MØdio. Disserta(cid:231)ªo do Profmat.
Rio Grande, Rio Grande do Sul, 20 de Abril 2018.

[9] <https://www.vencerocancer.org.br/wp-content/uploads/2013/09/cap9-1.png >

[10] <http://static.clinicabioimagem.com.br/img/tomogragia-computadorizada-6.jpg>

[11] <http://donacion.organos.ua.es/submenu3/inf_sanitaria/proceso/imagenes_pro

ceso/helicoidal.jpg>

77

ReferŒncias

REFER˚NCIAS

[12] <http://www.integradiagnosticos.com.br/site/images/integra/exames/tomogra

(cid:28)a.jpg>

[13] <https://image.slidesharecdn.com/exercicioanatomiaplanos-150921234936-lva1-

app6892/95/exercicio-anatomia-planos-4-638.jpg?cb=1442879424>

[14] <https://image.slidesharecdn.com/exercicioanatomiaplanos-150921234936-lva1-

app6892/95/exercicio-anatomia-planos-4-638.jpg?cb=1442879424>

[15] <http://nedmed.info/images/img135618 − 99.jpg>

[16] <https://helioprint.com.br/blog/wp-content/uploads/2017/05/ruido-

radiologico.jpg>

78

