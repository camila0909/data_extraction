UNIVERSIDADE FEDERAL DO AMAZONAS
INSTITUTO DE CI˚NCIAS EXATAS

PROGRAMA DE MESTRADO PROFISSIONAL EM MATEM`TICA

TEORIA DOS GRAFOS E APLICA˙(cid:213)ES

AUDEMIR LIMA DE SOUZA

MANAUS

2013

UNIVERSIDADE FEDERAL DO AMAZONAS
INSTITUTO DE CI˚NCIAS EXATAS
PROGRAMA DE MESTRADO PROFISSIONAL EM MATEM`TICA

AUDEMIR LIMA DE SOUZA

TEORIA DOS GRAFOS E APLICA˙(cid:213)ES

Disserta(cid:231)ªo apresentada ao Programa de Mes-

trado Pro(cid:28)ssional em MatemÆtica da Universi-
dade Federal do Amazonas, como requisito par-
cial para obten(cid:231)ªo do t(cid:237)tulo de Mestre em Ma-
temÆtica.

Orientador: Prof. Dr. Disney Douglas de Lima Oliveira

MANAUS
2013

AUDEMIR LIMA DE SOUZA

TEORIA DOS GRAFOS E APLICA˙(cid:213)ES

Disserta(cid:231)ªo apresentada ao Programa de Mes-
trado Pro(cid:28)ssional em MatemÆtica da Universi-
dade Federal do Amazonas, como requisito par-
cial para obten(cid:231)ªo do t(cid:237)tulo de Mestre em Ma-

temÆtica.

Aprovado em 22 de agosto de 2013.

BANCA EXAMINADORA

Prof. Dr. Disney Douglas de Lima Oliveira
Presidente

Prof. Dr. Victor Augusto Giraldo
Membro

Prof. Dr. MÆrio Salvatierra Junior
Membro

AGRADECIMENTOS

Em primeiro lugar agrade(cid:231)o a Deus, por ter me concedido for(cid:231)a, perseveran(cid:231)a e co-

ragem na dedica(cid:231)ªo dos meus estudos e para concluir este trabalho.

A minha fam(cid:237)lia: esposa e (cid:28)lhos pelo apoio e compreensªo; aos meus pais e irmªos,
pela presen(cid:231)a, incentivo e ajuda principalmente nas horas mais dif(cid:237)ceis pelas quais passei.

Ao meu orientador, Prof. Dr. Disney Douglas, por sua paciŒncia, postura pro(cid:28)ssional

e pelo tempo dedicado a mim sempre que precisei.

A todos os meus professores do Departamento de MatemÆtica da UFAM que muito me
incentivaram e apoiaram, pois alØm de doarem conhecimentos estavam sempre dispostos
a nos ajudar.

Aos meus colegas do curso, que mesmo sem nos conhecermos muito bem, agiram como

verdadeiros amigos e contribu(cid:237)ram muito para eu chegar ao tØrmino deste trabalho.

(cid:192) banca examinadora pelas sugestıes dadas, que contribu(cid:237)ram para a melhoria deste

trabalho.

Finalmente agrade(cid:231)o a todos meus amigos que, direta ou indiretamente, contribu(cid:237)ram

para que eu conclu(cid:237)sse esse curso.

RESUMO

Neste trabalho procuramos fazer uma abordagem simples sobre os conceitos de grafos
e tornÆ-los mais conhecidos, pois embora tenha uma grande variedade de aplica(cid:231)ıes,
Ø um assunto pouco conhecido no ensino bÆsico. No intuito de divulgar modelagem
usando a teoria dos grafos, serªo mostrados conceitos e de(cid:28)ni(cid:231)ıes, modelos e exemplos
clÆssicos aplicados pelos primeiros estudiosos dessa teoria, com a inten(cid:231)ªo de motivar o
racioc(cid:237)nio l(cid:243)gico de nossos alunos para auxiliÆ-los nas resolu(cid:231)ıes de outros problemas. SerÆ
mostrado como tais informa(cid:231)ıes podem ser representadas no computador e como decidir
por qual representa(cid:231)ªo optar. TambØm apresentaremos algoritmos que podem nos trazer
resultados automÆticos ou informatizados, pois determinados problemas s(cid:243) resolveremos
com o aux(cid:237)lio da mÆquina. Acreditamos que esta forma de modelar problemas pode
contribuir para a melhoria do ensino-aprendizagem e servir como elemento motivador
para alunos e professores que buscam melhorar seus conhecimentos sobre a teoria dos
grafos e suas aplica(cid:231)ıes.

Palavras-chave: Grafos bipartido, grafo Euleriano, grafo Hamiltoniano, Ærvore, colora(cid:231)ªo,

caminho m(cid:237)nimo.

ABSTRACT

In this paper we take a simple approach about the concepts of graphs so they can be
better known, although it has a wide variety of applications, it is a subject little known
in basic education. In order to disseminate modeling using graph theory, concepts and
de(cid:28)nitions, models and classic examples applied by early scholars of this theory will be
shown, with the intention of motivating the logical reasoning of our students to assist
them in the resolution of other problems. It will be shown how such information can be
represented in the computer and how to decide which representation to choose. We will
also present algorithms that can bring automatic or computerized results because certain
problems will be solved only with the help of the machine. We believe that this way of
modeling problems can contribute to the improvement of teaching and learning and serve
as motivator for students and teachers who seek to improve their knowledge of graph
theory and its applications.

Keywords:

bipartite Graphs, Eulerian graph, Hamiltonian graph,

tree, coloring,

minimum path.

SumÆrio

Introdu(cid:231)ªo

1

1 Teoria dos grafos

3
3
1.1 Um breve hist(cid:243)rico . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.1.1 A teoria dos grafos no Brasil . . . . . . . . . . . . . . . . . . . . . .
1.2 Conceitos bÆsicos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.3 `rvore . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
1.4 Outras de(cid:28)ni(cid:231)ıes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
1.5 Modelos de grafos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
1.5.1 Grafos de superposi(cid:231)ªo de nichos em ecologia . . . . . . . . . . . . 13
1.5.2 Grafos de relacionamento . . . . . . . . . . . . . . . . . . . . . . . . 13
1.5.3 Grafos de in(cid:29)uŒncia . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
1.5.4 Grafos de torneios Round-Robin . . . . . . . . . . . . . . . . . . . . 14
1.5.5 Grafo da web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.5.6 PageRank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.5.7 Grafos de mapas rodoviÆrios . . . . . . . . . . . . . . . . . . . . . . 18
. . . . . . . . . . . . . . . . . . . . . . . . . 18
1.6.1 Grafos eulerianos e as sete pontes de Konigsberg . . . . . . . . . . . 18
. . . . . . . . . . . . . . . . . . . . . 21
1.6.2 Grafos e ciclos hamiltonianos

1.6 Problemas clÆssicos de grafos

2 Representa(cid:231)ªo computacional de grafos

24
2.1 Matriz de adjacŒncia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.2 Matriz de incidŒncia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
2.3 Listas de adjacŒncia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

3 Algoritmos de grafos

28
3.1 Algoritmo de busca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
3.1.1 Algoritmo de busca em profundidade - DFS . . . . . . . . . . . . . 28
3.1.2 Algoritmo de busca em largura . . . . . . . . . . . . . . . . . . . . 34
3.2 Ordena(cid:231)ªo topol(cid:243)gica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.3 Caminho m(cid:237)nimo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

1

3.4 `rvores espalhadas m(cid:237)nimas . . . . . . . . . . . . . . . . . . . . . . . . . . 37

4 Planaridade

41
4.1 De(cid:28)ni(cid:231)ıes e aplica(cid:231)ıes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
4.2 F(cid:243)rmula de Euler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
4.3 Colora(cid:231)ªo de grafos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46

5 Aplica(cid:231)ıes

50
5.1 Caminho m(cid:237)nimo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
5.1.1 Problema 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
5.1.2 Problema 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
5.1.3 Problema 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
5.2 Colora(cid:231)ªo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.2.1 Problema 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.2.2 Problema 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.2.3 Problema 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75

ReferŒncias bibliogrÆ(cid:28)cas

78

LISTA DE S˝MBOLOS

G = (V, E)
V (G)
E(G)
e = {u, v}
Kn
g(v)
|V |
|E|
Km,n
(u, v)
N (v)
N [v]
δ(G)
∆(G)
G
ai,j
O(|V |2)
d[v]
χ[G]

Grafo com V vØrtices e E arestas.
Conjunto de vØrtices do grafo G.
Conjunto de arestas do grafo G.
Uma aresta que liga os vØrtices u e v.
Grafo completo com n vØrtices.
Grau de um vØrtice v.
Nœmero de vØrtices do conjunto V .
Nœmero de arestas do conjunto E.
Grafo bipartido completo.
aresta orientada.
Vizinhan(cid:231)a aberta do vØrtice v.
Vizinhan(cid:231)a fechada do vØrtice v.
Grau m(cid:237)nimo do grafo G.
Grau mÆximo do grafo G.
Grafo complementar de G.
Elemento de uma matriz.
Ordem/Tempo de |V |2.
Dist(cid:226)ncia da origem ao vØrtice v.
Nœmero cromÆtico de um grafo.

Introdu(cid:231)ªo

Este trabalho foi elaborado com o intuito de contribuir para um estudo inicial de grafos,
especialmente voltado aos alunos do ensino mØdio integrado ou iniciantes do curso de
gradua(cid:231)ªo na Ærea de ciŒncias exatas, uma vez que a maioria desses alunos, considerando
minha experiŒncia como docente de matemÆtica, sempre ansiou saber mais acerca do tema
aqui proposto, suas aplica(cid:231)ıes e que tipos de problemas podem ser resolvidos.

(cid:201) importante ressaltar que, na matemÆtica, as resolu(cid:231)ıes de problemas sªo os primei-
ros passos dados pelo estudante, entretanto, no decorrer de sua vida escolar/acadŒmica,
deverÆ aprender que a interpreta(cid:231)ªo pode ser colocada no papel atravØs de uma mode-
lagem do problema, antes mesmo de pensar em sua solu(cid:231)ªo. Esta forma de interpretar,
modelando o problema, ou seja, representando-o atravØs de um desenho, enriquece o co-
nhecimento matemÆtico do aluno que poderÆ tomar decisıes e usar tØcnicas ou ferramentas
adequadas para concluir tal solu(cid:231)ªo. E a teoria dos grafos oferece formas diversi(cid:28)cadas
de representar objetos matemÆticos, modela o problema em um desenho composto por
vØrtices e arestas e encontra uma maneira de resolvŒ-lo manualmente ou com o aux(cid:237)lio do
computador.

Assim sendo, no ano de 2010, e por intermØdio do PROFMAT (Mestrado Pro(cid:28)ssional
em MatemÆtica), encontrei a op(cid:231)ªo para alavancar meus conhecimentos e foi por intermØ-
dio de muita leitura, pesquisas e experiŒncias que alcancei meu objetivo. AliÆs, no decorrer
do curso, pensava tªo somente na necessidade de meus alunos, e esse foi o diferencial deste
trabalho, pois alØm do apoio de meus colegas, professores e orientador na compreensªo e
amadurecimento na teoria dos grafos, tambØm consultei os discentes, informando o que
pretendia fazer. Colhi dados e cheguei (cid:224) conclusªo de que deveria montar um material
composto de no(cid:231)ıes bÆsicas e gerais sobre a teoria dos grafos e algumas aplica(cid:231)ıes para
mostrar aos estudantes a grande aplicabilidade deste assunto que no decorrer dos anos
ganha mais espa(cid:231)o nas resolu(cid:231)ıes de problemas.

Desta forma, o trabalho aqui representado acerca da teoria dos grafos teve como obje-
tivo principal demonstrar situa(cid:231)ıes que podem, por um lado, ajudar a melhorar a com-
preensªo sobre o referido assunto, e por outro, incentivar a resolu(cid:231)ªo de problemas, a
modelagem de situa(cid:231)ıes, o desenvolvimento da comunica(cid:231)ªo e das formas de pensamento
matemÆtico. AlØm deste objetivo, outro alvo tra(cid:231)ado na pesquisa foi o leitor interes-
sado no tema. Este (o leitor) deve ser preparado no mundo real, veri(cid:28)cando que a teoria

1

dos grafos tem aplica(cid:231)ıes em diferentes Æreas e que Ø poss(cid:237)vel desenvolver tØcnicas de
visualiza(cid:231)ıes, racioc(cid:237)nios e habilidades manuais e computacionais, estimulando aplica(cid:231)ıes
interdisciplinares como forma de constru(cid:231)ªo do conhecimento em situa(cid:231)ıes cotidianas.

Diante disso, esta monogra(cid:28)a estÆ dividida em cinco cap(cid:237)tulos, distribu(cid:237)dos da seguinte
forma: o primeiro traz um breve hist(cid:243)rico acerca da teoria dos grafos e como esta Ø vista
no Brasil nos dias atuais; tambØm serªo abordados conceitos bÆsicos, modelos e exemplos
clÆssicos de grafos. JÆ o segundo cap(cid:237)tulo apresentarÆ como os problemas poderªo ser
representados em um computador por meio de matrizes ou listas. Em continuidade,
o terceiro cap(cid:237)tulo abordarÆ alguns algoritmos para resolver problemas modelados por
grafos. O quarto tratarÆ das de(cid:28)ni(cid:231)ıes e aplica(cid:231)ıes de planaridade e colora(cid:231)ªo de mapas,
por intermØdio de grafos a eles associados. Por (cid:28)m, no quinto cap(cid:237)tulo serªo feitas as
aplica(cid:231)ıes dos algoritmos para resolu(cid:231)ªo de problemas modelados por grafos, levando a
uma solu(cid:231)ªo satisfat(cid:243)ria.

Tendo em vista o exposto, espera-se que este trabalho capacite os alunos do ensino
mØdio e superior a expressar suas ideias e desenvolvŒ-las para resolver problemas, jus-
ti(cid:28)cando e provando a(cid:28)rma(cid:231)ıes sempre que poss(cid:237)vel por meio da teoria dos grafos; e,
quanto ao leitor interessado no assunto, propıe-se que este amplie a ideia apresentada
neste trabalho que nªo esgota o conhecimento em torno do assunto aqui referido.

2

Cap(cid:237)tulo 1

Teoria dos grafos

Neste Cap(cid:237)tulo, mostraremos um breve hist(cid:243)rico, as de(cid:28)ni(cid:231)ıes e conceitos bÆsicos de

grafos. TambØm serªo citados modelos de grafos e alguns problemas clÆssicos.

Os grafos sªo estruturas que consistem em vØrtices e arestas que ligam estes vØrtices.
Problemas em vÆrias disciplinas podem ser resolvidos usando modelos de grafos. Pode-se
resolver problemas tais como de espØcies diferentes em um nicho ecol(cid:243)gico, representar
quem in(cid:29)uencia quem em uma organiza(cid:231)ªo, resultados em torneios, modelar conveniŒncia
entre pessoas, colabora(cid:231)ªo entre pesquisadores, chamadas telef(cid:244)nicas, links entre websites,
mapas rodoviÆrios, designar tarefas a empregados de uma organiza(cid:231)ªo, determinar se
Ø poss(cid:237)vel percorrer as ruas de uma cidade sem passar por uma mesma rua duas ou
mais vezes, encontrar o nœmero necessÆrio de cores para pintar as regiıes de um mapa,
determinar se um circuito pode ser implementado em uma placa de circuito plano, tais
como distinguir dois compostos qu(cid:237)micos com a mesma forma molecular de estruturas
diferentes. Pode-se tambØm determinar se dois computadores estªo ligados por um link
de comunica(cid:231)ªo, planejar exames e associar canais de televisªo (cid:224)s esta(cid:231)ıes. Este cap(cid:237)tulo
introduzirÆ conceitos bÆsicos da teoria dos grafos e apresentarÆ alguns modelos e exemplos
diferentes dele.

1.1 Um breve hist(cid:243)rico

Leonhard Euler1 (1708 - 1783) foi o primeiro matemÆtico a escrever sobre a abstra(cid:231)ªo
dos grafos. Com 28 anos de idade ganhou fama mundial ao resolver um problema que
por dØcadas foi um desa(cid:28)o para os matemÆticos da Øpoca, conhecido como problema da
Basileia2[8].

Em 1736, outro problema resolvido por Euler foi o das sete pontes de Konigsberg que

1(cid:201) atualmente considerado um dos maiores matemÆticos de todos os tempos, pois produziu mais de
1100 artigos e livros, durante os œltimos 17 anos de sua vida (cid:28)cou cego, quando produziu quase que a
metade de seus trabalhos.

2SØrie in(cid:28)nta da soma dos inversos dos quadrados.

3

cruzam o rio Pregel, estabelecendo liga(cid:231)ıes entre duas ilhas e as margens opostas deste
rio, conforme ilustrado na Figura 1.19 do Cap(cid:237)tulo 1. Neste problema, ele representou
cada faixa de terra por um ponto e as pontes por liga(cid:231)ıes entre esses pontos [5].

Apesar da beleza do problema das sete pontes, a solu(cid:231)ªo foi um detalhe na imensidªo de
suas contribui(cid:231)ıes. E tal solu(cid:231)ªo nªo apresentava ser de grande relev(cid:226)ncia para a ciŒncia,
pois seu mØtodo de abstra(cid:231)ªo (cid:28)cou oculto por aproximadamente 150 anos. De Euler a
œltima dØcada do sØculo XIX, poucos trabalhos foram propostos com tal abstra(cid:231)ªo.

Em 1847 Gustav Robert Kirchho(cid:27) 3 utilizou modelos de grafos no estudo dos circuitos

elØtricos, criando a teoria das Ærvores.

Com isso, outros cientistas come(cid:231)aram a notar a provÆvel aplicabilidade desta teoria e
dez anos mais tarde Arthur Cayley 4 (1821 a 1895) utilizou a ideia de Ærvores para outras
aplica(cid:231)ıes, tais como a enumera(cid:231)ªo dos is(cid:244)meros de hidrocarbonetos alifÆticos saturados,
em qu(cid:237)mica org(cid:226)nica.

A teoria dos grafos contou com o importante aux(cid:237)lio do irlandŒs William Rowan Hamil-
ton 5 (1805 a 1865) que ao inventar um jogo simples que consistia na busca de um percurso
fechado envolvendo todos os vØrtices de um dodecaedro regular, de tal modo que cada
um deles fosse visitado uma œnica vez, deu origem ao estudo dos grafos Hamiltonianos
que tem por de(cid:28)ni(cid:231)ªo, segundo Rabuske (1992, p. 45), (cid:16)encontrar um caminho fechado,
passando uma œnica vez por todos os vØrtices(cid:17).

A partir de 1970, a teoria dos grafos teve um grande salto com o desenvolvimento
acelerado dos computadores. Foi, entªo, que surgiram publica(cid:231)ıes referentes a algoritmos
de grafos, abrindo, assim, possibilidades para utiliza(cid:231)ªo aplicada desta teoria.

1.1.1 A teoria dos grafos no Brasil

No Brasil, a teoria dos grafos chegou, segundo Boaventura [3], no ano de 1968 com a
apresenta(cid:231)ªo de alguns trabalhos sobre esta teoria no I Simp(cid:243)sio Brasileiro de Pesquisa
Operacional. Desde entªo, algumas universidades como UFRJ, UFF, USP, UNESP e
UNICAMP come(cid:231)aram a realizar trabalhos de pesquisa sobre a teoria dos grafos, de
modo que hoje as vÆrias universidades brasileiras, incluindo as citadas, possuem em seus
quadros de docentes, pesquisadores na referida teoria e aplica(cid:231)ıes.

1.2 Conceitos bÆsicos

De(cid:28)ni(cid:231)ªo 1.2.1. Um grafo G = (V, E) consiste de V , um conjunto nªo vazio de vØrtices
(ou n(cid:243)s) e de E, um conjunto de arestas. Cada aresta tem um ou dois vØrtices associados

3Cientista nascido na cidade de Konigsberg.
4Brit(cid:226)nico nascido em Richmond.
5MatemÆtico, f(cid:237)sico e astr(cid:244)nomo.

4

a ela, chamados de suas extremidades. Dizemos que cada aresta liga ou conecta suas
extremidades. [11]

Outras nota(cid:231)ıes para denotar um grafo: G = (V (G), E(G)), G(V, E) ou simplesmente

G.

Uma aresta e ∈ E(G) Ø representada por e = {u, v} sempre que interliga dois vØrtices
u e v de V . Dois vØrtices ligados por uma mesma aresta sªo denominados adjacentes e
pode-se dizer que uma aresta e Ø incidente em u, se u for uma extremidade de e. Exemplos
de grafos na Figura 1.1.

Figura 1.1: Grafos.

Um grafo de aresta do tipo e = {u, u}, ou seja, com extremidades iguais da aresta, Ø
denominada la(cid:231)o. A existŒncia de uma ou mais arestas entre o mesmo par de vØrtices, sªo
chamadas de arestas paralelas ou arestas mœltiplas. Um grafo que possui arestas paralelas
denomina-se multigrafo. Na Figura 1.2(a) Ø apresentado um grafo com la(cid:231)os, e na Figura
1.2(b) um grafo com arestas paralelas. Quando o grafo possui la(cid:231)os e arestas mœltiplas
denomina-se pseudografo. [11]

Figura 1.2: (a) Grafos com la(cid:231)os.

(b) Grafo com arestas mœltiplas.

De(cid:28)ni(cid:231)ªo 1.2.2. Um grafo G Ø dito simples se nªo possui la(cid:231)o ou aresta mœltipla. (cid:201)
chamado de trivial quando o grafo possui apenas um vØrtice. [11]

Os grafos da Figura 1.1 sªo grafos simples, jÆ os grafos da Figura 1.2 nªo sªo.

5

De(cid:28)ni(cid:231)ªo 1.2.3. Um grafo G Ø dito completo se todo vØrtice em G estÆ conectado a
qualquer outro vØrtice em G. [11]

Um grafo completo com n vØrtices Ø denotado por Kn. Na Figura 1.3 sªo apresentados

exemplos dos grafos K3, K4 e K5.

Figura 1.3: Grafos completos.

Dado um grafo G(V, E), o grau de um vØrtice v ∈ V , denotado por g(v), Ø igual
ao nœmero de arestas que incidem nele. Na Figura 1.3(b), o grau de cada vØrtice Ø 3.
Considerando que em cada vØrtice v ∈ V incidem g(v) arestas e que cada aresta incide
em 2 vØrtices, tem-se:

Teorema 1.2.1. Para todo grafo G(V, E)

(cid:80)

v∈V (G)

g(v) = 2 · |E|,

onde |E| representa o nœmero de arestas do conjunto E.

Demonstra(cid:231)ªo: Quando contamos os graus dos vØrtices de um grafo estamos con-
tando o nœmero de arestas que incidem em cada vØrtice. Como cada aresta estÆ sempre
ligada a dois vØrtices, cada aresta foi contada duas vezes.

Quando todos os vØrtices de um grafo possuem o mesmo grau, ele Ø chamado de grafo
regular de grau r. Todos os grafos da Figura 1.3 sªo exemplos de grafos regulares. A
Figura 1.3(b) possui grau r = 3.

De(cid:28)ni(cid:231)ªo 1.2.4. Um passeio Ø uma sequŒncia de arestas v0v1, v1v2, v2v3, ..., vs−1vs, s Ø o
comprimento do passeio. Se todas as arestas do passeio sªo distintas, o passeio Ø chamado
trilha; se v0 = vs, o passeio Ø uma trilha fechada. Se, alØm das arestas, todos os vØrtices
sªo distintos, entªo, tem-se um caminho e se v0 = vs, tem-se um ciclo. [11]

CorolÆrio 1. Todo grafo G possui um nœmero par de vØrtices de grau (cid:237)mpar.

6

Demonstra(cid:231)ªo: Se tivØssemos um nœmero (cid:237)mpar de vØrtices de grau (cid:237)mpar, a soma
dos graus seria (cid:237)mpar. Mas a soma dos graus Ø o dobro do nœmero de arestas e, portanto,
Ø um nœmero par.

Dado um grafo G(V, E), H(V (cid:48), E(cid:48)) Ø dito subgrafo de G se V (cid:48) ⊆ V e E(cid:48) ⊆ E. A Figura

1.4 mostra um exemplo de um grafo e subgrafos de G.

Figura 1.4: Grafos e subgrafos.

De(cid:28)ni(cid:231)ªo 1.2.5. Um grafo G Ø chamado conexo se existe um caminho para cada par de
vØrtices de G. Caso contrÆrio, Ø chamado desconexo.

Um grafo desconexo possui partes conexas que sªo chamadas de componentes. Um
grafo conexo possui um œnico componente conexo enquanto um grafo desconexo possui
vÆrios componentes conexos. A Figura 1.5(a) Ø um exemplo de grafo conexo, enquanto a
Figura 1.5(b) Ø um grafo desconexo com o nœmero de componentes igual a 3.

Figura 1.5: (a) Grafo conexo. (b) Grafo desconexo.

De(cid:28)ni(cid:231)ªo 1.2.6. Um grafo G(V, E) Ø chamado bipartido quando seu conjunto de vØrtices
V pode ser particionado em dois subconjuntos V1 e V2, tal que toda aresta de G faz a liga(cid:231)ªo
de um vØrtice de V1 a um vØrtice de V2.

Um grafo bipartido de G pode ser escrito como G(V1 ∪ V2, E) e Ø dito grafo bipartido
completo quando existe uma aresta para todo par de vØrtices u, v, sendo u ∈ V1 e v ∈ V2,
denotado por Km,n sendo m = |V1| e n = |V2|. A Figura 1.6 mostra exemplos de grafos
bipartidos.

Teorema 1.2.2. Um grafo G Ø bipartido se, e somente se, nªo contØm ciclos de compri-
mento (cid:237)mpar.

7

Figura 1.6: (a) Grafo bipartido. (b) Grafo bipartido completo.

Demonstra(cid:231)ªo:
(⇒) Seja G bipartido. Se nªo houver um ciclo em G, nªo hÆ o que mostrar. Se hÆ um
ciclo em G, este alterna vØrtices de V1 e V2, dois subconjuntos disjuntos. Partindo de V1,
por exemplo, para retornar ao ponto de partida teremos que utilizar um nœmero par de
arestas. O ciclo Ø, portanto, de comprimento par.

(⇐) Considerando apenas grafos conexos, seja G um grafo sem ciclos (cid:237)mpares, partici-
onando em dois subconjuntos V1 e V2, independentes e disjuntos. Tomando-se primeira-
mente um vØrtice qualquer v, o subconjunto V1 serÆ formado por todos os vØrtices w tais
que exista um caminho de comprimento par entre v e w. O subconjunto V2 serÆ formado
por todos os vØrtices w tais que exista um caminho de comprimento (cid:237)mpar entre v e w. Os
conjuntos V1 e V2 sªo disjuntos, pois se w estivesse em V1 e V2 ao mesmo tempo, haveria
um caminho de comprimento par e um comprimento de tamanho (cid:237)mpar ligando v a w.
Esses caminhos podem se cruzar (ou nªo) antes de chegar em w, produzindo alguns ciclos,
como o exemplo da Figura 2.7. Como o nœmero usado de arestas nos caminhos Ø (cid:237)mpar
(a soma do nœmero de arestas dos dois caminhos) isso produziria pelo menos um ciclo
(cid:237)mpar em G, contrariando a hip(cid:243)tese.

Figura 1.7: Caminhos e ciclos.

De(cid:28)ni(cid:231)ªo 1.2.7. Dois grafos simples G1 e G2 sªo ditos isomorfos se existir uma bije(cid:231)ªo
f de V (G1) em V (G2) tal que dois vØrtices v e w sªo adjacentes em G1 se, e somente se
f (v) e f (w) sªo adjacentes em G2.

As representa(cid:231)ıes geomØtricas dos grafos da Figura 1.8 se tornam coincidentes ao se
aplicar a fun(cid:231)ªo f indicada na (cid:28)gura. Logo, G1 e G2 sªo isomorfos entre si, jÆ os grafos
G1 e G3, nªo o sªo, pois nªo existe uma fun(cid:231)ªo f que realize esse mapeamento entre os
vØrtices e que fa(cid:231)a com que as representa(cid:231)ıes tornem-se coincidentes.

8

Exemplo: Os grafos G = (V, E) e H = (W, F ) apresentados na Figura 1.9, sªo

isomorfos.

De fato, a fun(cid:231)ªo f , com f (u1) = v1, f (u2) = v4, f (u3) = v3 e f (u4) = v2, Ø uma
correspondŒncia biun(cid:237)voca entre V e W . Para ver que esta correspondŒncia preserva a
adjacŒncia, observe que os vØrtices adjacentes em G sªo u1 e u2, u1 e u3, u2 e u4 e u3 e
u4, e cada um dos pares f (u1) = v1 e f (u2) = v4, f (u1) = v1 e f (u3) = v3, f (u2) = v4 e
f (u4) = v2, e f (u3) = v3 e f (u4) = v2 sªo adjacentes em H.

Figura 1.8: Grafo isomorfos e nªo isomorfos .

Figura 1.9: Grafo isomorfos.

Nªo Ø fÆcil determinar se dois grafos simples sªo isomorfos. Existem n! correspondŒncias
biun(cid:237)vocas poss(cid:237)veis de dois grafos simples com n vØrtices. Se n for grande, testar cada
uma dessas correspondŒncias para ver se ela preserva a adjacŒncia e a nªo adjacŒncia nªo
Ø prÆtico. Para facilitar, analise: grafos simples isomorfos devem ter o mesmo nœmero de
arestas, pois a correspondŒncia biun(cid:237)voca entre os vØrtices estabelece uma correspondŒncia
biun(cid:237)voca entre as arestas. AlØm disso, os graus dos vØrtices em grafos simples isomorfos
devem ser os mesmos, isto Ø, um vØrtice de grau d em G deve corresponder a um vØrtice
f (v) de grau d em H, pois um vØrtice w em G Ø adjacente a v se f (v) e f (w) forem
adjacentes em H.

9

Exemplo: Os grafos da Figura 1.10 nªo sªo isomorfos.
G e H tŒm, ambos, cinco vØrtices e seis arestas. H tem um vØrtice de grau 1, enquanto

G nªo tem nenhum vØrtice de grau 1. Logo, G e H nªo sªo isomorfos.

Figura 1.10: Grafo nªo isomorfos.

De(cid:28)ni(cid:231)ªo 1.2.8. Um grafo Ø dito ponderado quando sªo atribu(cid:237)dos pesos (cid:224)s suas arestas.

Esses pesos podem representar custo ou dist(cid:226)ncias. Tem-se um exemplo de grafo

ponderado na Figura 1.11.

Figura 1.11: Grafo ponderado

Os grafos vistos atØ agora sªo grafos nªo direcionados (ou orientados), pois suas arestas
nªo possuem orienta(cid:231)ªo (aponta de um vØrtice para outro). Um grafo direcionado D(V, E)
pode ser chamado de grafo de orientado ou tambØm chamado ser chamado de d(cid:237)grafo.

De(cid:28)ni(cid:231)ªo 1.2.9. Um grafo orientado G = (V, E) consiste de um conjunto de vØrtices V
nªo vazio e de um conjunto de arestas orientadas. Cada aresta estÆ associada a um par
ordenado de vØrtices. Uma aresta orientada associada a um par ordenado (u, v) come(cid:231)a
em u e termina em v.

10

Quando se descreve um grafo orientado, usa-se uma (cid:29)echa apontando de u para v,
indicando que come(cid:231)a em u e termina em v. Um grafo orientado pode conter la(cid:231)os e arestas
orientadas mœltiplas que come(cid:231)am e terminam nos mesmos vØrtices. Pode conter tambØm
arestas orientadas que conectam u e v em ambos os sentidos. Quando um grafo orientado
nªo tem la(cid:231)os nem arestas orientadas mœltiplas, ele Ø chamado de grafo orientado simples.
Veja a Figura 1.12. Para alguns modelos, pode-se precisar de um grafo em que algumas
arestas sejam nªo orientadas, enquanto outras sejam orientadas. Um grafo composto de
arestas orientadas e nªo orientadas Ø chamado de grafo misto.

Figura 1.12: Grafos orientados.

1.3 `rvore

Um grafo T = (V, E) que nªo possui ciclos e Ø conexo Ø chamado de Ærvore. Toda

Ærvore possui as seguintes caracter(cid:237)sticas:

• Seja v ∈ V , se v possui grau menor ou igual a 1, entªo, v Ø uma folha. Caso o grau

seja maior que 1, v Ø um vØrtice interno.

• Uma Ærvore T com n vØrtices possui n − 1 arestas.

• Um grafo G Ø uma Ærvore somente se existir um œnico caminho entre cada par de

vØrtices de G.

• Um conjunto de Ærvores Ø chamado de (cid:29)oresta.[4]

Pode-se dizer que grafos que nªo contŒm nenhum ciclo simples, mas que nªo sªo ne-
cessariamente conexos sªo chamados de (cid:29)orestas e, tŒm a propriedade: cada uma de seus
componentes conexos Ø uma Ærvore.

A terminologia para Ærvores tem origem na bot(cid:226)nica e genealogia. Sendo T uma Ærvore
com raiz ou Ærvore enraizada, T Ø uma Ærvore que contØm vØrtices designados r, chamado
de raiz da Ærvore. Como existe um œnico caminho simples da raiz r para qualquer outro

11

vØrtice v em T , isso determina uma dire(cid:231)ªo das arestas de T . Portanto, T pode ser visto
como um grafo orientado. Qualquer Ærvore pode ser transformada em uma Ærvore com
raiz pela simples sele(cid:231)ªo de um vØrtice como raiz.[11]

Se v for um vØrtice em T diferente do raiz, o pai de v Ø o œnico vØrtice u tal que
existe uma aresta orientada de u para v. Quando u for pai de v, v Ø chamado (cid:28)lho de
u. VØrtices com mesmo pai sªo chamados irmªos. Os ancestrais de um vØrtice sªo os
vØrtices no caminho da raiz atØ o pai deste vØrtice. Os descendentes de um vØrtice v sªo
os vØrtices que tem v como um ancestral. Um vØrtice de uma Ærvore Ø chamado de folha
se nªo tiver (cid:28)lhos. Os vØrtices que tŒm (cid:28)lhos sªo chamados de vØrtices internos. A raiz Ø
um vØrtice interno, a menos que seja o œnico vØrtice do grafo cujo caso Ø tambØm chamado
de folha.

Dado um grafo G(V (G), E(G)), denomina-se subgrafo gerador o grafo H(V (H), E(H))
que Ø subgrafo de G, tal que V (G) = V (H). Se o subgrafo H Ø uma Ærvore, entªo Ø
chamado de Ærvore geradora. A Figura 1.13 mostra exemplos de Ærvores.

Figura 1.13: Grafo G e Ærvores geradoras T1 e T2.

Supondo que G Ø um grafo conexo ponderado, cada aresta de G estÆ associada a um
nœmero nªo negativo chamado de peso da aresta. Entªo, qualquer Ærvore geradora T de
G estÆ associada a um peso total obtido pela soma dos pesos das arestas em T . Uma
Ærvore minimal geradora ou `rvore geradora m(cid:237)nima de G Ø a Ærvore geradora cujo peso
total Ø o menor poss(cid:237)vel.

1.4 Outras de(cid:28)ni(cid:231)ıes

O conjunto de vØrtices adjacentes de v, Ø chamado vizinhan(cid:231)a aberta de v, denotado
por N (v). A vizinhan(cid:231)a fechada de v Ø denotada e de(cid:28)nida por N [v] = N (v) ∪ {v}.
Pode-se estender esta de(cid:28)ni(cid:231)ªo para conjuntos de vØrtices (N (S) e N [S]), sendo S um
conjunto de vØrtices dado. Por exemplo, no grafo da (cid:28)gura 1.4(a) tem-se N (5) = {3, 4, 7}
e N [5] = {3, 4, 5, 7}.

Um grafo G Ø chamado de Grafo nulo ou vazio quando o conjunto de arestas A(G) Ø
vazio. Sªo grafos esparsos aqueles que tem poucas arestas, muito menos do que o nœmero
mÆximo poss(cid:237)vel n(n − 1)/2, onde n Ø o nœmero de vØrtices.

12

Grafo complementar, denotado por G Ø um grafo em que V (G) = V (G) e que A(G) ∪
A(G) inclui todas as arestas de G. A Figura 1.14 mostra o exemplo de dois grafos
complementares.

Algoritmo Ø conjunto ordenado de passos computacionais que toma um conjunto de

valores como entrada e produz um conjunto de valores como sa(cid:237)da.

Figura 1.14: Grafo complementares.

1.5 Modelos de grafos

Os grafos sªo usados em grande variedade de modelos. Serªo apresentados alguns

modelos de grafos em diversos campos.

1.5.1 Grafos de superposi(cid:231)ªo de nichos em ecologia

Os grafos sªo usados em muitos modelos que envolvem a intera(cid:231)ªo entre diferentes
espØcies de animais. Por exemplo, a competi(cid:231)ªo entre espØcies em um ecosistema pode
ser modelada usando um grafo de superposi(cid:231)ªo de nicho, onde cada espØcie Ø representada
por um vØrtice e uma aresta nªo orientada conectada a dois vØrtices se duas espØcies
representadas por esses vØrtices competem (fontes de alimentos que usam sªo as mesmas).
Um grafo de superposi(cid:231)ªo de nicho Ø um grafo simples, pois nªo sªo necessÆrios nem la(cid:231)os
e nem arestas mœltiplas. O grafo da Figura 1.15 modela o ecossistema de uma (cid:29)oresta.

1.5.2 Grafos de relacionamento

Pode-se usar modelos de grafos para representar diversas rela(cid:231)ıes entre pessoas. Por
exemplo, um grafo simples representa se duas pessoas se conhecem, ou seja, se elas tŒm um
relacionamento. Cada pessoa Ø representada por um vØrtice e uma aresta nªo orientada
Ø usada para ligar duas pessoas quando elas se conhecem. Nªo hÆ necessidade de la(cid:231)os e
arestas mœltiplas. Um pequeno grafo de relacionamento Ø mostrado na Figura 1.16.

13

Figura 1.15: Ecossistema de uma (cid:29)oresta.

Figura 1.16: Grafo de relacionamento.

1.5.3 Grafos de in(cid:29)uŒncia

Observando o comportamento de grupo, certas pessoas podem in(cid:29)uenciar o pensamento
de outras. Um grafo orientado chamado de grafo de in(cid:29)uŒncia pode ser usado para
modelar este comportamento, onde cada pessoa do grupo Ø representada por um vØrtice
e uma aresta orientada mostra quando uma pessoa representada pelo vØrtice a in(cid:29)uencia
outra pessoa representada pelo vØrtice b, pois o vØrtice a aponta para o vØrtice b. Um
exemplo de um grafo de in(cid:29)uŒncia Ø mostrado na Figura 1.17.

1.5.4 Grafos de torneios Round-Robin

Neste torneio um time joga com cada outro time exatamente uma vez e podem ser
modelados usando grafos orientados em que cada time Ø representado por um vØrtice.
Observa-se que (T1, T3) Ø uma aresta se o time T1 ganhou do time T3. Este grafo Ø um
grafo orientado simples que nªo contØm nem la(cid:231)os nem arestas mœltiplas. Tal modelo estÆ

14

Figura 1.17: Grafo de in(cid:29)uŒncia.

exempli(cid:28)cado na Figura 1.18.

Figura 1.18: Grafo de Torneio.

1.5.5 Grafo da web

A World Wide Web pode ser modelada como um grafo orientado, no qual cada pÆgina
Ø representada por um vØrtice e uma aresta come(cid:231)a na pÆgina a da web e termina na
pÆgina b, se existir um link em a que direcione para b. Como novas pÆginas da web
sªo criadas e outras removidas, em alguma parte dela, a quase todo segundo, este grafo
muda continuamente e tŒm mais de trŒs milhıes de vØrtices e vinte bilhıes de arestas.
Muitas pessoas estªo estudando as propriedades do grafo da web para entender melhor
sua natureza.

1.5.6 PageRank

A internet Ø uma ferramenta poderosa para obten(cid:231)ªo de informa(cid:231)ıes. Digitando uma
palavra em um buscador, milhares de resultados relacionados com a mesma, sªo obtidos
instantaneamente.

15

Atualmente, o Google Ø a mÆquina de busca mais estudada e conhecida mundialmente.
Quando se digita uma palavra-chave de algo que se deseja obter informa(cid:231)ıes no google,
obtØm-se uma lista de pÆginas web que possuem assuntos correlacionados. Mas, para a
lista gerada ser apresentada na ordem que interessa ao usuÆrio sªo necessÆrios cÆlculos de
Ælgebra linear acompanhados de uma modelagem em grafos. CritØrios usados no algoritmo
do PageRank sªo empregados na ordena(cid:231)ªo dos sites quando se realiza uma busca.

O PageRank Ø um mecanismo de (cid:16)votos(cid:17). Cada site Ø representado por um vØrtice
de um grafo orientado e cada link em que uma pÆgina aponta para outra, Ø um "voto",
representado por uma aresta (u, v), onde u indica a pÆgina v. Quanto mais alto for o
PageRank da pÆgina de onde sai o link, mais importante Ø o voto dado (cid:224) pÆgina de
destino. O Google possui milhares de pÆginas cadastradas cujo cÆlculo das import(cid:226)ncias
se torna cada vez mais complexo. SerÆ mostrado um exemplo simples de grafo e sua
aplica(cid:231)ªo algØbrica para ilustrar a import(cid:226)ncia dos sites de uma determinada rede da
internet na (cid:28)gura a seguir.

Figura 1.19: Grafo simples.

A rede Ø composta de quatro sites (vØrtices). Cada aresta indica que existe um link
(u, v), onde u indica a pÆgina v, e cada pÆgina possui pelo menos um link para outra
pÆgina. HÆ vÆrios fatores adicionais que in(cid:29)uenciam na ordena(cid:231)ªo dos sites. Mas serÆ
dada Œnfase no processo usado pelo Google.

Seja xi o (cid:237)ndice de import(cid:226)ncia do site i, xi ≥ 0 para qualquer pÆgina i. Observe que
o site 1 possui link para os sites 2, 3 e 4. O (cid:237)ndice de import(cid:226)ncia da pÆgina 1 deve ser
dividido por 3. O (cid:237)ndice de import(cid:226)ncia da pÆgina 2 possui link para as pÆginas 3 e 4
e deve ser dividido por 2. Portanto, a import(cid:226)ncia da pÆgina 4 Ø: x4 = x1/3 + x2/2. A
import(cid:226)ncia dos demais sites obedecem (cid:224)s equa(cid:231)ıes anÆlogas, chegando ao sistema:





x1 = x3 + x4/2
x2 = x1/3
x3 = x1/3 + x2/2 + x4/2
x4 = x1/3 + x2/2

Como a resolu(cid:231)ªo deste sistema Ø feita com recursos computacionais, pode-se encontrar

16

a solu(cid:231)ªo por escalonamento, onde uma das solu(cid:231)ıes serÆ {s(12, 4, 9, 6), s ∈ R}. Para
qualquer s positivo, observa-se que x1 > x3 > x4 > x2. Assim, o site 1 tem import(cid:226)ncia
maior que outros sites e o site 2 tem a menor import(cid:226)ncia, segundo a ordena(cid:231)ªo do Google.
O sistema linear relacionado ao grafo pode tambØm ser escrito utilizando matrizes,

conduzindo a um problema de autovalores e autovetores, isto Ø, Av = v, com

A =








0 1 1/2
0
1/3
0
0 0
1/3 1/2 0 1/2
0
1/3 1/2 0








e v =















x1
x2
x3
x4

A matriz A = (aij), chamada matriz dos links, Ø tal que aij = 0 se nªo houver link de
j para i e aij = 1/nj se houver link de j para i, sendo nj o nœmero de links que partem
de j.

Qualquer que seja a matriz A, o sistema Av = v Ø um sistema homogŒneo, tem pelo
menos uma solu(cid:231)ªo, que Ø a solu(cid:231)ªo nula. AlØm disso, pode-se mostrar que, quando A Ø
uma matriz de links em que cada pÆgina aponta para pelo menos uma outra pÆgina, ele
tem uma solu(cid:231)ªo nªo nula.

O sistema homogŒneo citado tem in(cid:28)nitas solu(cid:231)ıes, mas o que importa Ø vocŒ encontrar
uma solu(cid:231)ªo nªo nula para poder informar a ordena(cid:231)ªo de import(cid:226)ncia. Observe a matriz
A, a soma de cada coluna da matriz Ø igual a 1, para calcular a import(cid:226)ncia, pode-se
impor a condi(cid:231)ªo adicional: x1 + x2 + ... + xn = 1, onde no exemplo tem-se: x1 = 12/31,
x2 = 4/31, x3 = 9/31 e x4 = 6/31.

Quando uma rede Ø fortemente conectada, isto Ø, quando se pode passar de um site
arbitrÆrio para outro qualquer apenas clicando nos links, o conjunto de solu(cid:231)ıes do sistema
tem dimensªo 1. ObtØm-se, entªo, uma solu(cid:231)ªo œnica impondo a restri(cid:231)ªo adicional de
que a soma das import(cid:226)ncias seja igual a 1. Quando nªo Ø fortemente conectada, as
solu(cid:231)ıes do sistema Av = v nªo sªo todas proporcionais entre si, encontra-se problemas
na ordena(cid:231)ªo das import(cid:226)ncias.

Segundo Almeida e Celeman [1], existe um truque que pode ser aplicado para qualquer
pÆgina web admiss(cid:237)vel, bastante œtil para o caso em que a Web nªo Ø fortemente conectada.
Faz-se uma pequena modi(cid:28)ca(cid:231)ªo na matriz dos links A, substituindo-a por uma matriz M
de(cid:28)nida por M = (1 − m)A + mS, como 0 < m < 1 e Sij = 1/n, para todo i e j, sendo S
uma matriz nxn. O valor utilizado pelo Google Ø m = 0, 15. Quanto menor for o valor de
m, mais peso se dÆ (cid:224) matriz A e menos peso se dÆ (cid:224) matriz S. Se relacionarmos S a um
grafo direcionado, esse representaria uma web onde todos os sites teriam links para todos
os outros, inclusive para si mesmos, pois S seria uma matriz neutra que estaria fazendo
uma mØdia ponderada com a matriz A. O ponto Ø que o conjunto de solu(cid:231)ıes de M v = v
tem dimensªo 1 e, assim, Ø poss(cid:237)vel classi(cid:28)car as pÆginas. Devido (cid:224) neutralidade de S, a

17

mudan(cid:231)a nªo afetaria a ordena(cid:231)ªo intuitiva da import(cid:226)ncia dos sites.

1.5.7 Grafos de mapas rodoviÆrios

Usando grafos para modelar mapas rodoviÆrios, os vØrtices representam as intersec(cid:231)ıes
e as arestas representam estradas. Arestas nªo orientadas representam estradas de mªo
dupla, e as arestas orientadas representam estradas de mªo œnica. Arestas nªo orientadas
mœltiplas representam estradas de mªo dupla mœltiplas que conectam as mesmas duas
intersec(cid:231)ıes. Arestas orientadas mœltiplas representam estradas de mªo œnica mœltiplas
que come(cid:231)am em uma intersec(cid:231)ªo e terminam em outra intersec(cid:231)ªo. Os grafos mistos sªo
necessÆrios para representar mapas rodoviÆrios que incluem tanto estradas de mªo œnica
como de mªo dupla.

1.6 Problemas clÆssicos de grafos

1.6.1 Grafos eulerianos e as sete pontes de Konigsberg

O primeiro e mais famoso problema resolvido por Euler foi o das sete pontes da cidade
Konisgberg que cruzam o rio Pregel, estabelecendo liga(cid:231)ıes entre duas ilhas e entre as
margens opostas do rio, conforme mostra a (cid:28)gura 1.20 a seguir. Surgiu a pergunta: SerÆ
poss(cid:237)vel fazer um passeio pela cidade, come(cid:231)ando e terminando no mesmo lugar, cruzando
cada ponte exatamente uma œnica vez?

Figura 1.20: As sete pontes de Konigsberg.

Algumas de(cid:28)ni(cid:231)ıes e exemplos serªo necessÆrias para resolver o problema.

18

De(cid:28)ni(cid:231)ªo 1.6.1. Um grafo G de m arestas Ø dito euleriano se existir uma trilha fechada
de comprimento m em G.

Se o grafo nªo Ø euleriano, mas tem uma trilha aberta de m arestas, Ø dito
semieuleriano. O grafo 1 da Figura 1.21 Ø o desenho de um grafo euleriano, o grafo
2 Ø semieuleriano e grafo 3 nªo Ø euleriano nem semieuleriano.

Figura 1.21: Grafos euleriano, semieuleriano e nªo euleriano.

Lema 1.6.1. Se todo vØrtice de um grafo G (nªo necessariamente simples) tem grau
maior ou igual a 2, entªo, G contØm um ciclo.

Demonstra(cid:231)ªo: Se G tem la(cid:231)os ou arestas mœltiplas, nªo hÆ o que provar, pois G jÆ
contØm um ciclo. Considerando um grafo simples, partindo de um vØrtice inicial qualquer,
inicia-se uma trilha. Quando chegamos a outro vØrtice, estamos visitando-o pela primeira
vez; continuando o percurso, ao chegar a um vØrtice jÆ visitado, produzimos um ciclo.
Como o nœmero de vØrtices Ø (cid:28)nito, o lema estÆ provado.

Teorema 1.6.1. (Euler) Um grafo conexo (nªo necessariamente simples) G Ø euleriano
se, e somente se, todos seus vØrtices tem grau par.

Demonstra(cid:231)ªo: (⇒) Supondo que G tenha uma trilha fechada m. Cada vez que a
trilha passa por um vØrtice, utiliza duas novas arestas, um para entrar outro para sair.
Logo, o grau de cada vØrtice Ø obrigatoriamente par.

(⇐) Seja G com todos os vØrtices de grau par. Usaremos indu(cid:231)ªo sobre o nœmero
de arestas m do grafo. Para m=0 Ø verdadeiro. Supondo que seja vÆlido para todos os
grafos com menos do que m arestas, sendo G conexo, todos os vØrtices tem grau maior
do que 2, pois os graus sªo pares. Pelo lema anterior, G contØm um ciclo. Dentre todas
as trilhas fechadas de G escolhemos uma trilha T com o comprimento mÆximo. Se T
tem comprimento m o teorema estÆ provado. Caso contrÆrio, consideramos o grafo H
resultante da retirada das arestas de T . Como retiramos um nœmero par de arestas de
cada vØrtice de T , e todos os vØrtices tem grau par (pela hip(cid:243)tese), pelo menos uma das

19

componentes de H tem um vØrtice em comum com T e tem todos os vØrtices de grau
par. Pela hip(cid:243)tese de indu(cid:231)ªo, H tem uma trilha que passa por todos os vØrtices de H,
e podemos formar uma trilha fechada maior, conectando T com a trilha em H. Mas isto
contraria a maximalidade na escolha de T .

Voltemos ao problema. Euler o modelou em um grafo. Chamou as ilhas de vØrtices e
as pontes de arestas. Veri(cid:28)cou que partindo de um vØrtice, passando por todas as arestas
e voltando para o mesmo vØrtice, precisaria de, no m(cid:237)nimo, duas arestas (pontes), uma
para chegada e outra para sa(cid:237)da. Ver Figura 1.22.

Figura 1.22: Grafo das sete pontes de Konigsberg.

Concluiu, entªo, que para achar uma rota que come(cid:231)a e termina em um mesmo vØrtice,
esse nœmero total de chegadas e sa(cid:237)das deve ser um mœltiplo de 2.
Isto Ø, condi(cid:231)ªo
necessÆria para existir um ciclo. Portanto, o grafo que representa o problema nªo Ø
euleriano. Por isto, nªo tem solu(cid:231)ªo.

No problema das pontes, se fosse constru(cid:237)da uma nova ponte seria poss(cid:237)vel fazer um
passeio pela cidade, come(cid:231)ando e terminando no mesmo lugar, cruzando cada ponte exa-
tamente uma œnica vez?

Precisamos de mais informa(cid:231)ıes:

CorolÆrio 2. Um grafo conexo (nªo necessariamente simples) G Ø semieuleriano se, e
somente se, dois vØrtices tŒm grau (cid:237)mpar.

Demonstra(cid:231)ªo:

(⇒) Suponhamos que G possua um caminho semieuleriano E
come(cid:231)ando num vØrtice v e terminando num vØrtice w. Como v (cid:54)= w, v e w tŒm am-
bos grau (cid:237)mpar. Pois cada vez que um dos demais vØrtices aparecem em E tem duas
arestas incidentes. Como cada aresta ocorre uma vez em E, o grau desses vØrtices Ø par.

(⇐) Suponhamos que G seja conexo e possui dois vØrtices v (inicial) e w ((cid:28)nal) de
grau (cid:237)mpar, pois em outra situa(cid:231)ªo nªo ter(cid:237)amos um grafo. Consideremos o grafo H que

20

se obtØm de G por jun(cid:231)ªo de uma nova aresta ligando v a w. A este novo grafo podemos
aplicar o Teorema de Euler e concluir que admite um caminho euleriano. Apagando
deste caminho a aresta previamente adicionada a G obtemos um caminho semi-euleriano
ligando v a w, com desejado.

Portanto, este problema tambØm nªo tem solu(cid:231)ªo, mas ter(cid:237)amos um grafo semieuleri-
ano. Seria poss(cid:237)vel sair de um ponto, caminhar uma œnica vez por todas as pontes, mas
nªo poderia voltar ao ponto de origem.

Observa(cid:231)ªo: Sendo G um grafo semi-euleriano, se adicionarmos uma nova aresta,
incidente aos dois vØrtices de grau (cid:237)mpar, obtØm-se um grafo euleriano. Esse processo
chama-se eulerizar um grafo.

1.6.2 Grafos e ciclos hamiltonianos

Semelhante ao problema das pontes, o ciclo hamiltoniano consiste em veri(cid:28)car se, dado
um grafo, Ø poss(cid:237)vel construir uma trilha que passe por todos os n(cid:243)s uma œnica vez. Uma
trilha desse tipo teria que ser necessariamente um ciclo. Tal ciclo Ø chamado de ciclo
hamiltoniano, devido ao matemÆtico irlandŒs do sØculo XIX, Sir Willian R. Hamilton.

De(cid:28)ni(cid:231)ªo 1.6.2. Um caminho que contØm todos os vØrtices de um grafo G Ø dito caminho
hamiltoniano.

De(cid:28)ni(cid:231)ªo 1.6.3. Um ciclo que contØm todos os vØrtices de um grafo G Ø dito ciclo
hamiltoniano.

Se um grafo G contØm um ciclo hamiltoniano, dizemos que G Ø um grafo hamiltoniano.
Um exemplo de grafo hamiltoniano Ø o grafo que foi base de um jogo, "O Dodecaedro
do Viajante", concebido por Hamilton e comercializado sem muito sucesso. O nome
dodecaedro decorre do fato de que o grafo provØm do poliedro s(cid:243)lido com doze faces
pentagonais, em que cada um dos 20 vØrtices foram nomeados como cidades importantes.
O objetivo do jogo era, utilizando as 30 arestas do dodecaedro, passar por cada uma das
cidades apenas uma vez, come(cid:231)ando e terminando na mesma cidade.

Para formar o grafo, imagine que o s(cid:243)lido Ø elÆstico e uma das faces Ø esticada pelos
seus vØrtices atØ que o resto do s(cid:243)lido possa ser projetado dentro dela. Nªo sªo co-
nhecidas condi(cid:231)ıes necessÆrias e su(cid:28)cientes para que um grafo genØrico contenha um ciclo
hamiltoniano, nem tampouco mØtodos para construir tal ciclo, caso exista.

Um problema de otimiza(cid:231)ªo correspondente, conhecido como o Problema do caixeiro
viajante, Ø o de achar um ciclo de custo m(cid:237)nimo (sair de uma cidade, passar todas as
outras uma œnica vez e voltar a cidade inicial, com custo m(cid:237)nimo), onde o custo de um
ciclo Ø a soma dos custos dos arcos(pesos atribu(cid:237)dos as arestas) pertencentes ao ciclo.
Possivelmente Ø um dos problemas mais famosos na teoria dos grafos. Ainda nªo sªo

21

conhecidos algoritmos e(cid:28)cientes para resolvŒ-lo e conjecturam-se que tais algoritmos de
fato nªo existam.

Figura 1.23: Dodecaedro planarizado.

Este tipo de problema Ø resolvido atravØs de tentativas e erros, da seguinte maneira:
comece por algum vØrtice e tente qualquer caminho escolhendo suas arestas. Se o caminho
resultante tiver um vØrtice repetido, ele nªo Ø um ciclo, descarte e tente um caminho
diferente. Se o caminho puder ser completado como um ciclo, veri(cid:28)que se visitou todos
os vØrtices; se nªo, descarte e tente um novo caminho. Continue o procedimento atØ
que todos os caminhos poss(cid:237)veis tenham sido testados ou atØ que se tenha obtido um
ciclo hamiltoniano. Embora semelhante ao problema de ciclo euleriano, achar um ciclo
hamiltoniano Ø muito mais complexo.

Algumas propriedades dos ciclos hamiltonianos podem ajudar a constru(cid:237)-los.
1. Se um vØrtice v ∈ V tem grau 2, entªo, as duas arestas incidentes a v fazem parte

de qualquer ciclo hamiltoniano.

2. Na constru(cid:231)ªo de um ciclo hamiltoniano, nenhum ciclo se pode formar antes de

percorrer todos os vØrtices.

3. Na constru(cid:231)ªo de um ciclo hamiltoniano nªo pode conter arestas mœltiplas nem

la(cid:231)os.

4. Grafos simples completos sªo hamiltonianos.

De(cid:28)ni(cid:231)ªo 1.6.4. Um grafo G simples chama-se grafo maximal nªo hamiltoniano se nªo
Ø um grafo hamiltoniano mas a adi(cid:231)ªo de qualquer aresta que ligue dois vØrtices nªo
adjacentes forma um grafo hamiltoniano.

O problema do caixeiro-viajante Ø muito estudado em pesquisa operacional. Sua for-
mula(cid:231)ªo Ø simples: Dado um grafo valorado G, determinar o menor ciclo hamiltoniano de
G. Tal problema serÆ exempli(cid:28)cado, usando um grafo k5 com sua representa(cid:231)ªo matricial,
que serÆ visto no pr(cid:243)ximo cap(cid:237)tulo.

22

a
0
a
b 200
170
c
d 250
250
e

b
200
0
320
480
480

c
170
320
0
180
180

d
250
480
180
0
90

e
250
480
180
90
0

Uma solu(cid:231)ªo (cid:243)bvia seria examinar todas as permuta(cid:231)ıes entre os vØrtices que ter(cid:237)amos
4! = 24 permuta(cid:231)ıes (circulares) que serÆ fÆcil, pois contØm poucos vØrtices, se resolvido
por computador. Mas geralmente problemas dessa natureza envolvem uma quantidade
muito grande de vØrtices que atØ mesmo um computador levaria tempo demais para
resolvŒ-lo. Observe que na matriz acima a, c, b, e, d, a formam um ciclo com o valor 1.310.
O algoritmo parte de um ponto e procura sempre o ponto da vez, procura-se um ciclo
que nªo precisa ser sequencial. Encontramos um ciclo, mas que nem sempre Ø a solu(cid:231)ªo
(cid:243)tima.

23

Cap(cid:237)tulo 2

Representa(cid:231)ªo computacional de grafos

Neste Cap(cid:237)tulo mostraremos como as informa(cid:231)ıes sobre grafos podem ser representadas

no computador.

Quando se trabalha com grafos, Ø œtil ser capaz de escolher uma representa(cid:231)ªo conve-
niente. Este cap(cid:237)tulo mostrarÆ como representar grafos de maneiras diferentes. Algumas
vezes dois grafos tŒm a mesma forma, no sentido que existe uma correspondŒncia biun(cid:237)-
voca entre seus conjuntos de vØrtices que preserva as arestas. Em tal caso, esses grafos
sªo isomorfos, e determinar se dois grafos sªo isomorfos Ø muito importante na teoria dos
grafos.

Uma das formas de representar um grafo sem arestas mœltiplas Ø listar todas as arestas
desse grafo. Outra forma Ø por meio de listas de adjacŒncia, na qual especi(cid:28)cam os
vØrtices que sªo adjacentes a cada vØrtice do grafo. Um grafo G(V, E) com |V | = n pode
ser representado por meio de matrizes ou listas.

2.1 Matriz de adjacŒncia

Seja G(V, E) um grafo simples em que |V | = n e supondo que os vØrtices de G sejam
listados por v1, v2, ..., vn, a matriz de adjacŒncia A Ø uma matriz de ordem n, com (i, j)
igual a 1 quando vi e vj forem adjacentes e igual a 0 quando (i, j) nªo forem adjacentes.
A matriz de adjacŒncia Ø A = [ai,j], em que:

(cid:40)

aij =

1,
0,

se
se

(i, j) ∈ E(G)
(i, j) /∈ E(G)

Uma matriz de adjacŒncia de um grafo Ø baseada na ordem escolhida para os seus
vØrtices. Por essa razªo, hÆ n! matrizes de adjacŒncia diferentes para um grafo com n
vØrtices, pois existem n! ordena(cid:231)ıes diferentes de n vØrtices.

A matriz de adjacŒncia de um grafo simples Ø simØtrica, isto Ø, ai,j = aj,i, pois ambos os

24

elementos sªo 1 quando vi e vj sªo adjacentes e ambos os elementos sªo 0 caso contrÆrio,
alØm disso, cada elemento ai,i, i = 1, 2, ..., n tambØm Ø 0, pois nªo possui la(cid:231)os. Na Figura
2.1 temos um exemplo de grafo simples e sua representa(cid:231)ªo por matriz de adjacŒncia
obedecendo a ordem alfabØtica dos vØrtices.

a b c d
1
0
a
0
b 1
1
c
0
0
d 1

1
0
1
0

0
1
0
1

Figura 2.1: Grafo simples e Matriz de adjacŒncia.

Matriz de adjacŒncia tambØm pode representar grafos nªo orientados com la(cid:231)os e ares-
tas mœltiplas. Um la(cid:231)o em um vØrtice ai Ø representado por 1 na posi(cid:231)ªo (i, i). Na posi(cid:231)ªo
(i, j), serÆ representado por 2 se duas arestas ligam os vØrtices ai e aj desta matriz, ou
melhor, serÆ igual a n, se n arestas ligam os vØrtices ai e aj desta matriz. Todos os
grafos nªo orientados, incluindo multigrafos e pseudografos, possuem matrizes de adja-
cŒncia simØtricas. A Figura 2.2 mostra um pseudografo e sua representa(cid:231)ªo por matriz
de adjacŒncia (com vØrtices ordenados).

a b c d
2
a
0
1
b 3
1
c
0
0
d 2

3
0
1
1

0
1
1
1

Figura 2.2: Pseudografo e Matriz de adjacŒncia.

Para representar grafos orientados G(V, E), atribui-se 1 em sua posi(cid:231)ªo (i, j) se existir
uma aresta de vi para vj, em que v1, v2, ..., vn Ø uma lista dos vØrtices. Esta matriz nªo
necessariamente tem que ser simØtrica, pois pode nªo haver uma aresta de vj para vi. As
matrizes de adjacŒncia tambØm podem representar multigrafos orientados, sempre levando
em considera(cid:231)ªo a quantidade de arestas entre dois vØrtices e o sentido destas arestas,
como mostra a Figura 2.3. O espa(cid:231)o reservado para o armazenamento das informa(cid:231)ıes
nessa matriz Ø da ordem O(|V |2). Seu uso Ø indicado para tratar de grafos densos, em
que o nœmero de arestas Ø pr(cid:243)ximo de |V |2. Torna-se desvantajosa para grafos esparsos
em que o nœmero de arestas Ø bem menor que |V |2.

25

a b c d
0
a
0
0
b 1
0
0
c
0
d 0

0
1
0
0

1
0
0
1

Figura 2.3: Grafo orientado e Matriz de adjacŒncia.

2.2 Matriz de incidŒncia

Outra forma de representar grafos Ø usar matriz de incidŒncia.
Seja G = (V, E) de n vØrtices e m arestas, um grafo nªo orientado e suponha que
v1, v2, ..., vn sejam os vØrtices e e1, e2, ..., em sejam as arestas de G, entªo a matriz de
incidŒncia com rela(cid:231)ªo a esta ordem de V e E Ø a matriz nxm, M = [mij], em que:

(cid:40)

mij =

1, quando ej for incidente a vi,
0, caso contrÆrio.

A Figura 2.4 mostra um grafo simples representado por uma matriz de incidŒncia.

e1
1
0
0
1
0

e2
1
0
0
0
1

e3
0
1
0
1
0

e4
0
1
0
0
1

e5
0
0
1
0
1

e6
0
1
1
0
0

v1
v2
v3
v4
v5

Figura 2.4: Grafo simples e Matriz de incidŒncia.

Matrizes de incidŒncia tambØm podem ser usadas para representar grafos com arestas
mœltiplas e la(cid:231)os. As arestas mœltiplas sªo representadas na matriz de incidŒncia usando
colunas como elementos idŒnticos, pois estas arestas sªo incidentes ao mesmo par de
vØrtices. Os la(cid:231)os sªo representados usando uma coluna com exatamente um elemento
igual a 1, correspondendo ao vØrtice que Ø incidente deste la(cid:231)o.

A Figura 2.5 mostra um pseudografo e sua representa(cid:231)ªo por matriz de incidŒncia.

26

e1
1
0
0
0
0

e2
1
1
0
0
0

e3
1
1
0
0
0

e4
0
1
1
0
0

e5
0
0
1
0
1

e6
0
1
0
0
1

e7
0
1
0
1
0

e8
0
0
0
1
0

v1
v2
v3
v4
v5

Figura 2.5: Pseudografo e Matriz de incidŒncia.

2.3 Listas de adjacŒncia

Uma lista de adjacŒncias para um grafo G(V, E) consiste em um vetor Adj com n = |V |
entradas, uma para cada vØrtice do grafo. Cada entrada Adj[v] possui uma lista encadeada
de vØrtices a v em G. A Figura 2.6 mostra um exemplo de grafo nªo direcionado e sua
representa(cid:231)ªo por lista de adjacŒncias.

Figura 2.6: Lista de adjacŒncia.

A lista de adjacŒncia consiste de n elementos (vØrtices) contendo 2m elementos, onde
m Ø o nœmero de arestas do grafo. O espa(cid:231)o utilizado pela lista Ø da ordem de O(n + m).

27

Cap(cid:237)tulo 3

Algoritmos de grafos

Neste Cap(cid:237)tulo veremos alguns procedimentos de busca para resolver problemas com o

aux(cid:237)lio do computador e serªo citados alguns algoritmos.

Os grafos sªo estruturas de dados muito usadas na ciŒncia da computa(cid:231)ªo e seus algo-
ritmos sªo fundamentais nesta Ærea. Muitos problemas sªo de(cid:28)nidos em termos de grafos
e resolvidos com recursos computacionais. Neste cap(cid:237)tulo serªo mostradas algumas dessas
aplica(cid:231)ıes. No cap(cid:237)tulo 2 foi mostrado como um grafo pode ser representado na mÆquina
e agora veremos como resolver problemas utilizando algoritmos.

3.1 Algoritmo de busca

Os algoritmos de busca sªo os procedimentos mais utilizados na teoria de grafos, com
objetivo de mostrar uma sistemÆtica de como caminhar pelos vØrtices e arestas de um
grafo. Para tanto, existem dois mØtodos de busca: DFS - Depth First Search (Busca em
Profundidade) e BFS - Breadth First Search (Busca em Largura).

3.1.1 Algoritmo de busca em profundidade - DFS

A ideia bÆsica da DFS Ø buscar mais (cid:16)fundo(cid:17) no grafo quando poss(cid:237)vel. Este procedi-
mento atende a um critØrio de explorar um vØrtice marcado (ou visitado), dentre os vÆrios
marcados e incidentes a alguma aresta ainda nªo explorada, escolher aquele vØrtice mais
recentemente alcan(cid:231)ado na busca. A lista de espera usada para busca em profundidade
serÆ uma pilha, onde o œltimo que Ø visitado Ø o primeiro a ser (cid:28)nalizado. Um exemplo de
pilha Ø colocar vÆrios livros em uma determinada ordem um sobre outro (formando uma
pilha de livros), para ter acesso a todos os livros, o processo deverÆ come(cid:231)ar pelo œltimo
que entrou na pilha e o œltimo a ser acessado serÆ o primeiro que entrou na pilha.

A ordem de visita(cid:231)ªo das arestas incidentes a um vØrtice depende da ordem em que

seus vizinhos foram inseridos na lista de adjacŒncias, que no caso Ø arbitrÆria.

28

Dado um vØrtice v de um grafo, encontrar o conjunto de todos os vØrtices adjacentes
ligados a v, Ø fazendo uma busca ao vØrtice mais profundo no grafo sempre que poss(cid:237)vel.
As arestas sªo exploradas a partir do vØrtice v, recentemente descoberto, que ainda possui
arestas nªo exploradas partindo dele. Quando todas as arestas adjacentes a v tiverem sido
exploradas, a busca desloca-se para trÆs a (cid:28)m de explorar vØrtices que saem do vØrtice do
qual v foi descoberto. O processo continua atØ que sejam descobertos todos os vØrtices
que sªo alcan(cid:231)Æveis a partir do vØrtice inicial.

O algoritmo a seguir descreve uma busca em profundidade (DFS):

Algoritmo 3.1: Busca em profundidade

i do GRAFO FA˙A

i do GRAFO FA˙A

[ i ] = BRANCO ENTˆO

c o r [ i ] ← BRANCO
p a i [ i ] ← n u l o

1 DFS(GRAFO(V, E) )
2 PARA todo v Ø r t i c e
3
4
5 FIM_PARA
6 Tempo ← 0
7 PARA todo v Ø r t i c e
8
9
FIM−SE
10
11 FIM_PARA

DFS−VISITA ( i )

Se c o r

ComentÆrio: Na linha 2, inicializam-se as variÆveis associadas a cada vØrtice i; em 3 e
4, marca-se i como nªo descoberto (BRANCO) e seu ancestral (pai) como inexistente; jÆ
na linha 6, inicializa-se a variÆvel tempo e examina-se cada vØrtice i do GRAFO; por (cid:28)m,
de 7 a 11, temos um la(cid:231)o que veri(cid:28)ca se todos os vØrtices do grafo foram visitados, caso
contrÆrio visita.

AnÆlise: Nas linhas de 2 a 5 o custo Ø O(|V |). JÆ a linha 6 tem custo O(1). As linhas
de 7 a 11 de DFS gastam O(|V | + |E|), pois conta o tempo de DFS-VISITA que s(cid:243) Ø
chamado uma œnica vez para cada vØrtice BRANCO. DFS-VISITA executa em O(|E|).
Logo, o custo total do algoritmo Ø O(|V | + |E|).

Algoritmo 3.2: DFS-VISITA

i de Adj ( u ) FA˙A

1 DFS−VISITA ( u )
2 c o r [ u ] ← CINZA
3 tempo ← tempo + 1
4 i n i c i o [ u ] ← tempo
5 PARA todo v Ø r t i c e
6
7
8
FIM−SE
9
10 FIM_PARA

p a i [ i ] ← u
DFS−VISITA ( i )

Se c o r [ i ] = BRANCO ENTˆO

29

11 c o r [ u ] ← PRETO
12 tempo ← tempo + 1
13 fim [ u ] ← tempo

A seguir faremos uma aplica(cid:231)ªo da DFS no grafo da Figura 3.1.

Figura 3.1: DFS.

Come(cid:231)amos a busca a partir do vØrtice A, marcando-o como visitado (cinza), e denominan-

do-o de raiz da DFS. TŒm-se dois caminhos a seguir: (A, B) e (A, D), assim, escolhe-se
(A, B) e marca-se B de cinza (visitado), conforme mostra a Figura 3.2.

Figura 3.2: DFS.

A partir de B, tŒm-se duas escolhas: (B, A) e (B, C). Como o vØrtice A jÆ foi visitado,

escolhe-se (B, C) e marca-se C de cinza (visitado), conforme mostra a Figura 3.3.

Figura 3.3: DFS.

30

A partir de C, tŒm-se trŒs escolhas: (C, B), (C, D) e (C, E). O vØrtice B jÆ foi visitado.
Pode-se escolher (C, D) ou (C, E) . Escolhendo (C, D), marca-se D de cinza (visitado),
como mostra a Figura 3.4.

Figura 3.4: DFS.

A partir de D, tŒm-se: (D, C) e (D, A). Os vØrtices D e A jÆ foram visitados, logo,
marca-se D de preto ((cid:28)nalizado). Nota-se que nªo se tem outro vØrtice a explorar, desta
forma, volta-se para o pai de D, que Ø C, como mostra a Figura 3.5.

Figura 3.5: DFS.

A partir de C, tŒm-se: (C, B), (C, D) e (C, E). Os vØrtices B e D jÆ foram visitados.

Entªo escolhe-se (C, E) e marca-se E de cinza (visitado), como mostra a Figura 3.6.

Figura 3.6: DFS.

A partir de E, tŒm-se: (E, C) e (E, F ). O vØrtice C jÆ foi visitado. Assim, escolhe-se

(E, F ) e marca-se F de cinza (visitado), como mostra a Figura 3.7.

31

Figura 3.7: DFS.

A partir de F , nªo tem outra aresta a ser explorada, entªo, marca-se F de preto
((cid:28)nalizado), escreve-se pai de F Ø o vØrtice E e retorna-se ao vØrtice E, conforme mostra
a Figura 3.8.

Figura 3.8: DFS.

A partir de E, nªo tem outra aresta a ser explorada, entªo marca-se E de preto
((cid:28)nalizado), escreve-se que o pai de E Ø o vØrtice C e retorna-se ao vØrtice C, como
mostra a Figura 3.9.

Figura 3.9: DFS.

A partir de C, nªo hÆ outra aresta a ser explorada, entªo, marca-se C de preto ((cid:28)nali-
zado), escreve-se que o pai de C Ø o vØrtice B e retorna-se ao vØrtice B, conforme mostra
a Figura 3.10.

32

Figura 3.10: DFS.

A partir de B, nªo tem outra aresta a ser explorada, entªo, marca-se B de preto
((cid:28)nalizado), escreve-se que o pai de B Ø o vØrtice A e retorna-se ao vØrtice A, conforme
mostra a Figura 3.11.

Figura 3.11: DFS.

A partir de A, nªo tem outra aresta a ser explorada, entªo, marca-se A de preto
((cid:28)nalizado), escreve-se o pai de A como nulo e (cid:28)m do algoritmo, como mostra a Figura
3.12.

Figura 3.12: DFS.

A busca em profundidade procura acessar todos os vØrtices em um grafo G(V, E), onde
o nœmero de vØrtices |V | = V e o nœmero de arestas |E| = E do grafo. Para acessar
todos os poss(cid:237)veis vØrtices Ø varrida a lista de arestas de cada vØrtice com o tempo de
O(|V | + |E|).

33

3.1.2 Algoritmo de busca em largura

Na busca em largura (BFS) os vØrtices do grafo sªo visitados n(cid:237)vel a n(cid:237)vel.
Segundo Cormen [4], dado um grafo G(V, E) e um vØrtice de origem v, a busca em
largura explora as arestas de G atØ todos os vØrtices alcan(cid:231)Æveis a partir de v. AlØm
disso, o algoritmo calcula a menor dist(cid:226)ncia em nœmero de arestas de v atØ todos os
vØrtices acess(cid:237)veis a ele. A busca em largura recebe esse nome porque descobre todos os
vØrtices que estªo a uma dist(cid:226)ncia k de v, antes de descobrir os vØrtices que se encontram
a uma dist(cid:226)ncia k + 1. Neste procedimento, usa-se uma estrutura de (cid:28)la na qual as novas
chegadas sªo inclu(cid:237)das ao (cid:28)m e as sa(cid:237)das tem lugar na frente. Um exemplo Ø a (cid:28)la de um
banco - um novo cliente entra no (cid:28)m da (cid:28)la e os clientes da frente saem dela (cid:224) medida
que um caixa (cid:28)ca livre. A seguir descreveremos um algoritmo para o mØtodo BFS.

Algoritmo 3.3: Busca em largura

i do GRAFO FA˙A

c o r [ i ] ← BRANCO
d _ a r e s t a s [ i ] ← ∞
p a i [ i ] ← n u l o

1 BFS (GRAFO(V, E) , v )
2 PARA todo v Ø r t i c e
3
4
5
6 FIM_PARA
7 d _ a r e s t a s [ v ] ← 0
8 c o r [ v ] ← CINZA
9 FILA ← ∅
10 INSERE( FILA , v )
11 ENQUANTO FILA (cid:54)= ∅ FA˙A
u ← REMOVE( FILA )
12
13 PARA todo v Ø r t i c e
14
15
16
17
18
19
20
21
22 FIM_ENQUANTO

FIM−SE
FIM_PARA
c o r [ u ] ← PRETO

i de Adj ( u ) FA˙A

Se c o r [ i ] = BRANCO ENTˆO

c o r [ i ] ← CINZA
d _ a r e s t a s [ i ] ← d _ a r e s t a s [ u ] + 1
p a i [ i ] ← u
INSERE( FILA , i )

ComentÆrio do algoritmo:
A busca em largura inicializa todos os vØrtices, marcando-os como nªo visitados. A
dist(cid:226)ncia de todos os outros vØrtices (cid:224) origem Ø (cid:16)in(cid:28)nita(cid:17), o que indica que ainda nªo foi
calculada ou que ainda nªo Ø poss(cid:237)vel alcan(cid:231)Æ-la a partir da origem. Essa inicializa(cid:231)ªo
gasta o tempo O(|V |). A medida que os vØrtices vªo sendo descobertos, sªo colocados em
uma (cid:28)la. As opera(cid:231)ıes de inser(cid:231)ªo e remo(cid:231)ªo na (cid:28)la gastam tempo constante, O(1), e
como todos os vØrtices sªo analisados, o tempo total gasto Ø O(|V |). Como cada vØrtice

34

s(cid:243) Ø colocado na (cid:28)la uma vez, sua lista de vizinhos Ø analisada apenas uma vez. Todas as
listas de todos os vØrtices sªo analisadas, gastando o tempo proporcional a O(|E|). Logo,
o tempo de execu(cid:231)ªo da busca em largura Ø O(|V | + |E|).

Considerando o grafo da Figura 3.13 e sua representa(cid:231)ªo por lista de adjacŒncias,
mostra-se que cada aresta tem valor igual a 1. Desta forma, serÆ explorado brevemente
como este procedimento acontece.

Figura 3.13: Lista de adjacŒncia.

Inicialmente, marca-se o vØrtice 1, vØrtice de origem, colocando-o na (cid:28)la com dist(cid:226)ncia
d[1] = 0; em seguida, marcam-se os vØrtices adjacentes de 1, o vØrtice 5 com d[5] = 1 e
o vØrtice 2 com d[2] = 1. Entªo, continua-se a busca dos adjacentes dos vØrtices 5 e 2
que terªo d[4] = d[5] + 1 = 1 + 1 = 2 atØ marcar todos os adjacentes dos vØrtices 5 e
depois todos os adjacentes do vØrtice 2, pois ambos tŒm d[u] = 2. Este processo se repete
atØ o œltimo vØrtice do grafo a ser marcado ou (cid:28)nalizado. TambØm informa o vØrtice de
origem e a dist(cid:226)ncia desse vØrtice para qualquer vØrtice do grafo. No Cap(cid:237)tulo 6, veremos
aplica(cid:231)ıes de busca em largura usando o algoritmo de Dijkstra.

AnÆlise de custo do algoritmo BFS: Nas linhas de 2 a 6, o tempo gasto Ø O(|V |); de
7 a 10 o tempo Ø O(1); e nas linhas de 11 a 22 Ø O(|V | + |E|); logo, o custo total Ø de
O(|V | + |E|).

3.2 Ordena(cid:231)ªo topol(cid:243)gica

Os grafos direcionados sªo usados para indicar precedŒncia entre eventos.
A ordena(cid:231)ªo topol(cid:243)gica de um grafo direcionado ac(cid:237)clico pode ser vista como uma
ordena(cid:231)ªo de seus vØrtices ao longo de uma linha horizontal, de tal forma que todas as
arestas estªo direcionadas da esquerda para direita.

A busca em profundidade pode ser usada para executar ordena(cid:231)ıes topol(cid:243)gicas de
grafos ac(cid:237)clicos orientados. Este processo se desenvolve da seguinte maneira: recebe um

35

grafo orientado ac(cid:237)clico e retorna uma lista ordenada de vØrtices, de modo que, se houver
uma aresta (u, v) no grafo, entªo v aparecerÆ antes de u na lista.

Modela-se um problema, montando uma ordem parcial no conjunto de tarefas, de
modo que, se a e b sªo tarefas e a < b, entªo, b nªo pode come(cid:231)ar atØ que a tenha sido
completada.

De(cid:28)ni(cid:231)ªo 3.2.1. Uma ordena(cid:231)ªo topol(cid:243)gica de um grafo ac(cid:237)clico orientado G = (V, E)
Ø uma ordena(cid:231)ªo linear de todos os vØrtices, tal que se G tiver a aresta (u, v), entªo u
aparece antes de v na ordena(cid:231)ªo.

Se o grafo nªo Ø ac(cid:237)clico, entªo nªo Ø poss(cid:237)vel uma ordena(cid:231)ªo linear. Grafos ac(cid:237)clicos

orientados sªo usados em muitas aplica(cid:231)ıes para indicar precedŒncias entre eventos.

Exemplo: Uma pessoa vai se vestir para ir a uma formatura. Ela deve vestir certas
pe(cid:231)as antes que outras, por exemplo meias antes dos sapatos. Outros itens podem ser
colocados em qualquer ordem. Uma aresta (u, v) indica que a pe(cid:231)a de roupa u deve ser
vestida antes da pe(cid:231)a v. Uma ordena(cid:231)ªo topol(cid:243)gicas desse grafo fornece uma ordem para o
processo de se vestir. Algumas tarefas devem ser realizadas apenas quando outras tiverem
sido termindas.

Pode-se executar uma ordena(cid:231)ªo topol(cid:243)gica no tempo O(|V |+|E|), pois Ø uma aplica(cid:231)ªo

de busca em profundidade.

3.3 Caminho m(cid:237)nimo

O problema do caixeiro-viajante Ø um problema de caminho ponderado m(cid:237)nimo com
fortes restri(cid:231)ıes sobre a natureza do caminho, de modo que, este caminho pode vir a nªo
existir, pois percorre todos os vØrtices e tem que voltar ao vØrtice de origem. No problema
de caminho m(cid:237)nimo, nªo colocamos restri(cid:231)ıes, alØm do peso na natureza do caminho, pois
o grafo deverÆ ser conexo (sempre existe um caminho) e por esta razªo temos algoritmos
e(cid:28)cientes para resolver problemas de caminho m(cid:237)nimo.

O algoritmo de Dijkstra encontra o caminho m(cid:237)nimo em um grafo conexo, com arestas
de pesos nªo negativos. (cid:201) um algoritmo guloso 1. O quadro a seguir apresenta este
algoritmo na forma de pseudoc(cid:243)digo. A entrada Ø uma matriz de adjacŒncia de um
grafo simples conexo com pesos positivos, com o objetivo de encontrar o caminho m(cid:237)nimo
(menor custo) do vØrtice raiz para aos demais vØrtices do grafo.

1 D i j k s t r a (GRAFO(V, E) , w,
2 PARA todo v Ø r t i c e
d [ i ] ← ∞
3

i do GRAFO FA˙A

Algoritmo 3.4: Dijkstra

s )

1(cid:201) o algoritmo que sempre realiza os passos que parecem melhores, baseado apenas em seu conheci-

mento imediato.

36

4 FIM_PARA
5 d [ s ] ← 0
6 S ← ∅
7 Q ← V
8 ENQUANTO Q (cid:54)= ∅ FA˙A
u ← ExtraiMin (Q)
9
S ← S ∪ {u}
10
11 PARA todo v Ø r t i c e
12
13
14
15
16
17 FIM_ENQUANTO

FIM−SE
FIM_PARA

i de Adj ( u ) FA˙A

Se d [ i ] > d [ u ] + w( u , i ) ENTˆO

d [ i ] ← d [ u ] + w( u , i )
p a i [ i ] ← u

Este algoritmo funciona, tambØm, para grafos desconexos, orientados e nªo orientados.
A e(cid:28)ciŒncia do algoritmo: como as dist(cid:226)ncias sªo atualizadas do in(cid:237)cio ao (cid:28)m da
execu(cid:231)ªo, o la(cid:231)o PARA requer O(n) opera(cid:231)ıes, pois veri(cid:28)ca todos os vØrtices. Cada
execu(cid:231)ªo do la(cid:231)o ENQUANTO toma O(n) opera(cid:231)ıes. No pior caso, o œltimo vØrtice a ser
inclu(cid:237)do serÆ executado n − 1 vezes. Portanto, o nœmero total de opera(cid:231)ıes envolvidas no
la(cid:231)o serÆ O(n(n − 1)) = O(n2) opera(cid:231)ıes em seu pior caso.

No œltimo cap(cid:237)tulo serªo resolvidos problemas aplicando este algoritmo.
Um outro algoritmo para obten(cid:231)ªo de caminhos m(cid:237)nimos, a partir de um vØrtice de
origem para outro vØrtice qualquer, Ø o algoritmo de Bellman-Ford, que nªo tem restri(cid:231)ıes
quanto (cid:224)s arestas, pois podem ser de pesos negativos.

3.4 `rvores espalhadas m(cid:237)nimas

Seja G = (V, E) um grafo nªo orientado com um valor real, chamado custo, associado
a cada aresta de G. Uma Ærvore espalhada Ø uma Ærvore que conecta todos os vØrtices
V (G). Formalmente, Ø uma Ærvore da forma K = (V (G), E(cid:48)) onde E(cid:48) ⊆ E. O custo de
uma Ærvore espalhada Ø simplesmente a soma dos custos das suas arestas. O problema Ø
a determina(cid:231)ªo de uma Ærvore espalhada de custo m(cid:237)nimo para G, ou simplesmente, uma
Ærvore espalhada m(cid:237)nima para G. Portanto, as Ærvores espalhadas sªo solu(cid:231)ıes viÆveis
deste problema e o custo da Ærvore espalhada Ø o valor da fun(cid:231)ªo, objetivo que queremos
minimizar. Uma Ærvore espalhada m(cid:237)nima tambØm pode ser chamada de Ærvore minimal
geradora ou simplesmente Ærvore geradora m(cid:237)nima.

Os algoritmos de Kruskal e Prim nos permitem achar uma Ærvore minimal geradora
T de um grafo conexo ponderado G, onde G tem n vØrtices. Cada um deles pode ser
criado com facilidade para executar no tempo O(|E|log|V |). Suas elabora(cid:231)ıes partem
de um algoritmo genØrico e cada um deles utiliza uma regra espec(cid:237)(cid:28)ca. Tanto Kruskal

37

como Prim sªo algoritmos gulosos. Observe, de forma simples, os passos para se aplicar
o algoritmo genØrico que determina uma Ærvore geradoa m(cid:237)nima:

- Algoritmo: A entrada Ø um grafo conexo ponderado G com n vØrtices.

Passo 1. Ordene as arestas de G em ordem decrescente de peso.

Passo 2. Sequencialmente, delete cada aresta que nªo desconecta o grafo atØ que

restem n - 1 arestas.

Passo 3. Saia.

O custo de uma Ærvore minimal Ø œnico, mas a Ærvore nªo Ø. `rvores geradoras minimais

distintas podem ocorrer quando duas ou mais arestas tem o mesmo peso.

Exemplo: Encontrar uma Ærvore minimal geradora do grafo ponderado da Figura

3.14.

Figura 3.14: Grafo ponderado.

Aplicando o algoritmo genØrico: primeiramente, colocam-se as arestas em ordem de-
crescente de peso; em seguida, deletam-se as arestas sem desconectar o grafo atØ que
restem cinco arestas, pois o grafo tem um total de seis vØrtices. Resultam nos seguintes
dados:

Arestas BC AF AC BE CE BF AE DF BD

Peso

8

7

7

7

6

5

4

4

3

Deletar Sim Sim Sim Nªo Nªo Sim Nªo Nªo Nªo

Logo, a Ærvore minimal geradora do grafo obtida contØm as arestas BE, CE, AE, DF ,

BD. A Ærvore minimal geradora tem peso 24 mostrado na Figura 3.15

38

Figura 3.15: `rvore minimal geradora.

TambØm poderia ser usado o algoritmo de Kruskal, cuja aplica(cid:231)ªo serÆ mostrada no

Cap(cid:237)tulo 5. O algoritmo possui a seguinte forma:

Algoritmo 3.5: AGCM-KRUSKAL

i do GRAFO FA˙A

Construa_Conjunto ( i )

1 AGCM−KRUSKAL(G=(V, E) ,w)
2 A ← ∅
3 PARA todo v Ø r t i c e
4
5 FIM_PARA
6 Ordene a s a r e s t a s de E por ordem c r e s c e n t e do p e s o w
7 PARA cada a r e s t a ( u , v ) ∈ E , em ordem c r e s c e n t e FA˙A
8
9
10
11
12 FIM_PARA
13 RETORNE A

A ← A ∪{ ( u , v ) }
Une_arvores ( u , v )

SE Conjunto ( u ) (cid:54)= Conjunto ( v ) ENTˆO

FIM−SE

Funcionamento: primeiro ordenam-se, em ordem crescente, as arestas de G. Considera-
se cada vØrtice de G como pertencendo a um conjunto (Ærvore) em G. O conjunto de todas
as Ærvores Ø uma (cid:29)oresta. A partir da primeira aresta ordenada, pode ser veri(cid:28)cado se os
vØrtices desta aresta pertencem mesma Ærvore. Se nªo pertencem (cid:224) mesma Ærvore, faz-se
a uniªo dos conjuntos, os dois numa mesma Ærvore, caso contrÆrio, passe para o pr(cid:243)ximo
vØrtice. Repete-se o processo atØ que a (cid:29)oresta (cid:28)que com uma œnica Ærvore.

O tempo de execu(cid:231)ªo do algoritmo de Kruskal para um grafo G = (V, E) depende da

implementa(cid:231)ªo de como priorizar as arestas.

O algoritmo gasta o tempo |V | para criar as |V | Ærvores inciais. Entªo ordena as arestas,
gastando O(|E|log|E|) para tal. Cada aresta Ø veri(cid:28)cada uma vez por uniªo das subÆr-
vores, gastando O(|E|). Logo, o tempo total de execu(cid:231)ªo do algoritmo Ø O(|E|log|E|).

Observa(cid:231)ªo: Esses algoritmos sªo executados de forma simples quando o grafo Ø

39

relativamente pequeno. Em grafos com grandes quantidades de vØrtices e arestas serÆ
necessÆrio o uso de algoritmos de buscas ( profundidade ou largura).

40

Cap(cid:237)tulo 4

Planaridade

Neste Cap(cid:237)tulo veremos de(cid:28)ni(cid:231)ıes e aplica(cid:231)ıes de planaridade e colora(cid:231)ªo.

4.1 De(cid:28)ni(cid:231)ıes e aplica(cid:231)ıes

Analise o problema: (cid:201) poss(cid:237)vel ligar trŒs casas a trŒs servi(cid:231)os pœblicos, como mostrado
na Figura 4.1, de modo que nenhuma das conexıes se cruze? Este problema pode ser
modelado por um grafo bipartido completo, K3,3. Nesta se(cid:231)ªo, estudaremos a possibili-
dade de um grafo ser desenhado no plano sem que as arestas se cruzem. TambØm serÆ
respondido o problema das casas e dos servi(cid:231)os.

Figura 4.1: TrŒs casas e trŒs servi(cid:231)os pœblicos.

De(cid:28)ni(cid:231)ªo 4.1.1. Um grafo Ø dito planar se puder ser desenhado no plano sem que suas
aresta se cruzem.

Um grafo desenhado com cruzamentos, pode ser planar se for redesenhado de maneira

diferente, sem cruzamentos. Vejamos alguns exemplos.

41

Exemplo 1: O grafo K4 mostrado na Figura 4.2 Ø planar.

Figura 4.2: O grafo K4.

De fato, grafo K4 Ø planar, pois pode ser desenhado como mostra a Figura 5.3.

Figura 4.3: O grafo K4 redesenhado.

Exemplo 2: O grafo mostrado na Figura 4.4 Ø planar.

Figura 4.4: Grafo.

De fato, pois pode ser desenhado sem cruzamento de arestas como mostra a Figura

4.5.

Figura 4.5: Grafo da Figura 5.4 redesenhado.

42

Exemplo 3: O grafo K3,3 mostrado na Figura 4.6 nªo Ø planar.

Figura 4.6: Grafo K3,3.

De fato, qualquer tentativa de redesenhar o grafo K3,3 no plano sem cruzamento de
arestas falharÆ, pois representando K3,3, os vØrtices v1 e v2 devem estar conectados tanto
a v4 quanto a v5. Esses quatro vØrtices formam uma curva fechada que divide o plano em
duas regiıes, R1 e R2, como mostrado na Figura 4.7(a). O vØrtice v3 pode estar em R1 ou
pode estar em R2. Supondo v3 em R2, o interior da curva fechada, as arestas entre v3 e v4
e entre v3 e v5 separam R2 em duas sub-regiıes, R21 e R22, como mostra a Figura 4.7(b).
Logo, nªo existe nenhuma maneira de colocar v6 sem que haja um cruzamento, pois se v6
estiver em R1, entªo a aresta entre v3 e v6 nªo pode ser tra(cid:231)ada sem cruzamento. Se v6
estiver em R21, entªo a aresta entre v2 e v6 nªo pode ser desenhada sem cruzamento. Se
v6 estiver em R22, entªo a aresta entre v1 e v6 nªo pode ser desenhada sem cruzamento.
E acontece de forma anÆloga se v3 estiver em R1. Desta forma, pode-se concluir que K3,3
nªo Ø planar.

Figura 4.7: Mostrando que K3,3 nªo Ø planar.

O exemplo 3 mostra que no problema das casas e dos servi(cid:231)os nªo se pode ligar os trŒs

servi(cid:231)os (cid:224)s trŒs casas sem que haja cruzamento de conexıes.

O fato de um grafo ser planar desempenha um papel importante no projeto de circuitos
eletr(cid:244)nicos. Podemos modelar um circuito com um grafo que representa os componentes
por vØrtices e as conexıes por arestas. Pode ser impresso um circuito em uma œnica placa
sem nenhum cruzamento de conexıes se o grafo for planar. Se nªo for planar, deve-se

43

optar por op(cid:231)ıes mais caras. Por exemplo, dividir os vØrtices no grafo que representa
o circuito em subgrafos planares. Entªo, construiremos o circuito original usando (cid:28)os
isolados sempre que as conexıes se cruzem, de modo que esse circuito tenha o menor
nœmero poss(cid:237)vel de cruzamentos.

4.2 F(cid:243)rmula de Euler

Euler mostrou que uma representa(cid:231)ªo planar de um grafo divide o plano em regiıes.
Conseguiu isto descobrindo uma rela(cid:231)ªo entre o nœmero de regiıes, o nœmero de vØrtices
e o nœmero de arestas de um grafo planar. A representa(cid:231)ªo planar do grafo na Figura 4.8
divide o plano em seis regiıes.

Figura 4.8: Regiıes da representa(cid:231)ªo planar.

Teorema 4.2.1. (Euler)Seja G um grafo simples, planar e conexo com e arestas e
v vØrtices. Seja r o nœmero de regiıes em uma representa(cid:231)ªo planar de G. Entªo,
r − e + v = 2

Demonstra(cid:231)ªo: Demonstra-se por indu(cid:231)ªo sobre o nœmero de arestas. Toma-se um
grafo conexo qualquer. Se for uma Ærvore, o nœmero e de arestas Ø igual ao nœmero de
vØrtices menos um, entªo temos que r − e + n = 1 − (n − 1) + n = 2. Se houver um
ciclo, retira-se uma aresta dele, logo o grafo (cid:28)ca com uma face a menos; pela hip(cid:243)tese de
indu(cid:231)ªo, a rela(cid:231)ªo vale para um novo grafo. Temos entªo que (r − 1) − (e − 1) + v = 2 e,
portanto, r − e + v = 2.

Para melhor entendimento faremos uma aplica(cid:231)ªo deste teorema.
Exemplo: Suponha que um grafo simples planar tenha 20 vØrtices, cada vØrtice de

grau 3. Em quantas regiıes uma representa(cid:231)ªo deste grafo divide o plano?

Como o nœmero de vØrtices Ø |v| = 20, cada um de grau 3, a soma dos graus dos vØrtices
Ø 3. |v| = 3.20 = 60, duas vezes o nœmero de arestas; temos que 2.e = 60, logo, e = 30.
Usando a f(cid:243)rmula de Euler, o nœmero de regiıes Ø r = e − v + 2 = 30 − 20 + 2 = 12.

A f(cid:243)rmula de Euler pode ser usada para estabelecer algumas desigualdades que devem

ser satisfeitas pelos grafos planares.

44

CorolÆrio 3. Se G Ø um grafo simples planar conexo com e arestas e v vØrtices, em que
v ≥ 3, entªo e ≤ 3.v − 6.

Demonstra(cid:231)ªo: Se contarmos as arestas de cada face f (regiªo), contaremos duas
vezes cada aresta do grafo. Como cada face tem no m(cid:237)nimo 3 arestas (a igualdade valendo
no caso maximal) temos:

Substituindo na f(cid:243)rmula de Euler:

3.f ≤ 2.e

f − e + v = 2
3.r − 3.e + 3.v = 6
2.e − 3.e + 3.v ≥ 6
e ≤ 3.v − 6

Este corolÆrio mostra que K5 nªo Ø planar, pois e = 10 e v = 5, logo nªo obedece
(cid:224) rela(cid:231)ªo e ≤ 3.v − 6 e tem-se que 10 > 3.5 - 6, Ø falsa. Portanto, o K5 nªo Ø planar.
TambØm todos os demais grafos completos com mais do que 4 vØrtices nªo sªo planares.

CorolÆrio 4. Num grafo planar bipartido conexo vale e ≤ 2.v − 4.

Demonstra(cid:231)ªo: Um grafo bipartido s(cid:243) tem ciclos pares. Cada face tem no m(cid:237)nimo

quatro arestas.

Substituindo na f(cid:243)rmula de Euler:

4.f ≤ 2.e

f − e + v = 2
4.r − 4.e + 4.v = 8
2.e − 4.e + 4.v ≥ 8
e ≤ 2.v − 4

Em exemplos anteriores vimos que o K3,3 e K5 nªo sªo grafos planares. E qualquer
grafo que contiver um destes dois grafos como subgrafos, tambØm nªo serÆ planar. Se um
grafo for planar, qualquer grafo obtido da remo(cid:231)ªo de uma aresta {u, v},da adi(cid:231)ªo de um
novo vØrtice w e das arestas {u, w} e {w, v} tambØm serÆ planar. Tal opera(cid:231)ªo Ø chamada
subdivisªo elementar. Dois grafos G1 = (V1, E1) e G2 = (V2, E2) sªo ditos homeomorfos se
eles puderem ser obtidos do mesmo grafo por uma sequŒncia de subdivisıes elementares.

Exemplo: Os grafos G1 e G2 da Figura 4.9 sªo homeomorfos.

45

Figura 4.9: Grafos homeomorfos.

De fato, pois ambos podem ser obtidos de G1 por subdivisıes elementares. G1 pode ser
obtido de si mesmo por uma sequŒncia vazia de subdivisıes elementares. Para obter G2
de G1, podemos usar uma sequŒncia de subdivisıes elementares: (i) remova a aresta {a, c}
e adicione o vØrtice f e as arestas {a, f } e {f, c}; (ii) remova a aresta {b, c} e adicione o
vØrtice g e as arestas {b, g} e {g, c}; (iii) remova a aresta {b, g} e adicione o vØrtice h e as
arestas {g, h} e {b, h}. Logo, G1 e G2 sªo homeomorfos.

Kuratowski 1 estabeleceu o teorema abaixo, que caracteriza os grafos planares usando

conceito de homeomor(cid:28)smo de grafo.

Teorema 4.2.2. Um grafo nªo Ø planar se e somente se ele contiver um subgrafo
homeomorfo a K3,3 ou K5.

Um grafo que contenha um subgrafo homeomorfo a K3,3 ou a K5 nªo Ø planar. Entre-
tanto, a demonstra(cid:231)ªo da rec(cid:237)proca Ø complexa e omitiremos sua demonstra(cid:231)ªo. O leitor
interessado pode consultar [5] e [8] para maiores detalhes.

4.3 Colora(cid:231)ªo de grafos

Um dos problemas mais famosos e conhecidos de teoria dos grafos que desa(cid:28)ou muitos
matemÆticos por muito tempo e que ainda nªo foi resolvido satisfatoriamente, Ø um pro-
blema sobre grafos planares: O problema das quatro cores.

Quando um mapa Ø colorido, duas regiıes com fronteira comum sªo associadas a cores
diferentes, isto garante que duas regiıes adjacentes nunca devem ter a mesma cor. En-
tretanto, um nœmero m(cid:237)nimo de cores deve ser usado sempre que poss(cid:237)vel. Duas regiıes
com apenas um ponto em comum nªo sªo consideradas adjacentes.

Para colorir, com o menor nœmero de cores, o mapa 1 da Figura 4.10, quatro cores
seriam su(cid:28)cientes, mas trŒs cores nªo seriam. Entretanto, no mapa 2, trŒs cores bastariam,
mas duas nªo.

Cada mapa no plano pode ser representado por um grafo, onde cada regiªo do mapa
Ø representado por um vØrtice. As arestas conectam dois vØrtices se as regiıes tiverem

1 MatemÆtico polonŒs.

46

Figura 4.10: Mapas.

uma fronteira em comum. Desta forma, o grafo resultante Ø chamado grafo dual do mapa.
Pela maneira na qual os grafos duais de mapas sªo constru(cid:237)dos, qualquer mapa no plano
tem um grafo dual planar. A Figura 4.11 mostra os grafos duais que correspondem aos
mapas da Figura 4.10.

Figura 4.11: Grafos duais dos mapas da Figura 5.10.

Colorir as regiıes de um mapa Ø equivalente a colorir os vØrtices de um mapa dual, de

modo que dois vØrtices adjacentes nªo tenham a mesma cor.

De(cid:28)ni(cid:231)ªo 4.3.1. Uma colora(cid:231)ªo de um grafo simples Ø a associa(cid:231)ªo de uma cor a cada
vØrtice do grafo, de modo que dois vØrtices adjacentes nªo estejam associados (cid:224) mesma
cor.

De(cid:28)ni(cid:231)ªo 4.3.2. O nœmero cromÆtico de um grafo Ø o menor nœmero de cores necessÆrias
para a colora(cid:231)ªo deste grafo. O nœmero cromÆtico de um grafo G Ø indicado por χ(G).

Teorema 4.3.1. O nœmero cromÆtico de um grafo planar nªo Ø maior do que quatro.

O grafo K4 mostra que 4 cores sªo necessÆrias, mas serªo su(cid:28)cientes? O problema
demorou um sØculo para ser resolvido. Em 1976, Appel, Haken e Koch [11], com o aux(cid:237)lio
do computador mais rÆpido de sua Øpoca, trabalhando mais de 1000 horas e executando
mais do que 1010 opera(cid:231)ıes computacionais, provaram o teorema.

O teorema das quatro cores se aplica apenas a grafos planares, pois grafos nªo plana-
res podem ter nœmeros cromÆticos arbitrariamente grandes, como mostrado no segundo
exemplo a seguir.

47

Duas coisas sªo necessÆrias para mostrar que o nœmero cromÆtico de um grafo Ø K.
1o) Precisamos mostrar que o grafo pode ser colorido com K cores. Isso pode ser feito

construindo tal colora(cid:231)ªo.

2o) Devemos mostrar que o grafo nªo pode ser colorido usando menos que K cores.
Os exemplos a seguir ilustram como nœmeros cromÆticos podem ser encontrados.
Exemplo 1: Qual Ø o nœmero cromÆtico do grafo mostrado na Figura 4.12?

Figura 4.12: Grafos simples.

O nœmero cromÆtico do grafo Ø pelo menos igual a 3, pois os vØrtices a, b e c devem ter
cores diferentes. Para ver se o grafo pode ser colorido com trŒs cores, associamos vermelho
a a, azul a b e verde a c. Entªo, d pode ser colorido de vermelho, pois Ø adjacente a b
e c. AlØm disso, e pode ser colorido de verde, pois Ø adjacente apenas a vØrtices de cor
vermelha e azul, e f pode ser colorido de azul, pois Ø adjacente apenas a vØrtices colorido
de vermelho e verde. Finalmente, g pode ser colorido de vermelho, pois Ø adjacente apenas
a vØrtices coloridos de azul e verde. Este grafo nªo pode ser colorido apenas com duas
cores. Portanto, o nœmero cromÆtico desse grafo Ø igual a 3, como mostra a colora(cid:231)ªo da
Figura 4.13

Figura 4.13: Colora(cid:231)ªo da Figura 5.12.

Exemplo 2: Qual Ø o nœmero cromÆtico de Kn?
Uma colora(cid:231)ªo de Kn pode ser constru(cid:237)da usando n cores, associando uma cor diferente
a cada vØrtice, pois nªo podemos usar menos cores, porque nenhum par de vØrtices pode

48

estar associado (cid:224) mesma cor e no Kn quaisquer dois vØrtices sªo adjacentes. Logo, o
nœmero cromÆtico χ(Kn) = n.

Observa(cid:231)ªo: O grafo Kn nªo Ø planar, pois quando n ≥ 5 contradiz o teorema das

quatro cores. Veja, como exemplo, na Figura 4.14 uma colora(cid:231)ªo do grafo K5.

Figura 4.14: Colora(cid:231)ªo do K5.

Exemplo 3: Qual Ø o nœmero cromÆtico do grafo bipartido completo Km,n em que m

e n sªo inteiros positivos?

Aparentemente esse nœmero depende de m e n. Apenas duas cores sªo necessÆrias,

pois Km,n Ø bipartido.

Os melhores algoritmos conhecidos para determinar o nœmero cromÆtico de um grafo
tŒm complexidade no tempo exponencial no pior caso. Mesmo para encontrar uma apro-
xima(cid:231)ªo para o nœmero cromÆtico de um grafo Ø uma tarefa dif(cid:237)cil. [8]

49

Cap(cid:237)tulo 5

Aplica(cid:231)ıes

Neste Cap(cid:237)tulo resolveremos alguns problemas clÆssicos para encontrar caminho/custo

m(cid:237)nimos e alguns problemas de colora(cid:231)ªo.

5.1 Caminho m(cid:237)nimo

5.1.1 Problema 1

Deseja-se encontrar o caminho m(cid:237)nimo da cidade A para as demais cidades B, C, D, E
e F, de modo que os caminhos existentes entre as cidades com suas respectivas dist(cid:226)ncias,
em quil(cid:244)metros, estªo sendo indicadas no grafo da Figura 5.1.

Figura 5.1: Grafo das cidades interligadas.

O algoritmo de Dijkstra visto no Cap(cid:237)tulo 3, Se(cid:231)ªo 3.3 lŒ: S = {}, o conjunto que
guardarÆ os vØrtices (cid:28)nalizados, V = {A, B, C, D, E, F }, o conjunto de todos os vØrtices
do grafo e todas as arestas com seus respectivos pesos w. Atribui as dist(cid:226)ncias: d[A] = 0
para o vØrtice de origem e aos demais, dist(cid:226)ncias d[B] = d[C] = d[D] = d[E] = d[F ] = ∞.
A execu(cid:231)ªo da itera(cid:231)ªo Ø visualizada como mostra a tabela e a Figura 5.2.

50

VØrtices A B C D E F
0 ∞ ∞ ∞ ∞ ∞
dist(cid:226)ncia
...
...
pai
...
...
(cid:28)naliza

...
...

...
...

...
...

...
...

Figura 5.2: Tabela e grafo do problema 1.

Entra no la(cid:231)o ENQUANTO : guarda (ou (cid:28)naliza) em S, o vØrtice de menor dist(cid:226)ncia

com seu respectivo pai (anterior a ele).

menor dist(cid:226)ncia: d[A]=0; pai[A]= nulo; A foi (cid:28)nalizado
S ={ A} e V ={B, C, D, E e F}. (Figura 5.3)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A
B C D E F
0 ∞ ∞ ∞ ∞ ∞
...
...

nulo
...
sim ...

...
...

...
...

...
...

Figura 5.3: Tabela e grafo do problema 1.

Entra no la(cid:231)o PARA: atualiza as dist(cid:226)ncias dos vØrtices adjacentes ao vØrtice (cid:28)na-

lizado, atØ que o conjunto V seja vazio, fazendo:

- Para todo adj[A], tem-se:
d[B] = (d[A] + w(A, B) = 0 + 6 = 6 ; pai[B]= A

51

d[C] = (d[A] + w(A, C) = 0 + 3 = 3; pai[C]= A
Guarda menor dist(cid:226)ncia: d[C]=3; pai[C]= A; C foi (cid:28)nalizado
S ={ A, C} e V ={B, D, E e F}. (Figura 5.4)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

6

A

0

B C D E F
3 ∞ ∞ ∞
...
...

nulo A A ...
sim ...
sim ...

...
...

Figura 5.4: Tabela e grafo do problema 1.

- Para todo adj[C], tem-se:
d[B] = (d[C] + w(C, B) = 3 + 2 = 5 < d[B] = 6; atualiza d[B]=5; pai[B]=C
d[E] = (d[C] + w(C, E) = 3 + 10 = 13; pai[E]=C. (Figura 5.5)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

0

5

A

B C D E F
3 ∞ 13 ∞
nulo C A ... C ...
...
sim ...
sim ...

...

Figura 5.5: Tabela e grafo do problema 1.

d[B] = (d[C] + w(C, B) = 5; pai[B]=C
d[E] = (d[C] + w(C, E) = 13; pai[E]=C

52

Guarda menor dist(cid:226)ncia: d[B]=5; pai[B]= C; B foi (cid:28)nalizado
S ={ A, ,B, C} e V ={D, E e F}. (Figura 5.6)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A

B

0

5
nulo C
sim sim sim

C D E F
3 ∞ 13 ∞
A ... C ...
...

...

Figura 5.6: Tabela e grafo do problema 1.

- Para todo adj[B], tem-se:
d[D] = (d[B] + w(B, D) = 5 + 6 = 11; pai[D] = B
d[E] = (d[B] + w(B, E) = 5 + 9 = 14 > d[E] = 13; mantØm d[E] anterior pois Ø menor.
Guarda menor dist(cid:226)ncia: d[D] = 11; pai[D] = B; D foi (cid:28)nalizado.
S ={ A, ,B, C, D} e V ={E, F}. (Figura 5.7)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A

B

C

0

3
5
nulo C
A
sim sim sim sim ...

11
B

D E F
13 ∞
C ...
...

Figura 5.7: Tabela e grafo do problema 1.

53

- Para todo adj[D], tem-se:

d[E] = (d[D] + w(D, E) = 11 + 3 = 14 > d[E] = 13; mantØm d[E] anterior pois Ø

menor.

d[F ] = (d[D] + w(D, F ) = 11 + 7 = 18; pai[F ] = D
Guarda menor dist(cid:226)ncia: d[E] = 13; pai[E] = C; E foi (cid:28)nalizado.
S ={ A, ,B, C, D, E} e V ={F}. (Figura 5.8)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A

B

C

D

E

F

0

18
5
D
nulo C
sim sim sim sim sim ...

13
C

11
B

3
A

Figura 5.8: Tabela e grafo do problema 1.

- Para todo adj[E], tem-se:
d[F ] = (d[E] + w(E, F ) = 13 + 4 = 17 < d[F ] = 18. atualiza d[F ]. (Figura 5.9)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A

B

C

D

E

F

0

17
5
E
nulo C
sim sim sim sim sim sim

13
C

11
B

3
A

Figura 5.9: Tabela e grafo do problema 1.

54

Guarda menor dist(cid:226)ncia: d[F]= 17; pai[F]= E; F foi (cid:28)nalizado.
S ={ A, ,B, C, D, E, F} e V ={ }. Como todos os vØrtices foram (cid:28)nalizados,
encontramos a tabela abaixo, com a dist(cid:226)ncia do vØrtice de origem A aos demais vØrtices,
indicando seus pais. (Figura 5.10)

VØrtices
dist(cid:226)ncia
pai
(cid:28)naliza

A

B

C

D

E

F

0

17
5
nulo C
E
sim sim sim sim sim sim

13
C

11
B

3
A

Figura 5.10: Tabela e grafo do problema 1.

5.1.2 Problema 2

Em certa cidade, os bairros: A, B, C, D, E, F, G, H, I, J, K, L, estªo ligados entre si
como mostra o grafo da Figura 5.11, com suas respectivas dist(cid:226)ncias em quil(cid:244)metros. O
prefeito resolveu asfaltar uma œnica rua que ligue dois bairros quaisquer, pois nªo dava
para asfaltar todas as ruas da cidade. Para isso, queria encontrar a menor quantidade de
asfalto a ser usada, de forma que duas cidades estejam ligadas por uma rua asfaltada.

55

Figura 5.11: Grafo modelando os bairros de uma cidade.

O problema serÆ resolvido usando o algoritmo de Kruskal visto no Cap(cid:237)tulo 3, Se(cid:231)ªo 3.4,
pois determina o custo total m(cid:237)nimo. O algoritmo de Kruskal, primeiramente, constr(cid:243)i
uma (cid:29)oresta onde cada Ærvore Ø composta de um œnico vØrtice do grafo, depois ordena as
arestas em ordem crescente de pesos w como mostra a tabela a seguir.
Floresta: {{A},{B},{C},{D},{E},{F},{G},{H},{I},{J},{K},{L}}.
A tabela abaixo mostra as arestas ordenadas em ordem crescente, com seus respectivos

pesos, mostrados no grafo da Figura 5.11.

3

4

1

2

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

peso
insere

3
...

3
...

3
...

3
...

3
...

3
...

2
...

1
...

1
...

1
...

2
...

11

10

12

7

8

9

5

Entra no la(cid:231)o PARA: veri(cid:28)ca cada aresta ordenada, se os vØrtices, que sªo extremos
dela, estªo na mesma Ærvore. Se nªo estiver, faz a uniªo das duas Ærvores, caso contrÆrio,
passa para a pr(cid:243)xima aresta, atØ que a (cid:29)oresta tenha uma œnica Ærvore.
Isso garante
custo m(cid:237)nimo total.

O procedimento acontece da seguinte forma:

Dada a (cid:29)oresta:
{{A},{B},{C},{D},{E},{F},{G},{H},{I},{J},{K},{L}}.
A execu(cid:231)ªo da itera(cid:231)ªo Ø visualizada como mostra tabela e a Figura 5.12.

56

3

1

2

4

ordem
13
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

peso
insere

3
...

3
...

3
...

2
...

3
...

3
...

3
...

1
...

2
...

1
...

1
...

11

10

12

5

8

9

7

Figura 5.12: Tabela e grafo do problema 2.

1 - Os vØrtices C e D estªo na mesma Ærvore? Nªo, entªo C e D (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.13).

Figura 5.13: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A},{B},{C,D},{E},{F},{G},{H},{I},{J},{K},{L}}.

3

2

1

4

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

1
1
sim ...

peso
insere

3
...

3
...

3
...

3
...

3
...

2
...

3
...

1
...

2
...

11

10

12

9

5

8

7

57

2 - Os vØrtices B e F estªo na mesma Ærvore? Nªo, entªo B e F (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.14).

Figura 5.14: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A},{B,F},{C,D},{E},{G},{H},{I},{J},{K},{L}}.

3

2

1

4

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

1
1
1
sim sim ...

peso
insere

2
...

3
...

3
...

3
...

3
...

3
...

3
...

2
...

10

12

11

7

9

8

5

3 - Os vØrtices K e L estªo na mesma Ærvore? Nªo, entªo K e L (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.15).

Figura 5.15: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A},{B,F},{C,D},{E},{G},{H},{I},{J},{K,L}}.

58

2

1

4

3

ordem
13
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

1
2
sim sim sim ...

peso
insere

3
...

3
...

3
...

3
...

3
...

3
...

2
...

11

12

10

7

9

8

5

1

1

4 - Os vØrtices A e B estªo na mesma Ærvore? Nªo, entªo A e B (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.16).

Figura 5.16: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,F},{C,D},{E},{G},{H},{I},{J},{K,L}}.

2

1

4

3

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
2
3
...
...

1
2
1
sim sim sim sim ...

peso
insere

3
...

3
...

3
...

3
...

3
...

3
...

11

10

12

8

2

9

1

5

7

5 - Os vØrtices C e G estªo na mesma Ærvore? Nªo, entªo C e G (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.17).

Figura 5.17: Tabela e grafo do problema 2.

59

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,F},{C,D,G},{E},{H},{I},{J},{K,L}}.

2

3

1

4

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
1
3
2
...
sim sim sim sim sim ...

peso
insere

3
...

3
...

3
...

3
...

3
...

3
...

12

11

10

2

1

2

1

5

7

8

9

6 - Os vØrtices F e J estªo na mesma Ærvore? Nªo, entªo F e J (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.18).

Figura 5.18: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,F,J},{C,D,G},{E},{H},{I},{K,L}}.

2

3

4

1

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
3
2
sim sim sim sim sim sim ...

peso
insere

3
...

3
...

3
...

3
...

3
...

12

11

10

2

1

1

8

7

5

9

7 - Os vØrtices H e L estªo na mesma Ærvore? Nªo, entªo H e L (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.19).

60

Figura 5.19: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,F,J},{C,D,G},{E},{H,K,L},{I}}.

2

1

3

4

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
3
sim sim sim sim sim sim sim ...

peso
insere

3
...

3
...

3
...

3
...

12

10

11

5

9

8

7

3

1

2

1

2

8 - Os vØrtices J e K estªo na mesma Ærvore? Nªo, entªo J e K (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.20).

Figura 5.20: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,F,H,J,K,L},{C,D,G},{E},{I}}.

3

1

4

2

13
6
ordem
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
3
2
sim sim sim sim sim sim sim sim ...

peso
insere

3
...

3
...

3
...

10

11

12

1

1

2

3

9

5

8

7

3

61

9 - Os vØrtices F e G estªo na mesma Ærvore? Nªo, entªo F e G (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.21).

Figura 5.21: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,C,D,F,G,H,J,K,L},{E},{I}}.

4

3

2

1

ordem
13
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

3
1
sim sim sim sim sim sim sim sim sim ...

peso
insere

3
...

3
...

12

11

10

1

1

2

3

2

3

9

7

5

8

3

10 - Os vØrtices G e H estªo na mesma Ærvore? Sim, lŒ pr(cid:243)ximos vØrtices. Nªo altera

a Floresta e atualiza a tabela.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,C,D,F,G,H,J,K,L},{E},{I}}.

2

1

3

4

ordem
13
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
sim sim sim sim sim sim sim sim sim nªo

peso
insere

3
...

3
...

11

12

10

1

3

7

1

2

9

2

3

8

3

5

3

11 - Os vØrtices I e J estªo na mesma Ærvore? Nªo, entªo I e J (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.22).

62

Figura 5.22: Tabela e grafo do problema 2.

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,C,D,F,G,H,I,J,K,L},{E}}.

4

3

1

2

13
ordem
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
sim sim sim sim sim sim sim sim sim nªo

3
3
sim ...

peso
insere

12

10

11

9

8

2

1

3

2

1

3

0

7

5

3

12- Os vØrtices B e C estªo na mesma Ærvore? Sim, lŒ pr(cid:243)ximos vØrtices. Nªo altera a

Floresta e atualiza a tabela.

1

3

4

2

13
ordem
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
sim sim sim sim sim sim sim sim sim nªo

3
sim nªo

peso
insere

10

11

12

0

2

2

3

3

5

7

8

9

3

1

1

3

Dada a nova (cid:29)oresta e tabela atualizada:
{{A,B,C,D,F,G,H,I,J,K,L},{E}}.

3

2

1

4

13
ordem
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
...

1
sim sim sim sim sim sim sim sim sim nªo

3
sim nªo

peso
insere

12

10

11

1

1

2

5

8

3

9

2

0

0

7

3

3

13- Os vØrtices A e E estªo na mesma Ærvore? Nªo, entªo A e E (cid:28)cam na mesma Ærvore

(faz-se a uniªo dos dois conjuntos). (Figura 5.23).

63

Figura 5.23: Tabela e grafo do problema 2.

14 - Como temos uma œnica Ærvore na (cid:29)oresta, nªo serÆ poss(cid:237)vel inserir nenhum dos
demais vØrtices, pois neste caso um ciclo serÆ. Temos o custo m(cid:237)nimo total somando
as arestas inseridas, que Ø igual a 27 quil(cid:244)metros de asfalto, mostrado na Figura 5.24.
{{A,B,C,D,E,F,G,H,I,J,K,L}}.

4

3

1

2

ordem
13
6
arestas CD BF KL AB CG F J HL JK F G GH IJ BC AE
3
2
sim

1
sim sim sim sim sim sim sim sim sim nªo

3
sim nªo

peso
insere

10

12

11

3

2

1

8

9

0

7

0

2

5

3

3

1

Figura 5.24: Tabela e grafo do problema 2.

5.1.3 Problema 3

Encontrar o caminho m(cid:237)nimo do vØrtice A (origem) em rela(cid:231)ªo aos demais vØrtices do

grafo do problema 2. (Figura 5.11)

Aplicando o algoritmo de Dijkstra:
LŒ todos os vØrtices: o vØrtice de origem A com d[A] = 0 e os demais vØrtices inicializam
com d[v] = ∞. TambØm, lŒ todas as arestas do grafo com seus respectivos pesos w.
(Figura 5.25)

64

Figura 5.25: Grafo modelando os bairros de uma cidade.

VØrtices
Dist(cid:226)ncias
pai
Finaliza

J K L
A B C D E F G H I
0 ∞ ∞ ∞ ∞ ∞ ∞ ∞ ∞ ∞ ∞ ∞
...
...
...
...

...
...

...
...

...
...

...
...

...
...

...
...

...
...

...
...

...
...

...
...

Finaliza o vØrtice A (menor dist(cid:226)ncia); como Ø o vØrtice de origem, seu pai Ø nulo.

(Figura 5.26)

S ={ A} e V ={B, C, D, E, F, G, H, I, J, K, L}.

Figura 5.26: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de A:
d[B] = (d[A] + w(A, B) = 0 + 2 = 2; pai[B]=A
d[E] = (d[A] + w(A, E) = 0 + 3 = 3; pai[E]=A

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

0

J K L
B C D E F G H I
2 ∞ ∞ 3 ∞ ∞ ∞ ∞ ∞ ∞ ∞
...
...
...
...

... A ...
...
...
...

...
...

...
...

...
...

...
...

nulo A ...
...
sim ...

65

Guarda menor dist(cid:226)ncia: d[B]=2; pai[B]= A; B foi (cid:28)nalizado. (Figura 5.27)
S ={ A, B} e V ={C, D, E, F, G, H, I, J, K, L}.

Figura 5.27: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de B:
d[C] = (d[B] + w(B, C) = 2 + 3 = 5; pai[C]=B
d[F ] = (d[B] + w(B, F ) = 2 + 1 = 3; pai[F]=B

A

0

VØrtices
Dist(cid:226)ncias
pai
Finaliza

B C D E F G H I

2

5 ∞ 3

nulo A B ... A B ...
...
sim sim ...

...

...

...

J K L
3 ∞ ∞ ∞ ∞ ∞ ∞
...
...
...
...

...
...

...
...

...
...

Guarda menor dist(cid:226)ncia: d[E] = 3; pai[E]= A; E foi (cid:28)nalizado. (Figura 5.28)
S ={ A, B, E} e V ={C, D, F, G, H, I, J, K, L}.

Figura 5.28: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de E:
d[F ] = (d[E] + w(E, F ) = 3 + 4 = 7 > d[F ] = 3; pai[F]= E (nªo atualiza).
d[I] = (d[E] + w(E, I) = 3 + 4 = 7; pai[I]= E

66

A

0

VØrtices
Dist(cid:226)ncias
pai
Finaliza

B C D E F G H I

2

5 ∞ 3

nulo A B ... A B ...
...
...
sim sim ...

sim ...

J K L
3 ∞ ∞ 7 ∞ ∞ ∞
...
... E ...
...
...
...
...

...
...

Figura 5.29: Grafo modelando os bairros de uma cidade.

Guarda menor dist(cid:226)ncia: d[F] = 3; pai[F]= B ; F foi (cid:28)nalizado. (Figura 5.29)
S ={ A, B, E, F} e V ={C, D, G, H, I, J, K, L}.

- Para todo adjacente de F:
d[G] = (d[F ] + w(F, G) = 3 + 3 = 6; pai[G]= F
d[J] = (d[F ] + w(F, J) = 3 + 2 = 5; pai[J]= F

VØrtices
Dist(cid:226)ncias
pai
Finaliza

0

2

A

B C D E
5 ∞ 3
nulo A B ... A
sim sim ...

F G H I
6 ∞ 7
F ... E F ...
...
...

J K L
5 ∞ ∞
...
...

3
B
sim sim ...

...

...

...

Guarda menor dist(cid:226)ncia: d[C] = 5; pai[C]= B; C foi (cid:28)nalizado. (Figura 5.30)
S ={ A, B, C, E, F} e V ={D, G, H, I, J, K, L}.

Figura 5.30: Grafo modelando os bairros de uma cidade.

67

- Para todo adjacente de C:
d[D] = (d[C] + w(C, D) = 5 + 1 = 6; pai[D]= C
d[G] = (d[C] + w(C, G) = 5 + 2 = 7 > d[G] = 6; (nªo atualiza)

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C D E

0

2
nulo A
sim sim sim ...

5
B

6
3
C A

F G H I
6 ∞ 7
F ... E F ...
...
...

J K L
5 ∞ ∞
...
...

3
B
sim sim ...

...

...

Guarda menor dist(cid:226)ncia: d[J] = 5; pai[J]= F; J foi (cid:28)nalizado. (Figura 5.31)
S ={ A, B, C, E, F, J} e V ={D, G, H, I, K, L}.

Figura 5.31: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de J:
d[I] = (d[J] + w(J, I) = 5 + 3 = 8 > d[I] = 7; (nªo atualiza)
d[K] = (d[J] + w(J, K) = 5 + 3 = 8; pai[K]=J (nªo atualiza)

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C D E

0

2
nulo A
sim sim sim ...

5
B

6
3
C A

F G H I
6 ∞ 7
F ... E
...
...

3
B
sim sim ...

J K L
8 ∞
5
...
F
J
...
sim ...

Guarda menor dist(cid:226)ncia: d[D] = 5; pai[D]= F; D foi (cid:28)nalizado. (Figura 5.32)
S ={ A, B, C, E, D, F, J} e V ={G, H, I, K, L}.

68

Figura 5.32: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de D:
d[H] = (d[D] + w(D, H) = 5 + 5 = 10; pai[H]=D

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C

D

E

F G H I

0

6
2
C
nulo A
sim sim sim sim sim sim ...

6
7
10
F D E
...
...

3
A

3
B

5
B

J K L
8 ∞
5
...
J
F
...
sim ...

Guarda menor dist(cid:226)ncia: d[G] = 6; pai[G]= F; G foi (cid:28)nalizado. (Figura 5.33)
S ={ A, B, C, E, D, F, G, J} e V ={H, I, K, L}.

Figura 5.33: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de G:
d[H] = (d[G] + w(G, H) = 6 + 3 = 9 < d[H] = 10; pai[H]= G (atualiza d[H] e pai[H]).
d[K] = (d[G] + w(G, K) = 5 + 4 = 9 > d[K] = 8; (mantŒm d[K])

69

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C

D

E

F

G H I

0

2
nulo A
sim sim sim sim sim sim sim ...

7
9
6
F G E
...

3
A

6
C

3
B

5
B

J K L
8 ∞
5
...
F
J
...
sim ...

Figura 5.34: Grafo modelando os bairros de uma cidade.

Guarda menor dist(cid:226)ncia: d[I] = 7; pai[I]= E; D foi (cid:28)nalizado. (Figura 5.34)
S ={ A, B, C, E, D, F, ,G, I, J} e V ={H, K, L}.

- Para todo adjacente de I:
Nªo hÆ o que atualizar, pois todos os vØrtices adjacentes ao vØrtice I, foram alcan(cid:231)ados

e (cid:28)nalizados.

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C

D

E

F

G H I

0

2
nulo A
sim sim sim sim sim sim sim ...

6
7
9
F G E

3
A

6
C

5
B

3
B

J K L
8 ∞
5
...
J
F
...
sim sim ...

Guarda menor dist(cid:226)ncia: d[K] = 8; pai[K]= J; K foi (cid:28)nalizado. (Figura 5.35)
S ={ A, B, C, E, D, F, I, J, K} e V ={H, L}.

Figura 5.35: Grafo modelando os bairros de uma cidade.

70

- Para todo adjacente de K:
d[L] = (d[K] + w(K, L) = 8 + 1 = 9; pai[L]= K.

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C

D

E

F

G H I

J

K L

0

2
nulo A
sim sim sim sim sim sim sim ...

6
7
9
F G E

8
9
J K
sim sim sim ...

3
A

6
C

5
B

3
B

5
F

Guarda menor dist(cid:226)ncia: d[H] = 9; pai[H]= G; H foi (cid:28)nalizado. (Figura 5.36)
S ={ A, B, C, E, D, F, ,G, ,H, I, J, K} e V ={L}.

Figura 5.36: Grafo modelando os bairros de uma cidade.

- Para todo adjacente de H:
Nªo hÆ o que atualizar, pois todos os vØrtices adjacentes ao vØrtice H, foram alcan(cid:231)ados

e (cid:28)nalizados. (Figura 5.37)

VØrtices
Dist(cid:226)ncias
pai
Finaliza

A

B

C

D

E

F

G

H

I

J

K L

0

8
9
2
nulo A
J K
sim sim sim sim sim sim sim sim sim sim sim ...

9
G

3
A

6
C

5
B

3
B

7
E

6
F

5
F

Guarda menor dist(cid:226)ncia: d[L] = 9; pai[L]= K; L foi (cid:28)nalizado.
S ={ A, B, C, E, D, F, ,G, H, I, J, K, L} e V ={ }.

71

Figura 5.37: Grafo modelando os bairros de uma cidade.

A

B

C

D

E

F

G

H

I

J

K

L

0

9
2
K
nulo A
sim sim sim sim sim sim sim sim sim sim sim sim

9
G

3
A

6
C

5
B

3
B

7
E

5
F

6
F

8
J

VØrtices
Dist(cid:226)ncias
pai
Finaliza

O caminho m(cid:237)nimo, partindo do vØrtice A (origem) para qualquer outro vØrtice do

grafo estÆ destacado na Figura 5.38.

Figura 5.38: Caminho m(cid:237)nimo de A para todos os vØrtices.

72

5.2 Colora(cid:231)ªo

A colora(cid:231)ªo de grafos tem diversas aplica(cid:231)ıes a problemas que envolvem planejamento
de cronogramas e distribui(cid:231)ıes. Nos problemas seguintes, serªo mostradas algumas apli-
ca(cid:231)ıes de colora(cid:231)ªo.

5.2.1 Problema 1

Como os exames (cid:28)nais, em uma universidade, podem ser marcados de modo que ne-

nhum estudante tenha dois exames ao mesmo tempo.

Modelando a situa(cid:231)ªo problema para um grafo, temos os vØrtices representando cursos
e as arestas entre dois vØrtices, se existir, representando um aluno comum aos cursos.
Cada posi(cid:231)ªo na grade horÆria para um exame (cid:28)nal Ø representada por uma cor diferente.
Suponha que existam sete exames (cid:28)nais a serem marcados e que as disciplinas estejam
numeradas de 1 a 7 e que os seguintes pares de disciplinas tenham estudantes em comum:
1 e 2, 1 e 3, 1 e 4, 1 e 7, 2 e 3, 2 e 4, 2 e 5, 2 e 7, 3 e 4, 3 e 6, 3 e 7, 4 e 5, 4 e 6, 5 e 6, 5 e
7, 6 e 7. O grafo da Figura 5.39 representa o grafo dos exames (cid:28)nais.

Figura 5.39: HorÆrio dos exames (cid:28)nais.

Um horÆrio consiste em uma colora(cid:231)ªo do grafo. Pode-se veri(cid:28)car que o nœmero cro-
mÆtico deste grafo Ø 4 ou sªo necessÆrias quatro posi(cid:231)ıes na grade horÆria. Logo, uma
colora(cid:231)ªo do grafo e o horÆrio associado estªo mostrados na Figura 5.40.

73

Figura 5.40: Colora(cid:231)ªo para marcar os exames (cid:28)nais.

5.2.2 Problema 2

Uma companhia industrial deseja armazenar sete produtos farmacŒuticos C1, C2, C3,
C4, C5, C6 e C7, mas alguns nªo pode ser armazenados juntos por motivos de seguran(cid:231)a.
A tabela seguinte mostra os produtos que nªo podem estar no mesmo local. Encontrar o
nœmero m(cid:237)nimo de locais necessÆrios para armazenar estes produtos.

C1 C2 C3 C4 C5 C6 C7
x

x

x

x
x

x

x
x

x

x
x

x
x

x
x

x
x

x
x

x
x

x

x
x

C1
C2
C3
C4
C5
C6
C7

Os produtos serªo representados por vØrtices e nªo podem ser armazenados juntos por
arestas no grafo. Faz-se a colora(cid:231)ªo com o m(cid:237)nimo de cores poss(cid:237)veis, que sªo quatro
cores, e tem-se uma das solu(cid:231)ıes na (cid:28)gura 5.41.

74

Figura 5.41: Colora(cid:231)ªo do grafo.

Uma op(cid:231)ªo de armazenar os produtos serÆ: C1, C2C5, C3C6 e C4C7.

5.2.3 Problema 3

A heran(cid:231)a do califa de Bagdad
HÆ muitos anos atrÆs, o califa de Bagdad tinha quatro (cid:28)lhos e tinha muito gosto por
eles. Para cada (cid:28)lho mandou construir um palÆcio. O (cid:28)lho mais velho, Abdul, (cid:28)cou com
o terreno 1, Budal com o terreno 2, Cadaf com o terreno 3 e Dubal com o terreno 4, como
mostrado no mapa da Figura 5.42.

Figura 5.42: Mapa das terras do califa de Bagdad.

Antes de morrer, fez um testamento com indica(cid:231)ıes de como deveriam ser distribu(cid:237)das
suas ricas terras, num total de 20. Cada (cid:28)lho (cid:28)caria com o terreno onde tinha seu palÆcio.
Abdul, herdaria tambØm o terreno 9, onde (cid:28)cava situado o palÆcio do califa. Os outros

75

terrenos seriam distribu(cid:237)dos de modo que, no (cid:28)nal, cada (cid:28)lho (cid:28)casse com 5 terrenos. Mas
imp(cid:244)s uma condi(cid:231)ªo a cada um dos (cid:28)lhos: os seus 5 terrenos nªo poderiam ter fronteiras
comuns. Por exemplo, Cadaf nªo podia (cid:28)car com o terreno 19. Como esses irmªos fariam
a divisªo das terras entre si?

A divisªo das terras serÆ feita por colora(cid:231)ªo das faixas de terras, como mostra a Figura

5.43

Figura 5.43: Colora(cid:231)ªo do mapa dos terrenos.

76

Considera(cid:231)ıes Finais

Neste trabalho elaboramos um texto introdut(cid:243)rio relativo ao estudo dos grafos que
pode ser utilizado por alunos do ensino mØdio/pro(cid:28)ssionalizante. Para tanto, mostramos
os conceitos bÆsicos da referida teoria e sua aplica(cid:231)ªo na modelagem e resolu(cid:231)ıes de pro-
blemas bem como sua representa(cid:231)ªo no computador. Esses conceitos foram apresentados
por meio de exemplos, de forma que mesmo um leigo no assunto consiga entender/iden-
ti(cid:28)car quando e como usar grafos na resolu(cid:231)ªo de problemas.

Fizeram-se abordagens a problemas considerados clÆssicos na teoria dos grafos, como
o problema das Pontes de Konigsberg que prova que nªo Ø poss(cid:237)vel caminhar por todas as
pontes uma œnica vez e voltar ao ponto inicial; o problema das TrŒs Casas e TrŒs Servi(cid:231)os
que desempenha um papel importante na escolha do grafo a ser usado na constru(cid:231)ªo de
circuitos eletr(cid:244)nicos; o problema do Caminho M(cid:237)nimo usando o Algoritmo de Dijkstra que
nos ajuda a identi(cid:28)car a menor dist(cid:226)ncia de um ponto de origem em rela(cid:231)ªo aos demais
pontos do grafo - sua aplica(cid:231)ªo prÆtica pode ser observada no GPS; jÆ no problema de
Custo M(cid:237)nimo usando o algoritmo de Kruskal, aprendemos a calcular a quantidade m(cid:237)nima
de produtos a ser usada num servi(cid:231)o como liga(cid:231)ıes de redes de computadores e, por (cid:28)m,
apresentamos problemas de Colora(cid:231)ªo que nos auxiliam na resolu(cid:231)ªo de problemas que
envolvem planejamento e distribui(cid:231)ªo.

Segundo Piaget [9], os adolescentes se desprendem do real sem precisar se apoiar em
fatos, ou seja, come(cid:231)am a pensar e a entender o abstrato e a deduzir mentalmente sobre vÆ-
rias hip(cid:243)teses que se colocam. Entendemos, portanto, ser uma boa hora para aprenderem
sobre grafos, pois sªo capazes de entender e encontrar solu(cid:231)ıes de problemas.

A modelagem de um problema em grafos faz exatamente isso, leva o aluno a um
racioc(cid:237)nio mais abstrato, tornando-se uma tØcnica ou ferramenta capaz de ajudÆ-lo a
tomar a decisªo mais adequada para resolver problemas.

Atendendo (cid:224) necessidade dos alunos de ensino secundÆrio, espera-se que o leitor sinta-
se incentivado a conhecer mais sobre o assunto, ao tempo em que deixamos espa(cid:231)o para
futuras implementa(cid:231)ıes ou contribui(cid:231)ıes para que a Teoria dos Grafos fa(cid:231)a parte de nosso
cotidiano. Como trabalho futuro, pretendemos implementÆ-lo em um problemas real que
serÆ discutido junto aos alunos.

77

ReferŒncias BibliogrÆ(cid:28)cas

[1] ALMEIDA, M. F. L. B. P. CELEMAN, S. A MatemÆtica escondida no Google. Ca-

dernos da RPM-Revista do Professor de MatemÆtica, no 80, 2013.

[2] ASCENCIO, Ana Fernanda Gomes e ARA(cid:218)JO, Graziela Santos de. Estrutura de
dados: Algoritmos, analise da complexidade e implementa(cid:231)ıes em java e C/C++.
Sªo Paulo: Perarson Prentice Halt, 2010.

[3] BOAVENTURA, Paulo. Grafos: teoria, modelos e algoritmos; Sªo Paulo : Edgard

Blucher Ltda.

[4] CORMEN, Thomas H.; LEIRSON, Charles E; RIVEST, Ronald L; STEIN, Cli(cid:27)ord.
Algoritmos: Teoria e PrÆtica. Tradu(cid:231)ªo da segunda edi(cid:231)ªo [americana] Vandenberg
D. de Souza. Rio de Janeiro: Campus, 2002.

[5] GERSTING, J. L. Fundamentos MatemÆticos para a CiŒncia da Computa(cid:231)ªo. Tra-
du(cid:231)ªo da 3 ed. Rio de Janeiro: LTC - Livros TØcnicos e Cient(cid:237)(cid:28)cos Editora S.A,
1995.

[6] JURKIEWICZ,Samuel. Grafos - Uma introdu(cid:231)ªo. Sªo Paulo : OBMEP, 2009.

[7] LIMA, L.; SIM(cid:213)ES, M.; SELAS, L. SeminÆrio de MatemÆtica. Mestrado em Super-

visªo Pedag(cid:243)gica em Ensino de MatemÆtica, 1999/2000.

[8] LIPSCHUTZ, S.; LIPSON, M. Teoria e problemas de matemÆtica discreta; Tradu(cid:231)ªo:
Heloisa Bauzer Medeiros. - 2.ed. - Porto Alegre: Bookman, 2004. (Cole(cid:231)ªo Schaum)

[9] PIAGET, J. O nascimento da inteligŒncia na crian(cid:231)a. Rio de Janeiro: Zahar, 1970.

[10] REVISTA DO PROFESSOR DE MATEM`TICA, no 80, ano 30/2013

[11] ROSEN,Kenneth H. MatemÆtica Discreta e suas Aplica(cid:231)ıes; [Tradu(cid:231)ªo Joªo Giu-

dice]. Sªo Paulo : McGraw-Hill, 2009.

[12] ZIVIANI, Nivio. Projeto de Algoritmos: com Implementa(cid:231)ıes em Pascal e C. 3 ed.

Sªo Paulo: Cengage Learning, 2012.

78

