UNIVERSIDADE FEDERAL RURAL DE PERNAMBUCO
DEPARTAMENTO DE MATEMÁTICA
Mestrado Proﬁssional em Matemática em Rede Nacional

Ilso Francisco dos Santos

Algoritmos de Ordenação: uma abordagem didática para o

Ensino Médio

RECIFE
2020

UNIVERSIDADE FEDERAL RURAL DE PERNAMBUCO
DEPARTAMENTO DE MATEMÁTICA
Mestrado Proﬁssional em Matemática em Rede Nacional

Ilso Francisco dos Santos

Algoritmos de Ordenação: uma abordagem didática para o
Ensino Médio

Dissertação de mestrado apresentada ao Departamento
de Matemática da Universidade Federal Rural de Per-
nambuco como requisito parcial para obtenção do título
de Mestre em Matemática.

Orientador: Prof. Dr. Marcelo Pedro dos Santos

RECIFE
2020

Dados Internacionais de Catalogação na Publicação Universidade Federal Rural de PernambucoSistema Integrado de BibliotecasGerada automaticamente, mediante os dados fornecidos pelo(a) autor(a)S237aSANTOS, ILSO FRANCISCO DOS        Algoritmos de ordenação: uma abordagem didática para o ensino médio / ILSO FRANCISCO DOS SANTOS. -2020.        78 f. : il.        Orientador: MARCELO PEDRO DOS SANTOS.        Inclui referências.        Dissertação (Mestrado) - Universidade Federal Rural de Pernambuco, Programa de Mestrado Profissional emMatemática (PROFMAT), Recife, 2020.        1. Algoritmos de ordenação. 2. Parâmetros Curriculares. 3. Competências. 4. Habilidades. 5. Ensino Médio. I.SANTOS, MARCELO PEDRO DOS, orient. II. Título                                                                                                                                                   CDD 510À minha esposa e ﬁlhos
Aos meus pais
Aos meus colegas de turma
Aos meus colegas de trabalho
Aos meus professores
Ao meu orientador

Agradecimentos

Primeiramente a Deus por ter me proporcionado a oportunidade aos estudos.

À minha esposa Valéria e ﬁlhos: Iago e Aimê pela ajuda e companheirismo nos momentos
de estudo e na ausência durante o curso.
Aos diretores das escolas que trabalho, pois sempre que possível se colocavam à disposição
para ajudar administrativamente.
Aos meus professores do PROFMAT pela paciência e disponibilidade para ajudar nos
momentos de estudo.
Ao meu orientador Marcelo Pedro que guiou com muita sabedoria o percurso da pesquisa.

“A verdadeira motivação vem da realização,
desenvolvimento pessoal, satisfação no trabalho e reconhecimento.”
(Frederick Herzberg)

DECLARAÇÃO  Eu, ILSO FRANCISCO DOS SANTOS declaro, para devidos fins e efeitos, que a dissertação sob título Algoritmos de Ordenação: uma abordagem didática para o Ensino Médio, entregue como Trabalho de Conclusão de curso para obtenção do título de mestre, com exceção das citações diretas e indiretas claramente indicadas e referenciadas, é um trabalho original. Eu estou consciente que a utilização de material de terceiros incluindo uso de paráfrase sem a devida indicação das fontes será considerado plágio, e estará sujeito à processo administrativos da Universidade Federal Rural de Pernambuco e sanções legais. Declaro ainda que respeitei todos os requisitos dos direitos de autor e isento a Pós-graduação PROFMAT/UFRPE, bem como o professor orientador Marcelo Pedro dos Santos, de qualquer ônus ou responsabilidade sobre a sua autoria.    Recife,  20 de agosto de 2020.    _______________________________________________ ILSO FRANCISCO DOS SANTOS  Resumo

Baseados na nova Base Nacional Curricular Comum (BNCC), em especial, nas compe-
tências habilidades correlacionadas com algoritmos, faremos uma abordagem didática
propondo atividades que possam ser trabalhadas no processo de ensino-aprendizagem.
Apesar das competências e habilidades fazerem referências a algoritmos, iremos enfocar,
especiﬁcamente, Algoritmos de Ordenação sem, no entanto, observar o modelo computaci-
onal dos mesmos. Analisaremos inicialmente os Parâmetros Curriculares Nacionais 5a a 8a
séries(PCN-5a a 8a), Parâmetros Curriculares Nacionais do Ensino Médio(PCNEM) e seu
complemento PCNEM+, BNCC e também Parâmetros Curriculares da Educação Básica
do Estado de Pernambuco, enfatizando que o trabalho com Algoritmos de Ordenação
favorece não só a resolução de problemas, como o desenvolvimento de habilidades e com-
petências concernentes à Matemática. Em seguida, resumiremos o conteúdo matemático
necessário para entender o desempenho(complexidade) de um Algoritmo de Ordenação
e poder compará-los. Exempliﬁcaremos alguns tipos de Algoritmos de Ordenação, seu
funcionamento e a função matemática que mede seu desempenho. Por ﬁm, iremos propor
uma sequência de atividades que possam ser utilizadas no processo de ensino aprendizagem
com alunos do Ensino Médio, salientando que o entendimento e desenvolvimento das
mesmas devem se adequar a essa etapa do ensino de acordo com o ano, vivências de
conteúdos, e período de maturação dos estudantes.

Palavras-chave: Parâmetros Curriculares, Competências, Habilidades, Algoritmos de
Ordenação.

Abstract

Based on the new National Curriculum Common Base (BNCC), especially in skills related
to algorithms, we will make a didactic approach to activities that can be worked in the
teaching-learning process. Despite the skills and abilities required to apply algorithms, we
will speciﬁcally apply sort algorithms without, however, observing or modeling them. We
will analyze the National Curriculum Parameters: 5th to 8th grade, High School, BNCC
(Common Basic National Curriculum) and also Curriculum Parameters of Basic Education
of the State of Pernambuco; as the development of math-related skills and competencies.
After that, we resume the mathematical content needed to understand the performance
(complexity) of a Sorting Algorithm and comparable power. We also provide examples of
various types of Sorting Algorithms, their functioning, and mathematical function that
measure their performance. Finally, we propose a series of activities that can be used in
the teaching-learning process with High School students, noting that the understanding
and development of these should be appropriate to the process of teaching and learning
according to the year, content experiences, and maturation period of the students.

Keywords: Curriculum Parameters, Competencies, Abilities, Sorting Algorithms.

Lista de ilustrações

Figura 1 – Gráﬁcos de Funções Aﬁns . . . . . . . . . . . . . . . . . . . . . . . . . 37
. . . . . . . . . . . . . . . . . . . . . . . 37
Figura 2 – Gráﬁco da Função Constante
Figura 3 – Gráﬁco da Função Aﬁm crescente e decrescente . . . . . . . . . . . . . 38
Figura 4 – Gráﬁcos de Funções Quadráticas
. . . . . . . . . . . . . . . . . . . . . 39
Figura 5 – Gráﬁco indicando o vértice da parábola que representa uma Função

Quadrática . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Figura 6 – Gráﬁcos de Funções Logarítmicas . . . . . . . . . . . . . . . . . . . . . 45
. . . . 50
Figura 7 – Fluxograma indicando um algoritmo para formar um quadrado.
Figura 8 – Árvore de distribuição binária do Quick Sort, no melhor caso, para um

vetor de n elementos. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
61

Figura 9 – Gráﬁco de comparação assintótica dos Algoritmos de Ordenação . . . .
Figura 10 – Fluxograma de um algoritmo para resolver uma equação do tipo Ax2 +

Figura 11 – Fluxograma para o Bubble Sort

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
. . . . . . . . . . . . . . . . . . . . . . 63

Bx + C = 0

Lista de tabelas

Tabela 1 – Expectativas de Aprendizagem: Parâmetros Curriculares do Estado de

Pernambuco . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

Tabela 2 – Exemplo do Bubble Sort com 5 elementos, n = 5, representando o pior

caso. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Tabela 3 – Exemplo do Bubble Sort com vetor de 10 elementos, n = 10, represen-

51

tando o caso médio.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . 53

Tabela 4 – Exemplo do Selection Sort com 5 elementos, n = 5, representando o

caso médio.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54

Tabela 5 – Exemplo do Selection Sort com n = 7 elementos, representando o caso

médio. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
Tabela 6 – Resumo da distribuição binária do Quick Sort representada na Figura (8) 59
Tabela 7 – Tabela de comparação do desempenho assintótico dos Algoritmos de

Ordenação . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

61
Tabela 8 – Roteiro das aulas da Sequência Didática . . . . . . . . . . . . . . . . . 65
Tabela 9 – Aulas da sequência com respectivas competências e habilidades relacio-

nadas

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67

Sumário

Introdução . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

21

ANÁLISE DOS PARÂMETROS CURRICULARES . . . . . .

25

MATEMÁTICA E ALGORITMOS DE ORDENAÇÃO . . . .
33
Somatórios e propriedades . . . . . . . . . . . . . . . . . . . . . .
34
Função Aﬁm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
38
Função Quadrática . . . . . . . . . . . . . . . . . . . . . . . . . . .
Função Logarítmica . . . . . . . . . . . . . . . . . . . . . . . . . . . 41

ALGORITMOS DE ORDENAÇÃO E COMPLEXIDADE . .
Conceitos básicos . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Algoritmos de ordenação . . . . . . . . . . . . . . . . . . . . . . .
Bubble Sort
Selection Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Quick Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Fluxogramas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

47
47
50
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
53
56
62

1

2
2.1
2.2
2.3
2.4

3
3.1
3.2
3.2.1
3.2.2
3.2.3
3.3

4

SEQUÊNCIA DIDÁTICA . . . . . . . . . . . . . . . . . . . . . .

65

Conclusão . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

75

REFERÊNCIAS . . . . . . . . . . . . . . . . . . . . . . . . . . .

77

Introdução

21

Segundo as Diretrizes Curriculares Nacionais da Educação Básica, (BRASIL, 2013)

A UNESCO, em documento de 2007, ao entender que a qualidade da
educação é também uma questão de direitos humanos,[...] advoga que a
educação de qualidade, como um direito fundamental, deve ser antes de
tudo relevante.[...]. A relevância reporta-se à promoção de aprendizagens
signiﬁcativas do ponto de vista das exigências sociais e de desenvolvimento
pessoal.

De acordo com o mesmo documento (BRASIL, 2013, p. 109), “a escola, no desem-
penho de suas funções, deve construir e utilizar métodos, estratégias e recursos de ensino
que melhor atendam às características cognitivas e culturais dos alunos”. Diante dessa
perspectiva, cientes que o uso de tecnologias é cada vez mais intenso na vida cotidiana e
que a inserção crescente de pessoas jovens num mercado de trabalho altamente tecnológico
requer mais preparo e formação especíﬁca nessas áreas, percebe-se quão grandes são os
desaﬁos da educação nos dias atuais, principalmente no que diz respeito à Matemática,
que possui uma relação contígua com o desenvolvimento tecnológico.

Vários pesquisadores se debruçam na busca de novas metodologias que possam
abarcar os conteúdos matemáticos de forma signiﬁcativa e atraente, conectando-os com o
mundo do trabalho e com o desenvolvimento cientíﬁco. Propõe-se nessa pesquisa o tema
Algoritmos de Ordenação, pois é possível instigar: a discussão sobre novas metodologias, a
conexão com o desenvolvimento social, tecnológico e com o mundo do trabalho. Requer
também a busca de resposta a uma situação-problema, de modo que a Matemática seja
tratada com a formalidade requerida.

O estudo e a análise de Algoritmos de Ordenação no Ensino Médio podem ser
de grande valia no processo de ensino e aprendizagem de Matemática, pois além de se
apresentar como algo novo e atual, requer um trato matemático singular na resolução dos
problemas propostos e favorece o desenvolvimento de habilidades e competências sugeridas
na BNCC.

O principal objetivo deste trabalho é conhecer e analisar, à luz da BNCC, alguns
Algoritmos de Ordenação utilizados em programação computacional, a saber, Bubble Sort,
Selection Sort e Quick Sort, comparando suas eﬁciências por meio de funções Matemáticas.
Objetivou-se ainda a construção de uma sequência didática que possa subsidiar o processo
de ensino-aprendizagem no Ensino Médio. Há aqui um contraponto à pesquisa de Ribeiro
(RIBEIRO, 2018, p. 27), que diz: “Propõe-se aqui o uso despretensioso da prática de
programação no ambiente escolar como alternativa para despertar no aluno o interesse pela
matemática[...]”, expondo-se apenas a forma que um Algoritmo de Ordenação funciona,

22

Introdução

a análise de seu desempenho e a maneira que essa abordagem pode ser utilizada no
processo de aprendizagem com estudantes do Ensino Médio. A escolha pelo Ensino Médio
é justiﬁcável, pois supõe-se que nessa etapa da educação o estudante já está familiarizado
com alguns conteúdos associados ao tema e tenha a maturidade suﬁciente para compreensão
dos conceitos e procedimentos que serão abordados.

No primeiro capítulo realiza-se uma análise dos documentos: PCN-5a a 8a séries,
PCNEM, PCNEM+, Parâmetros para e Educação Básica do Estado de Pernambuco e
BNCC, enfatizando competências e habilidades que possuem relação com o tema. Tais
documentos são atualmente utilizados pelas redes e/ou sistemas de ensino na organização
de suas propostas pedagógicas. A inclusão dos PCN-5a a 8a séries foi proposital, com o
intuito de averiguar o que se propõe sobre o tema ao estudante antes da sua chegada no
Ensino Médio.

No segundo, realizou-se um estudo da Matemática utilizada na análise dos Algorit-
mos de Ordenação, os conceitos utilizados e as funções envolvidas. Apesar de não fazer
parte da proposta um aprofundamento desses conteúdos matemáticos, se faz necessário
sua abordagem para que realize-se uma análise do algoritmo de maneira correta e formal.
Também vale destacar que os conteúdos matemáticos sobre somatórios e propriedades
normalmente não são abordados no Ensino Médio e podem ser passíveis de leitura e
reﬂexão do professor do Ensino Médio mas o mesmo não se aplica se, supostamente, o
leitor interessado for estudante do Ensino Médio. Em contrapartida, sugere-se que pode
ser desnecessária uma leitura dos conteúdos de funções presentes neste capítulo por um
professor do Ensino Médio contudo, caso um estudante dessa etapa se interesse pela leitura
deste trabalho, se faz obrigatória tal leitura e reﬂexão.

No terceiro capítulo há uma apresentação dos Algoritmos de Ordenação já sugeridos,
sua estrutura e a função Matemática que descreve sua eﬁciência (complexidade). Há ainda
uso de ﬂuxogramas para ilustrar o funcionamento de algoritmos, haja vista que se trata de
uma habilidade sugerida pela BNCC. Explora-se exemplos e representações de algoritmos de
modo que ﬁque claro qual raciocínio dedutivo é utilizado na ordenação dos elementos de um
conjunto ﬁnito e que função melhor representa tal situação sempre situando tais exemplos
com as competências e habilidades requeridas no ensino-aprendizagem de Matemática.

Por ﬁm, no último capítulo, propõe-se uma sequência didática que possa servir de
parâmetro para o trabalho do professor do Ensino Médio. Nela consta desde atividades
básicas de preenchimento de ﬂuxogramas, leitura e produção de algoritmos, ordenação
com número reduzido de elementos tendo como comando os Algoritmos de Ordenação já
citados, bem como algumas atividades que avaliem a complexidade por meio de funções.
A sequência pode ser utilizada pelo professor em todas as etapas do Ensino Médio, sendo
que o mesmo deve avaliar se o estudante já possui condições de compreender a matemática
utilizada na execução de alguma atividade.

23

Espera-se que a pesquisa aqui apresentada, de alguma forma possa auxiliar professo-
res e, consequentemente, estudantes do Ensino Médio na aprendizagem dos Algoritmos de
Ordenação de forma simples e inteligível, acrescentando mais uma ferramenta para o ensino
de matemática. Também não se supõe que a abordagem do tema seja encerrado com o
enfoque dado neste trabalho e sugere-se que outros pesquisadores possam acrescentar mais
subsídios educacionais que possam ser utilizados como material de apoio ao aprendizado
no Ensino Básico.

1 Análise dos Parâmetros Curricu-

25

lares

Apresenta-se aqui uma breve análise de alguns documentos oﬁciais referentes ao
Currículo do Ensino Básico Brasileiro sem se ter a pretensão de um aprofundamento
ou estagnação da abordagem do tema nos documentos analisados. Busca-se mostrar
uma possível evolução conceitual e curricular do tema Algoritmos de Ordenação em tais
documentos e vislumbrar uma relativa importância de tal conteúdo no ensino-aprendizagem
de Matemática no Ensino Médio. Apesar das recentes mudanças educacionais trazidas
pela BNCC, a discussão acerca de uma aprendizagem mais signiﬁcativa de matemática
não é algo novo. Os PCN-5a a 8a séries, publicados em 1998, que corresponde atualmente
a 6o ao 9o ano do Ensino Fundamental, já trazem tal problemática quando dizem:

Situação-problema é o ponto de partida da atividade matemática e não
a deﬁnição. No processo de ensino e aprendizagem, conceitos, ideias e
métodos matemáticos devem ser abordados mediante a exploração de
problemas, ou seja, de situações em que os alunos precisem desenvolver
algum tipo de estratégia para resolvê-las. (BRASIL, 1998, p. 40)

O referido documento expõe que pela exploração de situações-problemas o aluno
reconhecerá diferentes funções da Álgebra e representará problemas por meio de equações
ou inequações. Acrescenta ainda sobre o exercício da indução e da dedução em Matemá-
tica, como algo revestido de importância no desenvolvimento da capacidade de resolver
problemas, de formular e testar hipóteses, de induzir, de generalizar e de inferir dentro de
determinada lógica, o que assegura um papel de relevo ao aprendizado dessa ciência em to-
dos os níveis de ensino. Ao relacionar ideias Matemáticas entre si, o aluno pode reconhecer
princípios gerais, como proporcionalidade, igualdade, composição, decomposição, inclusão
e perceber que processos como o estabelecimento de analogias, indução e dedução. Os
PCN-5a a 8a séries indicam como um dos objetivos do Ensino Fundamental que o aluno
seja capaz de “questionar a realidade formulando-se problemas e tratando de resolvê-los,
utilizando para isso o pensamento lógico, a criatividade, a intuição, a capacidade de análise
crítica, selecionando procedimentos e veriﬁcando sua adequação”. (BRASIL, 1998, p. 8)

No que diz respeito ao ensino, “a prática mais frequente consiste em ensinar um
conceito, procedimento ou técnica e depois apresentar um problema para avaliar se os
alunos são capazes de empregar o que lhes foi ensinado (BRASIL, 1998, p. 40)”. Apesar
dos PCN-5a a 8a séries abordarem que o uso da tecnologia da comunicação é um bom
recurso no favorecimento à aprendizagem e de ressaltar a importância do computador e
softwares nesse processo, ainda não se reporta ao uso de algoritmos no binômio ensino-
aprendizagem, ou sequer cita sua existência. Em (BRASIL, 1998) aﬁrma-se que “muitos
conteúdos importantes serão descartados por serem julgados, sem uma análise adequada,

26

Capítulo 1. Análise dos Parâmetros Curriculares

que não são de interesse para os alunos porque não fazem parte de sua realidade ou não
têm uma aplicação prática imediata”. Como algoritmos podem ser representados por meio
de ﬂuxogramas, ressaltamos que os PCN-5a a 8a séries já consideram: “a visualização e a
leitura de informações gráﬁcas em Matemática são aspectos importantes, pois auxiliam
a compreensão de conceitos e no desenvolvimento de capacidades de expressão gráﬁcas
(BRASIL, 1998, p. 46)”. Algoritmo é um procedimento ou conjunto destes, vale ressaltar que
os PCN-5a a 8a séries referem-se aos procedimentos como conteúdos em si, que possibilitam
capacidades relacionadas ao saber fazer, sendo assim, os algoritmos enquadram-se em tal
categoria de conteúdo. Enﬁm, mesmo com muitos indícios presentes nos PCN-5a a 8a séries
sobre a importância do trabalho com novos métodos, conteúdos signiﬁcativos e inovadores,
bem como a exploração de situações-problemas que estimulem competências e habilidades
especíﬁcas, não há explicitamente o estudo de Algoritmos de Ordenação como ferramenta
de ensino-aprendizagem.

Observa-se nos PCNEM, na parte especíﬁca de Matemática, que há o tratamento

dessa disciplina como uma ciência,

com suas características estruturais especíﬁcas na qual o aluno percebe
que as deﬁnições, demonstrações e encadeamentos conceituais e lógicos
têm a função de construir novos conceitos a partir de outros e que servem
para validar intuições e dar sentido às técnicas aplicadas. (BRASIL, 2000,
pp. 40-41)

Também é no Ensino Médio que se propõe ao aluno uma ampliação dos conhe-
cimentos adquiridos no Ensino Fundamental e uma elevação no nível de abstração de
conceitos, “[...] deve ser mais do que memorizar resultados dessa ciência e que a aquisição do
conhecimento matemático deve estar vinculada ao domínio de um saber fazer Matemática
e de um saber pensar matemático (BRASIL, 2000, p. 41)”. Outro viés explicitado nos
PCNEM é a garantia de que o estudante seja capaz de lidar com o conceito de Funções em
situações diversas, ser incentivado a buscar a solução, ajustando seus conhecimentos para
construir um modelo para interpretação e investigação em Matemática. Também se faz
importante que o aluno estenda e aprofunde seus conhecimentos sobre Números e Álgebra
de forma conectada com outros conteúdos, pois estão intrinsecamente relacionados com a
resolução de problemas. Em resumo, pode-se destacar nos PCNEM algumas habilidades e
competências de base para desenvolver o ensino e a aprendizagem em Matemática, que
são: as de representação e comunicação e, as de investigação e compreensão, que auxiliam
o direcionamento com o tema aqui proposto.

Os alunos, confrontados com situações-problema, novas, mas compatíveis
com os instrumentos que já possuem ou que possam adquirir no processo,
aprendem a desenvolver estratégia de enfrentamento, planejando etapas,
estabelecendo relações, veriﬁcando regularidades, fazendo uso dos pró-
prios erros cometidos para buscar novas alternativas; adquirem espírito
de pesquisa, aprendendo a consultar, a experimentar, a organizar dados,
a sistematizar resultados, a validar soluções; desenvolvem sua capacidade
de raciocínio, adquirem auto-conﬁança e sentido de responsabilidade; e,
ﬁnalmente, ampliam sua autonomia e capacidade de comunicação e de
argumentação. (BRASIL, 2000, p. 52)

27

É possível continuar elencando conteúdos, procedimentos, habilidades e competên-
cias com as quais se promove uma aprendizagem signiﬁcativa de Matemática, contudo não
é proposta dessa pesquisa exaurir o tema, nem a discussão em torno dele. É perceptível a
ausência de uma proposta explicita com o conteúdo Algoritmos e, em especial, os Algorit-
mos de Ordenação. Possivelmente pelo contexto histórico em que o documento PCNEM
foi formulado ou ainda, pela falta de perspectiva dos pesquisadores sobre a viabilidade do
trabalho com o tema.

Além dos PCNEM, foram publicados em 2002 os PCNEM+ que teve o intuito
de complementar as propostas de ensino e aprendizagem pautados em novos métodos e
reﬂexões acerca dos conteúdos. Nesse documento há uma proposta de maior articulação
entre as disciplinas curriculares de áreas aﬁns, bem como a aproximação maior entre
conteúdos e realidade. Os PCNEM+ enfatizam as competências já elencadas nos PCNEM:
representação e comunicação, investigação e compreensão e contextualização das ciências
no âmbito sócio-cultural, reforçando a necessidade de compreensão destas, o modo como
devem ser exploradas no meio escolar e indicando os tipos de conteúdos relacionados com
cada competência. No que diz respeito à competência de representação e comunicação
podemos destacar:

Traduzir uma situação dada em determinada linguagem para outra;
por exemplo, transformar situações dadas em linguagem discursiva em
esquemas, tabelas, gráﬁcos, desenhos, fórmulas ou equações matemáticas
e vice-versa, assim como transformar as linguagens mais especíﬁcas umas
nas outras, como tabelas em gráﬁcos ou equações. (BRASIL, 2002, p.
115)

Vê-se claramente uma relação de tal competência com o estudo de Algoritmos de
Ordenação, pois se faz necessário traduzir a linguagem do algoritmo para a linguagem
matemática e para tanto se podem usar esquemas como ﬂuxogramas. Ainda com respeito
à competência de representação e comunicação faz-se destaque:

Produzir textos analíticos para discutir, sintetizar e sistematizar formas
de pensar, fazendo uso, sempre que necessário, da linguagem matemática.
Redigir resumos, justiﬁcar raciocínios, propor situações-problema, siste-
matizar as ideias principais sobre dado tema matemático com exemplos
e comentários próprios. (BRASIL, 2002, p. 115)

Na análise de Algoritmos de Ordenação se pretende que o estudante possa escrever
a resposta a uma situação-problema justiﬁcando matematicamente seu raciocínio e utili-
zando, se necessário, diferentes formas de registro. Quanto à competência de investigação
e compreensão, é relevante que o aluno possa identiﬁcar regularidades em situações seme-
lhantes para estabelecer regras, algoritmos e propriedades, mas o trabalho com Algoritmos
de Ordenação também requer que o estudante utilize “diferentes formas de quantiﬁcar
dados numéricos para decidir se a resolução de um problema requer cálculo exato, apro-
ximado, probabilístico ou análise de médias (BRASIL, 2002, p. 116)”. Já a competência
de contextualização sócio-cultural pode ser relacionada com o ensino e aprendizagem de
Algoritmos de Ordenação quando associa ao tema ciência e tecnologia na história, visto
que

28

Capítulo 1. Análise dos Parâmetros Curriculares

A exigência de rapidez e complexidade dos cálculos fez com que a Mate-
mática se desenvolvesse e, por outro lado, as pesquisas e avanços teóricos
da Matemática e demais ciências permitiram o aperfeiçoamento de má-
quinas como o computador, que vêm tornando os cálculos cada vez mais
rápidos. (BRASIL, 2002, p. 118)

É a criação de algoritmos que permitem que a rapidez desses cálculos seja obtida
com êxito, mas é a Matemática, por meio da lógica usada na programação, que proporciona
a real possibilidade para ocorrer tal sucesso. Os PCN+ trazem um avanço na maneira
de pensar e estruturas o processo de ensino-aprendizagem e propõe a seleção de Temas
Estruturadores quando se quer almejar as competências já citadas. No entanto, se devem
fazer alguns recortes utilizando alguns critérios de modo que os conteúdos ou temas devem:
favorecer o desenvolvimento das competências elencadas, permitir uma articulação lógica
entre diferentes ideias e conceitos, evitar detalhamentos ou nomenclaturas excessivas
evitando um modelo curricular enﬁleirado como ocorre comumente. Entre esses Temas
Estruturadores destacam-se Álgebra, Números e Funções, Análise de dados e Contagem.
O destaque é pertinente à medida que o estudo de Algoritmos de Ordenação se pauta
sobre tais temas e segundo os PNCEM+ (BRASIL, 2002, p. 127),

Esses conteúdos devem ter maior espaço e empenho de trabalho no En-
sino Médio, mantendo de perto a perspectiva da resolução de problemas
aplicados para se evitar a teorização excessiva e estéril.[...] Contribui
também para a compreensão e o uso de representações gráﬁcas, identiﬁ-
cação de regularidades, interpretação e uso de modelos matemáticos e
conhecimento de formas especíﬁcas de raciocinar em Matemática.

Dando continuidade ao que se propõe, ou seja, averiguar nos documentos oﬁciais
algo que possa aludir o tema Algoritmos de Ordenação. Iremos realizar uma breve análise
nos Parâmetros Curriculares da Educação Básica do Estado de Pernambuco, publicado em
2012. Nele há tópicos semelhantes aos encontrados nos Parâmetros Curriculares Nacionais
e BNCC, como resolução de problemas e modelagem matemática, no entanto, há uma
mudança na nomenclatura quando se refere à competência. Tais competências são chamadas
de Objetivos nos PCN-5a a 8a séries, Competências e Habilidades nos PCNEM e PCNEM+.
Já nos Parâmetros Curriculares da Educação Básica do Estado de Pernambuco o nome
dado, ao objetivo que se pretenda que o estudante alcance, é Expectativa de Aprendizagem.

As expectativas de aprendizagem explicitam aquele mínimo que o es-
tudante deve aprender para desenvolver as competências básicas na
disciplina. Em outras palavras, elas descrevem o “piso” de aprendizagens,
e não o “teto”. Dependendo das condições de cada sala de aula, elas
podem ser ampliadas e/ou aprofundadas. (PERNAMBUCO, 2012, p. 13)

Apesar dos Parâmetros Curriculares da Educação Básica do Estado de Pernambuco
terem se baseado na Base Curricular Comum para as Redes Públicas de Ensino de
Pernambuco (BCC-PE, Secretaria de Educação de Pernambuco, 2008), não foi observado
aqui o texto da mesma, ﬁcando a análise restrita aos Parâmetros Curriculares. Neste
último, a estratégia de resolução de uma situação-problema é tida como privilegiada, onde
problemas abertos devem ser prioritários em detrimento dos fechados. Também ressalta a
modelagem matemática como algo com estreita conexão com a resolução de problemas.

29

De fato, quando a modelagem matemática propõe uma situação-problema
ligada ao “mundo real”, com sua inerente complexidade, o estudante
é chamado a mobilizar um leque variado de competências: selecionar
variáveis que serão relevantes para o modelo a construir; problematizar,
ou seja, formular um problema teórico, na linguagem do campo matemá-
tico envolvido; formular hipóteses explicativas do fenômeno em causa;
recorrer ao conhecimento matemático acumulado para a resolução do
problema formulado, o que, muitas vezes, requer um esforço de simpliﬁ-
cação, pelo fato de que o modelo originalmente pensado pode revelar-se
matematicamente muito complexo; validar, isto é, confrontar as conclu-
sões teóricas com os dados empíricos existentes, o que, quase sempre,
leva à necessidade de modiﬁcação do modelo, que é essencial para revelar
o aspecto dinâmico da construção do conhecimento. (PERNAMBUCO,
2012, p. 30)

Mesmo com a mudança de nomenclatura, as competências, associadas às habilidades,
estão intrinsecamente ligadas às Expectativas de Aprendizagem, como consta no próprio
documento: “o trabalho com os saberes, no entanto, deve ser orientado para as competências
que se deseja que o estudante construa, o que nos leva à necessidade de estabelecer as
expectativas de aprendizagem (PERNAMBUCO, 2012, p. 21)”. Porém, o documento
levanta a bandeira que por meio de aquisição de “saberes” as competências devem ser
construídas e não o contrário. Concordando, no entanto, com a concepção de que é por
meio de uma situação-problema que a aprendizagem de um novo conceito ocorre. Dentre
as expectativas de aprendizagem observa-se, no quadro abaixo, algumas que possuem forte
relação com o ensino e aprendizagem de Algoritmos de Ordenação. Apesar do foco desta
pesquisa ser o Ensino Médio, incluímos nessa tabela o 9o ano com o intuito de mostrar
que algumas competências e habilidades ou Expectativas de Aprendizagem já se fazem
presentes no Ensino Fundamental e deverão ser consolidados no Ensino Médio.

Tabela 1 – Expectativas de Aprendizagem: Parâmetros Curriculares do Estado de Per-

nambuco

Expectativa de Aprendizagem
Comparar e ordenar números reais
Reconhecer função como modelo matemático
para o estudo das variações entre
grandezas do mundo natural ou social
Diferenciar Modelo de crescimento/decrescimento
de função exponencial em relação às funções
lineares e quadráticas

9oano
X

10oano
-

11oano
-

12oano
-

-

-

X

X

X

X

X

-

Fonte: Produzida pelo autor

Apesar da expectativa envolvendo comparação e ordenação não aparecer no Ensino
Médio, salientamos que o estudo com Algoritmos de Ordenação aqui proposto é voltado
principalmente à sua relação com a função que mede sua eﬁciência, e tal função está
relacionada com a forma que a contagem de ações de ordenação é efetuada. Assim, tal
expectativa já se encontra implícita no processo sem que haja necessidade de inclusão

30

Capítulo 1. Análise dos Parâmetros Curriculares

prioritária da mesma no Ensino Médio. Observamos também a falta de referência à Função
Logarítmica nas Expectativas de Aprendizagem do Ensino Médio, contudo a mesma
aparece na BNCC como será visto adiante.

Iniciando a breve análise da BNCC, assim como foram observadas algumas carac-
terísticas dos PCN-5a a 8a séries se faz importante uma abordagem, na parte especíﬁca de
Matemática, do Ensino Fundamental na BNCC. Sabe-se que, de acordo com os documen-
tos curriculares oﬁciais até aqui analisados, o estudante do Ensino Médio é orientado a
aprofundar e ampliar os conceitos e procedimentos vivenciados no Ensino Fundamental. O
desenvolvimento da aprendizagem é proposto, nesse documento, pelo desenvolvimento de
competências e habilidades de forma semelhante aos PCNEM. De acordo com a BNCC
(BRASIL, 2018, p. 8),

Competência é deﬁnida como a mobilização de conhecimentos (conceitos
e procedimentos), habilidades (práticas, cognitivas e socioemocionais),
atitudes e valores para resolver demandas complexas da vida cotidiana,
do pleno exercício da cidadania e do mundo do trabalho.

Em (BRASIL, 2018) são explicitadas Competências Gerais da Educação Básica e
Competências Especíﬁcas de Cada Área de Conhecimento dentro das quais são indicadas
as habilidades requeridas. Na BNCC do Ensino Fundamental os conteúdos são separados
em unidades temáticas do 1o ao 9o ano e organizadas da seguinte maneira: Números,
Álgebra, Geometria, Grandezas e Medidas, Probabilidade e Estatística. A BNCC explicita
a importância de se relacionar, sempre que possível, as unidades temáticas supra citadas no
processo de ensino-aprendizagem. No entanto, a organização curricular se dá de uma forma
diferente da que aparece no Ensino Médio como veremos adiante. No Ensino Fundamental
as habilidades são relacionadas diretamente, no arranjo curricular, às unidades temáticas
e aos objetos de conhecimento. No que diz respeito ao tema Algoritmos, o documento
defende que este tem relação bastante próxima do pensamento computacional, que por
sua vez tem bastante importância, pois propicia uma variedade de representações e uso de
diferentes linguagens. Segundo o documento, “A linguagem algorítmica tem pontos em
comum com a linguagem algébrica, sobretudo em relação ao conceito de variável (BRASIL,
2018, p. 271)”.

Podemos destacar dentre as competências, que se referem ao Ensino Fundamental

na BNCC, algumas que possuem relação com o tema algoritmos:

-Compreender as relações entre conceitos e procedimentos dos diferentes
campos da Matemática (Aritmética, Álgebra, Geometria, Estatística e
Probabilidade) e de outras áreas do conhecimento, sentindo segurança
quanto à própria capacidade de construir e aplicar conhecimentos mate-
máticos, desenvolvendo a autoestima e a perseverança na busca de solu-
ções. -Enfrentar situações-problema em múltiplos contextos, incluindo-
se situações imaginadas, não diretamente relacionadas com o aspecto
prático-utilitário, expressar suas respostas e sintetizar conclusões, utili-
zando diferentes registros e linguagens (gráﬁcos, tabelas, esquemas, além
de texto escrito na língua materna e outras linguagens para descrever
algoritmos, como ﬂuxogramas, e dados). (BRASIL, 2018, p. 267)

Quanto às habilidades que interligam ao tema algoritmos, encontram-se princi-
palmente nos anos ﬁnais dos Ensino fundamental, sendo tratados nos anos iniciais com
signiﬁcado mais voltado para conceitos e procedimentos matemáticos, em detrimento do as-
pecto computacional. Dentre as habilidades relacionadas ao tema no Ensino Fundamental,
destacamos:

31

-Representar por meio de um ﬂuxograma os passos utilizados para resolver
um grupo de problemas.
-Descrever, por escrito e por meio de um ﬂuxograma, um algoritmo para
a construção de um triângulo qualquer, conhecidas as medidas dos três
lados.
-Descrever, por escrito e por meio de um ﬂuxograma, um algoritmo
para a construção de um polígono regular (como quadrado e triângulo
equilátero), conhecida a medida de seu lado.
-Identiﬁcar a regularidade de uma sequência numérica ou ﬁgural não
recursiva e construir um algoritmo por meio de um ﬂuxograma que
permita indicar os números ou as ﬁguras seguintes. (BRASIL, 2018)

Percebe-se que se apresentou, na BNCC do Ensino Fundamental, uma proposta
buscando um uso intencional de ﬂuxogramas em diversas temáticas, bem como associar
com o conceito de algoritmo voltado mais para Matemática, mas a relação com o conceito
computacional ainda não foi foco nesta seção do documento.

Não é propósito deste trabalho aprofundar o processo de construção e organização
da BNCC, a pesquisa restringe-se principalmente na análise das competências e habilidades
especíﬁcas da Área de Matemática no Ensino Médio. Assim, é importante apontar que na
BNCC, no que diz respeito à inﬂuência das Tecnologias digitais e Computação, há indicação
de uma competência destacando: “pensamento computacional: envolve as capacidades de
compreender, analisar, deﬁnir, modelar, resolver, comparar e automatizar problemas e suas
soluções, de forma metódica e sistemática, por meio do desenvolvimento de algoritmos
(BRASIL, 2018, p. 474)”. Apesar da BNCC fazer uso de itinerários formativos, não faz
parte do presente estudo adentrar no mérito da questão nem tampouco o foco de tais
itinerários interfere na análise aqui proposta.

Seguindo com a veriﬁcação, na parte especíﬁca de Matemática, a BNCC ressalta
que os estudantes “ao chegarem aos anos ﬁnais, eles possam ser estimulados a desenvolver
o pensamento computacional, por meio da interpretação e da elaboração de algoritmos,
incluindo aqueles que podem ser representados por ﬂuxogramas”. (BRASIL, 2018, p. 528).
Também devem desenvolver habilidades relativas à investigação, construção de modelos e
resolução de problemas e serem estimulados de forma a favorecer o desenvolvimento de
competências que envolvam raciocinar, representar, comunicar e argumentar. Algumas
competências especíﬁcas da área de matemática podem receber destaque:

-Utilizar estratégias, conceitos, deﬁnições e procedimentos matemáticos
para interpretar, construir modelos e resolver problemas em diversos
contextos, analisando a plausibilidade dos resultados e a adequação das
soluções propostas, de modo a construir argumentação consistente.
-Investigar e estabelecer conjecturas a respeito de diferentes conceitos
e propriedades matemáticas, empregando estratégias e recursos, como

32

Capítulo 1. Análise dos Parâmetros Curriculares

observação de padrões, experimentações e diferentes tecnologias, identiﬁ-
cando a necessidade, ou não, de uma demonstração cada vez mais formal
na validação das referidas conjecturas. (BRASIL, 2018, p. 531)

Os Algoritmos de Ordenação se apresentam assim como um tema pertinente para
um trabalho de ensino e aprendizagem que atendam as competências acima destacadas,
pois as habilidades relacionadas a elas requerem procedimentos de identiﬁcação, leitura,
interpretação, construção de modelos, resolução e elaboração de problemas, e análise
de situações e dados ligados ao mundo real e em especial aos avanços tecnológicos.
Dentre as habilidades relacionadas às competências especíﬁcas as que se relacionam mais
intrinsecamente com Algoritmos de Ordenação são:

-Investigar e registrar, por meio de um ﬂuxograma, quando possível, um
algoritmo que resolve um problema.
-Utilizar conceitos iniciais de uma linguagem de programação na imple-
mentação de algoritmos escritos em linguagem corrente e/ou matemática.
(BRASIL, 2018, p. 538-539)

Vale salientar que existem outras competências e habilidades especíﬁcas na BNCC
que também possuem relação com os Algoritmos de Ordenação e é importante lembrar
que não é foco deste estudo a programação computacional, mas também não está nos
propósitos uma avaliação minuciosa do campo conceitual em questão. Portanto, apenas as
competências e habilidades que se fazem necessárias no direcionamento do estudo em tela.

Buscou-se realizar neste capítulo uma análise, seguindo uma ordem cronológica, dos
Parâmetros Curriculares brasileiros: PCN-5a a 8a séries (1998), PCNEM (2000), PCNEM+
(2002), Parâmetros para a educação Básica do Estado de Pernambuco (2012) e BNCC
(2018). A intenção foi detectar as eventuais mudanças curriculares e de paradigmas na
abordagem de conteúdos que se assemelhem ou relacionem com os Algoritmos de Ordenação.
Pôde-se observar em nossa breve análise, dessas diretrizes curriculares para o âmbito
educacional federal, estadual e municipal, que são várias as competências, habilidades e, no
caso de Pernambuco, Expectativas de Aprendizagem, indicando a viabilidade com o tema
aqui proposto sendo que apenas na BNCC (2018) o conteúdo está explicito. Averiguou-se
que a atenção ao tema só foi dada recentemente e acredita-se que se faz necessário uma
busca por estratégias didáticas que tornem o tema tangível a professores e alunos do
Ensino Médio.

2 Matemática e Algoritmos de Or-

33

denação

Neste capítulo será explicitado um resumo dos conceitos e resultados matemáticos
necessários para uma análise segura dos Algoritmos de Ordenação, tanto no que diz
respeito ao funcionamento, bem como sua complexidade. Abordar-se-ão as funções que
estão relacionadas com tais algoritmos para serem utilizadas no capítulo subsequente,
onde será realizado o estudo da complexidade desses algoritmos. Como já foi indicado na
parte introdutória deste trabalho, o professor do Ensino Médio pode abster-se da leitura e
reﬂexão do conteúdo referente às Funções Aﬁm, Quadrática e Logarítmica, pois se trata de
um conteúdo recorrente no Ensino Médio. No entanto, sugere-se que tal leitura e reﬂexão
seja indicada para um Estudante do Ensino Médio que se interesse pelo trabalho aqui
desenvolvido.

Apesar dos estudos de alguns algoritmos de ordenação requererem uma Matemática
mais avançada para sua análise, ater-se aos conceitos e métodos mais acessíveis ao Ensino
Médio não caracteriza prejuízo. Será utilizado como texto base o livro Algoritmos Teoria
e Prática, cujo autor é Thomas H. Cormen[et.al] (CORMEN, 2002), para abordar os
conteúdos de Somatórios e Séries. Já para os conteúdos Funções Aﬁm, Quadrática e
Logarítmica, o Livro texto utilizado é Conexões com a matemática, Ensino Médio, Org.
Editora Moderna, 3.ed., São Paulo, 2016, vol.1. A última escolha se justiﬁca, pois além
do intuito da pesquisa ser voltada para o público do Ensino Médio, esse é um dos livros
adotados pela Rede Estadual do Estado de Pernambuco sendo suﬁciente para subsidiar a
análise e a comparação dos Algoritmos de Ordenação aqui analisados.

Segundo (CORMEN, 2002), “Quando um algoritmo contém uma construção de
controle interativo (ou repetitivo)[...] seu tempo de execução pode ser expresso como a
soma dos tempos gastos em cada execução[...]”. Daí a necessidade da inclusão do tema
somatórios e propriedades, sem pretensão de nenhum aprofundamento desnecessário.
Apesar de haver na análise de algoritmos que usam a técnica dividir e conquistar cálculos
com recorrência, não será tratado esse conteúdo, visto que busca-se realizar tal análise
apenas com a matemática tangível ao estudante do Ensino Médio. Acrescentar-se-á ainda,
conceitos relacionados a Função aﬁm, Função quadrática, Logaritmos e propriedades e
Função logarítmica, pois serão utilizados na modelagem matemática e na comparação da
complexidade dos Algoritmos de Ordenação estudados.

No capítulo seguinte serão abordados os desempenhos dos Algoritmos de Ordenação
no melhor caso, no pior e no caso médio. Assim, vale adiantar que a Função Aﬁm representa
o melhor caso do algoritmo Bubble Sort. Já a Função Quadrática é utilizada na representação

34

Capítulo 2. Matemática e Algoritmos de Ordenação

do pior caso e caso médio do Bubble Sort, em qualquer caso do Selection Sort e também
no pior caso do Quick Sort. As propriedades dos Logaritmos e a Função Logarítmica são
requeridas para conjecturar e representar o desempenho do algoritmo Quick Sort.

2.1 Somatórios e propriedades

Dada uma sequência de números a1, a2, a3, ..., a soma ﬁnita a1 + a2 + ... + an em
que n é um número inteiro positivo, pode ser escrita em uma notação de somatório na
forma

n
X

j=1

aj.

O valor de uma soma ﬁnita é sempre bem deﬁnido, e seus termos podem ser
somados em qualquer ordem. Dada uma sequência a1, a2, a3, ... a soma inﬁnita a1 + a2 + ...
pode ser escrita como

∞
X

ak,

cuja convergência é regida pelo limite

k=1

lim
n→+∞

n
X

ak.

k=1

Se o limite existe, a série converge, caso contrário diverge.

Para qualquer número real c e quaisquer sequências ﬁnitas a1 + a2 + ... + an =

e b1 + b2 + ... + bn =

n
X

k=1

bk, valem as seguintes propriedades de linearidade

n
X

k=1

ak

n
X

i)

(ak + bk) =

k=1

n
X

k=1

ak +

n
X

k=1

bk.

ii) Dado, c ∈ R, tem-se que

n
X

(c · ak + bk) = c ·

k=1

n
X

k=1

ak +

n
X

k=1

bk.

Estas propriedades são igualmente válidas caso se tenha uma série convergente.

Exemplo 2.1. Sabendo-se que o somatório

k = 1 + 2 + ... + n, é uma Série Arit-

mética e tem o valor

n
X

k=1

k =

n(n + 1)
2

. Deseja-se calcular o valor de

n
X

(2k + 1).

k=1

n
X

k=1

De fato, pode-se escrever, segundo as propriedades de linearidade

n
X

(2k + 1) = 2 ·

k=1

n
X

k=1

n
X

(1),

k +

k=1

2.1. Somatórios e propriedades

35

que equivale a escrever:

n
X

(2k + 1) = 2 ·

k=1

n(n + 1)
2

+ n = n(n + 2).

Exemplo 2.2. Sabendo-se

n
X

k=1

k2 =

n(n + 1)(2n + 1)
6

é Soma dos Quadrados dos

primeiros n inteiros positivos, deseja-se calcular o valor de

n
X

(2k2 + 1).

k=1

De fato, novamente usando-se as propriedades de linearidade

n
X

(k2 + 1) = 2 ·

k=1

n
X

k=1

k2 +

n
X

k=1

1,

que é equivalente a:

n
X

(2k2 + 1) = 2

k=1

n
X

k=1

k2 + n =

n(n + 1)(2n + 1)
3

+ n =

n [(n + 1)(2n + 1) + 3]
3

Exemplo 2.3.

n
X

k=1

k3 =

!2

 n(n + 1)
2

positivos. Deseja-se calcular o valor de

n
X

(k + 1)3.

k=1

é a Soma dos Cubos dos primeiros n inteiros

De fato, pode-se escrever pelas propriedades de linearidade

n
X

(k+1)3 = 23+33+. . .+n3+(n+1)3+1−1 =

k=1

n
X

k=1

k3+(n+1)3−1 =

!2

 n(n + 1)
2

+(n+1)3−1.

Exemplo 2.4. Para o número real x 6= 1, o somatório

n
X

xk = 1 + x2 + x3 + ... + xn é

uma Série Geométrica ou Série Exponencial e tem valor

k=0

n
X

k=0

xk =

xn+1 − 1
x − 1

.

No caso em que x = 1 temos:

n
X

k=0

xk = 1 + x2 + x3 + ... + xn = 1 +

n
X

k=1

xk = 1 +

n
X

k=1

1k = 1 + n.

Exemplo 2.5. Quando o somatório é inﬁnito e |x| < 1, temos a série geométrica decres-
cente e

∞
X

k=0

xk =

1
1 − x

.

36

Capítulo 2. Matemática e Algoritmos de Ordenação

Não haverá um aprofundamento sobre as propriedades dos somatórios para Séries
Aritméticas e Séries Geométricas, pois não é necessário para o escopo do trabalho
aqui proposto. Havendo apenas um direcionamento sobre séries que representam Progres-
sões Aritméticas (PA) e Progressões Geométricas (PG) assim denominadas, bem como
ensinadas no Ensino Médio. As séries aritméticas serão requeridas no cálculo do número
de comparações dos Algoritmoas de Ordenação Bubble Sort e Selection Sort, já as séries
geométricas têm relevância no cálculo do número de comparações realizado pelo Quick
Sort.

2.2 Função Aﬁm

Esta seção se reporta a uma breve abordagem da Função Aﬁm haja vista que
a análise e comparação da complexidade de algoritmos de Ordenação, como já foi dito
no início deste capítulo, requer a comparação gráﬁca das funções envolvidas das quais
faz parte a Função Aﬁm que será utilizada na observação do melhor caso do algoritmo
Bubble Sort.

De acordo com o livro texto aqui adotado: “Uma função f : R → R chama-se
Função Aﬁm quando existem números reais a e b tais que f (x) = ax + b para todo
x ∈ R (LEONARDO, 2016, p. 85)”.

Exemplo 2.6. A função g : R → R tal que g(x) = − 1
uma Função Aﬁm.

2x + 5 em que a = − 1

2 e b = 5, é

Casos particulares de Função Aﬁm

Uma função f : R → R chama-se Função Constante quando existe um número

real b tal que f (x) = b para todo x ∈ R.

Exemplo 2.7. Uma função t : R → R tal que t(x) = −5 em que a = 0 e b = −5, é uma
Função Constante.

Uma função f : R → R chama-se Função Polinomial do 1o grau quando
existem números reais a e b, com a 6= 0 tais que f (x) = ax + b para todo x ∈ R. Uma
Função Polinomial do 1o grau que tem o coeﬁciente b = 0 recebe o nome de Função
Linear.

Exemplo 2.8. A função h : R → R tal que h(x) = −7x em que a = −7 e b = 0, é uma
Função Linear.

Gráﬁco da Função Aﬁm

O gráﬁco de uma Função Aﬁm é uma reta oblíqua aos eixos Ox e Oy.

2.2. Função Aﬁm

37

Figura 1 – Gráﬁcos de Funções Aﬁns

(a)

Função Aﬁm

(b)

Função Linear

Fonte: Produzido pelo autor

No caso do gráﬁco de uma Função Constante temos uma reta paralela ao eixo Ox.

Figura 2 – Gráﬁco da Função Constante

Fonte: Produzido pelo autor

38

Capítulo 2. Matemática e Algoritmos de Ordenação

Análise do gráﬁco da Função Aﬁm

Uma Função Aﬁm, de lei f (x) = ax + b, pode ser crescente, decrescente ou

constante, dependendo do valor do coeﬁciente a da função.

Figura 3 – Gráﬁco da Função Aﬁm crescente e decrescente

Função crescente

(a)

(b)

Função decrescente

De um modo geral:

• Para uma Função Aﬁm com coeﬁciente a > 0, temos:

∀ x2 < x1 ⇒ ax2 < ax1 ⇒ ax2 + b < ax1 + b, ou seja, f (x2) < f (x1) e f (x) é
crescente.

• Para uma Função Aﬁm com coeﬁciente a < 0 temos:

∀ x2 < x1 ⇒ ax2 > ax1 ⇒ ax2 + b > ax1 + b, ou seja, f (x2) > f (x1) e f (x) é
decrescente.

2.3 Função Quadrática

“Uma função f : R → R chama-se Função Quadrática ou Função Polinomial
do 2o grau quando existem números reais a, b e c, com a 6= 0, tais que f (x) = ax2 + bx + c,
para todo x ∈ R (LEONARDO, 2016, p. 108).”

2.3. Função Quadrática

39

Exemplo 2.9. Seja f : R → R uma função dada por f (x) = 2x2 + 3x − 15, em que a = 2,
b = 3 e c = −15.

Exemplo 2.10. Seja g : R → R uma função dada por g(x) = − x2
b = 0 e c = 5.

4 + 5, em que a = − 1
4,

Exemplo 2.11. Seja h : R → R uma função dada por h(x) = −x +
b = −1 e c = 0.

√

2x2, em que a =

√

2,

Exemplo 2.12. Seja i : R → R uma função dada por i(x) = − 3
e c = 0.

2x2, em que a = − 3

2, b = 0

Gráﬁco da Função Quadrática

O gráﬁco de uma Função Quadrática é uma curva no formato de uma parábola.

Quando representam uma Função Quadrática, as parábolas podem ter a abertura
(concavidade) voltada para cima ou para baixo. Na prática, observamos o sinal do
coeﬁciente a da Função Quadrática dada por f (x) = ax2 + bx + c para determinar o
sentido da concavidade da parábola como está ilustrado na ﬁgura seguinte.

Figura 4 – Gráﬁcos de Funções Quadráticas

(a)

(b)

Fonte: Produzido pelo autor

• Se a > 0, então a parábola que representa a função f tem concavidade voltada para

cima.

• Se a < 0, então a parábola que representa a função f tem concavidade voltada para

baixo.

Elementos do Gráﬁco da Função Quadrática

É importante identiﬁcar os elementos de uma parábola que representa uma
Função Quadrática, pois tais elementos são utilizados como parâmetros na análise de
tal função.

40

Capítulo 2. Matemática e Algoritmos de Ordenação

Vértice da parábola

Na parábola que representa uma Função Quadrática, o vértice corresponde ao
ponto da curva de menor ordenada (quando a > 0) ou de maior ordenada (quando a < 0),
cujas coordenadas são representadas por V (xv, yv). A reta perpendicular ao eixo Ox que
passa pelo vértice da parábola, é denominada eixo de simetria e seus pontos são tais
que x = xv.

As coordenadas do vértice de uma parábola que representa uma Função Qua-
drática de lei f (x) = ax2 + bx + c, com a 6= 0, como ilustrado na ﬁgura a seguir, são dadas

−b
2a

por xv =
e yv =
foco deste trabalho.

−∆
4a

. As demostrações correspondentes foram omitidas, pois não são

Figura 5 – Gráﬁco indicando o vértice da parábola que representa uma Função Quadrática

(a)

(b)

Fonte: Produzido pelo autor

Intervalo de crescimento e decrescimento da função quadrática

Para analisar o intervalo de crescimento e decrescimento da Função Qua-
drática devemos observar a abscissa do vértice (xv) como ilustrado na ﬁgura 5 observa-se
as seguintes situações.

2.4. Função Logarítmica

41

Quando a > 0 temos:

Se x < xv, então a função é decrescente, caso contrário é crescente.

Demonstração 1. Sejam x1 e x2 dois pontos quaisquer do eixo das abscissas tais que
x1 < x2 < xv, temos

x1 <

−b
2a

e x2 <

−b
2a

=⇒ x1 + x2 <

−2b
2a

=

−b
a

.

Daí,

x1 + x2 <

−b
a

.

Como a > 0, multiplicando os dois membros da desigualdade por a obtemos

a · (x1 + x2) < −b.

Temos ainda que (x1 − x2) < 0, multiplicando os dois membros da última desigualdade por
este fator obtém-se

a·(x1+x2)·(x1−x2) > −b·(x1−x2) =⇒ (ax2

1−ax2

2) > −bx1+bx2 =⇒ ax2

1+bx1 > ax2

2+bx2.

Adicionando um número real c a ambos os membros ﬁcamos com

ax2

1 + bx1 + c > ax2

2 + bx2 + c =⇒ f (x1) > f (x2)

Portanto, quando a > 0, temos para todo x < xv, f (x1) > f (x2) e a função é decrescente.
Analogamente, para todo x > xv, f (x1) < f (x2) e a função é crescente.

Quando a < 0 temos:

Se x < xv, então a função é crescente, caso contrário é decrescente.
A prova é análoga à Demonstração 1.

Independente de a > 0 ou a < 0 temos:

Se x = xv, então a função nem é crescente e nem decrescente.

2.4 Função Logarítmica

Como um dos focos nesta pesquisa é a análise da complexidade dos Algoritmos
de Ordenação, não consta aqui todo conteúdo relacionado aos logaritmos, mas apenas
o que diz respeito a algumas deﬁnições e propriedades operatórias, bem como Função
Logarítmica e sua análise gráﬁca. Antes, faremos uma breve abordagem sobre potências e
Função Exponencial com o intuito de basilar melhor a abordagem com a Função Logaritma.
Para tanto, abrimos espaço para uma bibliograﬁa complementar do livro: A Matemática do
Ensino Médio, Vol. 1, SBM, 1997. Cabe observar que em (LEONARDO, 2016) o conjunto
+, enquanto em (LIMA et al., 1997) é indicado por R+.
dos reais positivos é indicado por R∗

42

Capítulo 2. Matemática e Algoritmos de Ordenação

Função Exponencial

Potências de expoente racional

Para todo n ∈ N, a potência an, de base a e expoente n é deﬁnida como o produto

de n fatores iguais a a, ou seja, an = a · a · . . . · a
{z
}
f atores

|

n

.

Para n = 1, temos por deﬁnição que a1 = a, fazendo indução em an obtemos

an+1 = a · an e podemos aﬁrmar que an é valido para todo n ≥ 1.

Temos, para quaisquer m, n ∈ N,

am · an = a · a · . . . · a
|
{z
}
f atores
n

· a · a · . . . · a
|
{z
}
m f atores

= a · a · . . . · a
|
}
{z
n+m f atores

= am+n.

De posse do último resultado, para quaisquer m1, m2, . . . , mk, vale a igualdade

am1 · am2 · . . . · amk = am1+m2+...+mk,

e de modo particular, sendo m1 = . . . = mk = m, temos (am)k = am·k.

Sendo a > 1, como an > 0, podemos escrever an+1 > an. Portanto,

a > 1 ⇒ 1 < a < a2 < . . . < an < an+1 . . .

.

De modo análogo,

0 < a < 1 ⇒ 1 > a > a2 > . . . > an > an+1 > . . .

.

Portanto a sequência cujo o n-ésimo termo é an é:

• crescente quando a > 1;

• decrescente se 0 < a < 1;

• constante quando a = 1.

No caso de n ser inteiro, o signiﬁcado da potência an deve satisfazer a regra

fundamental am · an = am+n.

Vejamos para n=0, neste caso a igualdade a0 · a1 = a0+1 deve ser válida, ou seja,

a0 · a = a e portanto a0 = 1.

O signiﬁcado de a−n pode ser obtido observando-se que, para qualquer n ∈ N, −n

é negativo e devemos ter a−n · an = a−n+n = a0 = 1, ou seja, a−n =

1
an .

A função f : Z → R+, dada por f (n) = an, n ∈ Z, além de cumprir a igualdade
fundamental é ainda crescente quando a > 1 e decrescente se 0 < a < 1. Em particular,

2.4. Função Logarítmica

43

• para a > 1 e n ∈ N, tem-se a−n < 1 < an;

• para 0 < a < 1 e n ∈ N, tem-se an < 1 < a−n.

De am · an = am+n, segue-se que

(am)n = am · am · . . . · am
}
n

{z
f atores

|

= a · a · . . . · a
{z
}
m f atores

|

· a · a · . . . · a
|
{z
}
m f atores

· . . . · a · a · . . . · a
{z
}
m f atores

|

= am·n

|

{z
n·m f atores

}

com m, n ∈ Z.

Agora, vejamos o sentido que pode ser dado à potência ar quando r = m

n , com

m ∈ Z e n ∈ N. Mantendo válida a igualdade ar · as = ar+s, temos

(ar)n = ar · ar · . . . · ar = ar+r+...+r = ar·n = am.

Portanto ar é o número real positivo cuja n-ésima potência é igual a am. Por
am. Assim, a única maneira de deﬁnir a potência ar,

√
deﬁnição de raiz, este número é n
com r = m

n , m ∈ Z e n ∈ N, consiste em pôr

ar = a

m

√
n = n

am.

Os detalhes complementares desta última deﬁnição podem ser encontrados em

(LIMA et al., 1997).

Quanto ao signiﬁcado da potência ax para x ∈ R, está além do escopo desse
trabalho, considerando-se válidas as mesmas propriedades das potências com expoente
racional vistas anteriormente.

Feitas as considerações a respeito das potências e propriedades segue a deﬁnição
da Função Exponencial. Seja a um número real positivo, que suporemos sempre diferente
de 1, e R+ o conjunto dos números reais positivos. A Função Exponencial de base a,
f : R → R+, indicada pela notação f (x) = ax, deve ser deﬁnida de modo a ter as seguintes
propriedades, para quaisquer x, y ∈ R:

1. ax · ay = ax+y;

2. a1 = a;

3. x < y ⇒ ax < ay quando a > 1 e x < y ⇒ ay < ax quando 0 < a < 1.

Não é de interesse deste trabalho aprofundar o tema Função Exponencial. A
abordagem feita aqui teve o intuito de servir de base para algumas propriedades da Função
Logarítmica abordadas no texto. Portanto a caracterização e as demonstrações serão
omitidas e podem ser encontradas em (LIMA et al., 1997).

44

Capítulo 2. Matemática e Algoritmos de Ordenação

Logaritmos e propriedades

De acordo com (LEONARDO, 2016): “Dados os números reais positivos a e b com

a 6= 1, o logaritmo de b na base a é o número real x tal que ax = b. Ou seja:

loga b = x ⇐⇒ ax = b.

O número b é conhecido por logaritmando”. Algumas consequências da deﬁnição são:

• loga 1 = 0

• loga a = 1

• loga an = n

• aloga n = n

• loga m = loga n ⇐⇒ m = n

Satisfeitas as condições de existência de um logaritmo, as propriedades operatórias

dos logaritmos são:

Logaritmo do produto: loga (b · c) = loga b + loga c.

Demonstração 2. Deﬁnindo-se,

loga(bc) = x,

loga b = y

e

loga c = z.

Essas respectivas equações são equivalentes a escrever:

ax = bc,

ay = b

e az = c.

Logo pode-se escrever:

ax = ayaz = ay+z

Segue-se que x = y + z e portanto,

loga(bc) = loga b + loga c

Logaritmo do quociente: loga

(cid:17)

(cid:16) b
c

= loga b − loga c.

Demonstração 3. Analogamente a Demonstração 2, tem-se:

loga

!

  b
c

= x,

loga b = y

e

loga c = z.

Que são, respectivamente, equivalentes a,

ax =

b
c

,

ay = b

e az = c

2.4. Função Logarítmica

45

Daí,

Portanto,

ax = ay−z ⇐⇒ x = y − z

loga

!

  b
c

= loga b − loga c

Logaritmo de uma potência: loga bn = n · loga b.

Demonstração 4. Segue uma consequência imediata da Demonstração 1, ou seja,

loga bn = loga (b · b ·

. . .

Função Logarítmica

· b) = loga b + loga b + · · · + loga b
}
n

{z
vezes

|

= n · loga b

Sendo R∗

+ o conjunto dos números reais positivos, segundo (LEONARDO, 2016),
+ → R chama-se Função Logarítmica quando existe um número real

“Uma função f : R∗
a, com a > 0 e a 6= 1, tal que f (x) = loga x para todo x ∈ R∗

+”.

Exemplo 2.13. Seja f : R∗

+ → R deﬁnida por f (x) = log2 x.

Exemplo 2.14. Seja g : R∗

+ → R deﬁnida por g(x) = log0,3 x.

Exemplo 2.15. Seja h : R∗

+ → R deﬁnida por h(x) = log 1

x.

2

Gráﬁco da Função Logarítmica

O gráﬁco da Função Logarítmica representada por f (x) = loga (x) deﬁnida
anteriormente, possui o eixo Oy como assíntota vertical e intersecta o eixo Ox no ponto
(1, 0).

Figura 6 – Gráﬁcos de Funções Logarítmicas

(a)

(b)

Fonte: O próprio autor

46

Capítulo 2. Matemática e Algoritmos de Ordenação

O crescimento e decrescimento da Função Logarítmica também podem ser

observados nos gráﬁcos (a) e (b) acima.

Se a > 1, a função f é crescente.

Demonstração 5. Seja a > 1, considere x1, x2 ∈ R∗
Podemos escrever

+ e suponhamos x1 < x2.

f (x1) = loga x1 ⇐⇒ af (x1) = x1 e f (x2) = loga x2 ⇐⇒ af (x2) = x2.

Daí,

af (x1) < af (x2) ⇐⇒ f (x1) < f (x2)

Se 0 < a < 1, a função f é decrescente.

Demonstração 6. É análoga à Demonstração 5.

É importante destacar que em (a) a função é estritamente crescente no intervalo

(0, +∞) e em (b) estritamente decrescente no mesmo intervalo.

3 Algoritmos de Ordenação e Com-

plexidade

47

O início deste capítulo aborda alguns conceitos básicos sobre algoritmos para
posteriormente serem deﬁnidos e exempliﬁcados os Algoritmos de Ordenação, também
realizar-se-á a análise da complexidade (desempenho) dos Algoritmos de Ordenação aqui
descritos. Vale lembrar que não haverá descrição de todos os algoritmos, visto que são
inúmeros e seria desnecessário para o que se propõe nesta pesquisa. Sendo assim, serão
analisados apenas os Algoritmos de Ordenação: Bubble Sort, Selection Sort e Quick Sort.
Quanto à complexidade, também chamada de desempenho ou custo, serão observados,
para um vetor de n elementos, o melhor caso, quando o vetor já está ordenado, o pior caso,
quando o vetor está ordenado ao contrário e o caso médio, que calcula em média o tempo
para se percorrer n/2 elementos do vetor para obter o elemento procurado na ordenação.
Tais situações serão melhor esclarecidas no decorrer do trabalho, uma vez que no Quick
Sort os casos de desempenho se apresentam de forma diferente dos outros dois algoritmos
citados. Por ﬁm, serão analisadas as complexidades graﬁcamente comparando-as por meio
das funções que as representam utilizando a análise assintótica e também será realizada
uma breve abordagem sobre ﬂuxogramas.

3.1 Conceitos básicos

Um dos primeiros contatos que temos com algoritmos é utilizando o Algoritmo de
Euclides para divisão entre números naturais, contudo, quando ocorrem esses primeiros
contatos, não há ainda uma relação de tal algoritmo com tecnologia computacional e nem
clareza quanto ao conceito mais amplo de algoritmo.

O signiﬁcado de algoritmo que se apresenta nos primeiros contatos do estudante
com tal conceito é mais relacionado com conceitos e procedimentos matemáticos, porém
a deﬁnição é mais abrangente. Pode-se deﬁnir algoritmo como “um conjunto de regras e
operações bem deﬁnidas e ordenadas, destinadas à solução de um problema ou de uma
classe de problemas, em um número ﬁnito de etapas (RIBEIRO, 2018, p. 32)”. Um algoritmo
matemático pode ser passível de programação computacional e existem algoritmos não-
computacionais, como por exemplo: tomar um banho. De acordo com (CORMEN, 2002),
“um algoritmo é qualquer procedimento computacional bem deﬁnido que toma algum valor
ou um conjunto de valores como entrada e produz algum valor ou conjunto de valores
como saída”. O mesmo autor defende que um algoritmo é uma ferramenta para resolver
um problema computacional bem especiﬁcado e problemas de ordenação são comuns, a

48

Capítulo 3. Algoritmos de Ordenação e Complexidade

ordenação é uma operação fundamental na ciência da computação. Problemas de busca
na internet, compras de produtos online e alocação de recursos na indústria são alguns
exemplos onde se podem necessitar do uso de algoritmos. Observou-se, no Capítulo 1,
que uma das competências sugeridas na BNCC é estimular o estudante desenvolver o
pensamento computacional por meio da interpretação e elaboração de algoritmos.

Mesmo que se tenha, por hipótese, computadores com boa velocidade e boa memória,
é necessário que haja métodos mais fáceis de serem implementados e rápidos na resolução
dos problemas computacionais. Signiﬁca que um algoritmo mais eﬁciente torna o tempo
de execução e o espaço na memória mais viáveis. Daí, para resolver o mesmo problema
computacional podem ser usados métodos que diferem na eﬁciência e que independem do
hardware utilizado. Serão avaliados posteriormente Algoritmos de Ordenação que utilizam
métodos de ordenação por comparação sendo alguns mais simples, porém menos eﬁcientes
e outros de implementação mais complexa com melhor eﬁciência.

Uma ordenação por comparação simples realiza ou não a troca dos elementos
dos vetores dois a dois após compará-los, é o caso de uma ordenação por seleção. Nele,
para uma ordenação crescente, percorre o vetor até encontrar o menor valor e coloca-o na
primeira posição, depois percorre novamente o vetor em busca do segundo menor valor
e localiza-o na segunda posição e assim sucessivamente até que o vetor ﬁque ordenado.
Como exemplo dessa categoria de algoritmo temos o Selection Sort e um que utiliza
ordenação por comparação mais simples do que por seleção e está aqui exempliﬁcado
pelo Bubble Sort. Apesar de utilizarem um paradigma de ordenação semelhante, visto
que após realizadas as comparações dos elementos se coloca os mesmos na posição e
ordem almejadas, não utilizam o mesmo procedimento, e por isso é importante que
conheçamos mais de um algoritmo dessa categoria. Outro algoritmo que utiliza ordenação
por comparação é o Quick Sort, porém com uma técnica chamada divisão e conquista
que consiste em dividir um problema a ser resolvido em problemas menores, que podem
ser divididos em partes ainda menores, encontram-se as soluções dos problemas menores
e combina-se as soluções dos problemas menores em uma solução global que resolve o
problema inicial. O algoritmo de ordenação mais conhecido que se utiliza desse método
é o Merge Sort, contudo a escolha nesta pesquisa foi pelo Quick Sort e teremos seus
detalhes colocados mais adiante.

Para realizar-se a comparação da eﬁciência dos algoritmos será utilizada a notação
assintótica ou notação O-grande, representada pelo símbolo O. Tal notação O-grande
refere-se a um limite assintótico superior. Vale salientar que ao analisar assintoticamente
os algoritmos de ordenação, considera-se o termo de maior crescimento da lei de formação
da função que representa o desempenho do Algoritmo de Ordenação e que não é intuito do
escopo desse trabalho um aprofundamento tanto no que diz respeito à representação da
notação assintótica acima citada como o motivo da escolha do termo de maior crescimento

3.1. Conceitos básicos

49

que nos referimos anteriormente.

Quando observamos tamanhos de entrada grandes o suﬁciente para
tornar relevante apenas a ordem de crescimento do tempo de execução,
estamos estudando a eﬁciência assintótica dos algoritmos. Ou seja,
estamos preocupados com a maneira como o tempo de execução de um
algoritmo aumenta com o tamanho da entrada no limite, à medida que o
tamanho da entrada aumenta indeﬁnidamente. Em geral, um algoritmo
que é assintoticamente mais eﬁciente será a melhor escolha para todas
as entradas, exceto as muito pequenas. (CORMEN, 2002, Parte I, p. 51)

O mesmo autor acrescenta que a eﬁciência assintótica é deﬁnida em termos de
funções cujo domínio é N, contudo, às vezes é conveniente abusar da notação assintótica
para um subconjunto de N ou ao domínio dos números reais.

Para uma dada função g(n), denotamos por O(g(n)) o conjunto de funções
O(g(n)) = {f(n): existem constantes c e no tais que 0 ≤ f (n) ≤ c · g(n) para todo
n ≥ no}.

Exemplo 3.1. Considere as funções f (n) = n2 + 5n + 1 e g(n) = n2.
Tem-se, para n ≥ 1, n2 + 5n + 1 ≤ n2 + 5n2 + n2 = 7 · n2 =⇒ f (n) ≤ 7 · g(n).
Portanto,

f (n) ∈ O(g(n))

.

Segundo (CORMEN, 2002, p. 35), “para indicar que uma função f (n) é membro

de O(g(n)), escrevemos f (n) = O(g(n))”.

Exemplo 3.2. Considere as funções f (n) = 100 log2 n + 2n · log2 n − 10n, h(n) = log2 n e
g(n) = n · log2 n. Mostraremos que f (n) é assintoticamente representada na notação Big-O
por O(n · log2 n). De fato, as funções h(n) e g(n) são estritamente crescentes para todo
n ≥ 2, daí pode-se escrever,

log2 n2 ≤ log2 nn.

E assim, pode-se aﬁrmar que 100 log2 n ≤ 50n · log2 n e somando-se 2n log2 n a esta
desigualdade ambos lados tem-se,

100 log2 n + 2n · log2 n ≤ 50n · log2 n + 2n · log2 n.

Subtraindo-se −10n ambos lados e sabendo que −10n ≤ n · log2 n tem-se,

100 log2 n + 2n · log2 n − 10n ≤ 50n · log2 n + 2n · log2 n + n · log2 n.

Segue-se que,

100 log2 n + 2n · log2 n − 10n ≤ 53 · n · log2 n.

Logo, 0 ≤ f (n) ≤ c · g(n)

e

f (n) = O(g(n)) = O(n · log2 n).

50

Capítulo 3. Algoritmos de Ordenação e Complexidade

Outro conceito também utilizado no estudo de algoritmos é o de ﬂuxograma que
é um diagrama escrito em uma notação gráﬁca simples, usado para representação visual
de um algoritmo. Como exemplo simples de um ﬂuxograma, podemos observar a ﬁgura a
seguir que trata da construção de um quadrado.

Figura 7 – Fluxograma indicando um algoritmo para formar um quadrado.

Tente desenhar no seu caderno, a ﬁgura que o ﬂuxograma abaixo propõe.
Os giros deverão ser feitos apenas no sentido anti-horário.

Fonte:<https://novaescola.org.br/plano-de-aula/5129/interpretando-ﬂuxogramas>

Existem algumas normas para a construção de um ﬂuxograma que serão abordadas
em momento oportuno e também serão observados mais exemplos sobre o tema no ﬁnal
do capítulo.

3.2 Algoritmos de ordenação

Serão analisados a seguir dois Algoritmos de Ordenação que fazem uso de estratégias
de comparação distintas, são eles: Bubble Sort e Selection Sort. Apesar de utilizarem método
aﬁm, ou seja, paradigmas semelhantes, os mesmos diferem no procedimento e têm sua
eﬁciência diferindo no melhor caso, contudo se faz necessário analisá-los no pior caso e no
caso médio observando as diferenças nos desempenhos.

Muitas vezes o caso médio é quase tão ruim quanto o pior caso [. . . ] Em
média, metade do elementos em A[1, 2, 3, . . . , j − 1] são menores que A[j],
e metade são maiores. [. . . ] Se desenvolvermos o tempo de execução do
caso médio resultante, ele será uma função quadrática do tamanho da
entrada, exatamente como o tempo de execução do pior caso. (CORMEN,
2002, Parte I, p. 20)

Apesar de se fazer referência no texto em alguns exemplos, o caso médio não será
prioritário em nossas análises, pois a análise assintótica tem como principal preocupação
um número muito grande de elementos de um vetor a ser ordenado avaliando o pior caso,
além disso o caso médio é considerado difícil de obter sua complexidade visto que nem
sempre é claro o que seria o caso médio em relação à distribuição dos elementos do vetor a
ser ordenado, como ocorre com o Quick Sort.

3.2. Algoritmos de ordenação

3.2.1 Bubble Sort

51

O Algoritmo de Ordenação Bubble Sort é considerado um dos mais simples,
também é conhecido por Ordenação por Flutuação, daí o nome Bubble cuja tradução para
o Português é Bolha. Seu procedimento se dá da seguinte maneira: para uma ordenação
crescente, iniciando-se com o primeiro, cada elemento do vetor se compara com o posterior,
caso este seja maior, muda de posição com o mesmo, caso não o seja, a troca de posição
não é feita e passa-se para o próximo par de comparação. Para uma ordenação decrescente,
o elemento se compara com o posterior, caso seja maior, não muda sua posição atual.
Segue-se para o próximo par de comparação e assim sucessivamente até que o vetor
esteja ordenado. Além da simplicidade outra vantagem desse Algoritmo de Ordenação é a
estabilidade, mas a lentidão o deixa em desvantagem em relação a outros Algoritmos de
Ordenação. É indicando para pequenos vetores e contraindicado para vetores com número
grande de elementos.

Exemplo 3.3. Considere o vetor A = (5, 4, 3, 2, 1), que possui o número de elementos
n = 5. O objetivo é colocá-lo em ordem crescente com a estratégia de comparação do
Bubble Sort. O vetor A caracteriza o pior caso do Bubble Sort.
Os procedimentos se dão da seguinte maneira:
Passo I. 5 compara com 4 e troca de posição, pois 5>4;
Passo II. 5 compara com 3 e troca de posição, pois 5>3;
Passo III. 5 compara com 2 e troca de posição, pois 5>2;
Passo IV. 5 compara com 1 e troca de posição, pois 5>1.
Agora ocorre o mesmo com o 4.
Passo V. 4 compara com 3 e troca de posição, pois 4>3;
Passo VI. 4 compara com 2 e troca de posição, pois 4>2;
Passo VII. 4 compara com 1 e troca de posição, pois 4>1.
Passo VIII. 3 compara com 2, como 3 < 2, troca de posição com este.
Passo IX. 3 compara com 1 e também troca de posição com ele.
Passo X. 2 compara com 1 e troca de posição.

Outra forma de representar o procedimento está descrito na tabela a seguir.

Tabela 2 – Exemplo do Bubble Sort com 5 elementos, n = 5, representando o pior caso.

VETOR No de comparações
5-4-3-2-1
4-3-2-1-5
3-2-1-4-5
2-1-3-4-5
1-2-3-4-5

4 comparações (5 e 4, 5 e 3, 5 e 2, 5 e 1).
3 comparações (4 e 3, 4 e 2, 4 e 1).
2 comparações (3 e 2, 3 e 1).
1 comparação (2 e 1).
(n − 1) iterações: vetor ordenado.

Fonte: Adaptado de <https://www.ic.unicamp.br/~oliveira/doc/mc102_2s2004/aula_Ordenacao1.pdf>

52

Capítulo 3. Algoritmos de Ordenação e Complexidade

Seja, por exemplo, Cn a quantidade de comparações quando se retira o elemento a
de um vetor de n elementos. Portanto tem-se Cn = n − 1 comparações. Com esta ideia
pode-se escrever

n
X

i=1

Ci = (n − 1) + (n − 2) + · · · + 1 =

n(n − 1)
2

=

n2
2

−

n
2

(3.1)

comparações no pior caso. Sua eﬁciência(complexidade) é, assintoticamente, representada
por O(n2). No melhor caso do Bubble Sort, quando o vetor já se encontra ordenado, teremos
apenas (n − 1) iterações e sua eﬁciência(complexidade) é representada por O(n). No pior
caso temos uma complexidade representada por um função quadrática e no melhor caso
por uma função linear. Vejamos outro exemplo com um vetor desordenado e com número
maior de elementos.

Exemplo 3.4. Dado o vetor w = (7, 12, 5, 0, 21, 3, 6, 1, 2, 9), com o número de elementos
n = 10, utilizando a estratégia do Algoritmo Bubble Sort, teremos a seguinte conﬁguração
de comparações para uma ordenação crescente:
Passo I. 7 compara com 12 e não troca de posição, já que 7< 12;
Passo II. 12 compara com com 5 e troca de posição, visto que 12>5;
Passo III. 12 compara com 0 e troca de posição, uma vez que 12>0;
Passo IV. 12 compara com 21 e não troca de posição, pois 12<21;
Passo V. 21 compara com 3 e muda de posição, já que 21>3;
Passos VI a IX. 21 compara com 6, 1, 2 e 9 e muda de posições com os mesmos, visto
que 21>6, 21>1, 21>2 e 21>9.
Continuando com nossas comparações temos:
Passos X e XI 7 compara com 5, 0 e troca de posição com os mesmos, pois 7>5 e 7>0;
Passo XII. 7 compara com 12, que ﬁcou na posição do 21, e não troca de posição pois
7<12;
Passos XIII a XVI. 12 compara com 3, 6, 1, 2, 9 e troca de posição com os mesmos,
haja vista que 12>3, 12>6, 12>1 e 12>2;
Temos 12 e 21 nas posições corretas.
Passo XVII. 5 compara com 0 e troca de posição, já que 5>0;
Passo XVIII. 5 compara com 7 e não troca de posição, porque 5<7;
Passos XIX a XXII. 7 compara com 3, 6, 1, 2 e troca de posição com estes;
Passo XXIII. 7 compara com 9 e não troca de posição, pois 7<9.
9 já foi comparado com 12 e 21, e ﬁca na antepenúltima posição.
Continuaremos com as comparações até o Passo XLV de modo que tenhamos o vetor
ordenado.

Apresenta-se na tabela abaixo, como no exemplo anterior, uma representação dos
procedimentos aqui realizados com o vetor w, cuja conﬁguração inicial não está em ordem
crescente ou decrescente.

3.2. Algoritmos de ordenação

53

Tabela 3 – Exemplo do Bubble Sort com vetor de 10 elementos, n = 10, representando o

caso médio.

VETOR
7-12-5-0-21-3-6-1-2-9
7-5-0-12-3-6-1-2-9-21
5-0-7-3-6-1-2-9-12-21
0-5-3-6-1-2-7-9-12-21
0-3-5-1-2-6-7-9-12-21
0-3-1-2-5-6-7-9-12-21
0-1-2-3-5-6-7-9-12-21
0-1-2-3-5-6-7-9-12-21
0-1- 2-3-5-6-7-9-12-21
0-1-2-3-5-6-7-9-12-21

No de comparações
9 comparações (7 e 12, 12 e 5, 12 e 0, 12 e 21,21 e 3, 21 e 6, 21 e 1, 21 e 2, 21 e 9).

8 comparações (7 e 5, 7 e 0, 7 e 12, 12 e 3, 12 e 6, 12 e 1, 12 e 2, 12 e 9).

7 comparações (5 e 0, 5 e 7, 7 e 3, 7 e 6, 7 e 1, 7 e 2, 7 e 9).

6 comparações (0 e 5, 5 e 3, 5 e 6, 6 e 1, 6 e 2, 6 e 7).

5 comparações (0 e 3, 3 e 5, 5 e 1, 5 e 2, 5 e 6).

4 comparações (0 e 3, 3 e 1, 3 e 2, 3 e 5).

3 comparações (0 e 1, 1 e 2, 2 e 3).

2 comparações (0 e 1, 1 e 2).

1 comparação (0 e 1).

(n − 1) iterações: vetor ordenado.

Fonte: Adaptado de <https://www.ic.unicamp.br/~oliveira/doc/mc102_2s2004/aula_Ordenacao1.pdf>

Considerando um vetor de n elementos, analogamente a 3.1, temos o total de

comparações Cn, assim como no pior caso, representado por

n
X

i=1

Ci = (n − 1) + (n − 2) + · · · + 1 =

n(n − 1)
2

=

n2
2

−

n
2

(3.2)

comparações para o caso médio, onde o vetor não se encontra totalmente em ordem
crescente ou decrescente. Sua complexidade é, assintoticamente, representada por O(n2).

3.2.2 Selection Sort

O termo Selection Sort vem do inglês e signiﬁca Ordenação por seleção,
também utiliza o método ou paradigma da comparação por seleção ou seleção direta. Nela,
a ideia é ordenar a lista selecionando em cada iteração os menores itens e ordenando-os
da esquerda para direita em caso de ordem crescente. Quando o menor elemento da lista
é localizado na 1a posição a iteração ocorre para localizar o segundo menor elemento da
lista na 2a posição e assim sucessivamente até que a lista se ordene em ordem crescente.
Algumas vantagens desse algoritmo são: fácil implementação e uso de pouca memória.
Entre as desvantagens temos como principal seu desempenho, é ruim em todos os casos:
melhor, médio e pior, sendo indicado apenas para pequenas listas e não é um algoritmo
estável.

Exemplo 3.5. Consideremos a lista(vetor) B = (5, 3, 1, 2, 4), com n = 5 elementos, a
qual será ordenada de acordo com os seguintes procedimentos do Selection Sort.
Passo I. 5 compara com 3, 3 é menor e troca de posição com 5, assim 3 vai para 1a
posição;
Passo II. 3 compara com 1, 1 é menor e troca de posição com 3, ou seja, 1 ﬁca na 1a
posição e 3 na 3a posição;

54

Capítulo 3. Algoritmos de Ordenação e Complexidade

Passo III. 1 compara com 2, 1 é menor e continua sem trocar;
Passo IV. 1 compara com 4; 1 é menor e continua sem trocar.
O 1 é o menor elemento e ocupa a 1a posição, após isso temos:
Passo V. 5 compara com 3, 3 é menor e muda de posição com 5;
Passo VI. 3 compara com 2, 2 é menor e muda de posição com 3;
Passo VII. 2 compara com 4, 2 é menor e não muda de posição.
O 2 irá para a 2o posição no lugar do 3, e o 3 irá para 4a posição.
Em seguida teremos
Passo VIII. 5 compara com 3, 3 é menor e muda de posição com 5;
Passo IX. 3 compara com 4, 3 é menor e não muda de posição.
O 3 irá para a 3a posição no lugar do 5, que está na posição inicial do 1 e o 5 vai para a
4a posição, onde estava o 3. Realizada a troca, teremos a última comparação:
Passo X. 5 compara com 4, 4 é menor e muda de posição com 5. O 4 vai para 4a posição
e o 5 para 5a posição.

A representação dos procedimentos realizados resumem-se na tabela abaixo.

Tabela 4 – Exemplo do Selection Sort com 5 elementos, n = 5, representando o caso

médio.

VETOR No de comparações
5-3-1-2-4
1-5-3-2-4
1-2-5-3-4
1-2-3-5-4
1-2-3-4-5

4 comparações (5 e 3, 3 e 1, 1 e 2, 1 e 4)
3 comparações (5 e 3, 3 e 2, 2 e 4)
2 comparações (5 e 3, 3 e 4)
1 comparação (5 e 4)
(n − 1) iterações: vetor ordenado

Fonte: Adaptado de <https://www.ic.unicamp.br/~oliveira/doc/mc102_2s2004/aula_Ordenacao1.pdf>

Utilizando o mesmo raciocínio de 3.1 e 3.2, para um vetor de n elementos temos o

total de Comparações Cn dado por

n
X

i=1

Ci = (n − 1) + (n − 2) + ... + 1 =

n(n − 1)
2

=

n2
2

−

n
2

(3.3)

comparações em qualquer caso. Sua eﬁciência é representada assintoticamente por O(n2).

Exemplo 3.6. Dado o vetor C = (5, 9, 16, 57, 7, 2, 3), com n = 7 elementos, a ordenação
com a estratégia do Selection Sort se dá da seguinte maneira:
Passo I. 5 compara com 9, como 5 é menor não muda de posição com o 9;
Passo II a IV. 5 compara com 16, 57 e 7, não mudando de posição com nenhum deles;
Passo V. 5 compara com 2, como 2 é menor muda de posição com 5;
Passo VI. 2 compara com 3, como 2 é menor não muda de posição.
Teremos, então, o 2 na 1a posição.
Em seguida, continuamos as comparações a partir do 9 que está na 2a posição.

3.2. Algoritmos de ordenação

55

Passo VII e VIII. 9 compara com 16 e 57, mas não muda de posição, pois é menor que
estes;
Passo IX. 9 compara com 7, como 7 é menor, muda de posição com o 9;
Passo X. 7 compara com 5, como 5 é menor, muda de posição com o 7;
Passo XI. 5 compara com 3 e muda de posição com o mesmo, pois 5>3.
Assim, temos o 3 na 2a posição. Fazemos agora as comparações começando a iteração com
o 16.
Passo XII. 16 compara com 57 e não muda de posição;
Passo XIII. 16 compara com 9 e troca de posição com o mesmo, porque 16>9;
Passo XIV. 9 compara com 7 e troca de lugar com este;
Passo XV. 7 compara com 5 e troca de lugar com ele, pois 5<7.
Temos agora a seguinte ordem: 2, 3, 5, 57, 16, 9 e 7. A partir daí,
Passo XVI. 57 compara com 16 e troca de posição;
Passo XVII. 16 compara com com 9 e também troca de posição com este;
Passo XVIII. 9 compara com 7 e troca de posição com o mesmo.
Ficamos com o 7 na 4a posição e o vetor agora ﬁcou ordenado assim: 2, 3, 5, 7, 57, 16 e 9.
Passo XIX. O 57 compara com 16 e troca de posição;
Passo XX. 16 compara com 9 e troca de posição.
O 9 ﬁca na 5a posição e o vetor ﬁca na seguinte ordem: 2, 3, 5, 7, 9, 57, 16.
Passo XXI. 57 compara com 16 e troca de posição, ﬁnalizando a ordenação do vetor.

Todo o procedimento está resumido na tabela a seguir.

Tabela 5 – Exemplo do Selection Sort com n = 7 elementos, representando o caso médio.

VETOR
5-9-16-57-7-2-3
2-9-16-57-7-5-3
2-3-16-57-9-7-5
2-3-5-57-16-9-7
2-3-5-7-57-16-9
2-3-5-7-9-57-16
2-3-5-7-9-16-57

No de comparações
6 comparações (5 e 9, 5 e 16, 5 e 57, 5 e 7, 5 e 2, 2 e 3)
5 comparações (9 e 16, 9 e 57, 9 e 7, 7 e 5, 5 e 3)
4 comparações (16 e 57, 16 e 9, 9 e 7, 7 e 5)
3 comparação (57 e 16, 16 e 9, 9 e 7)
2 comparações (57 e 16, 16 e 9)
1 comparação (57 e 16)
(n − 1) iterações: vetor ordenado

Fonte: Adaptado de <https://www.ic.unicamp.br/~oliveira/doc/mc102_2s2004/aula_Ordenacao1.pdf>

Para um vetor de n elementos, de modo análogo a 3.3 temos

n
X

i=1

Ci = (n − 1) + (n − 2) + ... + 1 =

n(n − 1)
2

=

n2
2

−

n
2

(3.4)

comparações em qualquer caso, com complexidade representada por O(n2).

56

Capítulo 3. Algoritmos de Ordenação e Complexidade

3.2.3 Quick Sort

Será visto nesta seção um Algoritmo de Ordenação chamado Quick Sort. O
mesmo utiliza uma estratégia de ordenação por comparação bastante diferente das duas
abordadas anteriormente, conhecida por divisão e conquista. Neste tipo de Algoritmo
de Ordenação o vetor é dividido em duas partes a partir de um elemento denominado
pivô, antes do pivô são colocados os elementos menores ou iguais ao mesmo e depois dele
os elementos maiores. O processo se repete em cada uma das partes sucessivamente até
que se obtenha partes com apenas um elemento. Para ﬁnalizar, acontece o que chama-
se de conquista, os resultados são combinados e obtém-se o resultado esperado. É um
algoritmo bastante popular, considerado rápido e eﬁciente, utiliza técnicas de recursão
sendo considerado complexo e não estável. A escolha do pivô e forma de particionamento
são situações que não serão levadas em conta neste estudo, interessando apenas a análise
e comparação com os demais algoritmos em estudo. No esquema a seguir apresenta-se
um exemplo de como seria a ordenação utilizando a estratégia de divisão e conquista do
Quick Sort.

Exemplo 3.7. Dado o vetor Q = (5, 3, 4, 9, 1, 7, 6, 8, 2) nesta ordem, sendo n = 9. Uma
das possíveis ordenações utilizando o Quick Sort seria:

5 3 4 9 1 7 6 8 2
Considere o pivô escolhido 5.

Considere r a última posição dos elementos que formam o vetor e p 6= r qualquer
outra posição que um elemento ocupa no vetor. Após a escolha do pivô, este ﬁca na
posição r e para que os valores menores que o pivô ﬁquem antes dele e os valores maiores
que ele ﬁquem depois, as comparações ocorrem da seguinte maneira: são criadas duas
variáveis i e j representando as posições dos valores, estas variáveis serão usadas para
percorrer o vetor de entrada de modo que cada posição i será percorrida da esquerda para
direita, para localizar elementos com valores menores que o pivô, e cada posição j também
será percorrida da esquerda para a direita, até localizar elementos maiores que o pivô.
Inicia-se com i = j − 1, ao tempo em que j vai percorrendo o vetor, na busca dos valores
maiores que o pivô, i vai logo após localizando os valores menores que o pivô. À medida
que forem localizando, respectivamente, valores maiores e menores, passam para posição
imediatamente posterior até que j localize um valor menor que o pivô e i localize um valor
maior que o pivô, neste caso o valor de posição j troca de lugar com o valor de posição
i. O procedimento continua até que todos os valores menores que o pivô estejam numa
posição p ≤ i e os valores maiores que o pivô estejam numa posição i < p ≤ j. Feito isso,
o pivô ocupará a posição i + 1. Com relação ao vetor Q teremos:

|{z}
i→

3
|{z}
j→

4 9 1 7 6 8 2

5
|{z}
r

3.2. Algoritmos de ordenação

57

9 1 7 6 8 2

3
|{z}
i→

4
|{z}
j→

3

4
|{z}
i→

9
|{z}
j→

1 7 6 8 2

3 4

9
|{z}
i→

1
|{z}
j→

7 6 8 2

5
|{z}
r

5
|{z}
r

5
|{z}
r

Agora o valor 1 muda de posição com o valor 9 e continuamos com o vetor no

seguinte formato.

3 4

1
|{z}
i→

9
|{z}
j→

7 6 8 2

3 4 1

9
|{z}
i→

7
|{z}
j→

6 8 2

3 4 1

3 4 1

3 4 1

9
|{z}
i→

9
|{z}
i→

9
|{z}
i→

8 2

7

6
|{z}
j→

7 6

2

8
|{z}
j→

7 6 8

2
|{z}
j→

5
|{z}
r

5
|{z}
r

5
|{z}
r

5
|{z}
r

5
|{z}
r

Observe que ocorreu, simultaneamente, de j localizar um valor menor que o pivô 5
e i localizar um valor maior que o pivô 5. Daí, o valor 2 muda de posição com o valor 9,
ﬁcando o vetor com nova conﬁguração.

3 4 1

2
|{z}
i→

7 6 8

9
|{z}
j→

5
|{z}
r

Temos que j está na posição r − 1 e já encerrou o percurso pelo vetor, de modo que
o valor na posição i também não sofrerá mais nenhuma troca com algum valor de posição
j. Assim, o pivô 5 de posição r ocupará a posição i + 1 e ﬁcaremos com dois subvetores: o
primeiro antes do pivô, com elementos menores que 5 e o segundo, depois do pivô, com
elementos maiores que 5.

5

3 4 1 2

7 6 8 9

Escolhemos agora, nos subvetores, os pivôs 3 e 9, respectivamente, ocorrendo o
mesmo procedimento nos subvetores quando o pivô foi 5. A conﬁguração nos dois subvetores
ﬁcam como segue.

58

Capítulo 3. Algoritmos de Ordenação e Complexidade

1 2 3 4

7 6 8 9

Agora escolhemos nos subvetores 1 2 e 7 6 8 os pivôs 1 e 6 , respectivamente.
Novamente a estratégia de divisão é efetuada e os subvetores ﬁcam com a seguinte ordem:

1 2

e

6 7 8

Apesar de o vetor já estar ordenado, os subvetores sofrem subdivisões até que se
obtenha o último subvetor com tamanho unitário. Desse modo, no subvetor, não unitário,
7 8 , escolhemos o pivô 7 . Executado novamente o procedimento de divisão do Quick
Sort, ﬁcando o vetor ordenado como segue.

1 2 3 4 5 6 7 8 9

Observe que a escolha do pivô é aleatória, mas o pivô ideal seria aquele que dividisse
o vetor ou subvetor em tamanhos aproximadamente iguais, ou seja, um pivô que represente
um valor mediano do vetor ou subvetor. Contudo, isso não ocorre na prática, e a escolha
aleatória dos pivôs acarretam nas situações de melhor caso, pior caso ou caso médio. No
melhor caso o particionamento produz segmentos(subvetores) de tamanhos iguais, já o
pior caso ocorre quando o pivô é o maior (ou menor) elemento do vetor ou subvetor. O
caso médio ocorre quando o particionamento é desbalanceado, como por exemplo numa
partição onde todos os subproblemas estejam na proporção 1 para 8 em cada nível.

A seguir, far-se-á uma abordagem matemática, na análise da complexidade para
o melhor caso do Quick Sort, que se mostre clara e acessível para o Ensino Médio e que
auxilie os professores na obtenção da complexidade de tal algoritmo. A comparação por
árvore de distribuição binária foi a escolha que jugou-se mais viável para se conjecturar a
função que representa o desempenho do Quick Sort.

Figura 8 – Árvore de distribuição binária do Quick Sort, no melhor caso, para um vetor

de n elementos.

(n−1)
2

n

1

(n−1)
2

(n−3)
4

1

(n−3)
4

(n−3)
4

1

(n−3)
4

(n−7)
8

1

(n−7)
8

(n−7)
8

1

(n−7)
8

(n−7)
8

1

(n−7)
8

(n−7)
8

...

1 · · ·

...

...

1 · · ·

1 · · ·

1 · · ·

1

(n−7)
8

1
...

Fonte: Adaptado de <https://slideplayer.com.br/slide/364011/>

3.2. Algoritmos de ordenação

59

Na tabela a seguir apresenta-se uma compilação do que está representado na árvore
anterior, com o intuito de facilitar a obtenção da função que representa o desempenho
desse Algoritmo de Ordenação.

Tabela 6 – Resumo da distribuição binária do Quick Sort representada na Figura (8)

Níveis(altura) No de subproblemas Tamanho do subproblema

0
1
2
3
...

j

1
2
4
8
...

n
(n − 1)/2
(n − 3)/4
(n − 7)/8
...
[n−(2j−1)]
2j
Fonte: Adaptado de <https://slideplayer.com.br/slide/364011/>

2j

Para obter a complexidade inicialmente calcula-se o trabalho τ (j) realizado no

nível j utilizando a relação

τ (j) =(no de subproblemas no nível)·(tamanho do subproblema no nível).

Da igualdade anterior temos,

τ (j) = 2j ·

[n − (2j − 1)]
2j

= n − 2j + 1.

(3.5)

O número de níveis j da árvore pode ser obtida igualando [n−(2j −1)]

2j

a 1, que é o

tamanho do último subproblema do particionamento. Daí, obtemos:

[n − (2j − 1)]
2j

= 1 =⇒ 2 · 2j = n + 1 =⇒ j = log2

(cid:18) n + 1
2

(cid:19)
.

(3.6)

Como o valor de j pode não ser inteiro a depender do valor de n, será mais adequado
com bjc ≤

obter o número de comparações utilizando a função maior inteiro bjc,
j para todo

j ∈ R.

Sabendo-se do valor de bjc é possível calcular o trabalho total, indicado por T (j),

bastando somar o trabalho por nível, ao longo dos níveis, isto é:

T (j) =

bjc
X

(n − 2i + 1) =

blog2

(n+1)

2 c

X

(n − 2i + 1) =

blog2

(n+1)

2 c

X

i=1

i=1

|

i=1
{z
I

n

−

}

|

X

i=1
{z
II

blog2

(n+1)

2 c

blog2

(n+1)

2 c

2i

+

}

|

X

i=1
{z
III

1

.

}
(3.7)

60

Capítulo 3. Algoritmos de Ordenação e Complexidade

Do último resultado, desenvolvendo separadamente cada parcela, obtemos:

blog2

(n+1)

2 c

X

(I)

n = n ·

blog2

(n+1)

2 c

X

1 = n ·

$
log2

(n + 1)
2

%

= n · blog2 (n + 1) − 1c

i=1
≤ n · blog2 (2n) − 1c ≤ n · blog2 nc ≤ n · log2 n.

i=1

blog2

(n+1)

2 c

X

(II)

i=1

2i =

2blog2

(n+1)

2 c+1 − 1
2 − 1

− 20 = 2blog2 (n+1)c − 2 ≤ 2log2 (n+1) − 2 ≤ n − 1 ≤ n.

(III)

blog2

(n+1)

2 c

X

i=1

1 =

$
log2

%

(n + 1)
2

= blog2 (n + 1) − 1c ≤ blog2 2nc − 1 ≤ log2 n.

Em cada parcela anterior a que possui maior ordem de crescimento é n ·

j
,
log2
) e
pois log2 n ≤ n ≤ n·log2 n. Observa-se ainda que, dada uma função f (n) = n·(log2
(n+1)
outra função g(n) = n·log2 n, temos n·(log2
) ≤ n·(log2 n). Ou seja, 0 ≤ f (n) ≤ c·g(n),
2
sendo c = 1. Daí, a complexidade do trabalho total T (j) realizado pelo Algoritmo Quick
Sort, para o melhor caso, é representada assintoticamente por O(n · log2 n) ou O(n · log n).

(n+1)
2
(n+1)
2

k

Exemplo 3.8. Considere o vetor C = (2, 5, 1, 9, 7), com n = 5, que deve ser ordenado
utilizando a estratégia do Quick Sort.

2 5 1 9 7
Pivô escolhido 9.
2 5 1 7 9

Temos dois subvetores com elementos menores que 9, antes dele, e os maiores que
ele depois, no entanto o vetor após 9 ﬁcou vazio, pois todos os demais valores são menores
que 9.

Escolhemos agora no subvetor o pivô 7.
2 5 1 7 9
Em seguida escolhemos o pivô 5 no subvetor.
2 1 5 7 9
Escolhemos agora o pivô 2.
1 2 5 7 9
O vetor ﬁcou ordenado.

Observa-se que a escolha de um pivô que representa o maior ou menor elemento da
lista ou também da sublista é algo raro nesse tipo de problema, tem-se, para tal situação,
um desempenho O(n2), pois a altura da distribuição será (n − 1) e o comportamento
de ordenação é semelhante ao Selection Sort. Esse tipo de situação simula o pior caso
do Quick Sort. O caso médio se aproxima do melhor caso e sua complexidade também é
O(n · log n) e apesar do seu desempenho no pior caso ser O(n2), na média sua performance
é excelente o que o faz ser tão popular.

3.2. Algoritmos de ordenação

61

Comparação gráﬁca das complexidades dos Algoritmos de Orde-

nação

Observou-se no Capítulo 2 algumas funções elementares cujos gráﬁcos utilizaremos
para comparar a complexidade dos Algoritmos de Ordenação explorados neste trabalho.

Propõe-se avaliar seus desempenhos (complexidades) inicialmente numa tabela
e depois graﬁcamente onde sua visualização possa expressar melhor o comportamento
assintótico das funções que os representam
Tabela 7 – Tabela de comparação do desempenho assintótico dos Algoritmos de Ordenação

No de Bubble Sort: Selection Sort: Quick Sort:
O(n · log2 n)
2
8
64
2048
10.240

O(n2)
4
16
256
65.536
1.048.576

elementos
2
4
16
256
1.024

O(n)
2
4
16
256
1.024

Fonte: Produzido pelo autor

É notório na tabela anterior que o Bubble Sort, no melhor caso, é sempre mais
eﬁciente que os outros dois Algoritmos de Ordenação sendo que o Quick Sort se mostra
mais eﬁciente que um algoritmo de complexidade Quadrática.

Figura 9 – Gráﬁco de comparação assintótica dos Algoritmos de Ordenação

Fonte: Produzido pelo autor

A complexidade O(n · log n), chamada de linearítmica, possui uma taxa de cres-
cimento maior que uma complexidade linear O(n) e menor que qualquer complexidade
polinomial como é o caso de O(n2). Sabe-se que a análise assintótica Big-O compara
as funções no limite superior, ou seja, quando a quantidade n de elementos do vetor é
suﬁcientemente grande. Um algoritmo é dito mais eﬁciente que outro quando sua comple-
xidade possui assintoticamente uma taxa de crescimento menor, portanto conclui-se que
O(n) < O(n · log n) < O(n2).

62

Capítulo 3. Algoritmos de Ordenação e Complexidade

3.3 Fluxogramas

Foi iniciada uma breve abordagem sobre o tema ﬂuxogramas o início deste capítulo
e será dada uma atenção maior nesta parte do trabalho, visto que o estudo de algoritmos
está bastante ligado com esse tipo de representação gráﬁca. Sua construção requer que
siga-se algumas regras gerais como segue.

O início e o ﬁm do algoritmo são marcados com uma ﬁgura elíptica; as
ações a serem executadas estão em retângulos; sendo que as estruturas
de controle condicionais estão em losangos e indicam duas possibilidades
de prosseguimento do algoritmo, uma para o caso da expressão avaliada
(condição) ser verdadeira e outra para o caso de ser falsa. (FERRARI;
CECHINEL, 2008)

Nesta seção, serão tratadas representações simples por ﬂuxogramas. Quanto à todas

as regras de construção, podem ser facilmente obtidas, como sugestão, em:

<https://memoria.ifrn.edu.br/bitstream/handle/1044/1514/Manual%20de%20Fluxogramas%20-%

20ebook%20%281%29.pdf?sequence=5&isAllowed=y>

Dentre as vantagens desse tipo de representação destacam-se: padronização na
representação, descreve com maior rapidez um conjunto de tarefas e facilita a leitura e o
entendimento de uma atividade.

Exemplo 3.9. Fluxograma indicando a resolução de uma equação do segundo grau.

Figura 10 – Fluxograma de um algoritmo para resolver uma equação do tipo Ax2 + Bx +

C = 0

Fonte:<https://nova-escola-producao.s3.amazonaws.com/

PNYck8d5xkQ7Ejy7S92uz64UAG54EwbxKHF5kwwWJR6cwgTfyZZjKfM2cXsq/

ﬂuxogramas-algoritmos-matematica-e-tecnologia.pdf>

Exemplo 3.10. Fluxograma indicando o algoritmo Bubble Sort para colocar em ordem
crescente os valores da lista (a, b, c), considerando a 6= b 6= c.

3.3. Fluxogramas

63

Figura 11 – Fluxograma para o Bubble Sort

Fonte: Produzido pelo autor

Observe que na Figura 10 não há uma forma indicando início e ﬁm, mas isso não
interfere na aprendizagem do tema. Também vale destacar que o ﬂuxograma neste exemplo
foi associado a um algoritmo matemático. Na Figura 11 há uma possível representação de
um ﬂuxograma para o Algoritmo Bubble Sort, mas não se traduz na única possibilidade.

Analisou-se no Capítulo I que o tema ﬂuxogramas é abordado na BNCC tanto
na seção do Ensino Fundamental quanto na do Ensino Médio, sendo que na primeira há
uma relação mais frequente com o signiﬁcado de algoritmo voltado para Matemática e no
Ensino Médio já se propõe um trabalho também com o aspecto computacional da deﬁnição
de algoritmo.

Por ﬁm, vale ressaltar que o estudo dos algoritmos deve estar atrelado ao estudo
de ﬂuxogramas, pois pela própria deﬁnição de algoritmo, tal relação é intrínseca, seja
para reforçar conceitos e procedimentos matemáticos ou para estimular o pensamento
computacional.

inícioa, b, ca<b?SimNÃOb<c?a<c?Sima<b<cSima<c<bNÃOa<c?SimNÃOc<a<bb<c?NÃOb<a<cSimb<c<aNÃOc<b<afim4 Sequência didática

65

A sequência proposta neste trabalho terá duração de 8 aulas, de 50 minutos cada,
cabendo ao professor desenvolvê-la parcial ou completamente em momento que julgar
propício e de acordo com a maturidade dos estudantes do 1o ao 3o ano do Ensino Médio.

O objetivo é desenvolver as atividades de modo a abordar os conteúdos matemáticos
concernentes aos Algoritmos de Ordenação, desenvolver gradualmente os conceitos ligados
ao tema, bem como as competências e habilidades matemáticas da BNCC.

Algumas atividades são propostas para serem desenvolvidas em grupos de estudantes
e para tanto sugere-se as lições do livro Planejando o Trabalho em Grupo- Estratégias para
salas de aula heterogêneas, das autoras Elizabeth G. Cohen e Rachel A. Lothan, Penso
Editora, 3a edição, RS, 2017. Contudo ﬁca a critério de cada professor a forma como
deve direcionar as atividades em grupo, mas nada impede que tais atividades possam ser
vivenciadas e direcionadas individualmente.

As aulas da sequência didática foram organizadas de acordo como se apresenta na

tabela a seguir:

Tabela 8 – Roteiro das aulas da Sequência Didática

Aula 1
Aula 2
Aula 3
Aula 4
Aula 5
Aula 6

Aula 7

Aula 8

Conhecendo e manipulando algoritmos.
Leitura e Produção de ﬂuxogramas de algoritmos.
Criando um Algoritmo de Ordenação.
Conhecendo o Bubble Sort, Selection Sort e Quick Sort.
Ordenando com os algoritmos Bubble Sort, Selection Sort e Quick Sort.
Complexidade dos algoritmos Bubble Sort, Selection Sort e Quick Sort.
Comparando as complexidades dos algoritmos de ordenação
Bubble Sort, Selection Sort e Quick Sort.
Comparando graﬁcamente as complexidades dos Algoritmos de Ordenação
Bubble Sort, Selection Sort e Quick Sort.

Fonte:Produzido pelo autor

Buscou-se, na sequência das aulas, direcionar as atividades de modo que haja uma
relação com as Competências e Habilidades que constam na BNCC que seguem listadas
adiante. Estão numeradas de acordo com a ordem em que aparecem no documento oﬁcial
de modo a facilitar sua localização na BNCC. É importante destacar que,

Na (re)elaboração dos currículos e das propostas pedagógicas, é possível
adotar outras organizações, recorrendo tanto às habilidades deﬁnidas
nesta BNCC quanto a outras que sejam necessárias e que contemplem
especiﬁcidades e demandas próprias dos sistemas de ensino e das escolas.
(BRASIL, 2018, p. 542)

66

Capítulo 4. Sequência didática

Veriﬁca-se uma ﬂexibilidade plausível disponibilizada pela BNCC, que oportuniza
a criação de habilidades pontuais que abarquem demandas próprias do projeto da escola.
Seguindo tais orientações, tomou-se aqui a liberdade de sugerir-se habilidades na sequência
didática proposta.

Competência Especíﬁca 1 da BNCC

Utilizar estratégias, conceitos e procedimentos matemáticos para interpretar si-
tuações em diversos contextos, sejam atividades cotidianas, sejam fatos das ciências da
Natureza e Humanas, ou ainda questões econômicas ou tecnológicas, divulgadas por
diferentes meios, de modo a consolidar uma formação cientíﬁca geral.

Habilidades

Não há na BNCC, para esta Competência Especíﬁca, uma habilidade correspondente

ao tema.

Competência Especíﬁca 3 da BNCC

Utilizar estratégias, conceitos, deﬁnições e procedimentos matemáticos para in-
terpretar, construir modelos e resolver problemas em diversos contextos, analisando a
plausibilidade dos resultados e a adequação das soluções propostas, de modo a construir
argumentos consistentes.

Habilidades

(02)Resolver e elaborar problemas cujos modelos são funções polinomiais do 1o e

2a graus, em contextos diversos, incluindo ou não tecnologias digitais.

(05)Resolver e elaborar problemas com funções exponenciais e ou logarítmicas nos
quais é necessário compreender e interpretar a variação das grandezas envolvidas, em
contextos diversos.

(15)Investigar e registrar, por meio de um ﬂuxograma, quando possível, um algo-

ritmo que resolve um problema.

Competência Especíﬁca 4 da BNCC

Compreender e utilizar com ﬂexibilidade e precisão diferentes registros de represen-
tação matemáticos (algébrico, geométrico, estatístico, computacional, etc.) na busca de
solução e comunicação de resultados de problemas.

67

Habilidades

(05)Utilizar conceitos iniciais de uma linguagem de programação na implementação

de algoritmos escritos em linguagem corrente e/ou matemática.

(Sugerida pelo autor) Converter representações gráﬁcas ou algorítmicas para repre-

sentação algébrica na busca de solução de um problema.

Competência Especíﬁca 5 da BNCC

Investigar e estabelecer conjecturas a respeito de diferentes conceitos e propriedades
matemáticas, empregando recursos e estratégias como observações de padrões, experimen-
tações e tecnologias digitais, identiﬁcando a necessidade, ou não, de uma demonstração
cada vez mais formal na validação das referidas conjecturas.

Habilidades

(02)Investigar relações entre números expressos em tabelas para representá-los no
plano cartesiano, identiﬁcando padrões e criando conjecturas para generalizar e expressar
algebricamente essa generalização, reconhecendo quando essa representação é de função
polinomial de 1o grau ou do 2o grau do tipo y = a · x2.

Apresenta-se, na próxima tabela, uma síntese da distribuição das Competências e

Habilidades nas respectivas aulas.

Tabela 9 – Aulas da sequência com respectivas competências e habilidades relacionadas

Aula Competência Habilidade

01

02

03

04

05

06

07

C03
C04

C03

C03
C04
C03
C04
C03
C04
C01
C03
C04
C05
C01
C03
C04
C05

H15
H05

H15

H15
H05
H15
H05
H15
H05
Não há.
H02 e H05
H05 e H(sugerida)
H02
Não há.
H02 e H05
H05 H(sugerida)
H02

68

Capítulo 4. Sequência didática

Aula Competência Habilidade

08

C03
C05

H02 e H05
H02

Vale salientar e exempliﬁcar, para que não haja divergências, que a Habilidade 05
da Competência 03 difere da Habilidade 05 da Competência 04, ou seja, cada Habilidade
está relacionada exclusivamente com uma única Competência.

1a aula: Conhecendo e manipulando algoritmos.

Procedimentos

O professor irá explicar aos estudantes da maneira que achar mais conveniente o
conceito de algoritmo tanto do ponto de vista matemático quanto computacional. Abordará
exemplos por meio de algoritmos clássicos da matemática tais como: Algoritmo da divisão
de números naturais com um divisor formado por um dígito e Algoritmo de Euclides
para obter o m.d.c de dois números naturais. Poderá também exempliﬁcar um algoritmo
computacional escrito em linguagem natural ou algorítmica.
Após as devidas abordagens sobre o conceito de algoritmo o professor dividirá a turma em
equipes sendo que cada equipe será subdividida em duas partes que executarão a seguinte
atividade:
Uma das partes de cada equipe escreve um algoritmo que pode ser criação do grupo
ou pesquisado e a outra parte deve executá-lo. Algumas sugestões que o professor pode
disponibilizar para os estudantes são: algoritmo para divisão de dois números naturais
sendo o divisor composto por dois dígitos e algoritmo para obter o m.m.c de dois números
naturais.

2a aula: Leitura e Produção de Fluxogramas de Algo-

ritmos.

Procedimentos

O professor deve expor, por meio de slides, cartazes, etc, alguns exemplos de
ﬂuxogramas enfatizando como os comandos são realizados e sua função algorítmica. Em
seguida, distribui ﬁchas como a que segue abaixo para que os estudantes, em equipe,
expressem por meio de ﬂuxogramas algumas atividades cotidianas ou procedimentos
matemáticos. É importante que o professor oriente os estudantes quanto à importância de
escrever os comandos de forma clara e direta, sem que haja ambiguidade de interpretação.
Uma sugestão para ajudar nessa tarefa é a apresentação do vídeo: <https://www.youtube.

com/watch?v=pdhqwbUWf4U&has_veriﬁed=1> (5:28 min), que mostra um pai que pede
aos ﬁlhos para escreverem os comandos para que ele faça um sanduíche. À medida que os
ﬁlhos apresentam os comandos e o pai vai executando é exposto os erros e as consequências
de comandos ambíguos na escrita de algoritmos.

69

Ficha 1

Fluxograma que é um diagrama, escrito em uma notação gráﬁca simples, usado
para representação visual de um algoritmo. Num ﬂuxograma os principais símbolos
são:

Indica o início e o ﬁm do algoritmo;

Indica ação ou processo;

Indica a direção do ﬂuxo;

Indica que uma decisão será tomada.

1) Represente numa cartolina, por meio de um ﬂuxograma, cada atividade a seguir e
exponha suas representações para as demais equipes.
Atividade 1: Assar um ovo.
Atividade 2: Tomar banho.
Atividade 3: Resolver uma equação do 2o grau.

3a aula: Criando um Algoritmo de Ordenação.

Procedimentos

A turma será dividida em equipes e cada uma receberá a Ficha 2 com os comandos
para desenvolvimento e registro das atividades juntamente com quatro ﬁchas onde constam
letras do alfabeto ou números. Cada equipe deverá criar uma estratégia de ordenação das
ﬁchas. O professor deve enfatizar que a estratégia deve ser um processo repetitivo, ou seja,
será utilizado para colocar cada valor na posição correta sempre da mesma maneira. Após
cada equipe criar sua própria estratégia de ordenação, tal estratégia deve ser comunicada
e discutida com os demais estudantes.

70

Capítulo 4. Sequência didática

Ficha 2

1) Cada equipe está recebendo cinco cartas com números ou letras diferentes. Como
por exemplo: D M T A . Escreva uma estratégia para ordenar tais elementos.

4a aula: Conhecendo o Bubble Sort, Selection Sort e

o Quick Sort.

Procedimentos

O professor deve fazer uma exposição por meio de cartazes, slides, vídeos, etc, do
que é um Algoritmo de Ordenação e apresentar o Bubble Sort, Selection Sort e o Quick
Sort. Uma sugestão é mostrar os vídeos:
<https://www.youtube.com/watch?v=lyZQPjUT5B4> (5:15 min)
<https://www.youtube.com/watch?v=Ns4TPTC8whw> (7:06 min)
<https://www.youtube.com/watch?v=ywWBy6J5gz8> (6:54 min)

Os vídeos sugeridos foram criados na Universidade de Sapienta na Romênia em
cooperação com Mures Art Ensemble, uma espécie de fundação criada para guardar e
desenvolver a cultura no país. Apresentam uma dança folclórica húngara com dançarinos
numerados distintamente, por meio da coreograﬁa os dançarinos executam as estratégias
dos Algoritmos de Ordenação. É uma alternativa para se mostrar de forma divertida e
atrativa um procedimento algorítmico.

Outra alternativa seria o professor dividir a turma em duas equipes para uma
disputa, cada equipe teria que desenvolver o procedimento do algoritmo de forma correta,
haverá em cada equipe um observador, que seria uma espécie de juiz. Caso o procedimento
seja executado de forma errada, o observador pede para que se reinicie o procedimento.
Ganha quem executar primeiro a ordenação correta com a estratégia do algoritmo.

O professor pode buscar outras situações que sirvam ao mesmo propósito dos vídeos

e jogo sugeridos. Após a exposição, o professor poderá realizar indagações do tipo:
Qual algoritmo vocês acharam mais simples? E menos simples?
Vocês utilizaram alguma dessas estratégias na aula anterior?
Qual deles você acredita que leva mais tempo para ser executado?

Deverá observar e discutir com os alunos o funcionamento, isto é, a estratégia
utilizada em cada Algoritmo de Ordenação e fazer as devidas intervenções no intuito de
elucidar eventuais dúvidas.

5a aula: Ordenando com os Algoritmos Bubble Sort,

71

Selection Sort e Quick Sort.

Procedimentos

A turma será dividida em equipes (podem ser as mesmas da Aula 3) que receberão
a Ficha 3 (ver modelo sugerido) e cinco ﬁchas ou cartas de baralho numeradas. As ﬁchas
deverão ser ordenadas de três formas diferentes, utilizando as estratégias do Bubble Sort,
Selection Sort e Quick Sort respectivamente, registrando todo o procedimento. O professor
pede para cada equipe socializar suas respostas e comparar com as estratégias que foram
criadas pelos estudantes na aula anterior.

Ficha 3
1) Cada equipe está recebendo cinco cartas com valores diferentes. Como por exemplo:
4 -2 0 8 5 . Estas cartas deverão ser ordenadas utilizando os Algoritmos de
Ordenação a seguir e registrar todo o processo em um material a parte.
Ordenando com o Bubble Sort: Se o objetivo é ordenar os valores em forma

decrescente, então, a posição atual é comparada com a próxima posição e, se a
posição atual for maior que a posição posterior, é realizada a troca dos valores nessa
posição. Caso contrário, não é realizada a troca, apenas passa-se para o próximo par
de comparações.
Ordenando com o Selection Sort: A ordenação por seleção ou Selection Sort

consiste em selecionar, por comparação, o menor item e colocar na primeira posição,
selecionar o segundo menor item e colocar na segunda posição, segue estes passos
até que reste um único elemento.
Ordenando com o Quick Sort: O vetor é dividido em duas partes a partir de

um elemento denominado pivô, antes do pivô são colocados os elementos menores ou
iguais ao mesmo e depois dele os elementos maiores. O processo se repete em cada
uma das partes (subvetores) sucessivamente até que se obtenha partes com apenas
um elemento. Para ﬁnalizar, os resultados são combinados e obtém-se o resultado
esperado.

6a aula: Complexidade dos Algoritmos Bubble Sort,

Selection Sort e Quick Sort.

Procedimentos

Novamente em equipes, os alunos receberão uma ﬁcha com tabelas que serão
preenchidas com a ajuda do professor, onde os mesmos devem escrever as comparações
realizadas pelos algoritmos: Bubble Sort, Selection Sort e Quick Sort, como indicadas nas

72

Capítulo 4. Sequência didática

tabelas 2, 4 e 6, por exemplos. Haverá um esforço para escrever uma função matemática
que expresse o total de comparações, ou seja, o trabalho realizado por cada Algoritmo de
Ordenação estudado. No caso do Quick Sort, o professor pode recorrer também a árvore
de distribuição binária como na Figura 8.

Ficha 4
1) Com o auxílio das tabelas a seguir, descubra uma função que represente o desempenho
dos Algoritmos de Ordenação Bubble Sort, Selection Sort e Quick Sort.

Bubble Sort: Vetor para ordenar (6, 12, 2, 7, 1)

VETOR

No de comparações

6 - 12 - 2 - 7 - 1
...

...

Selection Sort: Vetor para ordenar (6, 12, 2, 7, 1)

VETOR

No de comparações

6 - 12 - 2 - 7 - 1
...

...

Para o Quick Sort, pode-se utilizar como auxílio uma árvore de distribuição binária.

Quick Sort: Vetor para ordenar (6, 12, 2, 7, 1)
Níveis(altura) No de subproblemas Tamanho do subproblema

...

...

...

7aaula: Comparando as complexidades dos algoritmos

de ordenação Bubble Sort, Selection Sort e Quick Sort.

Procedimentos

Novamente em equipes, os alunos receberão a ﬁcha 5 incluindo tabelas que se-
rão preenchidas com a ajuda do professor, onde os mesmos devem calcular o número
de comparações realizadas pelos algoritmos: Bubble Sort, Selection Sort e Quick Sort,
como indicadas na tabela 7, por exemplo. Pode haver necessidade do uso de calculadora
cientíﬁca para obtenção dos resultados. O professor pode usar tabelas comparativas das
complexidades dos algoritmos no melhor caso, caso médio e também pior caso. Feito isso,
o professor poderá fazer alguns questionamentos tais como:
- Para um vetor com 16 elementos, qual estratégia é mais eﬁciente?

73

- Para um vetor com 512 elementos, qual o algoritmo é mais eﬁciente?
-Para um conjunto de 32.768 elementos qual algoritmo executa o menor números de
comparações?
-Qual dos algoritmos você escolheria para ordenar uma lista com 10 elementos? E com 500
elementos? E com 10.000 elementos?

Ficha 5
1) Com o auxílio das tabelas a seguir, calcule o desempenho dos Algoritmos de Orde-
nação Bubble Sort, Selection Sort e Quick Sort em cada caso e realize comparações.

Melhor caso

No de
elementos

Bubble Sort: Selection Sort: Quick Sort:
O(n2)
O(n · log2 n)

O(n)

...

...

...

...

Pior caso

No de
elementos

Bubble Sort: Selection Sort: Quick Sort:
O(n2)

O(n2)

O(n2)

...

...

...

...

Caso médio

No de
elementos

Bubble Sort: Selection Sort: Quick Sort:
O(n2)
O(n · log2 n)

O(n2)

...

...

...

...

8a aula: Comparando graﬁcamente as complexidades

dos algoritmos de ordenação Bubble Sort, Selection

Sort e Quick Sort.

Procedimentos

O professor deverá realizar uma exposição com orientações sobre Complexidade de
Algoritmos de Ordenação, enfatizando e exempliﬁcando a representação assintótica nos
melhores e piores casos. Os estudantes serão divididos em equipes nos mesmos moldes das

74

Capítulo 4. Sequência didática

aulas anteriores e receberão a Ficha 6 com os comandos para representarem graﬁcamente
os desempenhos dos Algoritmos de Ordenação Bubble Sort, Selection Sort e Quick Sort
nos melhores casos.

Ficha 6
1) Utilize a tabela para calcular o desempenho dos Algoritmos de Ordenação no
melhor caso.

No de
elementos

Bubble Sort: Selection Sort: Quick Sort:
O(n2)
O(n · log2 n)

O(n)

8

16

64

128

2) Agora, utilizando os resultados da tabela, com o auxílio de uma malha quadriculada,
represente graﬁcamente o desempenho dos algoritmos.

Conclusão

75

Nesta pesquisa buscou-se inicialmente mostrar a relação da matemática com os
avanços tecnológicos e da importância de se inserir, de forma apropriada, o estudo dos
Algoritmos de Ordenação na Educação Básica, voltando-se principalmente para o Ensino
Médio. Observamos que a abordagem de tal tema, no processo ensino-aprendizagem em
Matemática, proporciona o desenvolvimento de competências e habilidades especíﬁcas
sugeridas pela BNCC. Não se fez presente em nosso objetivo principal analisar a estrutura
computacional de um Algoritmo de Ordenação, focamos apenas na estratégia utilizada e
na análise matemática do desempenho.

No decorrer da análise dos Parâmetros Curriculares e BNCC pôde-se identiﬁcar
vários conteúdos, competências e habilidades matemáticas relacionadas ao estudo dos
Algoritmos de Ordenação, e conﬁrmou-se a viabilidade de se abordar no Ensino Médio o
tema aqui proposto. Contudo, apenas na BNCC apresentou-se, de forma explícita, o tema
Algoritmos.

Quanto ao conteúdo matemático utilizado para que a análise dos Algoritmos
de Ordenação sugeridos seja realizada de uma maneira correta e sem perda de rigor,
veriﬁcou-se que o tema favorece o estudo de Séries Aritméticas no cálculo do número
de comparações do Bubble Sort e Selection Sort, bem como o estudo das Funções Aﬁm
e Quadrática. Também se mostra uma boa oportunidade para revisar e aprofundar os
conceitos e propriedades dos Logaritmos, da Função Logarítmica e Séries Geométricas na
análise do Quick Sort.

No que se refere ao estudo do funcionamento e do desempenho dos Algoritmos
de Ordenação, notou-se uma simplicidade nos Algoritmos Bubble Sort e Selection Sort,
mas tanto o funcionamento quanto o cálculo do número de comparações do Quick Sort
requerem um auxílio do professor para que os estudantes possam compreender melhor
suas características. O tema Notação Assintótica se mostra como algo novo para o Ensino
Médio e um aprofundamento se faz desnecessário no processo de ensino e aprendizagem,
necessitando apenas que seja exposto como se utiliza tal notação para que o estudante possa
utilizá-la nas comparações do desempenho. O tema Fluxogramas, para representação de
algoritmos, foi abordado sucintamente e observou-se uma relativa diﬁculdade de utilizá-los
para representar um Algoritmo de Ordenação, sendo seu uso mais indicado com algoritmos
que possuem relação com conceitos e procedimentos matemáticos.

A sequência didática se propõe a servir como mais um subsídio utilizado por
professores do Ensino Médio no processo de ensino e aprendizagem. Nela, tentamos
resgatar tanto os conteúdos conceituais quanto os procedimentais que sirvam para os

76

Conclusão

alunos desenvolverem as competências e habilidades especíﬁcas de matemática sugeridas
na BNCC. Quatro das cinco competências foram abordadas na sequência e fazemos menção
às que envolvem ações de representar, comunicar, raciocinar e argumentar.

Levando-se em consideração as análises e observações, constatou-se que não existem
propostas consistentes para que se utilizem os Algoritmos de Ordenação, com preceitos
didáticos, no Ensino Médio e que o tema se restringe, principalmente, aos cursos de
graduação da área de computação. Tal ausência de propostas pode ser justiﬁcada devido à
recente mudança curricular com o Novo Ensino Médio e implementação da BNCC. Se faz
presente a convicção que é possível a abordagem didática do tema nas aulas de matemática
no Ensino Médio e que a Sequência Didática aqui proposta se apresenta como uma boa
ferramenta a ser utilizada.

Por ﬁm, ﬁca proposto que mais pesquisadores aprofundem o tema e produzam mais
materiais didáticos correlatos. Sugere-se que a Sequência Didática proposta, seja aplicada
e que se possa avaliar seu impacto no processo de aprendizagem, as possíveis diﬁculdades
conceituais e procedimentais na abordagem do tema.

Referências

77

BRASIL. Parâmetros Curriculares Nacionais de Matemática. Brasília: MEC, 1998. 148 p.

BRASIL. Parâmetros Curriculares Nacionais do Ensino Médio (PCNEM). Brasília: MEC,
2000. 148 p.

BRASIL. PCN+ Ensino médio: Orientações educacionais complementares aos Parâmetros
Curriculares Nacionais-Ciências da Natureza, Matemática e suas Tecnologias. Brasília:
MEC, 2002. 142 p.

BRASIL. DCN, Diretrizes Curriculares da Educação Básica. Brasília: MEC, 2013. 562 p.

BRASIL, M. d. E. Base Nacional Curricular Comum. Brasil: MEC, 2018.

CORMEN, T. H. Algoritmos: Teoria e Prática, tradução da segunda edição, [americana].
São Paulo: Editora Campus, 2002.

FERRARI, F.; CECHINEL, C. Introdução a algoritmos e programação. Bagé-RS, 2008.

LEONARDO, F. M. d. Conecxões com a Matemática, vol.1. São Paulo-SP: Editora
Moderna, 2016.

LIMA, E. L. et al. A matemática do ensino médio. [S.l.]: SBM, 1997. v. 1.

PERNAMBUCO, C. Parâmetros para a Educação Básica do Estado de Pernambuco.
Recife-PE: Governo de Pernambuco, 2012.

RIBEIRO, M. R. da C. Grafos, Algoritmos e Programação. 152 p. Dissertação (Mestrado)
— UFRPE, Recife-PE, 2018.

