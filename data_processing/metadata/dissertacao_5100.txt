  UNIVERSIDADE FEDERAL DE MATO GROSSO DO SUL  
 INSTITUTO DE MATEMÁTICA  
PROGRAMA DE PÓS-GRADUAÇÃO  
MATEMÁTICA EM REDE NACIONAL 
MESTRADO PROFISSIONAL 

ANTÔNIO CÉZARE DE ARAÚJO GIANSANTE 

ALGORITMO CORDIC NO CÁLCULO  

DE FUNÇÕES ELEMENTARES 

CAMPO GRANDE - MS 
JULHO DE 2014

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
UNIVERSIDADE FEDERAL DE MATO GROSSO DO SUL  
INSTITUTO DE MATEMÁTICA  
PROGRAMA DE PÓS-GRADUAÇÃO 
MATEMÁTICA EM REDE NACIONAL 
MESTRADO PROFISSIONAL 

ANTÔNIO CÉZARE DE ARAÚJO GIANSANTE 

ALGORITMO CORDIC NO CÁLCULO                                    

DE FUNÇÕES ELEMENTARES 

ORIENTADOR: Prof. Dr. CLAUDEMIR ANIZ 

Dissertação  apresentada  ao  Programa  de  Pós-Graduação  em 
Matemática  em  Rede  Nacional  do  Instituto  de  Matemática  – 
INMA/UFMS,  como  parte  dos  requisitos  para  obtenção  do 
Título de Mestre.  

CAMPO GRANDE – MS 
JULHO DE 2014 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
ALGORITMO CORDIC NO CÁLCULO  

DE FUNÇÕES ELEMENTARES 

ANTÔNIO CÉZARE DE ARAÚJO GIANSANTE 

Dissertação  submetida  ao  Programa  de  Pós-Graduação  em  Matemática  em  Rede 
Nacional, do Instituto de Matemática, da Universidade Federal de Mato Grosso do Sul, 
como parte dos requisitos para obtenção do título de Mestre. 

Aprovado pela Banca Examinadora: 

Prof. Dr. Claudemir Aniz – UFMS 

Profa. Dr. Luiz Antônio Ribeiro de Santana – UFPR 

Profa. Dra. Rúbia Mara de Oliveira Santos – UFMS 

CAMPO GRANDE – MS 

JULHO DE 2014 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
AGRADECIMENTOS 

À  minha  esposa  e  filhos,  não  há  palavras  para  descrever  a  gratidão  que  sinto  para  com  eles. 

Posso  apenas  dizer  muito  obrigado  e  esperar  que  o  tempo  me  permita  mostrar-lhes  quão 

importantes  são  para  mim.  Ao  meu  orientador,  sem  o  qual  a  realização  deste  trabalho 

literalmente  não  seria  possível.  Sua  rapidez  de  compreensão  de  um  assunto  que  não  nos  era 

conhecido  e  paciência  em  me  direcionar  foram  cruciais  para  que  eu  pudesse  desenvolver  as 

capacidades  necessárias  para  trilhar  o  caminho  com  minhas  próprias  pernas,  ainda  que 

inúmeras  vezes  ele  me  tenha  dado  o  ombro  para  apoiar.  Aos  colegas  de  curso,  uma  longa 

caminhada torna-se mais prazerosa com agradáveis companhias. A Deus, por tudo. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
RESUMO 

A maioria dos acadêmicos e professores de ciências exatas acredita que as séries de potências 

são as ferramentas matemáticas utilizadas pelos computadores para a estimativa no cálculo de 

funções.  Mas  devido  à  reduzida  memória  destas,  as  mesmas  tornam-se  onerosas,  sendo 

necessário a busca de outras opções, dentre as quais a mais utilizada é o algoritmo denominado 

CORDIC  (COordinate  Rotation  DIgital  Computer),  que  se  baseia  em  rotações  e  suas 

propriedades  em  diferentes  sistemas  de  coordenadas.  O  trabalho  aborda  o  funcionamento 

básico deste algoritmo, descreve exemplos numéricos para algumas das funções elementares e 

detalha  a  fundamentação  teórica  para  cada  caso.  Em  um  primeiro  momento  apresenta-se  o 

conceito da rotação circular e o seu uso como base de funcionamento do CORDIC. Em seguida 

são  desenvolvidas  as  ideias  de  rotações  hiperbólicas  e  lineares,  necessárias  à  execução  dos 

outros  dois  tipos  de  iteração  do  algoritmo.  Em  cada  tipo  de  iteração,  o  problema  da 

convergência da série necessária  à aproximação  é abordado. Por fim, resume-se os  três casos 

em um conjunto único de iterações e apresenta-se uma tabela de funções calculadas com o uso 

do CORDIC.  

Palavras-chave:  CORDIC,  calculadoras, 

rotações, 

funções 

trigonométricas, 

funções 

hiperbólicas.  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
ABSTRACT 

Most  scholars  and  teachers  of  math  and  science  believe  that  power  series  are  the  most  used 

mathematical  tools  by  computers  to  estimate  the  calculation  of  functions.  But  due  to  their 

reduced memory  of these, these tools become onerous, requiring the pursuit of other options, 

among which the most used algorithm is the so-called CORDIC (COordinate Rotation Digital 

Computer),  which  is  based  on  rotations  and  their  properties  in  different  coordinate  systems. 

The  paper  discusses  the  basic  operation  of  this  algorithm,  describes  numerical  examples  for 

some of the most common functions and details the theoretical basis for each case. Firstly the 

concept  of circular  rotation  is  presented, as  well as  its  use as the basis for functioning of the 

CORDIC. Then the ideas of hyperbolic and linear rotations, necessary for the implementation 

of  the  other  two  types  of  algorithm  iteration,  are  developed.  In  each  type  of  iteration,  the 

problem of convergence of the series required  in the approximation is discussed. Finally,  one 

summarizes  the  three  cases  in  a  single  set  of  iterations  and  presents  a  table  of  functions 

calculated using the CORDIC. 

Keywords: CORDIC, calculators, rotations, trigonometric functions, hyperbolic functions. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
SUMÁRIO 

1   INTRODUÇÃO                                                                                                                       1 

2   CORDIC CIRCULAR: A ORIGEM DO CORDIC                                                            4

2.1   Noção Geral do CORDIC..........................................................................................4

2.2   Rotação e Pseudo Rotação Circular...........................................................................5

2.3   O CORDIC no Cálculo das Funções Seno e Cosseno...............................................7

2.4   Sequência Recursiva do CORDIC Circular Rotação...............................................14 

2.5   Teorema Chave para a Convergência do CORDIC.................................................16 

2.6   Convergência do CORDIC Circular........................................................................17 

2.7   O CORDIC no Cálculo da Função Arco Tangente..................................................22 

2.8   A Iteração CORDIC Convencional.........................................................................27 

3   CORDIC HIPERBÓLICO                                                                                                   30 

3.1   Funções Hiperbólicas.................................................................................................30 

3.2   Rotação e Pseudo Rotação Hiperbólica....................................................................34 

3.3   O CORDIC no Cálculo da função Exponencial.......................................................36 

3.4   Sequência Recursiva do CORDIC Hiperbólico.......................................................43 

3.5   Convergência do CORDIC Hiperbólico..................................................................45 

3.6   O CORDIC no Cálculo da Raiz Quadrada e do Logaritmo.....................................49 

4   CORDIC LINEAR                                                                                                                56 

4.1   Ângulo Linear..........................................................................................................56 

4.2   Rotação Linear.........................................................................................................57  

4.3   O CORDIC no cálculo do Produto..........................................................................58 

4.4   Sequência Recursiva do CORDIC Linear................................................................61 

4.5   Convergência do CORDIC Linear...........................................................................62 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
4.6   O CORDIC no cálculo do Quociente.......................................................................64 

5  O CORDIC UNIFICADO                                                                                                     66 

5.1   Iteração CORDIC Generalizada...............................................................................66 

5.2   Tabelas de Funções do CORDIC.............................................................................68 

6  CONCLUSÃO                                                                                                                        70 

REFERÊNCIAS BIBLIOGRÁFICAS                                                                                     72 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
LISTA DE FIGURAS 

Figura 2.1:   Rotação circular de um vetor.....................................................................................4 

Figura 2.2:   Pseudorotação do vetor P0 em um ângulo θ..............................................................6 

Figura 2.3:   Micro rotações circulares de um Vetor.....................................................................7 

Figura 2.4:   Pseudorotações de P0 até o vetor 

no modo Rotação............................................10 

Figura 2.5:   Rotação circular do vetor P0 em um ângulo  – θ.....................................................22 

Figura 2.6:   Pseudo rotações de P0 até 

 no modo Vetoração. ................................................22 

Figura 2.7:   Ângulo βn do vetor 

 com o eixo x......................................................................23 

Figura 3.1:   Setor e ângulo hiperbólicos.....................................................................................30 

Figura 3.2:   Funções hiperbólicas................................................................................................31 

Figura 3.3:   Rotação do vetor P1 em um ângulo hiperbólico θ...................................................34 

Figura 3.4:   Pseudo rotação hiperbólica, de um ângulo θ, para o vetor P1.................................36 

Figura 3.5:   pseudorotações hiperbólicas e seus respectivos vetores e ângulos..........................37 

Figura 3.6:   Rotação hiperbólica do vetor P0 em um ângulo  – θ...............................................50 

Figura 3.7:   Micro rotações de P1 até P4 no modo Vetoração.....................................................50 

Figura 3.8:   Ângulo βn’ do vetor 

 com o eixo x.....................................................................51 

Figura 4.1:   Setores circulares e lineares associados a seus respectivos ângulos.......................56 

Figura 4.2:   Ângulo linear para o caso x0 ≠ 1.............................................................................57 

Figura 4.3:   Rotação linear de um vetor......................................................................................57 

Figura 4.4:   Visualização das rotações de P0 até o vetor P3 na Rotação Linear.........................59 

*3P*3P*k1  P*1'Pn 
 
 
 
 
 
 
 
 
 
 
 
 
 
LISTA DE TABELAS 

Tabela 2.1:   Erro absoluto da aproximação dos ângulos circulares para potência de base 2.......8 

Tabela 2.2:   Aproximações para o ângulo de 1 rad através das micro rotações.........................11 

Tabela 2.3:   Aproximações de αi.................................................................................................13 

Tabela 3.1:   Aproximações para θ = 0,549.................................................................................38 
Tabela 3.2:   Comparação dos termos da sequência θk’ = tgh– 1 2– k’............................................38 
Tabela 3.3:   Comparação dos termos da sequência θk’ = tgh– 12– k (após as repetições).............39 

Tabela 3.4:   Aproximações para θ = 0,549 com repetição de termos.........................................40 

Tabela 3.5:   αn’ em função do sinal de yn’ no modo Vetoração Hiperbólico...............................52 

Tabela 3.6:   Análise da condição do CORDIC Vetoração para ln(39)......................................53 

Tabela 3.7:   Vetoração Hiperbólico para o cálculo de ln (3,9)...................................................53 

Tabela 4.1:   Aproximações do ângulo rotacionado no caso Rotação Linear..............................60 

Tabela 4.2:   Cálculo de αn em função do sinal de yn na Vetoração Linear.................................64 

Tabela 5.1:   Valores de λ(n) nas equações 5.1............................................................................67 

Tabela 5.2:   Funções computáveis pelo CORDIC......................................................................67 

Tabela 5.3:   Funções calculadas pelo CORDIC Circular...........................................................68 

Tabela 5.4:   Funções calculadas pelo CORDIC Linear..............................................................69 

Tabela 5.5:   Funções calculadas pelo CORDIC Hiperbólico.....................................................69 

 
 
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 1 

INTRODUÇÃO 

Segundo Nikolay Lobachevsky (1792 – 1856): “Não há ramo da Matemática, por mais 

abstrato  que  seja,  que  não  possa  um  dia  vir  a  ser  aplicado  aos  fenômenos  do  mundo  real.”. 

Ainda  assim,  uma  crítica  recorrente  no  ensino  médio  é  a  ausência  de  ligação  entre  teoria  e 

prática,  especialmente  com  relação  à  matemática.  Pegue-se  o  exemplo  dos  polinômios.  O 

tratamento  puramente  algébrico  distancia  o  aluno  que  não  considere  interessante  esta 

abordagem. Cabe ao professor mostrar uma aplicação que ajude a justificar a necessidade de se 

dominar o assunto.  

Com  o  intuito  de  mostrar  a  utilidade  desse  conteúdo,  uma  ideia  é  abordar  a  Série  de 

Taylor, tida por muitos professores como a ferramenta empregada na aproximação de funções 

nas máquinas de calcular, especialmente para seno, cosseno e logaritmo. Ao pesquisar sobre o 

assunto, entretanto, descobri que elas não são usadas nas calculadoras portáteis, mas sim outro 

processo completamente diferente e igualmente interessante: o algoritmo CORDIC (COrdinate 

Rotation Digital Computer).  Isto não significa que as séries de potências não sejam aplicadas e 

não possam ser dadas como exemplo prático. Elas têm utilidade inquestionável na aproximação 

de várias funções, inclusive as menos elementares. Apenas não  servem para os computadores 

de baixa memória. 

Resolvido  o  problema  do  exemplo  de  aplicação  de  polinômios,  surge  o  da  forma  de 

processamento das calculadoras. As séries de potência, como o próprio nome indica, dependem 

das operações com potência, que se tornam mais complexas conforme os valores das bases e/ou 

os  expoentes  também  assumam  valores  maiores  e/ou  irracionais.  Ainda  que  uma  calculadora 

possa realizar tais cálculos, deseja-se que a mesma os faça o mais rápido possível e do modo 

mais simples, de forma a reduzir dificuldades desnecessárias, como programas complicados, e 

superar limitações técnicas, como pouca memória de cálculo.  

1 

 
 
 
 
 
 
 
 
 
CAP. 1 – INTRODUÇÃO 

Em  termos  de  rapidez  e  simplicidade,  os  melhores  comandos  (operações)  de  serem 

feitos em um computador são (não necessariamente nesta ordem): 

1- adição e subtração de números;  

2- estabelecer relação de ordem entre os números (maior e menor);  

3- armazenamento e leitura de valores na memória;  

4- multiplicação por potências de base 2 com expoente inteiro.  

Justificando  este  último  comando,  multiplicar  por  2n  em  uma  base  binária,  com  n 

natural, faz com que a vírgula do “número decimal binário” desloque-se n casas para a direita, 
ao passo que dividir por 2n desloca a mesma no sentido contrário, como as multiplicações por 

potências de base dez no sistema decimal.  

Portanto,  um  processo  que  realize  apenas  tais  comandos  aparenta  ter  mais  vantagens 

computacionais em relação a outros dependentes de operações que ainda devem ser definidas 

em  função  dessas  mais  elementares,  o  que  de  fato  ocorre.  Tendo  por  norte  tais  vantagens 

operacionais, o método CORDIC foi desenvolvido em 1959 por Jack Volder [9], inicialmente 

pela  necessidade  de  calcular  funções  trigonométricas  em  tempo  real  e  sem  o  uso  de  muita 

memória,  para  ser  usado  no  computador  de  navegação  do  bombardeiro  B-58,  substituindo  o 

resolver analógico (um tipo de transformador elétrico rotativo para medir graus de rotação). O 

CORDIC acaba se tornando muito mais rápido que as séries de potências (nos casos de baixa 

de capacidade de cálculos) por englobar apenas os comandos anteriormente mencionados.  

Segundo  Volder  [9],  neste  método  “uma  nova  técnica  de  computação  é  empregada,  a 

qual é especialmente adequada para resolver as relações trigonométricas envolvidas na rotação 

de coordenadas no plano e na conversão de coordenadas retangulares para coordenadas polares. 

(...)  as  operações  trigonométricas  na  computação  pelo  CORDIC  podem  ser  funcionalmente 

descritas como o equivalente digital de um resolver analógico”. Ainda conforme Volder [10], 

“a mudança principal era no tempo real de cálculo que as complicadas equações de navegação 

requeriam para a determinação da posição atual (do B-58) em uma terra esférica”. O CORDIC 

foi inicialmente desenvolvido na base binária. Não obstante, ele pode ser usado para qualquer 

base.  Hoje  em  dia  se  usa  a  base  decimal  em  muitos  casos.  A  base  dois  será  utilizada  por 

questões de simplicidade. 

2 

 
 
 
 
 
 
 
CAP. 1 – INTRODUÇÃO 

No capítulo 2 o CORDIC Circular é apresentado. São comentados os casos das funções 

seno,  cosseno  e  tangente  inversa  para  ilustrar  os  dois  modos  de  operação  do  algoritmo. 

Fundamenta-se  o  teorema  de  convergência  e  a  convergência  das  séries  utilizadas  no  caso 

circular, e discute-se a precisão.  

O  capítulo  3  aborda  o  CORDIC  do  tipo  Hiperbólico,  exemplificado  pelo  cálculo  das 

funções exponencial e raiz  quadrada. É discutido o problema da convergência para este  tipo e 

as  alterações  necessárias.  Comenta-se  a  precisão  e  a  sequência  recursiva  para  o  caso 

hiperbólico é apresentada. A convergência da sequência é demonstrada. Os exemplos abordam 

também algumas formas de se estender o raio de convergência. 

O  capítulo  4  trata  do  CORDIC  tipo  Linear.  São  detalhados  o  produto  e  o  quociente 

através  desta  variação  do  algoritmo,  desenvolvendo  também  a  precisão  e  convergência  do 

mesmo. 

 O  algoritmo  unificado  é  apresentado  no  capítulo  5,  que  reúne  os  três  modos  de 

operação  do  CORDIC.  Tabelas  resumindo  as  funções  mais  imediatas  obtidas  pelo  algoritmo 

são apresentadas.  

Este  trabalho  tem  por  objetivo  geral  apresentar  o  método  CORDIC,  conhecer  o 

mecanismo  necessário  para  o  cálculo  das  funções  obtidas  por  uma  calculadora  científica  de 

bolso e fundamentar teoricamente o funcionamento do algoritmo.  

Como  objetivo  específico,  procura-se  construir  exemplos  numéricos  para  ilustrar  o 

maior número possível de casos de funções elementares encontradas nas calculadoras portáteis 

para melhor compreender os princípios e a eficácia do processo.  

3 

 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 2 

CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Neste capítulo é dada uma noção geral do algoritmo para que se possa entender a ideia 

do  método.  São  definidas  as  rotações  e  pseudo  rotações  circulares.  Adentra-se  no  processo 

usado para o cálculo das funções seno e cosseno, seguido de um exemplo numérico para uma 

melhor compreensão e que também serve de ponto de partida para a discussão da precisão do 

algoritmo  para  tal  caso.  Apresenta-se  a  iteração  CORDIC  da  forma  inicialmente  concebida, 

bem  como  o teorema de convergência e as convergências das séries utilizadas  pelo  CORDIC 

circular, além de se fundamentar a precisão do mesmo. Finaliza-se com a abordagem do cálculo 

da  função  arco  tangente,  bem  como  um  exemplo  numérico  para  a  mesma.  Ao  final,  os  dois 

processos são resumidos em um só grupo de equações de iteração. 

2.1 – Noção Geral do CORDIC 

O CORDIC possui dois modos de computação: 

- modo Rotação, também chamado Z – reduction, onde as coordenadas de um vetor e 

um ângulo de rotação são dados e são calculadas as coordenadas do novo vetor após a rotação 

do ângulo dado;  

-  modo  Vetoração  ou  Vetorização,  também  chamado  Y  –  reduction,  onde  as 

coordenadas de um vetor são dadas e sua norma e seu argumento são calculados. 

De acordo com Dawid e Meyr [3] “em ambos os modos o algoritmo pode ser imaginado 

como  uma  sequência  iterativa  de  adições/subtrações  e  operações  de  deslocamentos,  que 

representam  rotações    através  de  ângulos  de  rotações  pré  fixados  (algumas  vezes  chamadas 

micro rotações) mas com a direção de rotação variável. (...) Entretanto, a iteração CORDIC não  

é  uma  rotação  perfeita,  uma  vez  que  envolveria  multiplicações  com  seno  e  cosseno.  O  vetor 

rotacionado é também escalonado  com o uso de  um  fator de  correção de escala  necessário”.  

4 

 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Por  esse  motivo  chamaremos  essa  rotação  antes  de  ser  escalonada  de  pseudo  rotação.  É 

importante  notar  que  as  micro  rotações  não  são  necessariamente  menores  que  o  ângulo  total 

rotacionado. Recebem esse nome pela ideia de serem  uma decomposição do ângulo  original, e  

não a rotação pretendida. Conforme Volder [9] “em essência, a técnica básica de  computação  

usada  em  ambos  os   modos  (...) é uma  sequência  passo  a passo de  pseudo rotações que 

resultam  em  uma  rotação  completa  através  do  ângulo  dado  (Rotação)  ou  resulta  em  um 

argumento angular final zero (Vetoração)”.  

Cabe  ainda  ressaltar,  conforme  Muller  [6],  que  “O  CORDIC  não  é  o  caminho  mais 

rápido para realizar multiplicações ou para computar logaritmos e exponenciais mas, uma vez 

que  o  mesmo    algoritmo  permite  a  computação  de  muitas  funções  usando  operações  básicas 

muito simples, ele é atrativo para implementações de hardware” (no sentido de ser  vantajoso 

por exigir  pouco custo operacional versus quantidade de funções calculadas). Por tal motivo, 

“O  CORDIC  foi  implementado  em  muitas  calculadoras  de  bolso  desde  a  HP  35,  e  em 

coprocessadores aritméticos tal como o INTEL 8087”. 

Simplificadamente, pode-se observar que o CORDIC se baseia, em ambos os modos, na 

rotação e/ou deslocamento de um ponto (ou vetor) arbitrariamente escolhido para o ponto que 

se  deseja  atingir  em  um  dado  sistema  de  coordenadas,  através  de  uma  trajetória  circular 

(método originalmente desenvolvido por Volder), linear ou hiperbólica (expansão realizada por 

Walther  [11]),  dependendo  da  função  a  ser  calculada  [6].  Entende-se  aqui  por  trajetória  a 

posição  descrita  pelo  ponto  P  que  representa  o  vetor  no  plano  cartesiano.  Pode-se  associar  a 

cada  caso  um  conjunto  de  coordenadas,  que  serão  denominadas  coordenadas  circulares, 

coordenadas hiperbólicas e coordenadas lineares e serão detalhadas à medida que o algoritmo 

for  explicado.  Tais  casos  serão  chamados  respectivamente  de  iterações  do  tipo  circular,  tipo 

hiperbólica e tipo linear. A rotação é feita por ângulos cada vez menores, de modo que se pode 

aumentar a precisão com que se aproxima do ângulo total tanto quanto se queira. 

2.2 – Rotação e Pseudo Rotação Circular  

Em um sistema cartesiano no plano, a rotação em um ângulo θ > 0, anti-horário, de um 

vetor representado pelo ponto de coordenadas P0 = (x0 , y0) gera um vetor P = (x , y), conforme 

na figura 2.1.  

5 

 
 
 
 
 
 
 
2.2 – Rotação e Pseudo Rotação Circular  

        Figura 2.1: Rotação circular de um vetor 

As coordenadas de P = (x , y) são:       

                                           (2.1) 

Se θ > 0, para – θ  a rotação é no sentido horário. Neste caso, basta usar a paridade das funções 

seno e cosseno, ficando as equações (2.1) da forma: 

Sem  perda  de  generalidade,  será  inicialmente  analisado  o  caso  θ  >  0  para  definir  a  pseudo 

rotação circular, uma vez que a paridade da função gera o caso – θ, onde θ > 0. 

Chamando Mθ = 

, pode-se escrever (2.1) da forma: 

     P = Mθ.P0                                                                    (2.2)                       

Se cos θ ≠ 0, é possível fazer Mθ =

=

, de forma que: 

                                   P = 

.P0                                                  (2.3) 

que é equivalente a:                         

                                                  (2.4)        

6 

θyθxyθyθxx cos.sen . sen. cos.0000θyθxyθyθxx cos.sen . sen. cos.0000θθθθcos    sen sen     cosθθθθcos    sen sen     cos1     tg tg   1.cosθθθ1     tg tg   1.cosθθθ0000 tg.. cos tg.. cosyθxθyθyxθx 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Desconsiderando o termo cos θ:        

                                                        (2.5) 

Analogamente a (2.2), define-se Mθ

* = 

, obtendo-se: 

P* =

.P0    ⇔   P* =Mθ

*.P0                                        (2.6)             

As equações (2.5)  e  sua  equivalente (2.6)  são  chamadas  uma  pseudo  rotação do  vetor  P0. 

Recebem este nome porque o vetor P* = (x* , y*) tem um aumento em sua magnitude de 

em relação ao vetor P0, não sendo uma rotação exata, conforme observado das equações (2.3) e 

(2.4) e ilustrado na figura 2.2. 

Figura 2.2: Pseudorotação do vetor P0 em um ângulo θ 

2.3 – O CORDIC no Cálculo das Funções Seno e Cosseno 

As  funções  seno  e  cosseno  de  um  ângulo  são  obtidas  no  modo  chamado  Rotação  no 

CORDIC tipo circular. Este tipo utiliza o círculo trigonométrico, daí seu nome. Partindo-se do 

ponto      P0 = (1 , 0) e rotacionando-o de  θ > 0, tem-se que  P = (cos θ , sen θ). Tal rotação só 

pode  ser  feita  se  forem  conhecidos  cos  θ  e  sen  θ,  o  que  é,  na  verdade,  o  objetivo  final.  O 

algoritmo  CORDIC  quebra  essa  rotação  em    ângulos  “menores”    θ0,  θ1,  θ2,  ...,  θn  (as  micro 

rotações),  que  são  direcionadas  para  que  sua  soma convirja para o ângulo θ desejado. Essas 
7 

00*00*y tg. tg.θxyθyxx1     tg tg   1θθ1     tg tg   1θθθ  cos1 
 
 
 
 
 
 
 
 
 
 
2.3 – O CORDIC no Cálculo das Funções Seno e Cosseno 

rotações  parciais  geram  sobre  um  círculo  trigonométrico  pontos  cada  vez  mais  próximos  do 

ponto  desejado  (figura  2.3).  O  número  de  micro  rotações  depende  da  precisão  desejada,  que 

está ligada à convergência do algoritmo, e será discutida mais adiante nesta mesma seção. 

Figura 2.3: Micro rotações circulares de um Vetor. 

Tais  micro  rotações  são  especialmente  escolhidas  de  forma  que  tg  θn  =  2–  n.  Desse 

modo, reduz- se a operação do produto pela tangente a um produto por um número de base 2, 

transformando-  se  em  uma  simples  operação  de  deslocamento  da  vírgula.  Como  vantagem 
adicional, para ângulos suficientemente pequenos, pode-se fazer a aproximação tg –1 θ ≈ θ e as 

micro  rotações  podem  ser  implementadas  usando  ângulos  mais  práticos  para  o  computador 

operar, conforme na tabela 2.1.  

θi 

θ0 

θ1 

θ2 

⁞ 

θ10 

tg – 1 (2– i) 

θi calculado 

θi ≈ 2– n 

Erro absoluto 

tg – 1 (1) 

≈ 0,785398163 

≈ 1 

0,214601837 

tg – 1 (2 –1) 

≈ 0,463647609 

≈ (2 –1) 

0,036352391 

tg – 1 (2 –2) 

≈ 0,244978663 

≈ (2 –2) 

0,005021337 

⁞ 

⁞ 

⁞ 

⁞ 

tg – 1 (2 –10) 

≈ 0,000976562 

≈ (2 –10) 

0,0000000003 

Tabela 2.1: Erro absoluto da aproximação dos ângulos circulares para potência de base 2. 

Seja xT o  valor teórico de  uma medida e  xC o  valor calculado. O  erro absoluto entre xC e  xT é 

definido como  e = │xT – xC │ .  Observe que,  a partir de  θ10, o  erro  absoluto  de aproximar o  

8 

4 
 
 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

ângulo  calculado para  uma  potência  de  2  é da ordem de 3.10– 10, com  imprecisão na décima 

casa decimal, quantidade utilizada pela maioria das calculadoras de bolso. A aproximação de θn 

para uma potência de 2 depende do critério do programador. Obviamente, quanto maior o valor 

de  n,  melhor  a  aproximação.  Neste  trabalho  a  aproximação  será  considerada  em  θ5    apenas  

para efeitos de  simplificação de contas.  Isto não significa que necessariamente este é o valor 

de n a partir do qual essa aproximação é introduzida. Independente do n a partir do qual se faz 

tal  aproximação,  estes  ângulos  são  pré-computados  e  armazenados  em  uma  tabela  de  busca, 

chamada tabela LUT (sigla do inglês Look Up Table).    

De acordo com (2.3), para θn qualquer tem-se: 

                                                    (2.7) 

Desde que se escolha tg θn = 2– n

 para que as multiplicações sejam feitas do modo comentado na 

seção 2.1, nota-se que:                          

Cada passo que ocorre corresponde uma rotação. Portanto, se o algoritmo rodar n + 1 passos, 

observa-se que θ ≈ ± θ0 ± θ1 ± ··· ± θn  e tem-se genericamente de (2.3) e das propriedades de 

multiplicação de matrizes:  

Pn+1 =

.P0 

Que, por (2.6), pode ser escrita na forma:           Pn+1 = 

                         (2.8) 

Como as rotações são direcionadas de forma que Pn+1 convirja para P, espera-se que: 

P = 

≈ Pn+1 = 

                                         (2.9) 

= 

;    

      e     αn = 

9 

1      tg tg        1. cosnnnθθθθMn1     22        1 cosnnnθ.θMn1 tgtg11 tgtg1coscos000θθ θθ .θθnnn0P.0**nθnθM.MKθθsen cos*1P.sen  cosnnnnK0coscosθθKnnniiθ0cos0***1P.P0θnθMMnniiθ0 
 
 
                                                           
 
                                                                                                      
 
 
 
         
 
2.3 – O CORDIC no Cálculo das Funções Seno e Cosseno 

 é chamado Fator de Correção de Escala (FCE).  

Note que: 

- O sinal de 

 independe do sinal de θn, uma vez que cos(x) é uma função par. 

- αn é o ângulo total rotacionado através das micro rotações. 

-  O  sinal  de  θi+1  depende  da  comparação  de  αi  com  θ,  e  é  escolhido  de  forma  que  αn  se 

aproxime de θ. 

Apesar de intuitivo, é preciso mostrar que realmente αn tende a θ, garantindo a convergência. 

Além disso, é necessário também comprovar que cos θ ≈ cos αn e sen θ ≈ sen αn. A prova dessa 

convergência  será  apresentada  nas  seções  2.5  e  2.6.  Por  fim,  (2.9)  mostra  que  o  algoritmo 

trabalha,  na  verdade,  com  as  pseudo  rotações.  O  valor  de 

  é  uma  constante  que  pode  ser 

armazenada  no  hardware,  sendo  utilizada  apenas  ao  final  do  processo.  Isto  elimina  várias 

multiplicações,  ficando  apenas  as  multiplicações  matriciais.  Entretanto,  uma  vez  que  o 
algoritmo vai se aproximando do ângulo desejado por uma sequência de ângulos θi do tipo 2–i, 

vê-se que as operações envolvidas são todas as comentadas como mais fáceis de computar por 

uma  máquina,  otimizando  o  tempo,  simplificando  o  programa  e  necessitando  de  menos 

memória.  A  única  multiplicação  “verdadeira”  realizada  é  a  do  fator 

.  Como  todos  os 

ângulos  θi  são  conhecidos, 
calculado  toda  vez  que  for  necessário.  A  figura  2.4  ilustra  as  três  primeiras  pseudorotações 

é  um  valor  pré-calculado  e  armazenado,  não  necessitando  ser 

partindo-se  do  vetor  inicial  P0.  Após  n+1  pseudorotações,  tem-se 

.  O  ponto  P  é  obtido 

fazendo P ≈ 

.

, conforme visto em (2.9). 

                         Figura 2.4: Pseudorotações de P0 até o vetor 

no modo Rotação.  

10 

nKnKnKnKnK*1 PnnK*1 Pn*3P 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Um exemplo numérico elucida melhor esse processo. As contas serão feitas no sistema 

decimal, ainda que o computador opere no sistema binário. Deste modo, os números utilizados 

nos exemplos, quando trabalhados pela máquina, serão na base binária.  

Exemplo 2.1: Suponha que se quer calcular sen 1. Fazendo a aproximação do ângulo desejado:  

1º iteração: Para primeira aproximação 

α0 = θ0 = tg-1(1) ≈ 0,785398 

2º  iteração:  Como  α0  <  1,  o  algoritmo  adiciona  θ1,  obtendo  a  segunda  aproximação  para  o 

ângulo  rotacionado: 

α1 = θ0 + θ1 ≈ 0,785398 + 0,463648 ≈ 1,249046 

3º iteração: Como α1 > 1, o algoritmo subtrai θ2, obtendo: 

α2 = θ0 + θ1 – θ2 ≈ 1,249046 – 0,244979 ≈ 1,004067. 

E assim sucessivamente. A tabela 2.2 resume o processo: 

iteração 

1ª  

2ª  

3ª  

4ª  

5ª  

n 

0 

1 

2 

3 

4 

θn 

0,785398(+) 

0,463648(+) 

0,244979(–) 

0,124355(–) 

0,062419(+) 

αn 

0,785398 

1,249046 

1,004067 

0,879712 

0,942131 

Tabela 2.2: Aproximações para o ângulo de 1 rad através das micro rotações. 

Ao mesmo tempo, enquanto se aproxima o ângulo, os valores de sen αn e cos αn se aproximam 

de sen 1 e cos 1. Dessa forma, de acordo com (2.9), na terceira iteração se teria: 

 K2. 

11 

0222Psen  cos012..MM.MKαα***θθθ01.1111.121211.141411 
 
 
 
 
 
 
 
 
 
 
 
2.3 – O CORDIC no Cálculo das Funções Seno e Cosseno 

Com 

. Calculando, obtêm-se: 

0,613572.

 = 

De modo que cos α2 ≈ 0,536876 e sen α2 ≈ 0,843662. Em uma calculadora científica, tem-se 
que cos 1 = 0,540302 e sen 1 = 0,841471, com imprecisão na sexta casa.  

Supondo  os  resultados  obtidos  em  uma  calculadora  científica  como  corretos,  estes  serão 

considerados  como  os  valores  teóricos  xT.  Os  valores  obtidos  pelo  método  CORDIC  são  os 

valores calculados xC. O erro absoluto encontrado é: 

ecos 1  = │0,540302 – 0,536876│=0,003426 ;  esen 1 = │0,841471 – 0,843662│=0,002191. 

A  exatidão  anteriormente  obtida  é,  inicialmente,  mais  coincidência  que  precisão.  De 

fato, ao se calcular o quarto passo no exemplo 2.1, vê-se que α3 ≈ 0,879712, valor um pouco 

distante de 1 radiano. Sendo assim, na quarta iteração tem-se: 

0,608834.

 = 

De onde se vê que: 

ecos 1  = │0,540302 – 0,637373│=0,097071 ;  esen 1 = │0,841471 – 0,770556│=0,70915 

12 

0122cos.cos.cosθθθK22sen cosαα81187843662,0536876,033sen  cosαα01.1111.121211.141411.181811.3K33sen  cosαα64816467.608834,081187.181811770556,0637373,0 
 
 
 
 
 
 
 
                                
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Já no quinto passo α4 ≈ 0,942192, ficando novamente mais próximo de 1 radiano. A tabela 2.3 

mostra os valores de αi do sexto até o décimo passo, usando as aproximações como potências 

de 2 para os ângulos a partir de θ5. 

α 5 

α 6 

α 7 

α 8 

α 9 

       0,942192 + 

         0,973442 

       0,973442 + 

         0,989067 

       0,989067 + 

         0,9968795 

       0,9968795 + 

         1,00078575 

       1,00078575 – 

         0,998832625 

Tabela 2.3: Aproximações de αi 

Observa-se que a variação torna-se menor conforme aumenta o número de passos, como é de se 

esperar em uma função aproximadora. Ao mesmo tempo, a precisão na estimativa dos valores 

de seno e cosseno do arco aumenta. Para determinar o número de iterações necessário para a 

precisão desejada, é preciso utilizar o seguinte teorema, demonstrado na seção 2.6: 

Teorema 1 (teorema da precisão): Utilizando o método CORDIC tem-se, para 

: 

Então,  para  n  +  1  =  40,  n  =  39  e 

,  o  que  fornece  a  precisão  de  dez  casas, 

utilizada  pela  maioria  das  calculadoras.  Assim,  com  n  fixo  em  39, 

passa  a  ser  uma 

constante,  ficando  seu  valor 

0,607252935.  Ela  é  implementada  no 

programa diretamente assim como os ângulos, que já são conhecidos. Além deste artifício para 

poupar memória, vê-se que nem todos os ângulos precisam ser armazenados na tabela LUT. Ao  

13 

32164112812561512122θnnnnαθ αθ21sen sen 21coscos 11123910819121.,nK)cos()cos(03939θθK 
 
 
 
 
 
 
 
 
 
 
 
 
2.4 – Sequência Recursiva do CORDIC Circular Rotação 

se fazer θn ≈ 2–n, tais ângulos podem ser lançados direto no algoritmo. Nesse exemplo, usou-se 
os  ângulos  calculados  de  θ0  a  θ4  e  fez-se  θi  ≈  2–i,  para  5  <  i  <  n,  diminuindo  a  memória 

necessária para a armazenagem de todos os ângulos. 

2.4 – Sequência Recursiva do CORDIC Circular Rotação 

Usando (2.4) para uma micro rotação anti-horária θn, tal que tg θn = 2– n, obtém-se: 

ou, analogamente, no caso do ângulo – θn (rotação anti-horária): 

Introduzindo-se um operador binário dn tal que dn = 1 se a rotação é anti-horária, e dn = – 1 caso 

contrário, as equações anteriores podem ser reescritas como: 

                                            (2.10) 

Além disso, conforme visto na seção 2.3, temos que αn = 

 é o ângulo total rotacionado, 

que pode ser reescrito da forma:  

αn =  

                                                          (2.11) 

Observou-se que, antes de cada nova micro rotação θn,  αn  é comparado com θ para  determinar  

se a nova micro rotação será horária ou anti-horária e essa direção de rotação definirá o valor 

de dn em (2.10), garantindo a convergência do algoritmo. A forma de comparação de αn com θ 

depende do modo de operação do  CORDIC. No modo Rotação, ela é  direta, pois se conhece o  

14 

nnnnnnnnnny.x. θy.yx. θx2cos2cos11nnnnnnnnnny.x. θy.yx. θx2cos2cos11nnnnnnnnnnnn..xdy. θy..ydx. θx2cos2cos11ninθ0niii.θd0 
 
 
 
 
 
 
 
 
 
 
 
                                                       
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

valor de θ. Mostrar-se-á nas seções 2.7 e 2.8 que no modo Vetoração a comparação é indireta, 

uma vez que θ não é conhecido. 

Essa comparação com θ é feita no próprio algoritmo, introduzindo-se uma nova variável z, que, 

para qualquer sinal de θn e observando apenas que este sinal é definido pelo operador dn, está 

associada ao ângulo micro rotacionado da seguinte forma: 

zn+1 = zn – dn. θn                                                         (2.12) 

Deste modo, se zi > 0, o próximo ângulo, θi+1, é subtraído. Senão, é somado. Fazendo assim, o 

próprio sinal de zi direciona para onde o vetor será rotacionado a cada nova rotação, servindo 

como a variável de controle da convergência do algoritmo. Ou seja, no modo Rotação: 

dn = sign(zn) = 

Nos casos em que tgθn = 2– n, reescreve-se (2.12) como:       zn+1 = zn – dn. tg– 1 2– n           (2.13) 

De acordo com o observado em (2.9), o algoritmo realiza as pseudo rotações a cada ângulo θi, 

completando a operação ao final com o FCE (

). As equações das pseudorotações são dadas, 

a partir de (2.10), por: 

Que, juntamente com (2.13), formam as equações convencionais da iteração CORDIC: 

                                                (2.14)       

O  asterisco  foi  introduzido  na  variável  z  para  destacar  que  estamos  lidando  com  a 

pseudorotação.  Como  exemplo,  para  o  cálculo  de  seno  e  cosseno  de  um  ângulo  θ  os  valores 

iniciais são: 

15 

0 se 10 se 1nnz,z,nKn*nn*n*nn*nn*n*n..xdyy..ydxx2211)2(tg221111nn*n*nn*nn*n*nn*nn*n*n.dzz..xdyy..ydxx 
 
 
 
 
 
 
 
 
                                                           
 
 
 
 
2.5 – Teorema Chave para a Convergência do CORDIC 

x*

0 = Kn ;  y*

0 = 0  e z*

0 = θ. 

As  provas  da  convergência  de  z*

n+1  e  de  que  x*

n+1  ≈  cos(αn+1)  e  y*

n+1    ≈  sen(αn+1)  são 

demonstradas na seção 2.6. 

2.5 – Teorema Chave para a Convergência do CORDIC 

Segundo  Edwards  e  Underwood  [4],  as  propriedades  de  convergência  das  sequências 

originadas do algoritmo CORDIC dependem do seguinte teorema. 

Teorema  2  (Teorema  de  Convergência):  Sejam  θ0  >  θ1  >  ···  >  θ  n  >  0,  termos  de  uma 

sequência decrescente de números positivos que satisfazem: 

, para 0 < k < n.                                                (i) 

E seja r um número que satisfaz:           

                                                          (ii) 

Definindo a sequência s0 = 0 e sk+1 = sk + δk.θk, k = 0, 1, ..., n, onde:  

Então:                    

, para 0 < k < n. Em particular, 

.                 (iii) 

Demonstração: A prova é feita por indução sobre k.  

1. Para k = 0, tem-se imediatamente que:    

2. Assumindo o teorema válido para k, e considerando que 

: 

16 

nkjjnkθθθ1njjnθθ r 0 s, rs,  r srδkkkk11)(sgnnkjjnkθθsrnnθsr1njjnθθ r sr00kkkk.θδsrsr1 
 
 
 
 
 
 
 
                        
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Se r – sk > 0, então δk = 1 e vem que  

.  

Por outro lado, se r – sk < 0, então 

 e: 

. 

Assim, em qualquer caso, tem-se que 

. 

Da primeira inequação da hipótese nota-se que:    

Pela hipótese de indução, 

 < – θk < 

< 

Combinando essas duas inequações:

 < 

Que mostra que o teorema é válido para k + 1. Finalmente: 

, e, assim: 

, o que completa a prova. 

2.6 – Convergência do CORDIC Circular 

Esta  seção  foi  desenvolvida  com  base  no  artigo  de  Edwards  e  Underwood  [4].  Para 

provar que a sequência do CORDIC converge, o Teorema do Valor Médio será necessário. 

17 

kkkkkθsrθδsr .1kδkkkkkkkkkθsr θrsθs r.θδsrkkkkkθsr .θδsrnkjjnθθ1kkθsrnkjjnkθθsrkkθsrnkjjnknkjjnθθθθθ11ksrkkθsr nkjjnθθ1nnnnnnθθθθsrθ2nnnnθθsr sr1 
 
 
 
 
 
 
 
 
 
 
  
 
  
  
                
 
 
 
 
 
2.6 – Convergência do CORDIC Circular 

Teorema  do  Valor  Médio  (TVM):  Se  f  é  uma  função  contínua  em  um  intervalo  [a,b]  e  é 

derivável em (a, b) , existe c   (a, b), tal que :   

O teorema 3 estabelece que a sequência θk = tg–  1 2–  k , k = 0, 1, ..., n, satisfaz o Teorema de 

Convergência. 

Teorema  3:  Para  n  >  3,  a  sequência  θk  =  tg–  1  2–  k  ,  k  =  0,  1,  ...,  n,  satisfaz  as  hipóteses  do 

Teorema de Convergência para todo 

. 

Demonstração: A sequência dada é uma sequência decrescente de números positivos.  

Aplicando o TVM à função f(x) = tg– 1 x:          

                                  (2.15) 

Sejam  a = 2– (j+1) e b = 2– j. Então  b – a = 2– (j+1)  e, como c > a, pode-se fazer: 

Portanto, dos resultados anteriores: 

θj – θj+1  = (b – a).

                       (2.16) 

Como c < b:                            

                                          (2.17) 

Fazendo, agora, a = 0 e b = 2– j em (2.15) e usando (2.17), tem-se: 

                               (2.18) 

18 

)()()(cf'abafbf2π r 21111tgtgcabab222222222122111111jjjac2212222122122122111jjjjj.cjjjbc222222122111111jjjjjjj.cb.θcbθ2222221221221111100 
 
 
 
 
 
 
 
  
 
                          
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Usando a série telescópica para θj, pode-se combinar as inequações: 

θk – θn = (θk – θk+1) + (θk+1 – θk+2)+ ··· + (θn–1 – θn) 

θk – θn =  

 = 

Que leva a concluir que: 

, para 0 < k < n 

E, uma vez que:    

≈ 0,7850 + 0,46365 + 0,24498 + 0,12435 ≈ 1,618 > 

,  

fica claro que:                      

 < 

Agora  é  preciso  provar  que  as  sequências  para 

  e 

  convergem  para  o  seno  e  o 

cosseno do ângulo desejado. 

1) Primeiro, deve-se mostrar que a sequência sk converge para θ. Definindo-a como: 

sk = θ – 

 = 

, vê-se que s0 = θ – 

 = 0 e que sk+1 = 

 = sk + 

. 

Lembrando que, no modo rotação, dn = sgn (

), para r = θ, tem-se: 

Portanto, esta sequência sk satisfaz o Teorema de Convergência e: 

19 

11nkjjjθθ)16.2(1221212nkjjjnkjjj12212)18.2(nkjjθ1nkjjnkθθθ13012tgjj22  r3012tgjjnjjnθθ0*kx*ky*kz10kjjjθδ*0zkjjjθδ0kkθδ*nzkkkkkdzsθsrδ)(sgn)(sgn)(sgn*nnθsr1nnnnθsθ212tg11 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                      
 
 
 
 
 
2.6 – Convergência do CORDIC Circular 

2)  Para  provar  que  as  sequências  para 

  e 

  retornam 

  =  cos(sn+1)  e 

  =  sen(sn+1), 

precisa-se do seguinte lema: 

Lema 1: Para as sequências sk definidas como anteriormente em (1) , e lembrando que δk = dk: 

cos(sk+1) = cos(θk).[cos(sk) – dk.sen(sk).2– k]   ;    sen(sk+1) = cos(θk).[sen(sk) + dk.sen(sk).2– k] 

Demonstração:  A  prova  é  baseada  nas  identidades  trigonométricas  elementares.  Para  a 

primeira fórmula, tem-se: 

cos(sk+1) =  cos(sk + dk.θk)  

              = cos(sk).cos(dk.θk) – sen(sk).sen(dk.θk) 

              = cos(sk).cos(θk) – dk.sen(sk).sen(θk) 

              = cos(θk).[cos(sk) – dk.sen(sk).tg(θk)]  
              = cos(θk).[cos(sk) – dk.sen(sk).2– k] 

Para a segunda fórmula: 

sen(sk+1) = sen(sk + dk.θk) 

              = sen(sk).cos(dk.θk) + cos(sk).sen(dk.θk) 

              = sen(sk).cos(θk) + dk.cos(sk).sen(θk) 

              = cos(θk).[sen(sk) + dk.cos(sk).tg(θk)] 
              = cos(θk).[sen(sk) + dk.cos(sk). 2– k] 

3) Agora, definindo: 

E considerando as sequências: 

, com 

    e     

, com 

20 

*kx*ky*1nx*1nyK θ θ. θ;  w; K θ θ. θ;  w; K θ;  wKwnnkkcoscoscoscoscoscoscos1101110010kkkwsC)(cosKwsC000)cos(kkkwsS)(sen0)(sen000wsS 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Com o lema 1, obtém-se: 

Do mesmo modo: 

Isto  é, as equações para  Ck e Sk são exatamente aquelas para 

 e 

 no algoritmo CORDIC. 

Como wn+1 = 1, vem que: 

4) Finalmente, pode-se demonstrar o teorema 1 (teorema de precisão), usado na seção (2.3): 

Demonstração:  O  Teorema  do  Valor  Médio  aplicado  à  função  cosseno  diz  que  existe  um  c 

entre θ e sn+1 tal que:  

21 

11112).sen()(cos)(cos)cos(kkkkkkkkkwsds.θwsCkkkkksds.θθ.θK2).sen()(coscoscoscos110kkkkkkwsdws2).sen()(coskkkkk..SdCC2111112)(cos)sen()(cos)sen(kkkkkkkkkw.sds.θwsSkkkkksds.θθ.θK2).(cos)sen(coscoscos110kkkkkkwsdws2).cos()(senkkkkk.CdSS21*kx*ky)(sen)(sen)cos()cos(1111111111nnnnnnnnnnswsSyswsCx csθsθnnsen)(cos cos11 
 
 
                           
 
                           
 
                    
 
                                      
 
                          
 
                          
 
                   
 
                              
      
 
 
 
 
 
2.7 – O CORDIC no Cálculo da Função Arco Tangente 

Portanto, a inequação │θ – sn+1│< 2–n fornece um limite para o erro da computação do cosseno: 

Analogamente:                

2.7 – O CORDIC no Cálculo da Função Arco Tangente 

A  função  arco  tangente  de  um  ângulo  é  obtida  no  modo  Vetoração  no  CORDIC 

Circular. O princípio de funcionamento é o mesmo do modo Rotação, com a diferença de que, 

neste  caso,  se  faz  o  análogo  a  rotacionar  o  vetor  conhecido  P0  =  (cos  θ  ,  sen  θ)  para  o  vetor       

P = (1 , 0). Genericamente, em um sistema cartesiano no plano, a rotação em um ângulo – θ, de 

um  vetor  qualquer  de  coordenadas  P0  =  (x0  ,  y0) e  que  tem  um  ângulo  θ  >  0  com  o  eixo  das 

abscissas, gera o vetor P = (x , y), conforme a figura  2.5, de modo que:       

x = 

             y = 0                                               (2.19) 

                                Figura 2.5: Rotação circular do vetor P0 em um ângulo  – θ 

Assim, ao impor que a rotação do vetor termine sobre o eixo x, no final temos um vetor cuja 

abscissa é igual ao seu módulo. Analogamente ao modo Rotação, o ângulo – θ é obtido através 

de  micro  rotações.  Além  disso,  os  vetores  também  são  primeiramente  pseudo  rotacionados, 

como mostra a figura 2.6. 

22 

nnnn*nsθsθ. csθxθ2sen)(cos  cos  cos1111nn*nsθyθ2)sen(sen sen 112020yx 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Figura 2.6: Pseudo rotações de P0 até 

 no modo Vetoração. Obtém-se P fazendo-se P ≈

. 

Como se tem uma rotação genérica de um vetor, por (2.8):  

Pn+1 =

 = Kn.

Tendo em vista ser o mesmo processo que o do modo Rotação, conclui-se através do mesmo 

raciocínio lá utilizado que, de acordo com (2.9):  

P= 

≈

,  com R = 

Onde βn é o ângulo que o vetor Pn+1 faz com o eixo x, mostrado na figura 2.7.  

Figura 2.7: Ângulo βn do vetor 

 com o eixo x.        

No modo rotação, βn era o próprio ângulo αn , que tendia a θ. Neste modo, vê-se que: 

23 

*3P*1P.nnK0*P.0θnθM.MK*n*1Pn0R*1P.sen . cos.nnnnKβRβR2020yx*n1P 
 
 
 
 
 
 
 
 
 
 
    
 
 
2.7 – O CORDIC no Cálculo da Função Arco Tangente 

βn =  θ ± θ0  ± θ1 ±  θ2  ±  θ3 ± ··· ± θ n. 

Inicialmente, parece que βn = θ –  αn. Mas, de (2.11),  αn = 

. E, uma vez que a rotação 

total ocorre no sentido horário, αn tende a “ – θ”. Percebe-se assim que  βn = θ + αn.. Contudo, 

isso não altera a prova da convergência, que é a mesma do modo Rotação, nem o fato de que βn 

tende a 0.  

Na  verdade,  o  ângulo  θ  não  é  conhecido,  sendo  um  dos  objetivos  da  utilização  deste 

modo.  Portanto,  não  podemos  usar  βn  para  o  cálculo  de  x*

n+1  e  y*

n+1.  Para  contornar  tal 

dificuldade,  ao  invés  de  se  levar  em  conta  o  ângulo  βn  feito  com  o  eixo  x,  considerar-se-á  o 

ângulo  rotacionado  pelo  vetor  a  partir  de  sua  posição  inicial.  Analisando  simplificadamente, 

percebe-se  que  este  é  exatamente  o  processo  que  permitiu  que  o  algoritmo  funcionasse  no 

modo rotação, pois seria o  equivalente a deslocar o eixo x para a posição do vetor inicial P0, 

tornando-o  a  posição  do  vetor  final  após  a  rotação.  Desta  forma  será  novamente  analisada  a 

soma αk das micro rotações, com a diferença de que será o simétrico do caso rotação, uma vez 

que aqui a rotação total é horária, considerando-se o exemplo a partir do primeiro quadrante. 

Como θ não é conhecido, não se pode comparar seu valor com o de αn para decidir o 

sinal de cada nova micro rotação, tal como no modo Rotação. Não obstante, percebe-se que a 
coordenada y*

 > θ, Pn+1 cai no quarto quadrante, ficando 

n está ligada ao valor de αn. Caso 

n+1 negativo. Caso contrário, Pn+1 recai sobre o primeiro quadrante e y*

n+1 será positivo. Logo, 

y*
convém  analisar  o  sinal  de  y*

n+1  para  decidir  o  sinal  de  θn+1  na  nova  iteração  e  garantir  a 

convergência do processo. Explicitando numericamente:  

Exemplo  2.2:  suponha  que  se  quer  determinar  tg–1(1,4).  Para  efeitos  de  compreensão  do 
algoritmo, considere já conhecido que o ângulo entre P0 e o eixo x é θ = tg–1(1,4) = 0,950547 

(note que θ < ).  Faz-se, então, a aproximação do ângulo desejado: 

1ª iteração – Tomando inicialmente θ0 = tg–1 (1) = = 0,785398, tem-se:     

α0 = – θ0 = – 0,785398 

24 

niiiθd0.nα24 
 
 
 
 
 
   
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

Ao mesmo tempo, na primeira pseudo rotação: 

P*

1 = 

2ª iteração – Note que:  

  – α0 < θ, o que indica que P*

1 está no primeiro quadrante após a rotação; 

  y*

1 > 0, também indicando que P*

1 está no primeiro quadrante. 

A primeira comparação depende do valor de θ, que não é conhecido realmente. Deste modo, a 
segunda  comparação  é  a  mais  conveniente.  Como  y*

1  >  0,  a  próxima  micro  rotação  deve  ser 

horária. Deste modo: 

Fazendo θ1 = tg–1

= 0,463648:    

α1 = – θ0 –θ1 = – 0,785398 –0,463648 = – 1,249046 

Ao mesmo tempo, na segunda pseudo rotação: 

P*

2 = 

3ª iteração – Note novamente que:  

  – α1 > θ ⇒ P*

2 está no quarto quadrante; 

   y*

2 < 0  ⇒  P*

2 está no quarto quadrante. 

Dadas as considerações na 2ª iteração, interessa apenas o sinal da ordenada do vetor. Uma vez 

que y*

2 < 0, a próxima micro rotação deve ser anti-horária. Como θ2 = tg–1

= 0,244979: 

25 

4,04,24,11.1111218,06,24,04,2.1212114,11.1111.12121141 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
2.7 – O CORDIC no Cálculo da Função Arco Tangente 

α2 = – θ0 – θ1 + θ2 = – 1,249046 + 0,244979 =  – 1,004067 

Ficando, na terceira pseudo rotação: 

P*

3 = 

Procedendo  deste  modo  tem-se  a  aproximação  para  P*

n+1  e  se  obtém  P  fazendo  P  ≈  Kn.

. 

Sendo assim, na terceira iteração: 

P ≈ K2. 

= 0,608834. 

 = 

Observando que:      

 = 

    e     θ = tg–1(1,4)  ≈ – α2 = 1,004067 

Para efeito de comparação, prosseguindo até a sétima iteração, ter-se-ia (a análise detalhada do 
sinal de y*

n+1 foi omitida): 

(y*

3 < 0  ⇒  θ3 > 0)      (y*

4 > 0  ⇒  θ4 < 0)      (y*

5 > 0  ⇒  θ5 < 0)      (y*

6 < 0  ⇒  θ5 > 0) 

P*

7 =  

  = 

De modo que: 

P  ≈  

 = 0,607278.

E, também:      tg–1(1,4) ≈  – α6  = – (– θ0 – θ1 + θ2 + θ3 – θ4 + θ5 + θ6) = 0,957686 

Atente para alguns pontos importantes: 

26 

15,08,28,06,2.1414114,11.1111.121211141411*1Pn15,08,215,08,20913,07047,12020yx7205114122,,15,08,2.181811.11611611.13213211.1641641102039808330052,,020398083300526,,.K0123870720422102039808330052,,,, 
         
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

  Comparou-se cada ângulo de rotação αi com θ para determinar se Pi+1 está no primeiro ou no 
quarto quadrante. Entretanto, não há lógica em se fazer isso para determinar  θ = tg–1x, pois θ já 

deveria ser conhecido. Fez-se isso inicialmente para depois notar que é equivalente a comparar 
o sinal de y*

yi < 0. Assim, no modo Vetoração dn = sign(–y*

i, de forma que αi > θ 

n).  Tal 

mudança elimina a necessidade de se conhecer θ previamente.  

  αn tende ao simétrico do ângulo inicial θ que o vetor P0 faz com o eixo x. 

Como  o  raciocínio  é  o  mesmo,  as  equações  de  iteração  para  os  dois  modos  são  as  mesmas, 

mudando apenas na escolha do sinal  de  dn  e dos valores iniciais  para  x0, y0  e  z0. A seção  2.8 

resume os dois casos. 

2.8 – A Iteração CORDIC Convencional 

Conforme visto em (2.14), o algoritmo de Volder é baseado na iteração: 

Essas  equações  foram  obtidas,  por  questões  de  simplicidade,  a  partir  da  rotação  do  vetor         

P0 = (1 , 0), para se chegar ao cálculo do seno e do cosseno de um ângulo. Mas, de acordo com 

Muller [6], podem ser utilizadas para qualquer vetor P0 = (x0 , y0). A única restrição ocorre com 

relação ao ângulo rotacionado, que deve estar dentro da região de convergência. A escolha das 

coordenadas de P0 e do ângulo inicial, junto com o modo de iteração do algoritmo, determina o 
resultado final obtido. Em ambos os modos z*

n+1 é a variável associada diretamente ao ângulo 

rotacionado  pelo  vetor  a  partir  do  vetor  de  partida.  A  escolha  de  z0  e  dn  definem  o  modo 
utilizado.  No modo  Rotação,  dn  = sign(z*
z*

0  =  θ.  No modo  Vetoração,  dn = sign(– y*

0  = 0. Genericamente, de acordo com [6]:   

n)  e  z*

n)  e    

Para dn = sign(zn), z0 = θ e desde que 

< 

 = 1,7432866204723400035..., então: 

27 

)2(tg221111nn*n*nn*nn*n*nn*nn*n*n.dzz..xdyy..ydxx0z02arctgii 
 
 
 
 
 
 
 
 
 
 
 
2.8 – A Iteração CORDIC convencional 

                                           (2.20) 

Onde o fator de escala K é tal que 

= 1,646760258121... 

A coordenada z tende a zero, o que leva esse modo a também ser chamado de Z-reduction.  

Conforme (2.9), 

. Além disso: 

  =  

Para ângulos θi tais que tgθi = 2 – i temos: 

De modo que 

 e, portanto, K = 

. 

Como exemplo, com 

< θmáx = 

, para o cálculo de seno e cosseno de θ, faz-se: 

x0 = K–1 = 0,6072529350088812561694...            y0 = 0                       z0 = θ 

Então:                 

Por outro lado, partindo de (2.20), tomando inicialmente z0 = – θ, com θ o ângulo entre 

o vetor e o eixo x, e lembrando que dn = sign(zn), Observa-se que: 

x*

n →

28 

θ tg1120 cos.sen .sen . cos..lim00000000***             zyzxzyzx K zyxnnnn0221iiKniinθK0cosθθ2sec1cosiiθ2211 cosniinK02211nnK1lim  θ02arctgii0sen  cos0 cos0sen .sen 0 cos.lim00001001***zz             z.zKz.zKK . zyxnnnn).sen().cos(    ).sen().cos(0000θyθxK.θyθx.K202000202000yxy.yyxx.xK 
 
 
 
 
 
 
 
 
 
 
 
 
                   
 
                                                                                  
 
CAP. 2 – CORDIC CIRCULAR: A ORIGEM DO CORDIC 

                                                        x*

n →

                                     (2.21) 

y*

n → 

                                                                                 = 

                                                        y*

n →  0                                                        (2.22) 

z*

n → 0                                                        (2.23) 

Uma vez que  z*

n+1 = z*

n – dn. tg– 1 2– n   ⇔   z*

n+1 = z0 – αn , se z*

n+1 → 0, com z0 = – θ  então: 

z*

n+1 = z0 –  αn → 0    ⇔   αn →  – θ. 

Como z0 não é realmente conhecido, não se pode obter dn a partir do sinal de z*
sinal de y*

n. Sendo assim, z0 é substituído em (2.20) por αn, uma vez que αn → – θ, chegando às 

n, mas sim do 

equações de (2.21) a (2.23). Por último, toma-se, na realidade, z0 = 0, de forma que: 

z*

n+1 =   –  αn 

 z*

n+1 →  – ( – θ) = θ . Mais genericamente, z*

n → z0 + tg– 1

. 

Portanto, para o cálculo do arcotangente de 

, faz-se  x0 = x0, y0 = y0  e z0 = 0, resultando: 

Note que agora a coordenada y tende a zero, o que leva esse modo a também ser chamado de Y-

reduction.  

29 

2020yx.K) .cos().sen(.    ).cos().sen(.0000θyθxKθyθxK202000202000yxx.yyxy.x.K00xy00xyθ0012020***tg0       .limxy yx K zyxnnnn 
 
                                                
 
 
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 3 

CORDIC HIPERBÓLICO 

Neste  capítulo  aborda-se  a  extensão  do  CORDIC  Circular  para  o  Hiperbólico.  Após 

uma  breve  explanação  sobre  ângulo  hiperbólico,  funções  hiperbólicas  e  algumas  de  suas 

propriedades,  define-se  a  rotação  e  a  pseudo  rotação  hiperbólicas.  É  abordado  o  cálculo  da 

função  exponencial,  seguido  de  um  exemplo  numérico  onde  se  pontua  uma  mudança 

fundamental  na  série  hiperbólica  para  garantir  a  convergência.  Comenta-se  a  precisão  e  a 

sequência  recursiva  para  o  caso  hiperbólico  é  apresentada.  A  solução  do  problema  da 

convergência é fundamentada. A convergência da sequência e a precisão são demonstradas. Os 

casos  da  raiz  quadrada  e  do  logaritmo  são  discutidos  e  exemplificados,  abordando-se  nos 

exemplos formas de se estender o raio de convergência. 

3.1 – Funções Hiperbólicas 

Para maior detalhamento dos assuntos desta seção, consulte o artigo de Sonia Carvalho [2].  

O  ângulo  em  um  círculo  de  raio  R  é  definido,  em  radianos,  como  a  razão  entre  o 

comprimento do arco (subentendido por ele) e o raio R. A área do setor circular correspondente 

ao ângulo θ vale 

unidades de área. Pode-se definir o ângulo a partir da área do seu 

setor circular. Deste modo, diz-se que um ângulo mede θ radianos se a área do setor associado 

a  ele  tem  área 

.  Especificamente,  para  o  círculo  de  raio  1,  um  ângulo  mede  θ 

radianos  se  a  área  do  setor  circular  correspondente  mede  θ/2  unidades  de  área.  Seja  agora  a 
hipérbole  x2  –  y2  =  1.  O  ponto  P  a  ela  pertencente  define  um  setor  AOP  e  um  ângulo  AÔP. 

Analogamente ao ângulo circular, define-se que o  ângulo hiperbólico AÔP  mede θ se a área 

do setor hiperbólico AOP vale  θ/2 unidades de área (figura 3.1). Note que o ângulo hiperbólico 

30 

2A2SCθ.R2A2SCθ.R 
 
 
 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

não  é  igual  ao  ângulo  circular,  como  é  fácil  perceber  ao  se  comparar  o  setor  circular  com  o 

setor hiperbólico correspondente.  

                                             Figura 3.1: Setor e ângulo hiperbólicos. 

Adotar-se-á a seguinte convenção: 

- se o ponto P está acima do eixo das abscissas, o ângulo que ele define terá medida positiva. 

- se o ponto P está abaixo do eixo das abscissas, o ângulo que ele define terá medida negativa. 

Assim,  um  ângulo  hiperbólico,  tendo  medida  ± .AOAP,  assumirá  valores  entre  −∞  e  +∞. 

Reitera-se que estas medidas não são as mesmas caso tais ângulos fossem medidos no círculo. 

Neste caso, os valores estariam, correspondentemente, entre − 

 e 

.  

As  funções  hiperbólicas  são  definidas  analogamente  às  funções  trigonométricas 

circulares. Seja M um ponto sobre a curva x2 – y2 = 1 tal que o setor OAM tenha área 

. O 

ângulo AÔM tem medida θ. Seja AR a reta tangente à curva em A (figura 3.2). Define-se: 

cosh θ = ON      senh θ = MN       tgh θ = AR 

Como OAR ~ OMN, vem que: 

                                             (3.1) 

Pode-se definir as funções coth θ, sech θ e cosech θ analogamente às funções circulares. Para o 

ponto M, tem-se que:  

x2 – y2 = ON2 – MN2 = 1   ⇔   cosh2 θ – senh2 θ = 1.                              (3.2) 

31 

21442θθθθcoshsenh tgh ONMN1AR 
 
 
 
 
 
 
 
 
3.1 – Funções Hiperbólicas 

                                                     Figura 3.2: Funções hiperbólicas.  

De onde vem que:  

1 – tgh2 θ = sech2 θ           e        cotgh2 θ – 1 = cosech2 θ 

As igualdades abaixo são válidas: 

cosh θ = 

       e      senh θ = 

                                     (3.3) 

Das relações entre as funções hiperbólicas, chega-se a: 

tgh θ = 

       cotgh θ = 

      sech θ =

      cosh θ =

As  funções  hiperbólicas  não  são  periódicas  e  seus  limites,  como  pode  ser  observado,  são 

diferentes, reforçando que são funções semelhantes às trigonométricas apenas na ideia de sua 

construção. Sua paridade é igual à de suas correspondentes trigonométricas. 

Tais  funções  apresentam  propriedades  semelhantes  às  das  funções  trigonométricas,  dentre  as 

quais, além de 3.2, as mais importantes para o CORDIC são: 

            cosh(x ± y) = cosh(x) cosh(y) ±  senh(x).senh(y)                               (3.4) 

senh(x ± y) = senh(x) cosh(y) ± cosh(x).senh(y) 

32 

2θθee2θθee1122θθθθθθeeeeeeθtgh 1θθee2θθee2 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Outro resultado importante para o CORDIC Hiperbólico depende do teorema seguinte: 

Teorema 4: 

, para θ > 0.                                                                           

Demonstração: 

Como θ > 0, 

. Logo, 

. 

Corolário 1: Se x0 é fixo e tal que x0 <  tgh(2x0) , então  

.                                 

Demonstração:               

<  tgh(2

) 

. Do teorema anterior: 

Teorema 5: Se x = 2– n, n    , então 

Demonstração: A prova é feita por indução.  

Seja P(n): 

i) Para n = 1: 

. Logo, P(1) é válida. 

ii) Deve-se agora provar que P(n)  

 P(n+1):   

. 

33 

2tgh).tgh(21θθ2tgh).tgh(21θθ1111.2122θθθθeeee1.12.1.122θθθθeeee2222    12323θθθθθθ.e.e.eeee013323θθθ.e.ee013θe01θe2tgh).tgh(21θθ00tgh2xx0x0x002tgh.212xx000tgh2tgh.212xxx121tgh21nn121tgh21nn76201tgh21, 
 
        
 
 
 
  
  
   
 
 
   
    
   
     
 
                               
                                                        
 
 
                                                                     
                                                         
 
 
 
 
                             
 
3.2 – Rotação e Pseudo Rotação Hiperbólica 

. Do corolário (C.1):  

. 

Logo, P(n)  

 P(n+1)  e  P(n)  é válida   n 

   . 

Corolário 2:  

Este  é  o  resultado  procurado.  A  demonstração  é  imediata  aplicando  a  função  tangente 

hiperbólica inversa no teorema 5. Por fim, pode-se mostrar que: 

senh(x) + cosh(x) = ex         e         ln(u) = 

  , para u > 0                (3.5) 

3.2 – Rotação e Pseudo Rotação Hiperbólica 

Em um sistema cartesiano no plano, a rotação hiperbólica em um ângulo θ > 0, anti-horário, é 

entendida  como  o  deslocamento  do  vetor  de  modo  que  sua  extremidade  percorra  um  ângulo 

hiperbólico θ em relação à posição inicial, permanecendo sua extremidade sobre a hipérbole. É  

importante notar que a rotação hiperbólica não tem o mesmo significado que a rotação circular, 

de  modo  que somente esta conserva  a ideia  de  uma rotação  no  sentido  correto da   palavra.  

Partindo de um vetor  representado pelo  ponto  P1 = (x1 , y1) = (cosh θ1 , senh θ1), gera-se  um  

vetor P = (x , y) conforme na figura 3.3: 

Figura 3.3: Rotação do vetor P1 em um ângulo hiperbólico θ. 

34 

 21tgh211nnnn21tgh21  1112121tghnn11tgh21uu. 
 
 
 
 
                                                                                                
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Das definições das funções hiperbólicas e de suas propriedades, vem que: 

x = cosh(θ + θ1) = cosh θ.cosh θ1 + senh θ.senh θ1 

y = senh(θ + θ1) = senh θ.cosh θ1 + senh θ1.cosh θ 

De modo que as coordenadas de P são: 

                                                (3.6) 

Se θ > 0, para – θ < 0, a rotação é no sentido horário e usa-se a paridade das funções seno e 

cosseno hiperbólicos, ficando as equações (3.6) da forma: 

Sem  perda  de  generalidade,  será  observado  inicialmente  o  caso  θ  >  0  para  definir  a  pseudo 

rotação hiperbólica, uma vez que a paridade das funções define o caso – θ < 0. 

Chamando Mhθ = 

, pode-se escrever (3.6) da forma:    P = Mhθ.P1              (3.7) 

Além disso, Mhθ pode ser reescrita como:    Mhθ = 

=

de forma que:                                   P = 

.P1                                               (3.8) 

que é equivalente a:             

                                                           (3.9) 

Desconsiderando o termo cosh θ, obtém-se:    

                           (3.10) 

35 

θ.yθ.xy θ.yθ.xxcoshsenh senhcosh1111θ.y θ.xy θ.yθ.xxcoshsenhsenhcosh1111θθθθ cosh    senh senh      coshθθθθ cosh    senh senh      cosh1    tgh      tgh  1   .  coshθθθ1    tgh      tgh  1   . coshθθθ]tgh[coshy]tgh[cosh1111xθ.y.θθ.yx.θx11*11tghytghxθ.yθ.yxx* 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
3.3 – O CORDIC no Cálculo da Função Exponencial 

Analogamente a (3.8), faz-se Mhθ

* = 

, ficando (3.10) reescrita da forma: 

P* =

.P1    ⇔   P* = Mhθ

*.P1                                     (3.11) 

As equações (3.10) e sua equivalente (3.11) são  uma  pseudo rotação hiperbólica do vetor P0 

(figura 3.4). O vetor P* = (x*, y*) tem um decréscimo em sua magnitude de 

 em relação 

ao vetor P1, não sendo uma rotação exata, conforme observado das equações (3.9) e (3.10). 

                          Figura 3.4: Pseudo rotação hiperbólica, de um ângulo θ, para o vetor P1 

3.3 – O CORDIC no Cálculo da Função Exponencial 

Pela  semelhança  entre  as  funções  hiperbólicas  e  trigonométricas,  é  natural  tentar  no 
CORDIC a substituição  de  tg–1 2–n’ por  tgh–1 2–n’, esperando  que  uma ligeira modificação  do  

algoritmo permita usá-lo para o cálculo destas novas funções. Ainda que Volder tenha sugerido 

tal possibilidade, de acordo [6], foi John Walther [11] quem  encontrou a modificação correta 

em 1971, obtendo a iteração generalizada na forma hiperbólica e também na forma denominada 

linear, o que permitiu o cálculo de várias funções. Na seção 3.2, chegou-se às equações para a 

rotação hiperbólica através das  mesmas manipulações utilizadas  para se obter  as  equações da 
rotação circular. Entretanto, a analogia não é completa. Para os ângulos da forma  θ = tgh–1 2–n’,  

a  condição  de  convergência  para  a    sequência  não  se  verifica,  sendo  necessárias  algumas  

modificações,  o  que  não  impede  de  acompanhar  o  processo  realizado.  Sendo  assim, 

primeiramente será apresentada a ideia geral para, depois, detalhar tais ajustes.  

36 

1    tgh      tgh  1   θθ1    tgh      tgh  1   θθθ cosh1 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Considere o cálculo da função exponencial. As equações (3.5) destacam a relação entre 

esta e as funções hiperbólicas, motivo pelo qual se depende, na realidade, dos valores de senh θ 
e  cosh  θ,  que  são  obtidos  no  modo  Rotação  Hiperbólico.  Observando  que  tgh–120  não  existe, 
inicia-se a sequência por tgh–1 2–1. Partindo-se, para coincidir a notação, do ponto P1 = (1 , 0) e 

rotacionando-o  de    θ  >  0,  tem-se  que  P  =  (cosh  θ  ,  senh  θ).  Tal  rotação  só  pode  ser  feita  se 

forem conhecidos cosh θ e senh θ, o que é, como na Rotação Circular, o objetivo final. Aqui 

também o CORDIC realiza a rotação através de micro rotações, o número destas depende mais 

uma vez da precisão desejada e são realizadas primeiro as pseudo rotações (figura 3.5). 

Figura 3.5: Pseudorotações hiperbólicas e seus respectivos vetores e ângulos. 

Por um raciocínio análogo ao da seção 2.3, a partir de (3.9) e (3.11), também se espera que: 

P = 

≈

                                    (3.12) 

= 

;  

   e    αn’ = 

Na  verdade, 

e 

  precisam  de  correções,  uma  vez  que  a  sequência  tgh–1  2–n’  não 

converge. Esclarecendo numericamente: 

Exemplo  3.1:  Obter  o  valor  de  e0,549.  Tentar-se-á  aproximar  θ  =  0,549  para  o  ângulo 
hiperbólico  por  meio  da  soma  dos  termos  de  ±  θk’  =  tgh–1  2–k’.  A  cada  resultado  o  subtotal  é 

comparado com o valor desejado, definindo o sinal do próximo termo. O subtotal αk é soma dos 

termos  de  θ1  até  θk’  com  o  sinal  necessário  para  tentar  a  aproximação.  Os  resultados  são 

mostrados na tabela 3.1.  

37 

θθsenh cosh*1 '''1'P.senh  coshPnnnnnKαα1'''  coshcoshθθKnn cosh  1'niiθ1***1'P.P1'θnθMhMhn'1niiθ''nK*1'Pn 
 
 
 
 
  
 
 
 
 
 
3.3 – O CORDIC no Cálculo da Função Exponencial 

k' 

θk’ 

αk’ 

1 

2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

0,54930614(+) 

0,54930614 

0,25541281(−) 

0,29389333 

0,12565721(+) 

0,41955055 

0,06258157(+) 

0,48213212 

0,03126018(+) 

0,51339230 

0,01562627(+) 

0,52901857 

0,00781266(+) 

0,53683123 

0,00390627(+) 

0,54073750 

0,00195313(+) 

0,54269062 

0,00097656(+) 

0,54366719 

0,00048828(+) 

0,54415547 

0,00024414(+) 

0,54439961 

k' 

13 

14 

15 

16 

17 

18 

19 

20 

21 

22 

23 

24 

θk’ 

αk’ 

0,00012207(+) 

0,54452168 

0,00006104(+) 

0,54458271 

0,00003052(+) 

0,54461323 

0,00001526(+) 

0,54462849 

0,00000763(+) 

0,54463612 

0,00000381(+) 

0,54463994 

0,00000191(+) 

0,54464184 

0,00000095(+) 

0,54464280 

0,00000048(+) 

0,54464327 

0,00000024(+) 

0,54464351 

0,00000012(+) 

0,54464363 

0,00000006(+) 

0,54464369 

Tabela 3.1: Aproximações para θ = 0,549 

Os  argumentos  ficam  cada  vez  menores,  enquanto  αk  não  se  aproxima  o  suficiente  do  valor 

desejado. Tal fato ocorre porque o valor de θ2  é maior  que a soma de todos  os outros  termos 

consecutivos  a    ele    (θ3  a  θ24)  por  mais  que  o  valor  do  último  termo  da  sequência,  não 

obedecendo à condição de convergência de que 

. Com isso, ao subtrair  θ2,  o  

subtotal  em  k’ = 2  ficou  mais  longe  do  ângulo desejado do que os termos restantes podem 

cobrir.  A  tabela  3.2  analisa  os  primeiros  dezoito  argumentos  da  série  e  a  respectiva  soma         

γk’ =

 para uma comparação de quais não obedecem a tal condição: 

k' 

θk’ 

γk’ 

θk’ –  γk’ 

  k' 

θk’ 

γk’ 

θk’ –  γk’ 

1 

2 

3 

4 

5 

6 

7 

8 

9 

0,54930614 

0,50615941  0,04314673 

  10 

0,00097656 

0,00097275  0,00000381 

0,25541281 

0,25074660  0,00466621 

  11 

0,00048828 

0,00048447  0,00000381 

0,12565721 

0,12508939  0,00056782 

  12 

0,00024414 

0,00024033  0,00000381 

0,06258157 

0,06250782  0,00007375 

  13 

0,00012207 

0,00011826  0,00000381 

0,03126018 

0,03124764  0,00001254 

  14 

0,00006104 

0,00005722  0,00000382 

0,01562627 

0,01562137 

0,0000049 

  15 

0,00003052 

0,00002670  0,00000382 

0,00781266 

0,00780871  0,00000395 

  16 

0,00001526 

0,00001144  0,00000382 

0,00390627 

0,00390244  0,00000383 

  17 

0,00000763 

0,00000381  0,00000382 

0,00195313 

0,00194931  0,00000382 
Tabela 3.2: Comparação dos termos da sequência θk’ = tgh– 1 2– k’. 

0,00000381 

  18 

38 

''''nn1kjjkθθθ''n1kiiθ 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Vê-se  que  cada  argumento  excede  a  soma  dos  termos  restantes  por  mais  que  o  último  termo 

0,0000381 (a igualdade nos casos para k’ de 10 a 13 ocorre apenas por causa da aproximação 

feita na oitava casa). O fato de alguns argumentos não possuírem a propriedade necessária de 

cobertura  de  seu  valor  pela  soma  dos  termos  restantes  faz  com  que  o  algoritmo  possa  não 

conseguir aproximar certos ângulos com precisão suficiente para permitir o cálculo de valores 

confiáveis para cosh θ e senh θ.  

A solução encontrada foi realizar entradas duplas para alguns argumentos da série. Com 

essa  duplicação,  cada  argumento  será  excedido  pela  soma  dos  restantes,  satisfazendo  a 

condição  de  convergência  do  teorema.  Na  tabela  3.3,  alguns  termos  foram  repetidos  e  é 
novamente feita a soma γk’. Note que θk’ = tg –1 2 –k. 

k 

1 

2 

3 

4 

k' 

1 

2 

3 

4 

5 

6 

7 

8 

9 

θk’ 

γk’ 

k' 

k 

θk’ 

γk’ 

0,54930614 

0,57712204 

  13 

11 

0,00048828 

0,00105286 

0,25541281 

0,32170922 

  14  *11 

0,00048828 

0,00056458 

0,12565721 

0,19605201 

  15 

0,06258157 

0,13347044 

  16 

*4 

0,06258157 

0,07088887 

  17 

12 

13 

14 

0,00024414 

0,00032043 

0,00012207 

0,00019836 

0,00006104 

0,00013733 

5 

6 

7 

0,03126018 

0,03962869 

  18  *14 

0,00006104 

0,00007629 

0,01562627 

0,02400242 

  19 

0,00781266 

0,01618976 

  20 

15 

16 

0,00003052 

0,00004578 

0,00001526 

0,00003052 

*7 

0,00781266 

0,00837710 

  21  *16 

0,00001526 

0,00001526 

10 

11 

8 

9 

0,00390627 

0,00447083 

  22 

0,00195313 

0,00251770 

  23 

17 

18 

0,00000763 

0,00000763 

0,00000381 

0,00000381 

12  10 

0,00097656 

0,00154114 

  24  *18 

0,00000381 

Tabela 3.3: Comparação dos termos da sequência θk’ = tgh– 12– k (após as repetições). 

Assim, cada argumento  que estiver entre  ± (0,54930614 + 0,57712204) pode ser aproximado 

para menos de 0,00000381, o último termo da tabela. Repare que, com a repetição, tem-se de 

novo  24  iterações.  Realizando  uma  nova  tentativa,  pode-se  agora  aproximar  θ  =  0,549  com 

sucesso:  

39 

 
 
 
 
 
 
 
 
 
3.3 – O CORDIC no Cálculo da Função Exponencial 

k' 

1 

2 

3 

4 

5 

6 

7 

8 

9 

10 

11 

12 

k 

1 

2 

3 

4 

θk’ 

αk’ 

k' 

k 

θk’ 

αk’ 

0,54930614(+) 

0,54930614 

  13 

11 

0,00048828(−) 

0,54911683 

0,25541281(−) 

0,29389333 

  14  *11  0,00048828(−) 

0,54862855 

0,12565721(+) 

0,41955055 

  15 

0,06258157(+) 

0,48213212 

  16 

*4 

0,06258157(+) 

0,54471369 

  17 

12 

13 

14 

0,00024414(+) 

0,54887269 

0,00012207(+) 

0,54899476 

0,00006104(+) 

0,54905580 

5 

6 

7 

0,03126018(+) 

0,57597387 

  18  *14  0,00006104(−) 

0,54899476 

0,01562627(−) 

0,56034760 

  19 

0,00781266(−) 

0,55253494 

  20 

15 

16 

0,00003052(+) 

0,54902528 

0,00001526(−) 

0,54901002 

*7 

0,00781266(−) 

0,54472228 

  21  *16  0,00001526(−) 

0,54899476 

8 

9 

0,00390627(+) 

0,54862855 

  22 

0,00195313(+) 

0,55058168 

  23 

17 

18 

0,00000763(+) 

0,54900239 

0,00000381(−) 

0,54899858 

10 

0,00097656(−) 

0,54960511 

  24  *18 

0,00000381(+) 

0,54900239 

Tabela 3.4: Aproximações para θ = 0,549 com repetição de termos 

Não ficou claro nas fontes pesquisadas qual o critério utilizado para determinar quais entradas 

devessem  ser  repetidas.  Eklund  [5]  observou  que  os  passos  que  precisam  ser  repetidos 

dependem  da  escolha  do  n.  Por  exemplo,  se  n’  =  13,  então  k’  =  13  e  k’  =  4  precisam  ser 

repetidos  enquanto  que,  se  n’  =  14,  k’  =  14,  k’  =  5  e  k’  =  2  precisam  ser  repetidos  a  fim  de 

satisfazer a condição do Teorema de Convergência. O exemplo 3.1, extraído do artigo de Parris 

[7],  ilustra  um  desses  casos  para  n’  =  18.  Para  contornar  o  problema  da  escolha  dos  termos, 

Eklund propôs que se repetissem todos eles a partir do segundo. Já Walther [11] afirmou que 

apenas certos passos fixos da iteração, e, portanto, o θk correspondente, precisam ser repetidos. 

Uma  vez  que  o  argumento  pode  agora  ser  aproximado,  os  valores  de  senh  θ  e  cosh  θ 

também convergem para valores confiáveis. Portanto, de acordo com (3.12), na quinta iteração 

do exemplo 3.1, onde ocorre a repetição do argumento θ4, e lembrando que tgh(– θ) = – tgh(θ): 

= 

.

 = 

40 

1555.Psenh  cosh12344*****'θθθθθMh.Mh.Mh.Mh.MhKαα'5K01.121211.1414111818111161161111611611572053,0152061,1 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Com 

 = 1,206711 

Logo,  cosh  α5  ≈  1,152061  e  senh  α5  ≈  0,572053.  Em  uma  calculadora  científica,  tem-se  que 

cosh 0,549 = 1,154524 e senh 0,549 = 0,576997, com imprecisão na sexta casa.  

Para se obter o valor de e0,549, basta fazer:  

e0,549 = senh 0,549  + cosh 0,549  ≈ 1,152061 + 0,572053≈ 1,724114. 

Com a calculadora, e0,549 = 1,731521, com imprecisão na sexta casa. Ainda que pareça muito 

preciso,  lembre  que  tal  fato  é  mais  coincidência  que  exatidão.  Há  a  necessidade  de  se  iterar 

mais termos para garantir a precisão realmente na sexta casa. Como há o problema de se repetir 

alguns  argumentos,  as  séries  têm  uma  discrepância  entre  a  posição  do  termo  e  o  argumento 

utilizado.  É  preciso  primeiro  fazer  a  correção  da  notação  antes  de  se  enunciar  o  teorema  da 

precisão. 

Eklund trabalha com a repetição de todos os termos a partir do segundo para contornar o 

problema  da  escolha  das  iterações  a  serem  repetidas.  Em  termos  computacionais,  isso  gera 

problemas  de  custo  operacional,  uma  vez  que  tal  algoritmo  é  usado  quando  se  deseja 

economizar memória e realizar o menor número de operações possíveis. Walther afirmou que a 

repetição dos termos θ3i+1 na série garantiria a convergência, onde inicialmente i = 1 e depois i 

assume  o  valor  obtido  para  3i  +1.    Como  a  sequência  de  Walther  refaz  apenas  algumas 

iterações, aparenta ser mais vantajosa. Deste modo, apenas os termos de índice 3, 13, 40, ..., i, 

3i+1, ... precisam ser repetidos na sequência para que ocorra a convergência. Independente da 

repetição adotada, deve-se renumerar os termos para que a nova sequência se adapte ao formato 

da condição de convergência do teorema. Para o caso de Eklund, tem-se que: 

( θ1 , θ2 , θ2 , θ3 , θ3 ,···, θn , θn) = (ε1 , ε 2 , ε 3 , ε 4 , ε 5 ,···, ε n’–1 , ε n’) 

Seja a função teto, f :   →   , definida como:    

 = min { n     │ x < n} 

Define-se a função:                             

                                                           (3.13) 

41 

12344'5coshcoshcoshcoshcoshθθθθθKx21')'(kkλ 
 
 
 
 
 
 
 
 
 
3.3 – O CORDIC no Cálculo da Função Exponencial 

Tem-se, então, que  ε k’ = θλ(k’) 

Na sequência de Walther: 

( θ1 , θ2 , θ3 , θ4 , θ4 ,···, θn , θn) = (ε1 , ε 2 , ε 3 , ε 4 , ε 5 ,···, ε n’–1 , ε n’) 

Define-se, para este caso, a função:        

λ(k’) = k’ – j,  j o maior inteiro tal que 3j+1 + 2.j – 1 <  2.k’                    (3.14) 

Note que:  

λ(4) = 4 – 0 = 4,  λ(5) = 5 – 1 = 4, λ(14) = 14 – 1 = 13, λ(15) = 15 – 3 = 13 e assim por diante. 

A sequência ε n’ pode também ser renumerada da forma ε k’ = θλ(k’). 

Em ambos os casos e desde que λ(k’ – 1) = λ(k’), a sequência ε  k’ = θλ(k’) satisfaz o critério de 

convergência, fato que é demonstrado na seção 3.5.  

Corrigindo, então, 

e 

 em (3.12), chega-se a: 

 ;  

                           (3.15)  

Voltando  ao  problema  do  número  de  iterações  necessárias,  por  analogia  ao  caso 

Circular, chega-se ao teorema 6, também demonstrado na seção 3.5. 

Teorema  6  (teorema  de  precisão):  Utilizando  o  método  CORDIC,  tem-se  que,  para  θ  no 

intervalo de validade das sequências mencionadas: 

42 

''nK*1'Pn'nk)k(λ.''nK122111PP1.MhMh***'nθ'nθ2'2'21senhsenh21coshcosh nn'nn' α θ αθ 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Tal precisão está condicionada à convergência da sequência usada no tipo Hiperbólico, que, por 

sua vez, está sujeita à  entrada dupla  de  alguns de seus  termos.  A função  λ(n’) considera essa 

repetição e é da forma (3.13) ou (3.14). 

De  acordo  com  a  repetição  proposta  por  Walther,  para  n’  =  43,  λ(43)  =  40,  de  forma  que   

  3,638.10–12,  o  que    fornece  a    precisão  de  dez    casas.  Deste  modo,  com  n’  fixo,  por 

exemplo, em 43, 

 passa a ser uma constante. Sabendo que os termos repetidos são θ4, θ13 e 

θ40 , o valor 

 fica: 

Pela proposta de Eklund, ter-se-ia para λ(n’) = 40 que n’ = 79, sendo que: 

≈ 1,207497069 

 ≈ 1,257448788 

3.4 – Sequência Recursiva do CORDIC Hiperbólico 

Por meio de um raciocínio análogo ao caso Circular, chega-se às iterações hiperbólicas: 

                                               (3.16) 

Com λ(n’) conforme (3.13) ou (3.14). No modo Rotação, dn’ = sign(

), que leva a: 

                                            (3.17) 

Para o modo Vetoração, onde dn’ = sign(–

), as equações (3.16) nos levam a: 

43 

3821''nK''nK1404043coshcoshcoshθθ.θK'122404079cosh.cosh.cosh  coshcoshθθθθ.θK')2(tgh.2.x.y2.y.xx'1'*'*1''*''*'*1''*''*'*1'nnnnnnnnnnnnnndzzdyd*'nz0) coshsenh(')senh cosh(''1111'1111'nnnzz.y zxKyz.y zxKx*'ny 
 
 
        
 
             
 
             
 
 
 
 
 
 
3.4 – Sequência Recursiva do CORDIC Hiperbólico 

                                                     (3.18) 

De modo análogo ao caso Circular, K’ é o FCE hiperbólico e, lembrando (3.15), é dado por: 

 = 0,82815936096... . Mais especificamente, tem-se: 

Modo Rotação:         x1 = 

 = 1,207497067763...       y1 = 0          z1 = θ 

xn’ 

 cosh θ          yn’ 

 senh θ            zn’ 

 0 

De onde se obtém as outras relações hiperbólicas e, por (3. 5), também a função exponencial. 

Modo Vetoração:                             x1          y1             z1 = 0 

xn’ 

.

      yn’ 

 0            zn’ 

 tgh– 1 

Notando que:   

, e lembrando as equações (3.5), pode-se obter: 

ln (u):  fazendo x1 = u + 1    e    y1 = u – 1 

                                       (3.19) 

:   fazendo 

e  

      g

44 

1111''2121'tgh0 .'xyzzyyxKxnnn''1lim'nnKK1221k)k(λ.'K1'K2121yx11xy224141uuuu411ux411uy 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 
CAP. 3 – CORDIC HIPERBÓLICO  

3.5 – Convergência do CORDIC Hiperbólico  

Deve-se adaptar o Teorema de Convergência para os índices hiperbólicos. 

Teorema  7  (Teorema  de  Convergência):  Sejam  θ1  >  θ2  >  ···  >  θn  >  0,  termos  de  uma 

sequência decrescente de números positivos que satisfazem: 

, para 1 < k < n.                                                      (i) 

E seja r um número que satisfaz:              

                                                      (ii) 

Definindo a sequência s1 = 0 e sk+1 = sk + δk.θk,  k = 1, ..., n, onde: 

Então:      

, para 1 < k < n. Em particular, 

.                              (iii) 

A sequência θk = tgh– 1 2– k = 

, para k > 1, não satisfaz a inequação (i) do 

Teorema de Convergência. 

Eklund  [5]  mostrou  que  a  repetição  de  todos  os  termos,  a  partir  do  segundo,  garantiria  a 

convergência. A prova é feita por indução. 

Seja Sk a afirmação: 

(1) Sk: θn– k < θn + 2.

   é verdadeira para k = 1, 2, ..., n – 1, desde que n > 2. 

i) Se k = 1, então se quer mostrar que   θn– 1 < θn + 2.θn = 3.θn. Isto é equivalente a: 

45 

nkjjnkθθθ1njjnθθ r 1 s, rs,  r srδkkkk11)(sgnnkjjnkθθsrnnθsr1kk2121ln21nknjjθ1 
 
 
 
                        
 
 
 
 
 
 
 
 
 
 
3.5 – Convergência do CORDIC Hiperbólico  

0 < 3.θn – θn– 1 = 

 , que é equivalente a: 

(1 + 2 – n)3.(1 – 2 –(n – 1)) > (1 – 2 – n)3.(1 + 2 –(n – 1)).  

Desenvolvendo, obtém-se: 

– 23n + 3.23n – 1 – 3.2n + 2n – 1  >   23n – 3.23n – 1 + 3.2n – 2n – 1 

– 2.23n – 1  + 3.23n – 1 – 3.2.2 n – 1 + 2n – 1  >   2.23n – 1 – 3.23n – 1 + 3. 2.2 n – 1 – 2n – 1 

23n – 1 – 5.2n – 1  >   – 23n – 1 + 5.2n – 1     ⇔      2.23n – 1  > 10.2n – 1 

Por indução finita, tem-se, para n > 2: 

i) P(2):  

ii) P(n) ⇒ P(n+1) 

2.25 > 10.21  ⇔ 64 > 20 

Supondo 2.23n – 1  > 10.2n – 1 verdadeira.  

É fácil verificar que 14.23n – 1 > 10.2n – 1, para todo n > 2. Assim: 

2.23n – 1 + 14.23n – 1  > 10.2n – 1  + 10.2n – 1 

16.23n – 1 > 20.2n – 1  ⇔  2.23. 23n – 1 > 2.10.2n – 1  ⇔  2.23(n+1) – 1 > 10.2(n + 1) – 1 

Deste modo, P(n) ⇒ P(n+1) e, portanto, P(n) é válida para todo n >2.  

Logo, θn– 1 < θn + 2.θn = 3.θn é verdadeira desde que n > 2. 

46 

)1()1(32121.2121ln21nnnn 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

ii) Sk ⇒ Sk+1. Trocando k por k + 1 em  (1): 

0 < θn + 2.

 –  θn– k – 1 = 

 + (3.θn– k  –  θn– k – 1) 

Da hipótese de indução:                  

> 0 

Além disso: 

3. θn– k  –  θn– k – 1 = 

 que é equivalente a: 

(1 + 2 –(n – k))3 .(1 – 2 n – k – 1) >  (1 – 2 – (n – k)).(1 + 2 n – k – 1), cuja prova é similar ao caso para S1. 

Portanto, Sk é verdadeira para todo k = 1, 2,···, n – 1, desde que n > 2.                      

Considerando a nova sequência ε n’ = θλ(n’) como discutida em (3.13), nota-se que:      

, para 1 < k’ < n’   

Provado  o  critério  de  convergência  da  sequência,  deve-se  também  provar  a 

convergência das sequências para x*

k e y*

k hiperbólicos. 

Primeiro, prova-se a convergência da sequência usada, sk , para θ. 

1) Seja a sequência definida como:        sk = θ – 

 =

Com s1 = θ – 

 = 0 e  sk+1 = 

 = sk + 

Lembrando que no modo rotação dn’ = sgn(

), para r = θ  tem-se que: 

47 

nknjjθnknjknjnθθ.θ12nknjknjnθθ.θ12)1()1(3)()(2121.2121ln21knknknkn''1'nnkjjkεεε*kz θδkjjj11*1z θδkjjj1kkθδ*'nz 
 
 
 
 
 
 
 
 
                                               
 
 
 
 
  
 
 
3.5 – Convergência do CORDIC Hiperbólico  

Portanto, esta sequência sk satisfaz o Teorema de Convergência e: 

                              (3.20) 

Queremos encontrar um valor limite para 

.  Do corolário (C.2), tem-se que: 

  . Retornando em (3.20): 

   ⇔   

                     (3.21) 

Mostrando que sn’+1 converge para θ.  

2) Para provar que as sequências para  xk e yk retornam xn’+1 ≈ cosh(sn’+1) e yn’+1 ≈ senh(sn’+1), 

procede-se exatamente da mesma forma que no caso circular (seção 2.6).  

3) Os resultados (1) e (2) anteriores podem ser usados para provar o teorema 6 e determinar um 

limite superior para o algoritmo.  

Igualmente ao caso circular, o Teorema do Valor Médio aplicado à função cosseno hiperbólico 

diz que existe um c entre θ e sn’+1 tal que: 

De modo que (3.21) pode fornecer um limite para o erro computacional do cosseno: 

           (3.22) 

48 

kkkkkdzsθsrδ)(sgn)(sgn)(sgn*'1'nnssr'1'1'2tghnnnssθ1'nsr112121tghnn1''11'212tghnnnsθ1'1'21nnsθcsθsθnnsenh )cosh(cosh1'1'1'1'1'1'2senhsenh )(coshcoshcoshnnnn . csθ.csθxθ 
 
 
 
 
  
 
    
 
 
 
 
 
 
 
 
                          
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Uma vez que, para Eklund, o intervalo de validade do algoritmo ocorre para │θ│ < 1: 

Similarmente, 

, confirmando o teorema 6. 

 ⇒ 

Agora, de acordo com Walther [11], pode ser mostrado que: 

                                                   (3.23) 

Neste caso, a sequência tgh– 1 2– n’, obtida de tgh– 1 2– n pela repetição dos termos i = 4, 13, ..., k, 

3k  +  1,  ...,  satisfaz  a  condição  de  convergência.  Todas  as  fontes  consultadas  apenas  citam 

Walther  sem  a  correspondente  demonstração.  Mesmo  assim,  por  simplicidade,  doravante 

apenas ela será adotada. 

Os  passos  anteriormente  feitos  com  a  sequência  de  Eklund  para  a  demonstração  da 
convergência de x*

k são válidos para a sequência de Walther, inclusive os do teorema de 

k e y*

precisão.  Sendo  assim,  uma  vez  que  Walther  [11]  afirma  que  o  raio  de  convergência  é  

│θ│<1,13, pode-se retornar em (3.22): 

Do mesmo modo: 

, corroborando também o teorema 6. 

⇒ 

3.6 – O CORDIC no Cálculo da Raiz Quadrada e do Logaritmo 

As funções raiz quadrada e logaritmo são obtidas no modo Vetoração do CORDIC Hiperbólico. 

O processo é semelhante ao caso circular. Genericamente, em um sistema cartesiano no plano, 

a rotação  em um ângulo hiperbólico – θ, de  um vetor de coordenadas  P1 = (x1 , y1)  e que tem  

49 

1'1'1'1'222175201121senhcoshnnnn.., . xθ)2'(1'2coshnnxθ)2'(1'2senh nnxθ11311nknkjjkθθθθ1'1'1'1'2.22.386,12. 131senhcoshnnnn, xθ)2'(1'2coshnnxθ)2'(1'2senhnnxθ 
 
 
 
 
 
 
 
                            
 
 
 
 
 
 
 
 
 
3.6 – O CORDIC no Cálculo da Raiz Quadrada e do Logaritmo 

um ângulo θ > 0 com o eixo x, gera o vetor P = (x , y), conforme a figura 3.6: 

                          Figura 3.6: Rotação hiperbólica do vetor P1 em um ângulo  – θ 

Uma vez que as coordenadas dos vetores obedecem à hipérbole x2 – y2 = R2, vem que: 

x = 

               y = 0 

Semelhante ao caso Circular, os vetores também são micro rotacionados, conforme a figura 3.7: 

Figura 3.7: Micro rotações de P1 até P4 no modo Vetoração. 

Considerando  ocorrerem  as  repetições  necessárias  à  convergência,  mais  uma  vez  a  analogia 

com o modo Circular leva a: 

P = 

≈

       com R = 

                    (3.24) 

Sendo que βn’ = θ – │αn’│ é o ângulo hiperbólico do vetor Pn’+1 com o eixo x (figura 3.8), onde         

αn’ = 

 é o ângulo total de P1 a Pn’+1. Além disso, 

 e 

  são como ditos em (3.15). 

50 

2121yx0R*1'''''1P.Ksenh . cosh.Pnnnnn'βRβR2121yx'1niiθ''nK1P*'n 
 
 
                                       
 
 
 
 
 
 
 
                   
 
CAP. 3 – CORDIC HIPERBÓLICO  

Figura 3.8: Ângulo βn’ do vetor 

 com o eixo x.  

Igualmente ao caso Circular, o sinal de θλ(n’+1) é obtido pela análise do sinal de yn’. 

Exemplo 3.2: Suponha que se quer determinar 

.  

De acordo com (3.19), 

. Portanto, pode-se fazer: x1 = 39,25 

e y1 = 38,75. Porém há o problema do raio de convergência. Uma vez que │θ│ < 1,13, e como 

zn’ → θ < 1,13, deve-se ter: 

tgh zn’ <  tgh 1,13 ≈ 0,8110192.                                             (3.25) 

Conforme (3.18), zn’ 

 tgh– 1 

 , para z1 = 0. Deste modo, 

, o que 

mostra não ser possível realizar as iterações.   

Pode-se  contornar  tal  problema,  por  exemplo,  tomando  39  =  0,39.102.  Deste  modo,  vem  que 

. Assim, deseja-se 

. Fazendo, agora, x1 = 0, 64 e y1 = 0,14, nota-se que  

estes valores obedecem à condição (3.25). Soluções genéricas desse problema foram proposta 

em  [5]  e  [11].  Como  o  processo  de  análise  do  sinal  do  ângulo  rotacionado  é  igual  ao  caso 

Circular, passaremos diretamente para o modo como o algoritmo realmente opera, analisando o 

sinal de yn’ para decidir o sinal da próxima micro rotação. A tabela 3.5 resume o processo do 

cálculo de αn’. 

51 

*1'Pn39224141uuu11xy98726,025,3975,3811xy10.39,03939,0 
 
   
 
 
 
 
 
 
 
 
 
3.6 – O CORDIC no Cálculo da Raiz Quadrada e do Logaritmo 

n' 

1 

2 

3 

4 

5 

6 

yn’ 

0,14 

– 0,18 

– 0,0375 

0,028125 

–  0,004395 

0,02805 

Sinal de yn’ 

εn' = θλ(n’) 

αn’ 

> 0 

< 0 

< 0 

> 0 

< 0 

> 0 

(–) 0,549306 

– 0,549306 

(+) 0,255413 

– 0,293893 

(+) 0,125657 

– 0,168236 

(–) 0,062582 

– 0,230818 

(+) 0,062582 

– 0,168236 

(–) 0,031260 

– 0,199496 

Tabela 3.5:  αn’  em função do sinal de yn’ no modo Vetoração Hiperbólica. 

As pseudo rotações são explicitadas: 

P*

2 = 

P*

4 = 

P*

6 = 

                 P*

3 = 

            P*

5 = 

      P*

7 = 

Portanto,  na sexta iteração, tem-se: P ≈ 

, com 

≈ 1,207301  e tal que  

εn’ = tgh–12– λ(n’). Assim: 

P ≈ 

 = 1,206711. 

= 

Sendo assim:                  

≈ 0,625325.10 = 6,25325 

Finalmente, observa-se que, em uma calculadora comum: 

. 

52 

18,057,014,064,0.121211.0375,0525,018,057,0.141411028125,0520313,00375,0525,0.181811004395,0518555,0028125,0520313,0.1161161102805,0518830,0004395,0518555,0.11611611011837,0517953,002805,0518830,0.13213211*7'6P.K616coshii'K*7'6P.K011837,0517953,0014291,0625325,010.39,039245006244997998639,, 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

Exemplo 3.3: calcular ln(39).  

Para o cálculo do logaritmo, de acordo com (3.5), ln(u) = 

. Observando a 

condição (3.25), a tabela 3.6 mostra duas tentativas para x1 = u + 1  e y1 = u – 1: 

u 

39 

3,9 

x1 

40 

4,9 

y1 

38 

2,9 

 < 0,8110192  

0,95 

0,5918 

Tabela 3.6: Análise da condição do CORDIC Vetoração para ln(39) 

Deste modo, pode-se fazer: 

ln(3,9) = ln(39.10– 1) = ln(39) – ln(10)  

  ln(39) = ln(3,9) + 1.ln(10). 

Na  verdade,  essa  é  uma  das  assim  chamadas  Identidades  Pré-escalonadas  propostas  por 

Walther para estender o domínio de convergência. No caso do logaritmo, tem-se que: 

ln(u) = ln(u.bE) – E.ln(b), onde b é a base utilizada. 

Como  ln(b)  é  uma  constante,  pode  ser  calculada  e  armazenada.  A  tabela  3.7  condensa  os 

cálculos: 

n’ 

1 

2 

3 

4 

5 

6 

yn’ 

2,9 

0,45 

– 0,4125 

0,004688 

–  0,200684 

0,004669 

Sinal de yn’ 

εn' = θλ(n’) 

αn’ 

> 0 

> 0 

< 0 

> 0 

< 0 

> 0 

(–) 0,549306 

– 0,549306 

(–) 0,255413 

– 0,804719 

(+) 0,125657 

– 0,679062 

(–) 0,062582 

– 0,741644 

(+) 0,062582 

– 0,679062 

(–) 0,031260 

– 0,710322 

Tabela 3.7: Vetoração Hiperbólica para o cálculo de ln (3,9). 

53 

11tgh.21uu11xy 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
3.6 – O CORDIC no Cálculo da Raiz Quadrada e do Logaritmo 

Explicitando as pseudo rotações: 

P*

2 = 

P*

4 = 

P*

6 = 

                   P*

3 = 

          P*

5 = 

    P*

7 = 

Portanto, na sexta iteração, teremos: P ≈ 

 , onde 

 ≈1,207301. Assim: 

E tem-se que α6 = – 0,710322, de modo que θ ≈ 0,710322. Então: 

ln(3,9) ≈ 

 = 2.0,710322 = 1,420644. Logo: 

ln(39) = ln(3,9) + 1.ln(10) ≈ 1,420644 + 2,302585 = 3,723229. 

Em uma calculadora, obtém-se: ln(39) ≈ 3,663562. O erro absoluto é: 

eln(39) = │3,663562 – 3,723229│ = 0,059667. 

54 

45,045,39,29,4.1212114125,03375,345,045,3.141411004688,0285938,34125,03375,3.181811200683,0285645,3004688,0285938,3.11611611004670,0273102,3200683,0285645,3.11611611097614,0272956,3004670,0273102,3.13213211*7'6P.K'K6117849,0951443,3097614,0272956,3.207301,1P.P*7'6K11tgh.21uu 
 
 
 
 
 
 
 
 
 
 
 
 
 
                    
 
 
 
 
CAP. 3 – CORDIC HIPERBÓLICO  

O  domínio  de  convergência  e  sua  extensão  é  outro  problema  encontrado  no  uso  de 

funções  aproximadoras,  como  pode  ser  visto  nos  dois  exemplos  desta  seção.  Uma  vez  que  o 

objetivo deste trabalho é compreender o funcionamento básico do algoritmo, este assunto não 

será abordado. Consulte [11] para outras identidades que permitem a extensão do domínio para 

várias funções elementares.   

55 

 
 
                                                             
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 4 

CORDIC LINEAR 

A extensão do algoritmo CORDIC para o cálculo de produtos e quocientes, denominado 

CORDIC  Linear,  é  detalhada  neste  capítulo.  Define-se  ângulo  e  rotação  linear.  O  caso  do 

produto é analisado e, a partir de um exemplo, discute-se sua precisão. A sequência recursiva 

para  o  caso  linear  é  apresentada.  A  convergência  é  demonstrada  e  o  quociente  é  discutido  e 

exemplificado. 

4.1 – Ângulo Linear 

Semelhante à definição de ângulo circular e ângulo hiperbólico, definimos ângulo linear 

em função da área do setor por ele compreendido. Deste modo, seja a reta de equação dada por      

x = 1. O ponto P a ela pertencente define um setor AOP e um ângulo AÔP. Definimos que o 

ângulo linear mede θ se a área do setor linear AOP vale θ/2 unidades de área. Da mesma forma 

que o ângulo hiperbólico, percebe-se que o ângulo aqui definido não tem o mesmo significado 

que o ângulo circular, uma vez que as áreas envolvidas são diferentes. O ângulo linear é sempre 

maior ou igual ao ângulo circular, sendo igual apenas no caso em que θ = 0, conforme se pode 

perceber na figura 4.1.   

Figura 4.1: Setores circulares e lineares associados a seus respectivos ângulos. 

56 

 
 
 
 
 
 
 
 
 
 
 
CAP. 4 – CORDIC LINEAR  

Para medir o ângulo linear, precisa-se da área do setor linear associado. A mesma é dada por: 

AAOP = 

    ⇒   

 = 

   ⇒   y = θ                                           (4.1) 

Portanto,  o  ângulo  linear  é  dado  por  θ  =  y  quando  x  =  1.  Quando  x  ≠  1,  por  semelhança  de 

triângulos (figura 4.2), tem-se que  

y  = y0.x = x.θ  ⇔ 

.                                                        (4.2) 

Figura 4.2: Ângulo linear para o caso x0 ≠ 1. 

4.2 – Rotação Linear 

Em um  sistema cartesiano no plano, a  rotação linear em  um  ângulo  θ >  0,  na direção 

positiva do eixo y, é entendida como o deslocamento do vetor de modo que sua extremidade, 

permanecendo sobre a reta vertical, percorra um ângulo linear θ em relação à posição inicial. Se 

θ < 0, o deslocamento ocorre na direção oposta. Partindo de um vetor representado pelo ponto 

de coordenadas P0 = (x0 , y0), gera-se um vetor P = (x , y) conforme na figura 4.3. 

Figura 4.3: Rotação linear de um vetor 

57 

2.yx2.1y2θxyθ 
 
 
 
 
 
 
 
 
 
4.3 – O CORDIC no Cálculo do Produto  

De 4.2, vem que: 

y = x0(θ + θ0)   ⇒  y = x0.θ + x0.θ0.   Como 

, temos:  y = y0 + x0.θ 

Ficando as coordenadas do vetor rotacionado P: 

                                                          (4.3) 

Que pode ser  reescrita como:            P = 

.P0                                                                                                                   

Chamando Ml  = 

, pode-se fazer:                                     P = Ml.P0                           (4.4) 

Também  aqui,  a  palavra  rotação  não  tem  o  significado  equivalente  ao  do  caso  circular.  Em 

suma, o único caso que se trata de uma rotação, no sentido estrito da palavra, é o do sistema 

circular  de  coordenadas.  Uma  vez  que  se  trabalha  diretamente  com  o  ângulo  na  matriz  de 

rotação, não é necessário criar uma pseudo rotação, eliminando a necessidade de um FCE. 

4.3 – O CORDIC no Cálculo do Produto 

O produto é obtido no modo Rotação tipo  Linear. Partindo-se do ponto P0 = (x0 , 0) e 

rotacionando-o linearmente de  θ > 0, tem-se que P = (x0 , x0.θ). Vê-se que a variável y é igual 

ao produto x0.θ, onde θ é o valor do ângulo final do vetor P. Como θ é um valor conhecido, o 

algoritmo  faz  a  rotação  quebrando  tal  rotação  em  micro  rotações.  O  valor  do  ângulo  linear 

rotacionado  é  comparado  com  o  valor  do  ângulo  total  e  direciona  a  convergência.  A  ideia  é 

mais  simples,  posto  que  não  se  envolve  o  uso  de  outra  função,  mas  apenas  os  valores  das 

próprias coordenadas. 

De (4.4), para uma rotação linear genérica θn:                    

                             (4.5) 

58 

000xyθθxyyxx.0001    0    1θ1    0    1θ1  0     1nnθMl 
 
 
 
 
 
 
 
 
 
 
CAP. 4 – CORDIC LINEAR  

Desde que se escolha θn = 2– n, nota-se que:    

E, analogamente aos modos Circular e Hiperbólico, se o algoritmo rodar n+1 passos, observa-

se que θ ≈ ± θ0 ± θ1 ... ± θn  e tem-se genericamente: 

Pn+1 =

.P0 

Que, por (4.4), pode ser escrita na forma:       Pn+1 = 

                                      (4.6) 

Figura 4.4: Visualização das rotações de P0 até o vetor P3 na Rotação Linear. 

Finalmente, as rotações são direcionadas de forma que Pn+1 convirja para P, de modo que: 

                                                      (4.7) 

Exemplo 4.1: Suponha que se quer o produto de 2 por 1,23. Faz-se x0 = 2 e θ = 1,23. A cada 

iteração, o ângulo rotacionado é comparado com o ângulo total decidindo o sinal da próxima 

micro  rotação.  O  processo  é  análogo  ao  caso  Circular,  de  modo  que  se  pode  resumir  as 

iterações na tabela 4.1: 

59 

1  20     1nnMl1  0    1   1  0    1   0θθn00P.llMMn1PPnnnyxyx 
                                                                                              
                                                                                                                  
 
 
 
 
 
 
 
 
 
 
4.3 – O CORDIC no Cálculo do Produto  

n 

0 

1 

2 

3 

4 

5 

θn 

1 (+) 

0,5 (+) 

0,25 (–) 

0,125 (–) 

α n 

1 

1,5 

1,25 

1,125 

0,0625 (+) 

1,1875 

0,03125 (+) 

1,21875 

Tabela 4.1: Aproximações do ângulo rotacionado no caso Rotação Linear 

Ao  mesmo  tempo,  enquanto  se  aproxima  o  ângulo,  os  valores  de  x  e  y  também  são 

aproximados. Dessa forma, de acordo com (4.6), na terceira iteração se teria: 

Calculando, obtêm-se:                          

Na sexta iteração: 

Como 2 . 1,23 = 2,46, o erro absoluto é dado por: 

│2,46 – 2,4375│ = 0,0225 

Obviamente, não se deseja o valor aproximado para uma operação tão elementar. O número de 

iterações deve ser maior. Mais uma vez, interessa saber a precisão em função desse número de 

iterações. Deste modo, afirma-se o teorema a ser provado na seção (4.5):  

60 

0012P..lllMMMyx02.1101.12101.14101yx5,224375,22522.18101.116101.132101,yx 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 4 – CORDIC LINEAR  

Teorema 8 (teorema de precisão): Utilizando o método CORDIC, tem-se que, para │θ │< 2 e  

│x │< 2: 

Assim, para n+1 = 40, o erro é dado por 

≈ 3,64.10– 12, fornecendo precisão na décima casa, 

como usado pelas calculadoras.  

4.4 – Sequência Recursiva do CORDIC Linear 

Walther [11] encontrou também a modificação nas equações do CORDIC que permitem 

a computação de multiplicações e divisões, chamadas em  todas as referências encontradas de 

funções lineares: 

                                                (4.8) 

No modo Rotação (dn = sign zn ), a iteração Linear produz: 

                                                             (4.9) 

Para o modo Vetoração (dn = – sign yn ), a iteração Linear fornece: 

                                                             (4.10) 

61 

112..nnαxθx3821nnnnnnnnnnnnnnn.dzz..xdyyx..y.dxx22201110.000nnnzθxyyxx00000xyzzyxxnnn 
 
                              
 
 
 
 
 
  
 
 
 
 
4.5 – Convergência do CORDIC Linear 

A  iteração  Linear  corresponde  à  rotação  linear  do  vetor  inicial  P0  de  um  ângulo  linear  θ, 

aproximado do mesmo modo que as iterações circular e hiperbólica. A seção 4.5 demonstra a 

convergência das sequências para os dois modos. 

Segundo Andraka [1], o modo Vetoração é mais interessante por produzir uma forma de 

realizar divisões. Pode-se observar mais uma vez que as rotações no tipo Linear não necessitam 

do Fator de Correção de Escala, uma vez que as iterações já fornecem  as equações da forma 

completa, não alterando a norma do vetor rotacionado. 

4.5 – Convergência do CORDIC Linear 

O teorema 9 estabelece que a sequência θk = 2– k , k = 0, 1, ..., n, satisfaz o Teorema de 

Convergência. 

Teorema  9:  A  sequência  θk  =    2–k  ,  k  =  0,  1,  ...,  n,  satisfaz  as  hipóteses  do  Teorema  de 

Convergência para todo │r│ < 2. 

Demonstração:  A  sequência  dada  é  claramente  uma  sequência  decrescente  de  números 

positivos.  Pode-se fazer, então: 

Sn = 1 + 2– 1 + ··· + 2– n, que é uma progressão geométrica de razão 2– 1.  Assim, deve-se provar 

que: 

Como:  

, para 0 < k < n. 

Portanto, a série obedece ao critério de convergência. Uma vez que a soma dessa PG tende a 2, 

para n tendendo a infinito, temos │r│ < 2.  

62 

nkjjnkθθθ1nkjjnθθ1kkknknknknnkjjnθ2)12.(2212)12.(2222111 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 4 – CORDIC LINEAR  

Também  se  deve  provar  a  convergência  das  sequências  para  xk,  yk  e  zk.  Considerando  que         

xk = x0, devemos provar apenas a sequência para yk e zk. 

1) Primeiro, deve-se mostrar que a sequência sk converge para θ. Definindo-a como: 

sk = θ – 

 = 

.    Vê-se que s0 = θ – 

 = 0 e que sk+1 = 

 = sk + 

Lembrando que, no modo rotação, dn = sgn (

), Para r = θ, nós temos que: 

Portanto, esta sequência sk satisfaz o Teorema de Convergência e: 

2)  Agora  quer-se  provar  que 

  no  modo  Rotação,  e  que  zn+1  →  z0  + 

  no 

modo Vetoração. 

Como  yn+1  =    yn  +  dn.xn.2–  n

    ,  vemos  que 

.  Sendo 

,  e 

como a convergência da série sk+1 = 

 para θ já é conhecida, então: 

 ⇒  

Já para 

, pode-se notar que 

Tomando z0 = 0, vem que: 

 ⇔   

63 

kz10kjjjθδ0zkjjjθδ0kkθδnzkkkkkdzsθsrδ)sgn()sgn()sgn(nnθsr1nnnθsθ211θxyyn.00100xykiiikdxyy00012..kiiikd02.kjjjθδ0kkxyy.001θxyyn.001nnnn.dzz21kiiik.dzz00121010010001002.2..kkkiiikkiiikzxydxyxxdyxy10100kkzxyxy 
 
 
 
 
 
 
 
                   
 
 
                                                      
 
 
 
 
 
 
 
4.6 – O CORDIC no Cálculo do Quociente 

Como yn+1 → 0 (modo Vetoração), então: 

. Portanto, para z0 ≠ 0,  zk+1 → z0 + 

. 

3) A precisão no produto pode ser obtida notando que, para z0 = θ ,  y0 = 0 e │x0│< 2: 

i)     

 e  

, então:  

ii)         

=

 , confirmando o teorema 8. 

4.6 – O CORDIC no Cálculo do Quociente  

Para  realizar  uma  divisão,  usa-se  o  modo  Vetoração  Linear.  Desde  que 

,  o 

algoritmo converge para o resultado desejado.  

Exemplo  4.2:  Obter  o  quociente  entre  7  e  5.    Fazendo  x0  =  5  e  y0  =  7.  Lembrando  que  αn 

converge  para  o  simétrico  do  argumento  do  vetor  no  modo  Vetoração,  procura-se  por  este 

resultado. A tabela 4.2 sintetiza os cálculos: 

n 

0 

1 

2 

3 

4 

5 

yn 

7 

2 

– 0,5 

0,75 

0,125 

– 0,1875 

Sinal de yn 

> 0 

> 0 

< 0 

> 0 

> 0 

< 0 

θn 

1 (–) 

0,5 (–) 

0,25 (+) 

αn 

– 1 

– 1,5 

– 1,25 

0,125 (–) 

– 1,375 

zn 

0 

1 

 1,5 

 1,25 

0,0625 (–) 

– 1,4375 

 1,375 

0,03125 (+) 

– 1,40625 

 1,4375 

Tabela 4.2: Cálculo de αn em função do sinal de yn na Vetoração Linear. 

64 

001xyzk00xykiiik.dzz0012kiiikdxyy00012..).(10001kkzzxyy  ..0.).(..010100100000101xzxzzxzzxyzxyθxynnnnn01.xzn10122.21  .  nnnxsθ200xy 
 
 
 
    
 
 
 
 
 
 
 
 
CAP. 4 – CORDIC LINEAR  

Uma vez que 

 observa-se que o erro absoluto até n = 5 é de:  

e7/5 = │1,4 – 1,40625│ = 0,00625. 

Assim como no produto, não se tem vantagem em aproximar com poucas iterações. Para que 

haja  um  cálculo  mais  confiável,  deve-se  realizar  uma  quantidade  maior  de  iterações.  Como 

observado em (4.10) e provado na seção 4.5, item 2, tem-se que 

, com 

. 

Assim: 

. 

De modo que, para n = 40, 

 gerando precisão na décima casa. 

65 

1,457001xyzk001xyzknnnsθzxy21     1100123910819121., 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 5 

O CORDIC UNIFICADO 

Aqui  os  três  tipos  do  CORDIC  são  agrupados  em  um  único  conjunto  de  equações  de 

iteração. O algoritmo unificado é apresentado e as funções obtidas a partir dele são resumidas 

em  tabelas.  Uma  variação  do  algoritmo  para  o  cálculo  de  seno  e  cosseno  inversos  é 

acrescentada à tabela do caso Circular. 

5.1 – Iteração CORDIC Generalizada  

Conforme  visto  em  cada  caso,  o  CORDIC  mostrou-se  muito  versátil  no  cálculo  das 

funções elementares. Outra vantagem de seu uso é o fato de Walther [11], com a aplicação de 

propriedades  que  relacionam  os  números  complexos  com  as  funções  hiperbólicas,  ter 

conseguido resumir os três modos em  apenas um conjunto de iterações, denominada Iteração 

CORDIC Generalizada: 

                                                     (5.1) 

Onde os valores de dn, m, wn e λ(n) determinam o tipo de iteração que ocorrerá. Os valores de m 

podem ser  + 1, 0 ou – 1 e estão associados ao tipo de coordenadas utilizadas. Respectivamente, 

temos  os  tipos  Circular,  Linear  e  Hiperbólico.  As  tabelas  5.1  e  5.2  abaixo  resumem  os 

resultados obtidos para cada combinação de valores. 

66 

)n(nnn)n(nnnn)n(nnnnw.dzz.x.dyy.y.d.mxx11122 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CAP. 5 – O CORDIC UNIFICADO 

m 

1 

–1 

0 

Tipo 

Circular 

Hiperbólico 

λ(n) 

n 

n – j,  

j o maior inteiro tal que 
3j+1 + 2.j – 1 <  2.n  

Linear 

n 

Tabela 5.1: Valores de λ(n) nas equações 5.1 

Tipo 

m 

wn 

Modo Rotação 

Modo Vetoração 

dn = sign(zn) 

dn = sign(– yn) 

Circular 

1 

tg– 1 2– n 

xn → K.(x0.cos z0 – y0.sen z0) 
yn → K.(x0 sen z0 + y0 cos z0) 
zn → 0 

Hiperbólico 

  –1 

tgh– 1 2– n 

xn → K’.(x1.cosh z1 + y1.senh z1) 
yn → K’.(x1 senh z1 + y1 cosh z1) 
zn → 0 

Linear 

0 

2– n 

xn → x0 
yn → y0 + x0.z0 
zn → 0 

Tabela 5.2: Funções computáveis pelo CORDIC.  

xn → K.

yn → 0 

zn → z0 + tg– 1

xn → K’.

yn → 0 

zn → z1 + tgh– 1

xn → x0 
yn → 0 

zn → z0 + 

As  operações  necessárias  à  transformação  entre  números  complexos  e  funções 

hiperbólicas  não  são  realmente  difíceis.  Mas,  considerando  o  objetivo  do trabalho  e  para  não 

correr  o  risco  de  torná-lo  carregado  de  informações,  tais  passagens  não  foram  apresentadas. 

Ainda assim, para aqueles que desejem se aprofundar no assunto, a referência [11] oferece uma 

leitura fácil, desde que se conheçam os princípios de funcionamento do algoritmo e o teorema 

de convergência. 

67 

2020yx00xy2121yx11xy00xy 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
5.2 – Tabelas de Funções do CORDIC 

5.2 – Tabelas de Funções do CORDIC  

Não obstante as funções já exemplificadas para a aplicação do CORDIC, seu uso pode 

ser estendido ainda mais. De acordo com Andraka [1], uma pequena adaptação permite ainda o 

cálculo das funções trigonométricas circulares inversas. Tal adaptação é mostrada na tabela 5.3. 

Além disso, transformações entre coordenadas polares e retangulares também são obtidas.  As 

tabelas  de  5.3  a  5.5  resumem  as  funções  e  resultados  mais  imediatos  do  algoritmo  CORDIC 

para cada tipo de iteração, inclusive casos não abordados nos exemplos. 

Tipo 

Modo 

Função 

Entrada 

Saída 

Rotação 

Circular 

sen θ 

cos θ 

tg θ 

sec θ 

cosec θ 

cotg θ 

Transformação: 

Polar – Retangular 

tg– 1 θ 

x0 = 

y0 = 0 

z0 = θ 

x0 = 

y0 = 0 

z0 = θ 

x0 

y0 

Vetoração 

Transformação: 

z0 = 0 

Retangular – Polar 

xn → cos θ 

yn → sen θ 

zn → 0 

xn → R.cos θ 

yn → R.sen θ 

zn →0 

xn → K.

yn → 0 

zn → tg– 1 

dn = sign(– yn) 

dn = 1, yn < θ 

dn = – 1, yn < θ 

sen– 1 θ 

cos– 1θ = 

x0 

y0   

z0 = 0 

xn → 

yn → c 

zn → sen– 1

Tabela 5.3: Funções calculadas pelo CORDIC Circular 

68 

K1KR2020yx00xy2sen1θ2020).(yxK0.xKc 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
  
 
 
 
  
 
 
 
CAP. 5 – O CORDIC UNIFICADO 

Rotação 

produto 

Linear 

Vetoração 

quociente 

x0  

y0 = 0 

z0 = θ 

x0 

y0 

xn → x0 
yn → x0.z0 
zn → 0 

xn → x0 
yn → 0 

z0 = 0 

zn → 

Tabela 5.4: Funções calculadas pelo CORDIC Linear 

Rotação 

Hiperbólico 

senh θ 

cosh θ 

ex

 = senh θ + cosh θ 

tgh θ 

sech θ 

cosech θ 

cotgh θ 

tgh– 1 θ 

Vetoração 

ln(u) = 

x0 = 

y0 = 0 

z0 = θ 

xn → cosh θ 

yn → senh θ 

zn → 0 

x0 

y0 

z0 = 0 

xn → K’.

yn → 0 

zn →  tgh– 1 

Tabela 5.5: Funções calculadas pelo CORDIC Hiperbólico 

69 

00xy'1K11tgh.21uu224141uuu2121yx11xy 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
CAPÍTULO 6 

CONCLUSÃO 

Esta  dissertação  teve  como  foco  o  algoritmo  CORDIC  e  o  seu  funcionamento. 

Conforme o trabalho foi se desenvolvendo, percebeu-se dois pontos principais: a simplicidade 

da ideia junto com o seu poder de cálculo e, contrastando, a dificuldade gerada pelas condições 

de convergência, que restringem a aplicação e o domínio de validade.  

Considerando-se  os  objetivos  gerais,  tais  restrições  não  impediram  a  apresentação  do 

processo  nem  o  entendimento  de  seu  funcionamento,  uma  vez  que  os  conceitos  de  rotação  e 

pseudo  rotação  são  bastante  intuitivos,  fato  que  contribuiu  à  assimilação  do  mecanismo 

responsável  pelo  método.  Mesmo  nos casos  das rotações  hiperbólicas e lineares, que não são 

rotações  propriamente  ditas,  não  houve  maiores  dificuldades  de  compreensão.  Quanto  à 

fundamentação teórica, as dificuldades surgidas para garantir a convergência, em especial para 

o  caso  hiperbólico,  mostraram-se  mais  um  incentivo  que  um  empecilho  na  realização  do 

trabalho.  Ter  uma  dimensão  da  dificuldade  enfrentada  pelos  cientistas  que  contornaram  esse 

obstáculo e perceber sua presença de espírito nas sugestões que resolveram o problema tornou-

se  uma  atividade  árdua,  porém  recompensadora,  como  se  pode  esperar  de  todo  assunto 

interessante gerado pela matemática. 

Quanto aos objetivos específicos, pode-se dizer que foi a partir dos exemplos numéricos 

que se desenhou toda a estrutura da dissertação. Procurar usá-los para aprender como se obtém 

as  aproximações  das  funções  abordadas  facilitou  o  entendimento  dos  mecanismos  de  cálculo 

envolvidos e, principalmente, dos problemas de convergência do algoritmo. Sua presença neste 

trabalho  não  pode  ser  considerada  meramente  ilustrativa,  mas  sim  uma  ajuda  essencial  à 

completa compreensão do algoritmo e de todas as suas particularidades, inclusive o da precisão 

desejada,  que  necessitou  de  uma  adaptação  de  notação  devido  à  solução  da  convergência 

hiperbólica.  

70 

 
 
 
 
 
 
 
 
 
CAP. 6 –CONCLUSÃO 

Cite-se,  entretanto,  que  vários  pontos  ficaram  em  aberto.  Dentre  todos,  destacam-se  o 

caso  do  CORDIC  unificado  (que  envolve  o  uso  de  números  complexos  com  funções 

hiperbólicas),  as  adaptações  possíveis  de  serem  feitas  com  o  algoritmo  (como  no  caso  do 

cálculo  das  funções  arco  seno  e  arco  cosseno)  e  o  problema  da  extensão  do  domínio  de 

convergência.  Levando-se  em  conta  que  este  método  vem  sendo  cada  vez  mais  utilizado,  em 

especial nas engenharias e na computação, trabalhos futuros que ajudem a compreender todos 

os seus desdobramentos possíveis podem se mostrar uma ótima ferramenta de pesquisa não só 

para alunos de cursos de graduação nestas áreas, mas também para estudantes do ensino médio 

que procuram aprofundar seus conhecimentos e possam ser levados a seguirem nestas carreiras, 

notadamente reconhecidas como de grande importância ao desenvolvimento tecnológico.       

71 

 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
REFERÊNCIAS BIBLIOGRÁFICAS 

[1]  ANDRAKA,  R.  A  survey  of  CORDIC  algoritms  for  FPGA  based  computers, 

ACM/SIGDA, p. 191 – 200, February 1998. 

[2] 

CARVALHO, 

S. 

P. 

As 

Funções  Hiperbólicas. 

Disponível 

em: 

http://www.mat.ufmg.br/comed/2005/b2005/funchiper.pdf.  

[3]  DAWID,  H.,  MEYR;  H.  CORDIC  algorithms  and  architectures.  In:  PARHI,  K.  K.; 

NISHITANI,  T.  Digital  Signal  Processing  for  Multimedia  Systems.  New  York:  Marcel 

Dekker, 1999. p. 623 – 655. 

[4] EDWARDS, B. H.; UNDERWOOD, J. M. How do Calculators Calculate Trigonometric 

Functions?  Educational Resources Information Center (ERIC), document ED461519.  

[5] EKLUND, Neil. CORDIC: Elementary Function Computation Using Recursive Sequences. 

Electronic  Proceedings of the Eleventh Annual  International  Conference on Technology 

in  Collegiate  Mathematics. p. 330 – 333. New  Orleans,  2001.  Também  disponível  em:  

http://archives.math.utk.edu/ICTCM/VOL11/C027/paper.pdf 

[6]  MULLER,  J.  M.  The  CORDIC  Algorithm.  In:  ______.  Elementary  Functions: 

Algorithms and Implementation. Boston: Birkhäuser, 2006. p. 133 – 140. 

[7]  PARRIS,  Richard.  Elementary  Functions  and  Calculators.  Phillips  Exeter  Academy. 

Disponível em: http://math.exeter.edu/rparris/peanut/cordic.pdf 

[8]  SULTAN,  Alan.  CORDIC:  How  Hand  Calculators  Calculate.  College  Mathematics 

Journal, p. 87 – 92. 17 dez.  2008. 

72 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
REFERÊNCIAS BIBLIOGRÁFICAS 

[9] VOLDER, J. E. The CORDIC Trigonometric Computing Technique. IRE Transactions on 

Electronic Computers, vol. EC-8, p. 330 – 334, September 1959. 

[10]  VOLDER,  J.  E.  The  Birth  of  CORDIC.  Journal  of  VLSI  Signal  Processing  Systems,  

vol. 25, p. 101 – 105, June 2000.  

[11]  WALTHER,  J.  S.  A  Unified  Algorithm  for  Elementary  Functions.  Spring  Joint 

Computer Conference, p. 379 – 385, April 1971. 

73 

 
 
 
 
 
 
 
