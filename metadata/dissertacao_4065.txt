Universidade Federal de Mato Grosso
Campus Universit´ario do Araguaia

Instituto de Ciˆencias Exatas e da Terra

Utiliza¸c˜ao do Software FreeMat no Ensino de
Fun¸c˜oes, Matrizes e Sistemas Lineares no Ensino
M´edio

Fernando Henrique Cardoso

Mestrado Proﬁssional em Matem´atica: PROFMAT/SBM

Orientador: Prof. Dr. Juan Elmer Villanueva Zevallos

Trabalho ﬁnanciado pela Capes

Barra do Gar¸cas - MT

Setembro de 2015

Utiliza¸c˜ao do Software FreeMat no Ensino de
Fun¸c˜oes, Matrizes e Sistemas Lineares no Ensino
M´edio

Este exemplar corresponde `a reda¸c˜ao ﬁnal da dis-
serta¸c˜ao, devidamente corrigida e defendida por
Fernando Henrique Cardoso e aprovada pela co-
miss˜ao julgadora.

Barra do Gar¸cas, 14 de Setembro de 2015.

Prof. Dr. Juan Elmer Villanueva Zevallos
Orientador

Banca examinadora:

Prof. Dr. Juan Elmer Villanueva Zevallos
Prof. Dr. Adilson Antˆonio Berlatto
Prof. Dr. Alonso Sep´ulveda Castellanos

Disserta¸c˜ao apresentada ao curso de Mestrado
Proﬁssional em Matem´atica – PROFMAT, da Uni-
versidade Federal de Mato Grosso, como requisito
parcial para obten¸c˜ao do t´ıtulo de Mestre em
Matem´atica.

Dados Internacionais de Catalogação na Fonte.  Ficha catalográfica elaborada automaticamente de acordo com os dados fornecidos pelo(a) autor(a). Permitida a reprodução parcial ou total, desde que citada a fonte.C268u    Cardoso, Fernando Henrique.Utilização do Software FreeMat no Ensino de : Funções, Matrizes e SistemasLineares / Fernando Henrique Cardoso. -- 2015xiv, 204 f. : il. color. ; 30 cm.Orientador: Juan Elmer Villanueva Zevallos.Dissertação (mestrado profissional) - Universidade Federal de Mato Grosso,Instituto de Ciências Exatas e da Terra, Programa de Pós-Graduação em Matemática,Cuiabá, 2015.Inclui bibliografia.1. Ensino. 2. FreeMat. 3. Funções. 4. Matrizes. 5. Sistemas Lineares. I. Título.iii

Aos meus pais, pois sem eles nada

aconteceria na minha vida.

iv

Agradecimentos

`A Deus pela minha vida e ben¸c˜aos recebidas desde o meu caminhar e a Jesus

Cristo, meu Salvador, que na cruz entregou sua vida por mim.

Ao professor Dr. Juan Villanueva, pelas orienta¸c˜oes e suporte dado no desenvol-

vimento deste trabalho.

`A V´ıvia L´ucia, que nas diﬁculdades encontradas no per´ıodo deste curso me in-

centivou e motivou a continuar.

Aos meus pais, que sempre estiveram dispostos a ajudar, torcendo pelo sucesso

desta longa e dif´ıcil caminhada.

Aos colegas de trabalho, em especial, aos professores do n´ucleo do IFMT de

Jaciara pelo apoio dado durante este per´ıodo.

Aos amigos do mestrado, que ao longo destes dois anos se tornaram parte da

minha fam´ılia.

Um grande abra¸co e sonoro muito obrigado!!!

v

Resumo

Este trabalho apresenta algumas abordagens pedag´ogicas para o ensino da matem´atica

utilizando o software FreeMat. As abordagens caracterizam-se como propostas de ativi-

dades metodol´ogicas a serem desenvolvidas e aplicadas no ensino de fun¸c˜oes, matrizes e

sistemas lineares. Busca-se, facilitar o aprendizado destes conte´udos, pelos discentes do

Ensino M´edio, atrav´es da aplica¸c˜ao deste recurso computacional.

Palavras-chave: Ensino, FreeMat, Fun¸c˜oes, Matrizes e Sistemas Lineares.

vi

Abstract

This work presents some pedagogical approaches to teaching mathematics using the Free-

Mat software. The approaches are characterized as methodological proposals for activities

to be developed and applied in teaching functions, matrices and linear systems. The aim

is to facilitate the learning of these contents, by the students of high school, through the

application of computational resource.

Key-words: Teaching, FreeMat, Function, Matrices and Linear Systems.

vii

Sum´ario

Agradecimentos

Resumo

Abstract

Lista de ﬁguras

Lista de tabelas

Introdu¸c˜ao

1 Ensino de matem´atica: do giz ao uso do computador

1.1 O uso de computadores no ensino de matem´atica . . . . . . . . . . . . . .

2 FreeMat: dentre v´arios softwares pagos, uma escolha livre

v

vi

vii

xiii

xiv

1

4

5

11

2.1 FreeMat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

2.2 Programa¸c˜ao em FreeMat

. . . . . . . . . . . . . . . . . . . . . . . . . . . 18

2.3 Comandos de repeti¸c˜ao e de condi¸c˜ao . . . . . . . . . . . . . . . . . . . . . 20

2.3.1 Comandos de condi¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . 21

2.3.2 Comando de repeti¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . 23

3 T´opicos de Matem´atica a serem aplicados no FreeMat

24

3.1 Fun¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24

3.2 Matrizes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

3.2.1 Opera¸c˜oes com matrizes

. . . . . . . . . . . . . . . . . . . . . . . . 32

3.2.2 Aplica¸c˜ao das matrizes `a criptograﬁa . . . . . . . . . . . . . . . . . 42

3.3 Determinantes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48

viii

3.4 Sistemas lineares de m equa¸c˜oes com n inc´ognitas . . . . . . . . . . . . . . 51

3.4.1 Opera¸c˜oes elementares de matrizes

. . . . . . . . . . . . . . . . . . 53

3.4.2 Forma escalonada de uma matriz . . . . . . . . . . . . . . . . . . . 55

4 Aplica¸c˜ao do FreeMat no estudo de fun¸c˜oes, matrizes e sistemas lineares 71

4.1 Proposta I: Uma abordagem para o ensino e aplica¸c˜ao das fun¸c˜oes . . . . . 71

4.1.1 Plotagem gr´aﬁca de uma fun¸c˜ao . . . . . . . . . . . . . . . . . . . . 72

4.1.2 Como calcular o custo por consumo em m3 de ´agua?

. . . . . . . . 85

4.1.3 Relato da aplica¸c˜ao da proposta no Ensino M´edio . . . . . . . . . . 95

4.2 Proposta II: Ensino de matrizes utilizando o FreeMat, das opera¸c˜oes com

matrizes `a criptograﬁa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98

4.2.1 Ensino de matrizes . . . . . . . . . . . . . . . . . . . . . . . . . . . 98

4.2.2 Criptografando mensagens atrav´es do FreeMat . . . . . . . . . . . . 109

4.3 Proposta III: Resolu¸c˜ao de sistemas lineares de m equa¸c˜oes com n inc´ognitas146

Considera¸c˜oes ﬁnais

Referˆencias Bibliogr´aﬁcas

Apˆendice: Material adicional

179

181

184

A.1 Programa para determinar o valor a pagar para um certo consumo de ´agua

das residˆencias em Cuiab´a/MT . . . . . . . . . . . . . . . . . . . . . . . . 184

A.2 Programa para criptografar mensagens pelo sistema poligr´aﬁco, baseado

na multiplica¸c˜ao de matrizes com entradas reais . . . . . . . . . . . . . . . 187

A.3 Programa para decifrar mensagens pelo sistema poligr´aﬁco, baseado na

multiplica¸c˜ao de matrizes com entradas reais . . . . . . . . . . . . . . . . . 189

A.4 Programa para criptografar mensagens pelo sistema poligr´aﬁco: 2-Cifras

de Hill

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192

A.5 Programa para decifrar mensagens pelo sistema poligr´aﬁco: 2-Cifras de Hill 194

A.6 Programa para resolu¸c˜ao de sistemas pela Regra de Cramer

. . . . . . . . 198

A.7 Programa para resolu¸c˜ao de sistemas pelo m´etodo de Gauss-Jordan . . . . 201

ix

Lista de Figuras

2.1

Janelas dispostas na Interface do FreeMat . . . . . . . . . . . . . . . . . . . . 14

2.2

Janela gr´aﬁca do FreeMat

. . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

2.3 Opera¸c˜oes com n´umeros reais desenvolvidas no FreeMat

. . . . . . . . . . . . 16

2.4

Janela de edi¸c˜ao de texto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18

2.5 Local para salvar arquivos digitados na janela de edi¸c˜ao . . . . . . . . . . . . . 19

2.6 Diret´orios do FreeMat

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

3.1 Gr´aﬁco da fun¸c˜ao f

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28

3.2 Matriz reduzida por linha `a forma escada . . . . . . . . . . . . . . . . . . . 56

4.1 Menu da Janela gr´aﬁca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74

4.2

Interface do FreeMat ap´os inser¸c˜ao do comando x=linspace(-4,4) . . . . . . . 76

4.3

Inser¸c˜ao de comandos para plotar o gr´aﬁco da fun¸c˜ao f . . . . . . . . . . . . . 77

4.4 Gr´aﬁco da fun¸c˜aof : [−4, 4] −→ R, deﬁnida por f (x) = x3 + x2 + 1 . . . . . . . 77

4.5 Gr´aﬁco da fun¸c˜ao f : [−4.5] −→ R, deﬁnida por f (x) = 10 . . . . . . . . . . . . 78

4.6 Gr´aﬁco da fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1 . . . . . . . . . 80

4.7 Gr´aﬁcos das fun¸c˜oes f, g : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1 e g(x) = 10

81

4.8 Ponto de interse¸c˜ao entre os gr´aﬁcos das fun¸c˜oes f e g . . . . . . . . . . . . . . 81

4.9 Comandos para obter os valores num´ericos das fun¸c˜oes das locadoras de au-

tom´oveis A e B . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83

4.10 Janela gr´aﬁca e os gr´aﬁcos das fun¸c˜oes das locadoras A e B . . . . . . . . . . 84

4.11 Gr´aﬁcos e o ponto de interse¸c˜ao das fun¸c˜oes das locadoras A e B . . . . . . . . 84

4.12 Tabela de Estrutura tarif´aria e dos servi¸cos complementares da CAB . . . . . . 85

4.13 Faixas de consumo relativa a categoria 2 da conta de ´agua da CAB

. . . . . . 86

4.14 Inser¸c˜ao de comandos no FreeMat para desenvolvimento da Atividade 6

. . . . 89

4.15 Gr´aﬁco da fun¸c˜ao f deﬁnida na Atividade 5 . . . . . . . . . . . . . . . . . . . 90

x

4.16 Editor do FreeMat e parte dos comandos relativos ao programa “VALORES” . . 93

4.17 Compilando o programa “VALORES” no FreeMat: primeira etapa do programa

4.18 Compilando o programa “VALORES” no FreeMat: segunda etapa do programa

4.19 Compilando o programa “VALORES” no FreeMat: terceira etapa do pro-

94

95

grama . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95

4.20 Desenvolvimento da Proposta I com os alunos do IFMT no Laborat´orio de In-

form´atica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97

4.21 Desenvolvimento da Atividade 9 no FreeMat . . . . . . . . . . . . . . . . . . . 102

4.22 Desenvolvimento da Atividade 10 no FreeMat . . . . . . . . . . . . . . . . . . 103

4.23 Desenvolvimento da Atividade 11 no FreeMat . . . . . . . . . . . . . . . . . . 104

4.24 Desenvolvimento da Atividade 12 no FreeMat . . . . . . . . . . . . . . . . . . 106

4.25 Desenvolvimento da Atividade 13 no FreeMat . . . . . . . . . . . . . . . . . . 107

4.26 Desenvolvimento da Atividade 13 no FreeMat, utilizando o comando format long109

4.27 Desenvolvimento da Atividade ?? no FreeMat . . . . . . . . . . . . . . . . . . 110

4.28 Vari´aveis armazenados e dispostos na janela V ariables

. . . . . . . . . . . . . 110

4.29 Desenvolvimento da Atividade 15 no FreeMat . . . . . . . . . . . . . . . . . . 111

4.30 Desenvolvimento da Atividade 16 no FreeMat . . . . . . . . . . . . . . . . . . 113

4.31 Desenvolvimento da Atividade 17 no FreeMat . . . . . . . . . . . . . . . . . . 114

4.32 Desenvolvimento da Atividade 18 no FreeMat . . . . . . . . . . . . . . . . . . 116

4.33 Desenvolvimento da Atividade 19 no FreeMat . . . . . . . . . . . . . . . . . . 118

4.34 Editor do FreeMat e parte dos comandos relativos ao programa “CRIPTOGRA-

FAR” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122

4.35 Editor do FreeMat e parte dos comandos relativos ao programa “DECIFRAR” . 125

4.36 Desenvolvimento da Atividade 22, primeira etapa do programa . . . . . . . 126

4.37 Desenvolvimento da Atividade 22, segunda etapa do programa. . . . . . . . 127

4.38 Desenvolvimento da Atividade 22, terceira etapa do programa . . . . . . . . . . 127

4.39 Desenvolvimento da Atividade 22, quarta etapa do programa. . . . . . . . . . . 128

4.40 Desenvolvimento da Atividade 23, primeira etapa do programa. . . . . . . . . . 129

4.41 Desenvolvimento da Atividade 23, segunda etapa do programa.

. . . . . . . . . 130

4.42 Desenvolvimento da Atividade 23, terceira etapa do programa.

. . . . . . . . . 130

4.43 Desenvolvimento da Atividade 23, quarta etapa do programa. . . . . . . . . . . 131

4.44 Desenvolvimento da Atividade 26, primeira etapa do programa . . . . . . . . . 140

xi

4.45 Desenvolvimento da Atividade 26, segunda etapa do programa . . . . . . . . . 140

4.46 Desenvolvimento da Atividade 26, terceira etapa do programa . . . . . . . . . . 141

4.47 Desenvolvimento da Atividade 26, quarta etapa do programa . . . . . . . . . . 142

4.48 Desenvolvimento da Atividade 27, primeira etapa do programa . . . . . . . . . 143

4.49 Desenvolvimento da Atividade 27, segunda etapa do programa . . . . . . . . . 144

4.50 Desenvolvimento da Atividade 27, terceira etapa do programa . . . . . . . . . . 144

4.51 Desenvolvimento da Atividade 27, quarta etapa do programa . . . . . . . . . . 145

4.52 Desenvolvimento da Atividade 28 no FreeMat . . . . . . . . . . . . . . . . . . 148

4.53 Desenvolvimento da atividade 29 no FreeMat

. . . . . . . . . . . . . . . . . . 151

4.54 Desenvolvimento da Atividade 30 no FreeMat . . . . . . . . . . . . . . . . . . 152

4.55 Desenvolvimento da Atividade 31 no FreeMat . . . . . . . . . . . . . . . . . . 154

4.56 Editor do FreeMat e parte dos comandos relativos ao programa “CRAMER” . . 158

4.57 Desenvolvimento da Atividade 33, primeira etapa do programa CRAMER . . . 159

4.58 Desenvolvimento da 33, segunda etapa do programa CRAMER . . . . . . . . . 160

4.59 Desenvolvimento da Atividade 33, terceira etapa do programa CRAMER . . . . 160

4.60 Desenvolvimento da Atividade 33, quarta etapa do programa CRAMER . . . . 161

4.61 Desenvolvimento da Atividade 34, primeira etapa do programa CRAMER . . . 162

4.62 Desenvolvimento da Atividade 34, segunda etapa do programa CRAMER . . . . 163

4.63 Desenvolvimento da Atividade 34, terceira etapa do programa CRAMER . . . . 163

4.64 Editor do FreeMat e parte dos comandos relativos ao programa “sistemas” . . . 168

4.65 Desenvolvimento da Atividade 36, primeira etapa do programa Gauss Jordan

. 169

4.66 Desenvolvimento da Atividade 36, segunda etapa do programa Gauss Jordan

. 170

4.67 Desenvolvimento da Atividade 36, terceira etapa do programa Gauss Jordan . . 171

4.68 Desenvolvimento da Atividade 36, quarta etapa do programa Gauss Jordan . . . 171

4.69 Desenvolvimento da Atividade 36, quinta etapa do programa Gauss Jordan 172

4.70 Desenvolvimento da Atividade 37, primeira etapa do programa Gauss Jordan

. 173

4.71 Desenvolvimento da Atividade 37, segunda etapa do programa Gauss Jordan

. 174

4.72 Desenvolvimento da Atividade 37, terceira etapa do programa Gauss Jordan . . 174

4.73 Desenvolvimento da Atividade 37, quarta etapa do programa Gauss Jordan

. . 175

4.74 Desenvolvimento da Atividade 38, primeira etapa do programa Gauss Jordan

. 176

4.75 Desenvolvimento da Atividade 38, segunda etapa do programa Gauss Jordan

. 176

4.76 Desenvolvimento da Atividade 38, terceira etapa do programa Gauss Jordan . . 177

xii

4.77 Desenvolvimento da Atividade 38, terceira etapa do programa Gauss Jordan . . 177

4.78 Desenvolvimento da Atividade 38, quarta etapa do programa Gauss Jordan . . . 178

xiii

Lista de Tabelas

2.1 Softwares matem´aticos livres . . . . . . . . . . . . . . . . . . . . . . . . . . . 12

2.2 Comandos utilizados nas opera¸c˜oes com n´umeros reais e matrizes . . . . . . . . 15

2.3 Algumas fun¸c˜oes e comandos utilizados no FreeMat . . . . . . . . . . . . . . . 17

2.4 Operadores l´ogicos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

2.5 Operadores relacionais . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

3.1

Inversos multiplicativos em Z27

. . . . . . . . . . . . . . . . . . . . . . . . . 41

3.2 Tabela de correspondˆencia . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43

xiv

Introdu¸c˜ao

O ensino de matem´atica ´e apresentado ao aluno desde as primeiras s´eries do en-

sino b´asico. J´a, no Ensino M´edio, o discente depara-se com novos conte´udos matem´aticos,

caso das matrizes e dos sistemas lineares, ou aprofunda o estudo dos t´opicos apresentados

no n´ıvel fundamental, caso das fun¸c˜oes. Os conceitos de fun¸c˜ao, matriz e sistema linear

s˜ao trabalhados dentro da disciplina de matem´atica do primeiro e segundo ano do Ensino

M´edio e aplicados em outras ´areas do conhecimento. Estes conte´udos podem ser traba-

lhados de forma interdisciplinar e contextualizada, todavia, para isto, o discente precisa

compreender suas propriedades alg´ebricas e constru¸c˜oes gr´aﬁcas, acarretando uma maior

facilidade na aplica¸c˜ao destes t´opicos em exerc´ıcios ligados ao cotidiano ou visando a

interdisciplinaridade.

Algumas disciplinas necess´arias para a intera¸c˜ao da crian¸ca ou adolescente com

meios tecnol´ogicos, que facilitariam a inser¸c˜ao e aplica¸c˜ao da tecnologia nas ´areas das

ciˆencias exatas, n˜ao s˜ao abordados na Matriz Curricular do Ensino M´edio, como exemplo,

o ensino de inform´atica. Ainda, a matem´atica pode proporcionar esta rela¸c˜ao com a

tecnologia, por´em, isto n˜ao ´e alcan¸cado. Observa-se por exemplo, no ensino de fun¸c˜oes a

n´ıvel m´edio, professores habituados a esbo¸car gr´aﬁcos somente no quadro, remetendo `a um

ensino de car´ater tradicional. Tamb´em, evidencia-se o desest´ımulo do discente tanto no

estudo alg´ebrico das fun¸c˜oes quanto na abordagem geom´etrica, uma vez que, os docentes

encontram diﬁculdades ao trazer aplica¸c˜oes desse conte´udo, bem como, para torn´a-lo mas

dinˆamico.

No caso do ensino de matrizes, cujo conte´udo ´e extremamente aplicado na pro-

grama¸c˜ao computacional, n˜ao ´e diferente. Presenciasse diﬁculdades dos docentes em apre-

sentar e propor meios facilitadores para o ensino desse conte´udo nas escolas, tamb´em, al´em

dos alunos n˜ao observarem aplica¸c˜oes no cotidiano, muitas vezes, devidos estas diﬁcul-

dades, n˜ao s˜ao apresentadas nenhuma aplica¸c˜ao das matrizes nas solu¸c˜oes de sistemas

1

lineares, o que poderia ser facilmente revertido ao apresentar programas computacionais.

Neste contexto, esta disserta¸c˜ao tem por objetivo apresentar uma nova abor-

dagem para o ensino das fun¸c˜oes, matrizes e sistemas lineares, utilizando como recurso

computacional, o FreeMat, bem como, delimitar passos a serem seguidos na utiliza¸c˜ao

deste software para o ensino dos conte´udos citados.

Este trabalho est´a estruturado em quatro cap´ıtulos, sendo os trˆes primeiros re-

lativos a um estudo te´orico para amparar o entendimento das propostas, que ser˜ao apre-

sentadas no quarto cap´ıtulo.

No Cap´ıtulo 1, ser˜ao apresentados aportes te´oricos, na ´area de ensino, para o

entendimento das propostas dentro das concep¸c˜oes did´aticas e centrados na concep¸c˜ao

construtivista do uso do computador em sala de aula que, segundo FUGIMOTO (2014),

amparam o uso de novos meios no ensino de matem´atica.

No Cap´ıtulo 2, dedica-se a informa¸c˜oes sobre alguns softwares matem´aticos, fo-

cando no estudo do FreeMat, onde s˜ao apresentados alguns dos seus comandos, necess´arios

para aplica¸c˜ao nas propostas metodol´ogicas.

No Cap´ıtulo 3, s˜ao abordados t´opicos sobre fun¸c˜oes, matrizes e sistemas lineares.

Dentro das matrizes, ´e apresentado uma aplica¸c˜ao na criptograﬁa, sendo tratados os siste-

mas poligr´aﬁcos baseados na multiplica¸c˜ao de matrizes. Nos sistemas lineares, descreve-se

os m´etodos de Cramer e de Gauss-Jordan. Os conceitos abordados, neste cap´ıtulo, s˜ao os

tratados no Ensino M´edio, por´em, o estudo de matrizes inversas e dos sistemas lineares,

aprofunda-se de modo a abranger propriedades n˜ao contempladas neste n´ıvel de ensino, ao

passo que, nas propostas, s˜ao apresentados meios para serem desenvolvidos na educa¸c˜ao

b´asica.

No Cap´ıtulo 4, s˜ao apresentadas trˆes propostas para aplica¸c˜ao do software Fre-

eMat no estudo de fun¸c˜oes, matrizes e sistemas lineares. A primeira proposta, aborda

atividades para plotagem gr´aﬁcas de fun¸c˜oes e delimita atividades para construir uma

fun¸c˜ao, e um programa computacional, que represente uma conta de ´agua, onde seja

reportado o valor cobrado para um determinado consumo em metros c´ubicos (m3). A se-

gunda proposta, aborda o ensino de matrizes, delineando atividades que partem do estudo

das opera¸c˜oes com matrizes e aplica¸c˜oes na criptograﬁa atrav´es dos sistemas poligr´aﬁcos.

Tamb´em, baseados nestes sistemas, prop˜oe-se atividades para constru¸c˜ao de programas

no FreeMat, para criptografar ou decifrar uma mensagem, quando inserido uma matriz

2

que a corresponde. A terceira proposta, apresenta atividades para resolu¸c˜ao de sistemas

lineares atrav´es dos m´etodos de Cramer e de Gauss-Jordan, ainda, prop˜oe-se a constru¸c˜ao

de programas atrav´es do FreeMat, para reportar as solu¸c˜oes de um sistema linear, quando

inserido a matriz dos coeﬁcientes e a matriz dos termos independentes. Dentre estas pro-

postas, apenas a primeira foi aplicada, em sala de aula, sendo em uma turma da primeira

s´erie do Ensino M´edio do Instituto Federal de Mato Grosso/Campus S˜ao Vicente.

Finalizamos este trabalho, apresentando, no Apˆendice A, a sintaxe dos programas

constru´ıdos na proposta, que acreditamos, poder ser inserido no ensino de matem´atica da

primeira e segunda s´erie do Ensino M´edio.

3

Cap´ıtulo 1

Ensino de matem´atica: do giz ao uso

do computador

O ensino de matem´atica tem necessitado da inser¸c˜ao de novos recursos e metodo-

logias pedag´ogicas, visto que, a utiliza¸c˜ao de ferramentes tecnol´ogicas na escola tornou-se

essencial e que os alunos dominam e interagem bem com estes recursos. As pr´aticas de

ensino da matem´atica, nas escolas de n´ıvel b´asico, n˜ao apresentam grandes diferen¸cas

das utilizadas antes do avan¸co da inform´atica, como exemplo, ´e frequente nas escolas o

ensino de constru¸c˜oes gr´aﬁcas no quadro utilizando a r´egua enquanto os softwares com-

putacionais de plotagem gr´aﬁca, com poderosos recursos de visualiza¸c˜ao, n˜ao s˜ao nem

apresentados aos alunos.

Conﬁrma-se a importˆancia da utiliza¸c˜ao de softwares, no que diz respeito o ensino

de fun¸c˜oes atrav´es das constru¸c˜oes gr´aﬁcas, quando deparado com as informa¸c˜oes do

Programa Nacional do Livro Did´atico (PNLD) de 2015, neste, s˜ao dados relevantes elogios

aos livros que aplicam tais recursos no desenvolvimento de suas atividades. Tamb´em,

s˜ao apresentadas cr´ıticas quanto as diﬁculdades de alguns autores ao explanar o uso de

softwares gr´aﬁcos, aliando, de forma coesa, com os conceitos e deﬁni¸c˜oes matem´aticas.

4

O uso de aplicativos computacionais, que permitem visualizar o gr´aﬁco

de fun¸c˜oes, ajuda tanto a perceber as propriedades dos seus v´arios tipos,

quanto a fazer experimentos com maior riqueza de exemplos. Por isso, ´e

elogi´avel a tendˆencia, observada em alguns materiais did´aticos destina-

dos ao ensino m´edio, de empregar os referidos aplicativos como recursos

para a aprendizagem da matem´atica [...] Al´em disso, softwares livres s˜ao

sugeridos para auxiliar o tra¸cado de gr´aﬁcos, o que ´e elogi´avel. Contudo,

nas convers˜oes entre as formas de representa¸c˜ao, nem sempre s˜ao levados

em considera¸c˜ao, de modo preciso, o dom´ınio, o contradom´ınio e a lei de

forma¸c˜ao das fun¸c˜oes apresentadas (BRASIL, 2014).

Atualmente, existem diversas pesquisas sobre softwares matem´aticos aplicados ao

ensino, tamb´em, orienta¸c˜oes de pr´aticas voltadas para o ensino de matem´atica utilizando-

os, dentre estas, no banco de trabalhos do Profmat, est˜ao dispostas v´arias disserta¸c˜oes

orientando pr´aticas atrav´es do Geogebra, sotware matem´atico para o ensino de geometria.

Nesse cap´ıtulo, ser˜ao descritos alguns conceitos do ensino de matem´atica, atrav´es

do uso de recursos computacionais; al´em disto, busca-se, orientar e facilitar a compreens˜ao

pedag´ogica da proposta para utiliza¸c˜ao do computador no ensino de matem´atica atrav´es

do software FreeMat, o qual ser´a apresentada adiante.

1.1 O uso de computadores no ensino de matem´atica

Com o crescimento do papel da inform´atica na sociedade e os computadores

tornando cada vez mais comuns nos lares da popula¸c˜ao brasileira, no ﬁnal do s´eculo XX,

passa a ser importante, e necess´ario, o uso de computadores e ensino de inform´atica nas

escolas. Por sua vez, depara-se com a necessidade de modiﬁcar o ensino para a inser¸c˜ao

destas ferramentas em sala de aula.

O mundo est´a mudando e tamb´em deve mudar a forma¸c˜ao que damos aos

nossos educandos, a ﬁm de que enfrentem e se desenvolvam plenamente

neste mundo. Precisamos capacit´a-los para que se apropriem dessas

tecnologias, de forma que as fa¸cam suas e as utilizem como ferramentas

de supera¸c`ao pessoal e de mudan¸ca social (LLANO, 2006).

Diante disto, mudan¸cas no ensino foram esperadas: escolas com um ensino mais

dinˆamico e diversiﬁcado, professores que dominassem novas metodologias e trouxessem

5

para o aluno novos caminhos visando alcan¸car o entusiasmo do discente e a motiva¸c˜ao

pela busca do saber, programas computacionais que facilitassem o entendimento do aluno,

enﬁm, um anseio pela mudan¸ca do ensino, uma mudan¸ca que fosse percebida e vivenciada

nas escolas. Por´em, ainda n˜ao vivencia-se isto, muitos docentes discriminam o uso da

tecnologia por n˜ao dominarem ou conhecerem meios para aliar conte´udos trabalhados em

sala de aula com os recursos tecnol´ogicos. Assim, mesmo com a mudan¸ca da sociedade na

utiliza¸c˜ao de recursos tecnol´ogicos, percebe-se um lento avan¸co das escolas neste aspecto.

Recordam-se casos de centros educacionais onde se inseriram os compu-

tadores e que, depois da emo¸c˜ao inicial, tudo continuou do mesmo jeito.

Quando acreditava-se que os aparelhos teriam em si o poder de gerar

esta mudan¸ca, percebeu-se que tais equipamentos nos enganaram, n˜ao

cumpriram a promessa de “modernizar” e “melhorar” a qualidade de

nossa educa¸c˜ao. O erro est´a em pensar que eles s˜ao “varinhas m´agicas”,

que a sua presen¸ca basta para transformar a realidade de uma institui¸c˜ao

educativa (LLANO, 2006).

Desta forma, exigˆencias para com os docentes, aﬁm de que, lecionem discipli-

nas do n´ucleo comum nas escolas de ensino b´asico, aliando suas aulas `as tecnologias da

informa¸c˜ao, tem tornado-se cada vez mais frequentes. Por´em, observa-se o uso destas tec-

nologias de forma limitada, sem a explora¸c˜ao de mecanismos facilitadores do ensino apren-

dizagem. Atividades e exerc´ıcios, que poderiam ser mais aprofundados com a utiliza¸c˜ao

destes recursos, interligando-os `as disciplinas, s˜ao apenas trabalhadas de forma mecˆanica

e repetitiva, ofuscando sua aplica¸c˜ao, enquanto recurso para um ensino dinˆamico, e tra-

zendo um ensino tradicional com uma roupagem diferente.

Muitas vezes, os professores, premidos pelas exigˆencias oﬁciais e instituci-

onais, levam seus alunos a laborat´orios de inform´atica sem planejar ativi-

dades que desenvolvam competˆencias, tais como a de formular hip´oteses

ou de argumentar. Aprendem a acessar um determinado software e es-

tabelecem tarefas em que os estudantes v˜ao apenas digitar comandos e

visualizar as respostas (CURY, 2004).

Quanto ao ensino de matem´atica na educa¸c˜ao b´asica, este, pode-se tornar mais

atrativo quando empregado o uso do computador e, a inser¸c˜ao deste recurso, proporciona

ao discente, al´em do aprendizado matem´atico, a aquisi¸c˜ao de novas habilidades sobre

uso de ferramentas computacionais. Quando bem orientado, os discentes podem aplicar

6

estas ferramentas na solu¸c˜ao de problemas do seu cotidiano, bem como, apresentarem mais

facilidade quanto `a aquisi¸c˜ao e ﬁxa¸c˜ao de conte´udos matem´aticos que lhe s˜ao apresentados.

Cabe `a matem´atica do Ensino M´edio apresentar ao aluno o conhecimento

de novas informa¸c˜oes e instrumentos necess´arios para que seja poss´ıvel

a ele continuar aprendendo. Saber aprender ´e a condi¸c˜ao b´asica para

prosseguir aperfei¸coando-se ao longo da vida. Sem d´uvida, cabe a todas

as ´areas do ensino m´edio auxiliar no desenvolvimento da autonomia e

da capacidade de pesquisa, para que cada aluno possa conﬁar em seu

pr´oprio conhecimento (BRASIL, 2000).

Ao aplicar o uso de computadores no ensino, al´em de um conhecimento pr´evio

para lidar com alguns softwares, exige-se dos docentes, abordagens nas aulas que nor-

teiem o discente na constru¸c˜ao do conhecimento, utilizando esta ferramenta n˜ao apenas

para conseguir resultados, mas, um elo entre discuss˜oes, interpreta¸c˜oes, constru¸c˜oes e os

t´opicos estudados. Por´em, quando aplicados, atividades mais elaboradas e com tarefas

que sobreponha atividades mecˆanicas s˜ao pouco evidenciadas.

N˜ao ´e necess´ario que o professor seja um especialista em tecnologia, mas

´e interessante que ele a conhe¸ca e domine, de modo a utiliz´a-lo numa

perspectiva cr´ıtica. Para fazer uso adequado dos recursos tecnol´ogicos e

para facilitar o desenvolvimento das sequˆencias did´aticas, ´e importante

que o professor conhe¸ca o modo de opera¸c˜ao t´ecnica (comandos, fun¸c˜oes

e linguagens) de forma a explorar suas possibilidades e identiﬁcar as li-

mita¸c˜oes [...] o uso da tecnologia, e, em particular, do computador na

educa¸c˜ao, pode ser considerado uma inova¸c˜ao e, como toda inova¸c˜ao, ela

s´o ser´a integrada `a pr´atica proﬁssional ap´os um processo longo de apro-

pria¸c˜ao e de utiliza¸c˜ao frequente em situa¸c˜oes diversiﬁcadas. O processo

de integra¸c˜ao envolve aspectos tecnol´ogicos, pedag´ogicos e, tamb´em, de

gest˜ao. Al´em de dominar tecnologia e de conhecer os softwares dis-

pon´ıveis, ´e necess´ario incorpor´a-los ao curr´ıculo (BELINE, 2010).

Por mais que existam uma gama de softwares educacionais com grandes poten-

cialidades voltadas para o ensino de matem´atica, o despreparo ou desconhecimento dos

docentes de como aliar suas aulas com estes softwares, s˜ao alguns dos fatores que acar-

retam na sua utiliza¸c˜ao de forma mecˆanica, semelhante ao utilizar uma calculadora para

7

obter resultados ou de resolver uma equa¸c˜ao no caderno, deixando as perspectivas de uso

dessas ferramentas em sala de lado.

Quanto aos recursos did´aticos, o uso de calculadora e de outros recursos

tecnol´ogicos ainda ´e um terreno insuﬁcientemente explorado no ensino

m´edio atual. Por exemplo, nas obras did´aticas, ´e sempre presente o

emprego da calculadora, por´em visa-se mais `a realiza¸c˜ao e conferˆencia

de c´alculos em detrimento de outras possibilidades de trabalho did´atico

com essa ferramenta tecnol´ogica. Entre os outros recursos tecnol´ogicos,

de forma geral, h´a boas sugest˜oes de utiliza¸c˜ao de softwares livres. (BRA-

SIL, 2014).

Logo, atividades orientadas e fundamentadas para utiliza¸c˜ao do computador s˜ao

necess´arias, assim como, o conhecimento pelo docente de recursos computacionais que

sirvam como ponte para desmistiﬁcar o ensino de matem´atica nas escolas p´ublicas e torn´a-

lo mais atrativo, podendo ser atrav´es da utiliza¸c˜ao de softwares em atividades aplicadas

que busquem desenvolver novos olhares sobre a matem´atica e suas aplica¸c˜oes.

Os professores necessitam, portanto, conhecer as tecnologias dispon´ıveis

e estudar possibilidades de uso dessa ferramenta como mais um recurso

did´atico para o processo de aprendizagem. ´E importante ressaltar que

n˜ao se trata de tornar a aprendizagem mais f´acil aligeirando o ensino.

Ao contr´ario, a aprendizagem deve ser favorecida com situa¸c˜oes que a

tornem mais signiﬁcativa e que os alunos possam interagir entre si e

com a m´aquina, construindo conhecimentos, vivenciando situa¸c˜oes que,

muitas vezes, n˜ao tinham sentido, ou tinham outro sentido, no ambiente

papel e l´apis (BELINE, 2010).

Ressalta-se que, professores de matem´atica ainda insistem em pr´aticas docentes

norteadas pela ementa, onde, pr´aticas baseadas na realiza¸c˜ao de projetos podem atrasar

o cumprimento da mesma. Desta forma, a incorpora¸c˜ao de um ensino desmistiﬁcado

atrav´es da utiliza¸c˜ao do computador, necessita de tempo e pr´aticas diferenciadas, exigindo

do professor ﬂexibilidade quanto a matriz curricular, visto que, quando se trabalha com

um software espec´ıﬁco, o professor ter´a o desaﬁo de ensinar o aluno a trabalhar com o

programa, bem como, vincular atividades que tenha por ﬁnalidade o ensino ou ﬁxa¸c˜ao de

certo conte´udo matem´atico.

8

Vale insistir que a atualiza¸c˜ao curricular n˜ao deve signiﬁcar comple-

menta¸c˜ao de ementas, ao se acrescentarem t´opicos a uma lista de assun-

tos. Ao contr´ario, ´e preciso superar a vis˜ao enciclop´edica do curr´ıculo,

que ´e um obst´aculo `a verdadeira atualiza¸c˜ao do ensino, porque estabelece

uma ordem t˜ao artiﬁcial quanto arbitr´aria, em que pr´e-requisitos fecha-

dos pro´ıbem o aprendizado de aspectos modernos antes de se completar

o aprendizado cl´assico e em que os aspectos “aplicados” ou tecnol´ogicos

s´o teriam lugar ap´os a ciˆencia pura ter sido extensivamente dominada.

Tal vis˜ao diﬁculta tanto a organiza¸c˜ao dos conte´udos escolares quanto a

forma¸c˜ao dos professores (BRASIL, 2000).

Para a implementa¸c˜ao efetiva das tecnologias da informa¸c˜ao em sala, ser´a pre-

ciso, al´em de um olhar especial para o curr´ıculo escolar, tamb´em, atualiza¸c˜oes e novas

metodologias de ensino. E, ao inserir o uso do computador em sala, h´a necessidade de

desenvolver trabalhos orientados aos alunos em rela¸c˜ao ao uso correto dessas tecnologias

e suas aplica¸c˜oes junto aos conte´udos abordados, buscando interligar os conte´udos ma-

tem´aticos presentes nos planejamentos com os softwares presentes no universo da internet.

Esse impacto da tecnologia, cujo instrumento mais relevante ´e hoje o

computador, exigir´a do ensino de matem´atica um redirecionamento sob

uma perspectiva curricular que favore¸ca o desenvolvimento de habilida-

des e procedimentos com os quais o indiv´ıduo possa se reconhecer e se

orientar nesse mundo do conhecimento em constante movimento (BRA-

SIL, 2000).

Quanto as pr´aticas orientadas para o uso e ensino desses recursos, de modo a

facilitar e orientar a utiliza¸c˜ao de meios tecnol´ogicos no ensino de matem´atica, a execu¸c˜ao

de projetos dentro da concep¸c˜ao construtivista ´e um meio para alcan¸car e inserir tais

pr´aticas nas escolas, al´em de conceber espa¸cos para atividades em grupos, podendo ser

atividades dinˆamicas ou interdisciplinares inseridas no meio tecnol´ogico.

9

O desenvolvimento de projetos, conduzidos por grupos de alunos com a

supervis˜ao de professores, pode dar oportunidade de utiliza¸c˜ao dessas e

de outras tecnologias, especialmente no Ensino M´edio. Isso, ´e claro, n˜ao

ocorre espontaneamente, mas sim como uma das iniciativas integrantes

do projeto pedag´ogico de cada unidade escolar, projeto que pode mesmo

ser estimulado pelas redes educacionais. Para a elabora¸c˜ao de tal projeto,

pode-se conceber, com vantagem, uma nuclea¸c˜ao pr´evia de disciplinas de

uma ´area, como a matem´atica e ciˆencias da natureza, articulando-se em

seguida com as demais ´areas (BRASIL, 2000).

Neste contexto, atividades voltadas para a introdu¸c˜ao do computador em salas

de aula s˜ao um anseio e, estas pr´aticas, tornam o ensino mais atrativo e desaﬁador, dentre

v´arios recursos do computador, cabe aos docentes atualizarem e dominarem a utiliza¸c˜ao

de softwares voltados para a educa¸c˜ao.

Quanto a quantidade de softwares voltados para o ensino, a matem´atica ´e mais

beneﬁciada, sendo encontrados softwares para esbo¸co gr´aﬁco, resolu¸c˜ao de equa¸c˜oes, es-

tudo do c´alculo e diversos programas para atividades l´udicas.

Cabe ressaltar que a matem´atica ´e uma ´area privilegiada tanto pela

quantidade de materiais (softwares) existentes quanto de pesquisas re-

lacionadas ao uso dos mesmos materiais. Entretanto, poucas pesquisas

tratam do uso que o professor faz de um software em sala e, tamb´em,

poucos s˜ao os textos destinados a difundir as pesquisas para os profes-

sores (BELINE, 2010).

Desta forma, a quantidade de softwares voltados para matem´atica e seu ensino,

bem como, a falta de conhecimento e despreparo, por parte de uma parcela dos docentes

do ensino b´asico, de como lidar com estes programas nas aulas de matem´atica ou no uso do

computador em sala, refor¸ca a importˆancia de orienta¸c˜oes voltadas para docentes quanto

a utiliza¸c˜ao de softwares e a difus˜ao destas pr´aticas no ensino b´asico, visto a importˆancia

e crescente inser¸c˜ao das tecnologias da informa¸c˜ao nas escolas.

10

Cap´ıtulo 2

FreeMat: dentre v´arios softwares

pagos, uma escolha livre

Neste cap´ıtulo, ser˜ao apresentados alguns softwares aplicados na matem´atica,

utilizados para o estudo de ´areas como: ´algebra, geometria, equa¸c˜oes diferenciais, dentre

outras; em especial, destes softwares, ser´a dado ˆenfase ao FreeMat, sendo apresentado um

breve hist´orico e comandos b´asicos para sua utiliza¸c˜ao no que tange, fun¸c˜oes e matrizes.

Os comandos apresentados tamb´em servir˜ao de base para entendimento e aplica¸c˜ao das

propostas, que ser˜ao descritas no Cap´ıtulo 4.

Diante de uma grande quantidade de softwares aplicados `a matem´atica e ao en-

sino de matem´atica, destacam-se alguns pesquisados e comentados em artigos cient´ıﬁcos

ou trabalhos acadˆemicos, tais como SANTOS (2010) e BATISTA (2004), destes, devido

alguns softwares serem pagos e diﬁcilmente utilizados pelas escolas p´ublicas, existem al-

ternativas similares e livres no mercado para o uso destas institui¸c˜oes ou pelos docentes

das mesmas.

Na Tabela 2.1, s˜ao listados alguns softwares matem´aticos gratuitos, incluindo os

conte´udos abordados pelos mesmos e os sistemas operacionais compat´ıveis. Al´em dos

softwares citados na Tabela 2.1, existem outros de natureza comercial, tais como: Cabri

Geom´etre, Derive, MS-Excel, Geospace, Geoplan, Mathematica, Maple, Matlab, entre

outros.

11

Software
Geogebra
Calc 3D
FreeMat
kmplot
Kseg
Maxima
WinGeo
Winplot
R´egua e Compasso
Octave
Scilab

Aplica¸c˜oes
Geometria, ´algebra e c´alculo
´Algebra linear, geometria plana e espacial

Sistema operacional
Windows, Linux, MacOS X
Windows e MacOS X

Gr´aﬁcos de rela¸c˜oes, c´alculo num´erico, ´algebra Windows, Linux e MacOS X

Linux e MacOS X
Windows, Linux e MacOS X
C´alculo, equa¸c˜oes diferencias e ´algebra linear Windows, Linux e MacOS X

Gr´aﬁcos de rela¸c˜oes
Geometria euclidiana

Geometria espacial
Geometria espacial e plana, gr´aﬁcos de rela¸c˜oes
Geometria plana
C´alculo num´erico

Windows e MacOS X
Windows e MacOS X
Windows, Linux e MAcOS X
Windows, Linux e MacOS X
´Algebra, c´alculo num´erico, gr´aﬁcos de rela¸c˜oes Windows, Linux e MacOS X

Tabela 2.1: Softwares matem´aticos livres

Devido a proximidade com objeto de estudo que ser´a apresentado nos pr´oximos

cap´ıtulos, destaca-se o Matlab, uma ferramenta matem´atica aplicada no c´alculo num´erico,

sendo referˆencia entre os softwares matem´aticos desta ´area. Este ´e um software pago

segundo uma licen¸ca comercial para Windows, Linux e outras plataformas, e ´e produzido

pela empresa Mathworks. Com o Matlab, ´e poss´ıvel esbo¸car gr´aﬁcos de fun¸c˜oes, resolver

equa¸c˜oes diferenciais ordin´arias, derivar e integrar fun¸c˜oes.

O Matlab (acrˆonimo de MATrix LABoratory) ´e um software compu-

tacional conhecido mundialmente como uma excelente ferramenta para

solu¸c˜oes de problemas matem´aticos, cient´ıﬁcos e tecnol´ogicos, que possui

comandos muito pr´oximos da forma como escrevemos as express˜oes ma-

tem´aticas, podem ser usado como prancheta de rascunhos para avaliar

express˜oes digitadas nas linhas de comando, ou para executar programas

grandes previamente escritos, pois ele possui um ambiente de desenvol-

vimento integrado embutido, um depurador de informa¸c˜oes (NOBRE,

2014).

Ainda,

Conv´em observar que esse sistema n˜ao ´e desenhado especialmente para

atingir objetivos pedag´ogicos, mas ´e projetado para atender `as necessi-

dades do proﬁssional na resolu¸c˜ao de problemas. ´E certo que a utiliza¸c˜ao

adequada desse sistema pode contribuir muito para cientistas, professo-

res e alunos a n´ıvel de gradua¸c˜ao ou proﬁssional (NOBRE, 2014).

Similar ao Matlab, existem alguns softwares matem´aticos distribu´ıdos gratuita-

mente, destes, diante dos citados na Tabela 2.1, cabe destacar o FreeMat, um software

12

que embora n˜ao tenha todas as suas potencialidades, tem grandes recursos e aproxima-se

muito do mesmo.

2.1 FreeMat

O FreeMat ´e um pacote computacional num´erico desenvolvido pela Samitbasu,

tem s´ıntese e 95% da compatibilidade dos recursos iguais ao do Matlab, tendo como

plataformas suportadas: Windows, MAC OS X e Linux. Por ser um software livre dis-

pon´ıvel sob a Licen¸ca P´ublica Geral (GPL), ´e poss´ıvel baix´a-lo gratuitamente atrav´es da

seguinte p´agina da internet, http://freemat.sourceforge.net, sendo, a vers˜ao 4.2, a atual

at´e a dada deste trabalho. Informa¸c˜oes gerais sobre o software e seus desenvolvedores s˜ao

encontraddas em FREEMAT (2014).

O FreeMat ´e um programa de c´alculo num´erico para Matem´atica e

ciˆencias aﬁns, que funciona interativamente, baseado em matrizes, per-

mitindo a visualiza¸c˜ao gr´aﬁca de v´arios dos seus objetos. O FreeMat

´e r´apido e simples, resolvendo problemas num´ericos em tempo menor

que o exigido em uma linguagem de programa¸c˜ao como C ou Fortran

(SODRE, 2014).

Com o FreeMat ´e poss´ıvel plotar gr´aﬁcos 2D e 3D, realizar diversas opera¸c˜oes

com matrizes e polinˆomios, trabalhar com fun¸c˜oes, podendo realizar um tratamento mais

aprofundado como derivar, integrar fun¸c˜oes e resolu¸c˜ao de equa¸c˜oes diferenciais. Em

SHARMA (2014), ´e dado maior ˆenfase e apresentado comandos para estes tratamentos

gr´aﬁcos e alg´ebricos no software.

Pela sua grande quantidade de recursos e similaridade com o Matlab, o FreeMat

pode ser aplicado tanto no ensino b´asico quanto no ensino superior. Observa-se que, para

ser aplicado no ensino b´asico, foco de estudo deste trabalho, muitos de seus comandos s˜ao

simples e de f´acil programa¸c˜ao, podendo ser trabalhado sem um estudo minucioso de seu

tutorial, bem como, ´e gratuito, leve e tem suporte para o sistema Linux, utilizado pelas

escolas p´ublicas.

Por ser muito f´acil de usar, a linguagem ´e ideal para uso educacional e

para desenvolver rapidamente prot´otipos de novos programas [...] sis-

tema computacional ﬂex´ıvel capaz desenvolver essencialmente qualquer

problema t´ecnico (NOBRE, 2014).

13

Ao iniciar o FreeMat, o usu´ario depara-se com a Interface do Programa (Figura

2.1), tal Interface est´a em l´ıngua inglesa e nela est´a disposta a janela de comandos, uma

tela branca onde devem ser digitados comandos para realiza¸c˜ao de a¸c˜oes matem´aticas.

Tais comandos, s˜ao digitados no prompt, isto ´e, inseridos na janela de comandos ap´os o

seguinte sinal: “−− >”; em seguida, pressiona-se a tecla Enter, para que sejam reportadas

as respostas, que ser˜ao apresentadas na pr´opria janela precedidas pelo anagrama “ans”

(answer, que em portuguˆes signiﬁca resposta).

Observa¸c˜ao 2.1. Durante a apresenta¸c˜ao das propostas utilizando o FreeMat, ao serem

descritos a inser¸c˜ao de n comandos referente `a execu¸c˜ao de uma a¸c˜ao matem´atica, estes,

ser˜ao apresentados dentro de um retˆangulo, como segue

comando 1

comando 2
...

comando n

subentendendo-se que, ap´os cada comando inserido, deve-se clicar na tecla Enter.

Figura 2.1: Janelas dispostas na Interface do FreeMat

Na parte superior da Interface, encontram-se as Barra de Menu e Ferramentas, no

canto esquerdo da Interface, s˜ao dispostas trˆes janelas: History, File Browser e Variables

que, respectivamente, corresponde ao armazenamento do hist´orico dos ´ultimos comandos

14

digitados, diret´orio corrente do programa e o espa¸co de trabalho onde se visualizam dados

e vari´aveis, como mostra a Figura 2.1.

Ao plotar um gr´aﬁco de uma rela¸c˜ao matem´atica, este, ´e apresentado em uma

nova janela aberta automaticamente pelo software. Na parte superior desta janela gr´aﬁca,

encontra-se o Menu de Ferramentas, e nele s˜ao dispostos sequencialmente as seguin-

tes ferramentas: save (salvar gr´aﬁco), close (fechar gr´aﬁco), copy (copiar gr´aﬁco), zoom

(aumentar gr´aﬁco), rotate(rotacionar gr´aﬁco), camera rotate (rotacionar cˆamera) e sam-

ple (mostrar pontos do gr´aﬁco), como observa-se na Figura 2.2.

Figura 2.2: Janela gr´aﬁca do FreeMat

Segundo SODRE (2014), a realiza¸c˜ao de opera¸c˜oes b´asicas no FreeMat assemelham-

se com as de uma calculadora cient´ıﬁca, ou seja, opera¸c˜oes na forma usual. Na Tabela

2.2, s˜ao apresentados os comandos utilizados para estas opera¸c˜oes entre n´umeros reais e,

tamb´em, com matrizes. Exemplos destas opera¸c˜oes b´asicas realizadas no FreeMat, com

n´umeros reais, podem ser vistos na Figura 2.3 e, no caso das opera¸c˜oes com matrizes,

exemplos detalhados foram constru´ıdos no Cap´ıtulo 4 deste trabalho.

Opera¸c˜ao
Adi¸c˜ao
Subtra¸c˜ao
Multiplica¸c˜ao
Divis˜ao
Potencia¸c˜ao

Operador aritm´etico N´umeros reais Matrizes

+
-
*
/
^

2+3
2-3
2*3
2/3
2^3

A+B
A-B
A*B
-
A^3

Tabela 2.2: Comandos utilizados nas opera¸c˜oes com n´umeros reais e matrizes

Na resolu¸c˜ao de express˜oes que envolvam chaves, colchetes e parˆenteses; como

o FreeMat s´o possibilita utilizar parˆenteses, este ordenar´a as opera¸c˜oes. SODRE (2014)

15

explica que, “Para realizar c´alculos b´asicos no FreeMat, basta inserir as opera¸c˜oes nas

formas usuais, lembrando que parˆenteses alteram a precedˆencia nas opera¸c˜oes realizando

primeiro as opera¸c˜oes envolvidas por eles”.

Exemplo 2.2. Para determinar o valor da express˜ao

[(2 + 3) · 2]2 − 1
3

,

no FreeMat, o comando correspondente seria:

(((2+3)*2)^2-1)/3

Figura 2.3: Opera¸c˜oes com n´umeros reais desenvolvidas no FreeMat

Quanto as matrizes, estas constituem a estrutura b´asica do FreeMat, por isso,

ele permite v´arias maneiras de manipul´a-las. Para inserir uma matriz no FreeMat, entre

colchetes, os elementos de uma mesma linha devem estar separados por um espa¸co e as

linhas devem estar separadas por ponto e v´ırgula.

Exemplo 2.3. Ao trabalhar com matrizes no FreeMat, para inserir a matriz quadrada

B =





1 4

2 1



 ,

16

deve-se digitar o seguinte comando:

B=[1 4; 2 1 ] .

Relativo ao suporte e acesso do tutorial do FreeMat, na janela de comandos,

digita-se helpwin;

isto ajudar´a quanto d´uvidas e desenvolvimento de opera¸c˜oes mais

complexas, bem como, fornecer´a todas as ferramentas que o FreeMat disp˜oe.

Para um estudo introdut´orio, a Tabela 2.3, apresenta algumas fun¸c˜oes e coman-

dos b´asicos utilizadas no FreeMat para manipula¸c˜ao de gr´aﬁcos, matrizes e fun¸c˜oes. Os

comandos citados na Tabela 2.3, s˜ao referentes aos apresentados em FIPIAK (2012),

SHARMA (2014) e SODRE (2014).

Fun¸c˜oes

helpwin
clear
clc
plot(x,y)
det(A)

Descri¸c˜ao

Abre um tutorial do programa em l´ıngua inglesa
Limpa as vari´aveis armazenadas
Limpa a janela de comandos
Plota um gr´aﬁco 2D para os pares ordenados (x, y)
Calcula o determinante da matriz A

format short Conﬁgura o FreeMat para reportar 4 casas decimais ap´os a v´ırgula
format long Conﬁgura o FreeMat para reportar 16 casas decimais ap´os a v´ırgula

inv(A)
rank(A)
A’
eye(n)
zeros(m,n)
size[A]
C=[A B]
;
mod(a,n)

mod(A,n)

disp
x=input

Determina a matriz inversa da matriz A
Determina o posto da matriz A
Determina a matriz transposta da matriz A
Cria a matriz identidade de ordem n
Cria a matriz nula de ordem m × n
Informa a quantidade de linhas e colunas da matriz A
Determina a matriz em blocos C = [A|B]
Quando inserido ap´os um comando, n˜ao reportar´a os resultados
Determina o inteiro n˜ao negativo, menor do que n, b =mod(a, n)
congruente `a a m´odulo n
Determina a matriz B =mod(A, n) cujas entradas s˜ao congruentes,
respectivamente, as entradas da matriz A m´odulo n
Utilizado para apresentar mensagens de textos no programa
Entrada de dados para uma vari´avel x via valor digitado

Tabela 2.3: Algumas fun¸c˜oes e comandos utilizados no FreeMat

17

2.2 Programa¸c˜ao em FreeMat

O FreeMat ´e uma ferramenta e uma linguagem de programa¸c˜ao, por possuir uma

biblioteca de fun¸c˜oes predeﬁnidas, torna as tarefas de programa¸c˜ao t´ecnica mais f´aceis.

Os comandos do FreeMat s˜ao normalmente digitados na Janela de Comandos,

onde uma ´unica linha de comando ´e introduzida e processada imediatamente, por´em,

o FreeMat ´e capaz de executar sequˆencias de comandos armazenadas em arquivos com

extens˜ao .m, para isto, deve-se acessar o Menu de Ferramentas e selecionar a op¸c˜ao editor.

Ap´os selecionado, abrir´a uma nova janela para edi¸c˜ao de textos, tal janela, apresentada na

Figura 2.4, ´e espec´ıﬁca para programa¸c˜ao e os comandos dever˜ao ser digitados na mesma.

Portanto, por meio do editor de texto, ´e poss´ıvel construir um programa em FreeMat

atrav´es dos mesmos comandos e sintaxe dos utilizados na janela de comandos.

Figura 2.4: Janela de edi¸c˜ao de texto

Para programa¸c˜ao em FreeMat, existem dois tipos de arquivos: script e f unction.

Os arquivos script s˜ao ´uteis quando se deseja efetuar uma sequˆencia de comandos com

muita frequˆencia, pois, toda vez que for chamado, efetua a lista dos comandos como se

eles fossem inseridos sequencialmente, via teclado. Os arquivos tipo f unction, admitem

parˆametros de entrada, retornam valores e possuem vari´aveis locais. O ´ultimo arquivo

ser´a o que utilizaremos, no Cap´ıtulo 4.

Para salvar um arquivo digitado no editor do FreeMat, na barra do Menu do

18

editor, seleciona-se a op¸c˜ao F ile e clica-se em Save ou Save As, como mostra a Figura

2.5. Ap´os, deve-se escolher um diret´orio para salvar o arquivo, sugere-se escolher prefe-

rencialmente o diret´orio onde esteja instalado o FreeMat.

Figura 2.5: Local para salvar arquivos digitados na janela de edi¸c˜ao

Em particular, para salvar um arquivo script, deve-se escolher um nome para o

arquivo e salv´a-lo na extens˜ao .m. Para utiliz´a-lo, selecione o diret´orio onde foi salvo,

por exemplo, escolher o diret´orio P rogram F iles/F reeM at, como mostra a Figura 2.6,

e digita-se na janela de comandos o nome com que foi salvo, assim, todas as sequˆencias

de comandos ser˜ao executadas.

Figura 2.6: Diret´orios do FreeMat

19

J´a, para salvar programas em arquivos tipo f unction, o procedimento ´e similar

e explicaremos com mais detalhes, a continua¸c˜ao: Na primeira linha do editor deve-se

escrever:

function nome do arquivo

e o arquivo de ser salvo com o nome descrito. Por exemplo, ao digitar na primeira linha

function resultado

para salvar este arquivo, deve-se escolher o diret´orio corrente onde est´a instalado o Fre-

eMat (como foi observado na Figura 2.6), salvando-o com o nome: resultado.m. Para

executar a fun¸c˜ao, basta digitar na janela de comandos a palavra: resultado.

Quanto aos operadores utilizados na programa¸c˜ao, a Tabela 2.4 apresenta alguns

operadores l´ogicos e, a Tabela 2.5, operados relacionais.

Descri¸c˜ao
e
ou

operador l´ogico
&
||

Tabela 2.4: Operadores l´ogicos

Descri¸c˜ao
igual a
maior do que
maior ou igual a
menor do que
menor ou igual a
diferente a

operador relacional
==
>
>=
<
<=
∼=

Tabela 2.5: Operadores relacionais

2.3 Comandos de repeti¸c˜ao e de condi¸c˜ao

Na programa¸c˜ao, existem comandos espec´ıﬁcos que controlam o ﬂuxo e especi-

ﬁcam a ordem. Tais comandos s˜ao chamados como comandos de condi¸c˜ao e comandos

de repeti¸c˜ao, os quais, no FreeMat, s˜ao os mesmos utilizados no Matlab e funcionam de

forma semelhante aos usados na linguagem C, por´em, com uma estrutura diferente.

20

2.3.1 Comandos de condi¸c˜ao

Relativo aos comandos de condi¸c˜ao, neste trabalho, ser˜ao abordados os la¸cos if,

else e elseif (se, sen˜ao, sen˜ao se). O comando if, avalia uma express˜ao condicional

1 e, executa uma sequˆencia de comandos, se esta condi¸c˜ao ´e verdadeira. A forma geral

deste comando ´e a seguinte:

if express~ao-condicional

sequ^encia de comandos

end

Exemplo 2.4. Inserido a sequˆencia de comandos

if x>10

y=10

end

tem-se o seguinte: se a condi¸c˜ao x > 10 for verdadeira, ent˜ao y = 10.

O comando elseif, avalia uma express˜ao condicional considerando a possibili-

dade de ela ser falsa. Se o comando if diz o que fazer quando a condi¸c˜ao ´e verdadeira, o

comando elseif permite executar uma sequˆencia de comandos se a condi¸c˜ao if ´e falsa.

A forma geral deste comando ´e a seguinte:

if express~ao-condicional

sequ^encia de comandos

elseif express~ao-condicional

sequ^encia de comandos

end

1Entende-se por express˜ao condicional, qualquer express˜ao que resulte em uma resposta do tipo ver-

dadeiro ou falso e constru´ıda utilizando operadores matem´aticos, relacionais ou l´ogicos.

21

Exemplo 2.5. Inserido a sequˆencia de comandos:

if x>10

y=10

elseif x<=10

y=-10

end

tem-se o seguinte: se a condi¸c˜ao x > 10 for falsa, ent˜ao y = −10.

O comando else, ´e utilizado ap´os as express˜oes condicionais deﬁnidas por if

e elseif. O comando else executa uma sequˆencia de comandos, quando as condi¸c˜oes

anteriores s˜ao falsas. A forma geral ´e a seguinte:

if express~ao-condicional

sequ^encia de comandos

elseif express~ao-condicional

sequ^encia de comandos

else express~ao-condicional

sequ^encia de comandos

end

Exemplo 2.6. Inserido a sequˆencia de comandos

if x>10

y=10

elseif x<10

y=-10

else x=10

y=0

end

tem-se o seguinte: se a condi¸c˜ao x > 10 e x < 10 forem falsas, ent˜ao y = 0.

22

2.3.2 Comando de repeti¸c˜ao

Relativo aos comandos de repeti¸c˜ao, neste trabalho, ser˜ao abordados os la¸cos for

e while.

O comando while, avalia uma express˜ao condicional e executa uma sequˆencia

de comandos enquanto essa condi¸c˜ao for verdadeira. Ou seja, ao ﬁnal da sequˆencia de

comandos, o comando while testa a express˜ao condicional para saber se deve ou n˜ao

executar novamente aquela sequˆencia de comandos. A forma geral de um comando while

´e:

while (express~ao condicional)

sequ^encia de

comandos

end

O comando for ´e um controlador de ﬂuxo que serve para repetir uma sequˆencia

de comandos diversas vezes. A forma geral de um comando for ´e:

for var´ıavel = valor inicial: valor final

sequ^encia de comandos

end

Com estas informa¸c˜oes ´e poss´ıvel utilizar tal software para aplica¸c˜ao superﬁcial

em conte´udos do ensino b´asico, observando que s˜ao in´umeras as fun¸c˜oes que o programa

disp˜oe. Para uma aplica¸c˜ao e estudo mais aprofundado, ´e necess´ario, al´em dos conhe-

cimentos destes comandos b´asicos, tamb´em, dom´ınio da parte alg´ebrica e geom´etrica do

conte´udo a ser desenvolvido.

23

Cap´ıtulo 3

T´opicos de Matem´atica a serem

aplicados no FreeMat

Neste cap´ıtulo, ser˜ao apresentados deﬁni¸c˜oes e propriedades elementares das

fun¸c˜oes, matrizes, determinantes e sistemas lineares, na qual, juntamente com os exem-

plos abordados no cap´ıtulo, ser˜ao utilizadas na proposta para utiliza¸c˜ao do FreeMat no

ensino de matem´atica. As propriedades, deﬁni¸c˜oes e teoremas matem´aticos apresenta-

das, possuem como referˆencias: BOLDRINI (1980), CALLIOLI (2000), HEFEZ (2012),

HOWARD (2001), IEZZI (2002), LIMA (2013) e SILVA (2007).

De agora em diante, utilizaremos as nota¸c˜oes N, Z, R e Zn (n ≥ 2), para indicar

o conjunto dos n´umeros naturais, inteiros, reais e dos inteiros m´odulo n, respectivamente.

3.1 Fun¸c˜ao

Data-se o primeiro aparecimento da representa¸c˜ao de uma fun¸c˜ao h´a 2000 a.c,

de forma intuitiva, segundo MARIANI (2015), foi encontrado nas t´abuas babilˆonicas em

seus c´alculos com tabelas sexagesimais de quadrados e de ra´ızes quadradas. Quanto a

origem do conceito de fun¸c˜ao, atribui-se ao matem´atico Nicole Oresme (1323 - 1382), que

descreveu graﬁcamente a dependˆencia entre velocidade e tempo usando linhas verticais e

horizontais. Com o avan¸co da matem´atica, consequentemente, houve contribui¸c˜oes para

o desenvolvimento das fun¸c˜oes, at´e que se chegasse nos conceitos utilizados atualmente.

Deﬁni¸c˜ao 3.1. Sejam dois conjuntos n˜ao vazios, A e B, e f ⊂ A × B. A terna (A, B, f )

´e uma fun¸c˜ao de A em B se, para todo x ∈ A, existe um ´unico y ∈ B tal que (x, y) ∈ f.

24

O conjunto A ´e denominado dom´ınio da fun¸c˜ao e o conjunto B ´e denominado

contradom´ınio da fun¸c˜ao. O conjunto dos elementos y ∈ B, para os quais existe x ∈ A,

tal que (x, y) ∈ f , ´e chamado de conjunto imagem e ser´a denotado por Im(f ).

A terna (A, B, f ) ´e usualmente denotada por f : A −→ B e lˆe-se: fun¸c˜ao f de A

em B. Neste contexto, se (x, y) ∈ f , denomina-se y como imagem de x pela aplica¸c˜ao de

f e escreve-se f (x) = y, onde, x ´e chamado de vari´avel independente e y ´e chamado de

vari´avel dependente. Mais precisamente, representa-se

f : A −→ B

x (cid:55)−→ f (x)

como sendo a fun¸c˜ao f de A em B tal que a cada x ∈ A, faz corresponder um ´unico

elemento f (x) ∈ B.

O gr´aﬁco de f ´e o conjunto

graff = {(x, y) ∈ A × B : y = f (x)}.

Se A e B s˜ao subconjuntos de R, a fun¸c˜ao f : A −→ B chama-se fun¸c˜ao real de

vari´avel real e, o seu gr´aﬁco ´e representado no plano cartesiano.

Exemplo 3.2. A fun¸c˜ao real de vari´avel real f : R \ {0} −→ R, deﬁnida por f (x) =

1
|x|

,

possui por imagem o conjunto (0, +∞).

Exemplo 3.3. Para alugar um carro certa pessoa disp˜oe de duas Locadoras, A e B. A

locadora de autom´oveis A, cobra uma taxa de 20 reais mais 2 reais por quilˆometro rodado,

ap´os a retirada do carro da garagem. J´a, a locadora B, cobra uma taxa de 50 reais mais

1 real por quilˆometro rodado. Nota-se que, a locadora A tem uma taxa menor que a sua

concorrente, diante disso, existir´a um momento no qual a locadora B torna-se vi´avel?

A princ´ıpio parece ser que a locadora A ´e favor´avel. No entanto, veremos que isto

n˜ao ´e verdade, a partir de uma certa quilometragem. Para ambas locadoras os valores a

serem pagos y est˜ao em fun¸c˜ao dos quilˆometros rodados x, sendo os quilˆometros n´umeros

reais n˜ao negativos. Desta forma, se a locadora A cobra R$ 2, 00 por quilˆometro x mais

uma taxa ﬁxa de R$ 20, 00, ent˜ao o valor a pagar y ´e dado por y = 2x + 20. De maneira

an´aloga, a locadora B cobra R$ 1, 00 por quilˆometro x mais uma taxa ﬁxa de R$ 50, 00,

25

ent˜ao o valor a pagar y ´e dado por y = x + 50. Assim, deﬁne-se uma fun¸c˜ao para cada

locadora, de modo que, f : [0, +∞) −→ R dada por f (x) = 2x+20 ´e a fun¸c˜ao da locadora

A e g : [0, +∞) −→ R dada por g(x) = x + 50 ´e a fun¸c˜ao da locadora B.

Aﬁm de determinar para quais valores do dom´ınio, as imagens da fun¸c˜ao f s˜ao

maiores que as imagens da fun¸c˜ao g, devemos achar os valores x ∈ [0, +∞) tais que

f (x) > g(x). De fato, se x ∈ [0, +∞), temos que

f (x) > g(x) ⇔ 2x + 20 > x + 50 ⇔ x > 30.

Conclu´ımos que, f (x) > g(x) se, e somente se, x > 30. Isto ´e, a locadora B ´e mais atrativa

que a locadora A ap´os percorridos 30 km.

Deﬁni¸c˜ao 3.4. Sejam n um n´umero inteiro n˜ao negativo e a0, . . . , an, n´umeros reais. A
fun¸c˜ao f : R −→ R, deﬁnida por

f (x) =

n
(cid:88)

i=0

aixi = anxn + · · · + a0,

denomina-se fun¸c˜ao polinomial.

Se an (cid:54)= 0, n ´e chamado grau da fun¸c˜ao polinomial f . Em particular, temos que:

(1) Se n = 0, a fun¸c˜ao polinomial f ´e a fun¸c˜ao constante. Al´em disso, se a0 (cid:54)= 0, f

possui grau 0. A fun¸c˜ao nula n˜ao possui grau.

(2) Se n = 1 e a1 (cid:54)= 0, a fun¸c˜ao polinomial f denomina-se fun¸c˜ao aﬁm.

(3) Se n = 2 e a2 (cid:54)= 0, a fun¸c˜ao polinomial f denomina-se fun¸c˜ao quadr´atica.

(4) se n = 3 e a3 (cid:54)= 0, a fun¸c˜ao polinomial f denomina-se fun¸c˜ao c´ubica.

Deﬁni¸c˜ao 3.5. Seja n um n´umero natural, com n ≥ 2, e Di conjuntos n˜ao vazios, tais
que Di ∩ Dj = ∅, para todo i (cid:54)= j e i, j = 1, 2, . . . , n. Sejam fi : Di −→ Y e D =

n
(cid:91)

Di.

A fun¸c˜ao f : D −→ Y , dada por f (x) = fi(x), se x ∈ Di, denomina-se fun¸c˜ao deﬁnida

i=1

por partes. Escreve-se:

f (x) =






f1(x),

se x ∈ D1;

se x ∈ D2;

se x ∈ Dn.

f2(x),
...
fn(x),

26

Exemplo 3.6. A fun¸c˜ao f : R −→ R, deﬁnida por

f (x) =





0,

x2,

se x < 0;

se 0 ≤ x ≤ 2;

x + 3,

se x > 2;

´e uma fun¸c˜ao deﬁnida por partes. O gr´aﬁco de f ´e representado na Figura 3.1. A imagem

de f ´e o conjunto [0, 4] ∪ (5, +∞). Com efeito, dado y ∈ [0, 4], consideramos x =

Ent˜ao x ∈ [0, 2] e f (x) = f (

√

y) = (

√

y)2 = y. Logo, y ∈ Im(f ). Assim,

√

y.

[0, 4] ⊂ Im(f ).

(3.1)

Agora, dado y ∈ (5, +∞), consideremos x = y − 3. Ent˜ao, x ∈ (2, +∞) e f (x) =

f (y − 3) = (y − 3) + 3 = y. Logo, y ∈ Im(f ). Assim,

(5, +∞) ⊂ Im(f ).

(3.2)

De (3.1) e (3.2), [0, 4] ∪ (5, +∞) ⊂ Im(f ).

Vejamos agora que Im(f ) ⊂ [0, 4] ∪ (5, +∞). De fato, dado y ∈ Im(f ), existe um

x ∈ R tal que y = f (x). Se x < 0, ent˜ao y = f (x) = 0 ∈ [0, 4]. Logo, y ∈ [0, 4]. Assim,

Im(f ) ⊂ [0, 4] ∪ (5, +∞).

Se x ∈ [0, 2], ent˜ao y = f (x) = x2 ∈ [0, 4]. Logo, y ∈ [0, 4]. Assim,

Im(f ) ⊂ [0, 4] ∪ (5, +∞).

Se x ∈ (2, +∞), ent˜ao y = f (x) = x + 3 ∈ (5, +∞). Logo, y ∈ (5, +∞). Assim,

Im(f ) ⊂ [0, 4] ∪ (5, +∞).

De (3.3), (3.4) e (3.5), Im(f ) ⊂ [0, 4] ∪ (5, +∞).

(3.3)

(3.4)

(3.5)

Deﬁni¸c˜ao 3.7. Duas fun¸c˜oes f : A −→ B e g : C −→ D s˜ao chamadas fun¸c˜oes iguais

se, A = C, B = D e f (x) = g(x), para todo x ∈ A.

27

Figura 3.1: Gr´aﬁco da fun¸c˜ao f

Deﬁni¸c˜ao 3.8. Sejam f : A −→ B e g : C −→ B. Diz-se que f ´e uma restri¸c˜ao de g se

A ⊂ C e f (x) = g(x), para todo x ∈ A. Neste caso, denota-se f = g|A.

3.1.0.1 Fun¸c˜ao bijetiva

Deﬁni¸c˜ao 3.9. Sejam A e B dois conjuntos e f : A −→ B.

(a) Diz-se que f ´e injetiva se, para quaisquer x1, x2 pertencentes a A, tais que x1 (cid:54)= x2,

tenha-se f (x1) (cid:54)= f (x2). Equivalentemente, f ´e injetiva se, para quaisquer x1, x2

pertencentes `a A, tais que f (x1) = f (x2), tenha-se x1 = x2.

(b) Diz-se que f ´e sobrejetiva se, para quaisquer y ∈ B, existe um x ∈ A tal que

f (x) = y. Isto ´e, f ´e sobrejetiva, se Imf = B.

(c) Diz-se que f : A −→ B ´e bijetiva se, f for injetiva e sobrejetiva.

Exemplo 3.10. Seja f : R −→ R, deﬁnida por f (x) = x2 + 1. Esta fun¸c˜ao n˜ao ´e injetiva,

pois f (−3) = 10 = f (3). Al´em disso, f tamb´em n˜ao ´e sobrejetiva. De fato, para y = 0,

n˜ao existe x ∈ R tal que f (x) = 0, pois, caso contr´ario, x2 + 1 = 0, para algum x ∈ R, o

qual contradiz o fato de x2 + 1 ≥ 1 > 0.

Consideremos agora uma restri¸c˜ao da fun¸c˜ao f . A fun¸c˜ao g = f |[0,+∞) : [0, +∞) −→

R ´e injetiva. Com efeito, dados x1, x2 ∈ [0, +∞) tais que g(x1) = g(x2). Ent˜ao

28

2 + 1 e, assim, x2

1 = x2

2. Logo, |x1| = |x2|. Como x1, x2 ∈ [0, +∞), segue

1 + 1 = x2
x2
que x1 = x2.

Por outro lado, a fun¸c˜ao h : R −→ [1, +∞), deﬁnida por h(x) = x2 + 1, ´e
sobrejetiva. Com efeito, dado y ∈ [1, +∞), consideremos x = (cid:112)y − 1 ∈ R. Ent˜ao,
h(x) = h((cid:112)y − 1) = ((cid:112)y − 1)2 + 1 = (y − 1) + 1 = y. Isto mostra que Im(h) = [1, +∞).

Analogamente, as demonstra¸c˜oes anteriores, prova-se que a fun¸c˜ao l : [0, +∞) −→

[1, +∞), deﬁnida por l(x) = x2 + 1, ´e bijetiva.

Sejam A e B subconjuntos de R. Utilizando a representa¸c˜ao gr´aﬁca de uma

fun¸c˜ao f : A −→ B no plano cartesiano, podemos veriﬁcar se esta ´e injetiva, sobrejetiva

ou bijetiva. Para isto, basta analisarmos a interse¸c˜ao das retas paralelas ao eixo x, que

passam pelo ponto (0, y) com y ∈ B.

(1) Se cada uma dessas retas intersetar o gr´aﬁco em um s´o ponto, ent˜ao a fun¸c˜ao ´e

injetiva.

(2) Se cada uma dessas retas intersetar o gr´aﬁco em um ou mais pontos, ent˜ao a fun¸c˜ao

´e sobrejetiva.

(3) Se cada uma dessas retas intersetar o gr´aﬁco em um s´o ponto, ent˜ao a fun¸c˜ao ´e

bijetiva.

Exemplo 3.11. Seja f a fun¸c˜ao deﬁnida no Exemplo 3.6. Analisando o gr´aﬁco de f ,

apresentado na Figura 3.1, note que, a reta paralela ao eixo x, passando pelo ponto

(0, −1), n˜ao interseta o gr´aﬁco de f ; mostrando que f n˜ao ´e sobrejetiva.

3.2 Matrizes

Ao longo desta se¸c˜ao, o conjunto R ser´a um anel comutativo com unidade1 (que

podemos considerar como sendo Z, Q, R ou Zn).

Deﬁni¸c˜ao 3.12. Sejam m, n ∈ N e Imn = {(i, j) : 1 ≤ i ≤ m, 1 ≤ j ≤ n}. Deﬁne-se a

matriz A de ordem m × n (lˆe-se: m por n), como a fun¸c˜ao A que a cada par ordenado

1Na literatura, existem muitos autores que tratam sobre teoria de an´eis. O leitor interessado, pode

ver, por exemplo, em (HYGINO, 2001, p´ag. 218).

29

(i, j), no conjunto Imn, associa um ´unico elemento A(i, j) = aij pertencente a R. Isto ´e,

A :

Imn −→

R

(i, j)

(cid:55)−→ A(i, j) = aij

Cada elemento aij ´e chamado entrada da matriz. Uma matriz A de ordem m × n

com entradas no anel R ´e usualmente representada por um arranjo retangular com m

linhas e n colunas da forma:

A =











a11

a12

. . . a1n

a22
a21
...
...
am1 am2

. . . a2n
...
. . .
. . . amn











ou simplesmente por A = [aij]m×n.

O s´ımbolo aij representa a entrada da matriz A que est´a na i-´esima linha e j-

´esima coluna. O conjunto das matrizes de ordem m × n com entradas no anel R ser´a

denotado por Mm×n(R).

As matrizes de ordem 1 × n

(cid:104)

Li =

ai1 ai2

· · · ain

(cid:105)

,

1 ≤ i ≤ m, s˜ao chamadas linhas da matriz A = [aij]m×n. Escreve-se,

A =








L1
...
Lm








.

As matrizes de ordem m × 1

Cj =











a1j

a2j
...
amj











,

30

1 ≤ j ≤ n, s˜ao chamadas colunas da matriz A = [aij]m×n. Escreve-se,

(cid:104)

A =

C1

· · · Cn

(cid:105)

.

Uma matriz A de ordem n×n denomina-se matriz quadrada. Neste caso, a matriz

A = [aij]n×n diz-se que ´e uma matriz de ordem n e, denota-se por A = [aij]n. Denotaremos

por Mn(R), o conjunto de matrizes quadradas de ordem n com entradas no anel R.

A matriz quadrada A = [aij]n, onde aij = 0, para todo i, j = 1, . . . , n com i (cid:54)= j,

denomina-se matriz diagonal.

A matriz quadrada In = [δij]n, onde

δij =




1,

se i = j;



0,

se i (cid:54)= j;

denomina-se matriz identidade.

A matriz de ordem m × n Om×n = [eij]m×n, onde eij = 0, para todo 1 ≤ i ≤ m e

para todo 1 ≤ j ≤ n, denomina-se matriz nula.

Dada uma matriz A = [aij]m×n, deﬁne-se a matriz oposta de A, denotada por

−A, como a matriz −A = [−aij]m×n.

Dada uma matriz A = [aij]m×n, deﬁne-se a matriz transposta de A, denotada
por At, como a matriz At = [bij]n×m, onde bij = aji, para todo 1 ≤ i ≤ n e para todo

1 ≤ j ≤ m.

Exemplo 3.13. A matriz transposta da matriz quadrada A =















1 2

4 1

3

6

0 2 −3

´e a matriz

At =








1 4

2 1

0

2

3 6 −3





.



Sejam A = [aij]m×n e B = [bij]m×n duas matrizes. Diz-se que a matriz A ´e igual

a matriz B se, aij = bij, para todo 1 ≤ i ≤ m e para todo 1 ≤ j ≤ n.

31

3.2.1 Opera¸c˜oes com matrizes

3.2.1.1 Adi¸c˜ao de matrizes

Deﬁni¸c˜ao 3.14. Sejam A = [aij]m×n e B = [bij]m×n duas matrizes em Mm×n(R). Deﬁne-

se a soma de A = [aij]m×n e B = [bij]m×n, denotada por A + B, como a matriz

onde

C = [cij]m×n,

cij = aij + bij,

para todo 1 ≤ i ≤ m e para todo 1 ≤ j ≤ n. Isto deﬁne uma opera¸c˜ao de adi¸c˜ao de

matrizes em Mm×n(R).

Dadas as matrizes A = [aij]m×n e B = [bij]m×n, denota-se A − B = A + (−B).

Exemplo 3.15. Dadas as matrizes A =








1 2

4 1

3

6

0 2 −3








e B =








5

3

4 −1

3

6

1

2 −4








em

M3(R), tˆem-se:








1 2

4 1

3

6

0 2 −3















+

5

3

4 −1

3

6

1

2 −4

A + B =

e

A − B = A + (−B) =








1 2

4 1

3

6

0 2 −3






















=

1 + 5 2 + 3

3 + 3

4 + 4 1 − 1

6 + 6

0 + 1 2 + 2 −3 − 4








=















6 5

6

8 0 12

1 4 −7








+

−5 −3 −3

−4

1 −6

−1 −2

4















=

−4 −1 0

0

−1

2

0

0

1








.

Proposi¸c˜ao 3.16. Dadas trˆes matrizes A, B e C pertencentes a Mm×n(R), a opera¸c˜ao

de adi¸c˜ao de matrizes, satisfaz as seguintes propriedades:

(1) A + B = B + A (comutativa);

(2) (A + B) + C = A + (B + C) (associativa);

(3) A + Om×n = A (existˆencia do elemento neutro aditivo);

32

(4) A + (−A) = Om×n (existˆencia do elemento oposto).

Demonstra¸c˜ao.

(1) Sejam A = [aij]m×n e B = [bij]m×n. Ent˜ao

A + B = [aij]m×n + [bij]m×n = [aij + bij]m×n = [bij + aij]m×n = [bij]m×n + [aij]m×n = B + A.

(2) Sejam A = [aij]m×n e B = [bij]m×n . Ent˜ao

(A + B) + C = [aij + bij]m×n + [cij]m×n

= [(aij + bij) + cij]m×n

= [aij + (bij + cij)]m×n

= [aij]m×n + [bij + cij]m×n

= A + (B + C).

(3) Seja A = [aij]m×n. Como Om×n = [eij]m×n, onde eij = 0, para todo 1 ≤ i ≤ m e para

todo 1 ≤ j ≤ n, temos

A + Om×n = [aij + eij]m×n = [aij + 0]m×n = [aij]m×n = A.

(4) Seja A = [aij]m×n. Como −A = [−aij]m×n, temos

A + (−A) = [aij + (−aij)]m×n = [eij]m×n = Om×n.

Observa¸c˜ao 3.17. A Proposi¸c˜ao 3.16, estabelece que o conjunto Mm×n(R) munido da

opera¸c˜ao de adi¸c˜ao ´e um grupo abeliano 1.

1Na literatura, existem muitos autores que tratam sobre teoria de grupos. O leitor interessado, pode

ver, por exemplo, em (HYGINO, 2001, p´ag. 137).

(cid:3)

33

3.2.1.2 Multiplica¸c˜ao de escalares por matrizes

Deﬁni¸c˜ao 3.18. Seja A = [aij]m×n uma matriz em Mm×n(R). Dado λ ∈ R, deﬁne-se o

produto do escalar λ pela matriz A = [aij]m×n, denotada por λA, como a matriz

onde

C = [cij]m×n,

cij = λcij,

para todo 1 ≤ i ≤ m e para todo 1 ≤ j ≤ n. Isto deﬁne uma opera¸c˜ao de multiplica¸c˜ao

de um escalar por uma matriz.

Proposi¸c˜ao 3.19. Dadas as matrizes A e B pertencentes a Mm×n(R) e λ, µ escala-

res pertencentes a R, a opera¸c˜ao de multiplica¸c˜ao de escalares por matrizes, satisfaz as

seguintes propriedades:

(1) λ(µA) = (λµ)A = µ(λA);

(2) λ(A + B) = λA + λB;

(3) (λ + µ)A = λA + µA;

(4) 1A = A.

Demonstra¸c˜ao.

(1) Sejam A = [aij]m×n e λ, µ ∈ R. Ent˜ao

λ(µA) = λ (µ[aij]m×n) = λ[µaij]m×n = [λ(µaij)]m×n = [(λµ)aij]m×n = (λµ)[aij]m×n = (λµ)A.

Por outro lado, sendo λ e µ quaisquer, pelo visto anteriormente, segue que

λ(µA) = (λµ)A = (µλ)A = µ(λA).

Portanto, λ(µA) = (λµ)A = µ(λA).

34

(2) Sejam A = [aij]m×n, B = [bij]m×n e λ ∈ R. Ent˜ao

λ(A + B) = λ[aij + bij]m×n

= [λ(aij + bij)]m×n

= [λaij + λbij)]m×n

= [λaij]m×n + [λbij]m×n

= λ[aij]m×n + λ[bij]m×n

= λA + λB.

(3) Sejam A = [aij]m×n e λ, µ ∈ R. Ent˜ao

(λ + µ)A = (λ + µ)[aij]m×n

= [(λ + µ)aij]m×n

= [λaij + µaij]m×n

= [λaij]m×n + [µaij]m×n

= λ[aij]m×n + µ[aij]m×n

= λA + µA.

(4) Seja A = [aij]m×n. Ent˜ao

1A = 1[aij]m×n = [1 · aij]m×n = [aij]m×n = A.

Observa¸c˜ao 3.20. As proposi¸c˜oes 3.16 e 3.19, estabelecem que o conjunto Mm×n(R)

munido das opera¸c˜oes de adi¸c˜ao e multiplica¸c˜ao por escalar ´e um R-m´odulo 1.

1Na literatura, existem muitos autores que tratam sobre teoria de m´odulos. O leitor interessado, pode

ver, por exemplo, em POLCINO (1972).

(cid:3)

35

3.2.1.3 Multiplica¸c˜ao de matrizes

Deﬁni¸c˜ao 3.21. Sejam A = [aij]m×n e B = [bjk]n×p duas matrizes com entradas no anel

R. Deﬁne-se o produto de A e B, denotada por AB, como a matriz

C = [cik]m×p,

onde

cik =

n
(cid:88)

j=1

aijbjk = ai1b1k + · · · + ainbnk,

para todo 1 ≤ i ≤ m e para todo 1 ≤ k ≤ p. Isto deﬁne uma multiplica¸c˜ao no conjunto de

matrizes de ordem m×n e n×p no conjunto de matrizes ordem m×p. Em particular, isto

deﬁne uma opera¸c˜ao de multiplica¸c˜ao no conjunto de matrizes quadradas com entradas

no anel R.

Em geral, dadas duas matriz quadradas A e B, da mesma ordem, e com entradas

no anel R, o produto AB n˜ao ´e necessariamente igual a BA, ou seja, a multiplica¸c˜ao de

matrizes n˜ao ´e comutativo.

Exemplo 3.22. Dada as matrizes A =















1 2

4 1

3

6

0 2 −3

e B =








5

3

4 −1

3

6

1

2 −4








em M3(Z),

temos que






















AB =

=

=

e

1 2

4 1

3

6

0 2 −3















5

3

4 −1

3

6

1

2 −4








1 · 5 + 2 · 4 + 3 · 1

1 · 3 + 2 · (−1) + 3 · 2

1 · 3 + 2 · 6 + 3 · (−4)

4 · 5 + 1 · 4 + 6 · 1

4 · 3 + 1 · (−1) + 6 · 2

4 · 3 + 1 · 6 + 6 · (−4)

0 · 5 + 2 · 4 + (−3) · 1 0 · 3 + 2 · (−1) + (−3) · 2 0 · 3 + 2 · 6 + (−3) · (−4)








16

7

3

30 23 −6

5 −8 24








36






















BA =

=

=

5

3

4 −1

3

6

1

2 −4






















1 2

4 1

3

6

0 2 −3

5 · 1 + 3 · 4 + 3 · 0

5 · 2 + 3 · 1 + 3 · 2

5 · 3 + 3 · 6 + 3 · (−3)

4 · 1 + (−1) · 4 + 6 · 0

4 · 2 + (−1) · 1 + 6.2

4 · 3 + (−1) · 6 + 6 · (−3)

1 · 1 + 2 · 4 + (−4) · 0 1 · 2 + 2 · 1 + (−4) · 2 1 · 3 + 2 · 6 + (−4) · (−3)








17 19

24

0

19 −12

9 −4

27








.

Proposi¸c˜ao 3.23. A multiplica¸c˜ao de matrizes, satisfaz as seguintes propriedades:

(1) se A ∈ Mm×n(R), B ∈ Mn×p(R) e C ∈ Mp×q(R) ent˜ao A(BC) = (AB)C

(associatividade da multiplica¸c˜ao);

(2) se A ∈ Mm×n(R) ent˜ao AIn = A e ImA = A;

(3) se A ∈ Mm×n(R) e B,C ∈ Mn×p(R) ent˜ao A(B + C) = AB + AC (distributividade

`a esquerda da multiplica¸c˜ao em rela¸c˜ao `a adi¸c˜ao);

(4) se A,B ∈ Mm×n(R) e C ∈ Mn×p(R) ent˜ao (A + B)C = AC + BC (distributividade

`a direita da multiplica¸c˜ao em rela¸c˜ao `a adi¸c˜ao);

(5) se A ∈ Mm×n(R) ent˜ao AOn×p = Om×p e Op×mA = Op×n.

Demonstra¸c˜ao.

(1) Sejam A = [aij]m×n, B = [bjk]n×p e C = [ckr]p×q. Ent˜ao

(AB)C = ([aij]m×n[bjk]n×p) [ckr]p×q =

(cid:34) n

(cid:88)

j=1

(cid:35)

aijbjk

[ckr]p×q = [fir]m×q,

m×p

onde

fir =

p
(cid:88)

(cid:32) n

(cid:88)

k=1

j=1

(cid:33)

aijbjk

ckr =

p
(cid:88)

n
(cid:88)

k=1

j=1

(aijbjk) ckr =

n
(cid:88)

p
(cid:88)

j=1

k=1

(aijbjk) ckr.

(3.6)

37

Por outro lado,

A(BC) = [aij]m×n ([bjk]n×p[ckr]p×q) = [aij]m×n

(cid:34) p

(cid:88)

k=1

(cid:35)

bjkckr

= [gir]m×q,

n×q

onde

gir =

(cid:32)

n
(cid:88)

aij

j=1

p
(cid:88)

k=1

(cid:33)

(bjkckr)

=

n
(cid:88)

p
(cid:88)

j=1

k=1

aij(bjkckr) =

n
(cid:88)

p
(cid:88)

j=1

k=1

(aijbjk)ckr.

(3.7)

Logo, de (3.6) e (3.7), segue que fir = gir, para todo 1 ≤ i ≤ m e para todo 1 ≤ r ≤ q.

Portanto, A(BC) = (AB)C.

(2) Sejam A = [aij]m×n e In = [δjk]n. Provemos que AIn = A. Seja, AIn = [dik]m×n, onde

n
(cid:88)

dik =

aijδjk. Temos que

j=1

dik = aikδkk +

n
(cid:88)

j=1
j(cid:54)=k

aijδjk = aik · 1 +

n
(cid:88)

j=1
j(cid:54)=k

aij · 0 = aik.

Portanto, AIn = [aik]m×n = A.

Provemos agora que ImA = A, onde Im = [δki]m. Seja, ImA = [dkj]m×n, onde

m
(cid:88)

dkj =

δkiaij. Temos que

i=1

dkj = δkkakj +

m
(cid:88)

i=1
i(cid:54)=k

δkiaij = 1 · akj +

m
(cid:88)

i=1
i(cid:54)=k

0 · aij = akj.

Portanto, ImA = [akj]m×n = A.

(3) Sejam A = [aij]m×n, B = [bjk]n×p e C = [cjk]n×p. Ent˜ao

A(B + C) = [aij]m×n[bjk + cjk]n×p = [dik]m×p,

onde

dik =

n
(cid:88)

j=1

aij(bjk + cjk) =

n
(cid:88)

j=1

(aijbjk + aijcjk) =

n
(cid:88)

j=1

aijbjk +

n
(cid:88)

j=1

aijcjk.

Por outro lado,

AB + AC =

(cid:34) n

(cid:88)

j=1

(cid:35)

aijbjk

m×p

+

(cid:34) n

(cid:88)

j=1

(cid:35)

aijcjk

=

(cid:34) n

(cid:88)

j=1

aijbjk +

n
(cid:88)

j=1

(cid:35)

aijcjk

= [dik]m×p.

m×p

m×p

38

Portanto, AB + AC = A(B + C).

(4) Sejam A = [aij]m×n, B = [bij]m×n e C = [cjk]n×p. Ent˜ao

(A + B)C = [aij + bij]m×n[cjk]n×p = [dik]m×p,

onde

dik =

n
(cid:88)

j=1

(aij + bij)cjk =

n
(cid:88)

j=1

aij(cjk + bijcjk) =

n
(cid:88)

j=1

aijcjk +

n
(cid:88)

j=1

bijcjk.

Por outro lado,

AC + BC =

(cid:35)

aijcjk

(cid:34) n

(cid:88)

j=1

m×p

+

(cid:34) n

(cid:88)

j=1

(cid:35)

bijcjk

m×p

=

(cid:34) n

(cid:88)

j=1

aijcjk +

n
(cid:88)

j=1

(cid:35)

bijcjk

= [dik]m×p

m×p

Portanto, AC + BC = (A + B)C.

(5) Sejam A = [aij]m×n e On×p = [ejk]n×p. Provemos que AOn×p = Om×p. Seja, AOn×p =

[dik]m×p, onde dik =

aijejk. Temos que

n
(cid:88)

j=1

dik =

n
(cid:88)

j=1

aijejk =

n
(cid:88)

j=1

aij · 0 = 0.

Portanto, AOn×p = Om×p.

Provemos agora que Op×mA = Op×n, onde Op×m = [eki]p×m. Seja, Op×mA =

[dkj]p×n, onde dkj =

ekiaij. Temos que

m
(cid:88)

i=1

dkj =

m
(cid:88)

i=1

ekiaij =

m
(cid:88)

i=1

0 · aij = 0.

Portanto, Op×mA = Op×n.

Exemplo 3.24. Sejam

(cid:3)

A =





2 1

5 3





 , B =



6 6

3 2





 e C =







0 6

1 4

pertencentes a M2(Z7). Para determinar 2(AB + AC), calculemos 2A e B + C, pois

39

2(AB + AC) = 2A(B + C). Temos que

B + C =





6 6

3 2





 +



0 6

1 4





 =



6 12

4

6





 =







6 5

4 6

2A = 2





2 1

5 3





 =



4

2

10 6





 =



4 2

3 6



 .

e

Logo,

2(AB+AC) = 2A(B+C) =





4 2

3 6





·



6 5

4 6





 =



4 · 6 + 2 · 4 4 · 5 + 2 · 6

3 · 6 + 6 · 4 3 · 5 + 6 · 6





 =





 .

4 4

0 2

Deﬁni¸c˜ao 3.25. Diz-se que uma matriz A, pertencente a Mn(R), ´e invers´ıvel, se existe

uma matriz B, pertencente a Mn(R), tal que

AB = BA = In.

A matriz B ´e chamada matriz inversa de A.

Observa¸c˜ao 3.26. Se uma matriz A, pertencente a Mn(R), ´e invers´ıvel, ent˜ao a matriz
inversa de A ´e ´unica e denota-se por A−1. De fato, se B, D ∈ Mn(R) s˜ao tais que

AB = BA = In = AD = DA, tem-se

B = BIn = B(AD) = (BA)D = InD = D.

Portanto, B = D, provando que a matriz inversa de A ´e ´unica.

Exemplo 3.27. A matriz inversa de A =

M2(R). De fato,





2 2

3 4


 ∈ M2(R) ´e a matriz B =







 ∈

2

−1

−3/2

1

AB =





2 2

3 4





 ·



2

−1

−3/2

1





 =



2 · 2 + 2 · (−3/2) 2 · (−1) + 2 · 1

3 · 2 + 4 · (−3/2) 3 · (−1) + 4 · 1





 =







1 0

0 1

40

e

BA =





2

−1

−3/2

1





·



2 2

3 4





 =



2 · 2 + (−1) · 3

2 · 2 + (−1) · 4

(−3/2) · 2 + 1 · 3 (−3/2) · 2 + 1 · 4





 =





 .

1 0

0 1

Exemplo 3.28. A matriz inversa de A =

M2(Z27). De fato,





2 2

3 4


 ∈ M2(Z27) ´e a matriz B =







 ∈

2

26

12

1

AB =





2 2

3 4





 ·



2

26

12

1





 =



2 · 2 + 2 · 12 2 · 26 + 2 · 1

3 · 2 + 4 · 12 3 · 26 + 4 · 1





 =







1 0

0 1

e

BA =





2

26

12

1





 ·



2 2

3 4





 =



2 · 2 + 26 · 3 2 · 2 + 26 · 4

12 · 2 + 1 · 3 12 · 2 + 1 · 4





 =





 .

1 0

0 1

Enunciaremos a seguir uma proposi¸c˜ao que ser´a aplicada na Subse¸c˜ao 4.2.2.

Proposi¸c˜ao 3.29. Seja A =





a b

c d


 pertencente a M2(Zn). Ent˜ao A ´e invers´ıvel se,

e somente se, ad − bc ´e invers´ıvel em Zn. Neste caso,

A−1 = (ad − bc)−1





d −b

−c

a



 .

Observa¸c˜ao 3.30. Um elemento k ∈ Zn ´e invers´ıvel se, e somente se, mdc(k, n) = 1. Se

n = 27 isto ´e equivalente a dizer que 0 n˜ao ´e congruente `a k m´odulo 3. Logo, os elementos
invers´ıveis em Z27 e seus respectivos inversos s˜ao dados na Tabela 3.1.

a
a−1

1
1

2
14

4
7

5
11

7
4

8
17

10
19

11
5

13
25

14
2

16
22

17
8

19
10

20
23

22
16

23
20

25
13

26
26

Tabela 3.1: Inversos multiplicativos em Z27

Em particular, pela Proposi¸c˜ao 3.29, segue que A =





a b

c d


 ∈ M2(Z27) ´e invers´ıvel se,

e somente se, (ad − bc) ∈ {1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26}.

Proposi¸c˜ao 3.31. Se uma matriz A ∈ Mn(R) possui uma linha nula, ent˜ao A n˜ao ´e

invers´ıvel.

41

Demonstra¸c˜ao. Seja A = [aij]n uma matriz quadrada de ordem n e Lk = [akj]1×n sua

k-´esima linha nula. Suponhamos que A ´e invers´ıvel, ent˜ao existe uma matriz B = [bjr]n

de ordem n tal que AB = In. Seja AB = [cir]n, onde cir = aijbjr. Em particular,

ckk =

n
(cid:88)

j=1

akjbjk =

n
(cid:88)

k=1

0 · bjk = 0 (cid:54)= 1.

Logo, AB (cid:54)= In, uma contradi¸c˜ao. Portanto, A n˜ao ´e invers´ıvel.

(cid:3)

Proposi¸c˜ao 3.32. Sejam A,B ∈ Mn(R). Se A e B s˜ao invers´ıveis, ent˜ao AB ´e invers´ıvel

e (AB)−1 = B−1A−1.

Demonstra¸c˜ao. Sejam A e B matrizes invert´ıveis de ordem n. Como

(AB)(B−1A−1) = [A(BB−1)]A−1 = (AIn)A−1 = AA−1 = In

e

(B−1A−1)(AB) = [B−1(A−1A)]B = (B−1In)B = B−1B = In,

segue que, AB ´e invers´ıvel. Logo, pela unicidade da matriz inversa, (AB)−1 = B−1A−1.

(cid:3)

3.2.2 Aplica¸c˜ao das matrizes `a criptograﬁa

Nesta subse¸c˜ao, apresentamos dois m´etodos para codiﬁcar e decodiﬁcar men-

sagens. O estudo de codiﬁca¸c˜ao e decodiﬁca¸c˜ao de mensagens secretas ´e denominado

criptograﬁa. Na linguagem de criptograﬁa, os c´odigos s˜ao denominados cifras, as mensa-

gens n˜ao codiﬁcadas s˜ao denominados textos comuns e as mensagens criptografadas s˜ao

denominados textos cifrados ou criptogramas. O processo de converter o texto comum em

cifrado ´e conhecido como cifrar ou criptografar e o de recuperar texto comum a partir do

texto cifrado ´e chamado de decifrar.

Um sistema poligr´aﬁco, ´e um sistema de criptograﬁa no qual o texto comum ´e

dividido em um conjunto de n letras, cada um dos quais ´e substitu´ıdo por um conjunto

de n letras cifradas. Apresentaremos uma classe de sistemas poligr´aﬁcos que s˜ao baseados

na multiplica¸c˜ao de matrizes.

1 Consideramos o alfabeto portuguˆes munido do caractere 0, o qual indicar´a um

1O restante, desta se¸c˜ao, foi desenvolvida integralmente pelo meu orientador, a quem agrade¸co.

42

espa¸co em branco. Daqui em diante, admitiremos que cada letra de texto comum e de

texto cifrado, tem um valor num´erico que especiﬁca sua posi¸c˜ao no nosso alfabeto, isto
ser´a dado pelos elementos do anel R (onde R = R ou R = Z27), segundo a correspondˆencia

da Tabela 3.2.

a
1
n
14

b
2
o
15

c
3
p
16

d
4
q
17

e
5
r
18

f
6
s
19

g
7
t
20

h
8
u
21

i
9
v
22

j
10
w
23

k
11
x
24

l
12
y
25

m
13
z
26

0
0

Tabela 3.2: Tabela de correspondˆencia

Seja A uma matriz quadrada de ordem n invers´ıvel com entradas em R, que ser´a

chamada matriz chave para o c´odigo. Consideremos o texto comum

ai1 · · · ait,

(3.8)

onde i1, . . . it ∈ N, {ai1, . . . , ait} ⊂ {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,
x,y,z,0}. Dividimos este texto em um conjunto de n caracteres, os quais ser˜ao chamados

de blocos, completando com o caractere 0, se necess´ario. Seja m o n´umero de blocos do

texto comum e

ain(k−1)+1 · · · aink

(3.9)

o k-´esimo bloco do texto comum, para todo 1 ≤ k ≤ m. Se (cid:99)aij ´e o valor num´erico da
Tabela 3.2, correspondente ao caractere aij , para todo n(k − 1) + 1 ≤ j ≤ nk, 1 ≤ k ≤ m,

a correspondˆencia num´erica do bloco de texto comum (3.9) ´e dado por

(cid:92)ain(k−1)+1

· · · (cid:100)aink.

Sejam

(cid:104)

Lk =

(cid:92)ain(k−1)+1

· · · (cid:100)aink

(cid:105)

1×n

∈ M1×n(R)

e M A = [xij]m×n, onde

M =








L1
...
Lm








.

m×n

A matriz M A ∈ Mm×n(R) ser´a chamada matriz cifrada.

43

Caso 1: Se a matriz chave A possui entradas no corpo R = R, o texto comum (3.8) ´e

transformado no texto cifrado, utilizando as entradas da matriz cifrada M A, deixando

um espa¸co em branco entre cada uma das entradas desta matriz, como segue:

x11

· · ·

x1n x21

· · ·

x2n

· · ·

xm1

· · ·

xmn,

(3.10)

o qual ser´a a mensagem transmitida.
Caso 2: Se a matriz chave A possui entradas no anel R = Z27, o texto comum (3.8) ´e

transformado no texto cifrado, utilizando os caracteres do nosso alfabeto correspondentes

as entradas da matriz cifrada AM , sem deixar espa¸cos em branco entre cada uma das

entradas desta matriz, como segue:

b11 · · · b1nb21 · · · b2n · · · bm1 · · · bmn,

(3.11)

o qual ser´a a mensagem transmitida, onde xij = (cid:99)bij, para todo 1 ≤ i ≤ m e para todo

1 ≤ j ≤ n. Este caso ´e um sistema poligr´aﬁco chamado cifras de Hill e o texto cifrado

(3.11) ´e chamado n-cifra de Hill.

Para decodiﬁcar o texto cifrado (3.10) ou (3.11) (mensagem transmitida), deve-

mos fazer um processo similar ao mostrado anteriormente, agrupando em n blocos de

m caracteres, obtendo-se novamente a matriz M A. Finalmente, multiplicamos `a direita

pela inversa da matriz chave obtendo a matriz M (pois M = (M A)A−1). Ap´os, isto

escrevemos a matriz M como sendo o texto comum.

Exemplo 3.33. Consideremos a matriz chave A =





2 2

3 4


 ∈ M2(R). Utilizemos a

matriz A para criptografar a mensagem: “Profmat”. Como a matriz A ´e de ordem 2,

dividimos a mensagem em conjuntos de duas letras e acrescentando o caractere 0 para

completar o espa¸co em branco, obtendo os seguintes blocos:

pr

of

ma

t0,

o qual usando a correspondˆencia num´erica da Tabela 3.2 ﬁca

16 18

15 6

13 1

20 0.

44

Forma-se, assim, a matriz

M =











16 18

15

13

20

6

1

0











.

A matriz cifrada ´e dada atrav´es do produto

M A =











16 18

15

13

20

6

1

0

















 =

2 2

3 4











86 104

48

29

40

54

30

40











.

Portanto, o texto cifrado ´e

86 104 48 54 29

30

40 40,

o qual ´e a mensagem transmitida.

Exemplo 3.34. Decifremos o criptograma

86 104 48 54 29

30

40 40,

dado no Exemplo 3.33, utilizando a mesma matriz chave A. Agrupando o criptograma,

em blocos de dois elementos, obt´em-se a matriz

C =











86 104

48

29

40

54

30

40











.

Para obter os pares do texto comum, multiplicamos, `a direita a matriz C pela inversa de

45

A, dada no Exemplo 3.27:

CA−1 =











86 104

48

29

40

54

30

40

















 =

2

−1

−3/2

1











16 18

15

13

20

6

1

0











.

Agora, dividimos as entradas da matriz CA−1 em 4 blocos, contendo cada um 2 elementos

de cada linha, obtendo-se

16 18

15 6

13 1

20 0,

o qual usando a correspondˆencia num´erica da Tabela 3.2 ﬁca

pr

of

ma

t0.

Portanto, a mensagem enviada era “Profmat”.

Exemplo 3.35. Consideremos a matriz chave A =





2 2

3 4


 ∈ M2(Z27). De forma

an´aloga ao Exemplo 3.33, utilizemos a matriz A para criptografar a mensagem: “Profmat”,

atrav´es das cifras de Hill. Como a matriz A ´e de ordem 2, dividimos a mensagem em

conjuntos de duas letras e acrescentando o caractere 0 para completar o espa¸co em branco,

obtendo os seguintes blocos:

pr

of

ma

t0,

o qual usando a correspondˆencia num´erica da Tabela 3.2 ﬁca

16 18

15 6

13 1

20 0.

Forma-se, assim, a matriz

M =











.











16 18

6

1

0

15

13

20

46

A matriz cifrada ´e dada atrav´es do produto

M A =











16 18

15

13

20

6

1

0

















 =

2 2

3 4











86 104

48

29

40

54

30

40











=











5

23

21

2

0

3

13 13











.

Portanto, trocando cada uma das entradas da matriz AM , pela sua respectiva corres-

pondˆencia num´erica da Tabela 3.2, o texto cifrado ´e

ewu0bcmm,

o qual ´e a mensagem transmitida.

Exemplo 3.36. Decifremos o criptograma

ewu0bcmm,

dado no Exemplo 3.35, utilizando a mesma chave A. Agrupando o criptograma, em blocos

de dois elementos, obt´em-se

ew

u0

bc

mm

o qual usando a correspondˆencia num´erica da Tabela 3.2 ﬁca

5 23

21 0

2 3

13 13,

Forma-se, assim, a matriz

C =











5

23

21

2

0

3

13 13











.

Para obter os pares do texto comum, multiplicamos `a direita a matriz C pela inversa de

47

A, dada no Exemplo 3.28

CA−1 =











5

23

21

2

0

3

13 13

















 =

2

26

12

1











286 153

42

40

546

55

182 351











=











16 18

15

13

20

6

1

0











.

Agora, dividimos as entradas da matriz CA−1 em 4 blocos, contendo cada um 2 elementos

de cada linha, obtendo-se

16 18

15 6

13 1

20 0,

o qual usando a correspondˆencia num´erica da Tabela 3.2.2 ﬁca

pr

of

ma

t0.

Portanto, a mensagem enviada era “Profmat”.

3.3 Determinantes

Deﬁni¸c˜ao 3.37. Sejam n ≥ 2 e D : Mn(R) −→ R uma fun¸c˜ao, satisfazendo os seguintes

axiomas:

(D1) D ´e linear como fun¸c˜ao de cada linha separadamente. Isto ´e, se Li = L(cid:48)

i + tL(cid:48)(cid:48)

i e

t ∈ R ent˜ao














L(cid:48)

L1
...
i + tL(cid:48)(cid:48)
i
...
Ln














D

= D



























L1
...
L(cid:48)
i
...
Ln

+ tD














,














L1
...
L(cid:48)(cid:48)
i
...
Ln

para todo i = 1, . . . , n.

(D2) Para todo A ∈ Mn(R), se duas linhas adjacentes Li e Li+1 de A s˜ao iguais, ent˜ao

D(A) = 0.

48

(D3) D(In) = 1.

Se existe uma fun¸c˜ao, D : Mn(R) −→ R satisfazendo os axiomas D1, D2 e D3, ela

´e ´unica e denomina-se fun¸c˜ao determinante (ou simplesmente determinante) e, denota-se

por det. A demonstra¸c˜ao ´e apresentada em (HEFEZ, 2012, Teorema 8.8, p´ag. 239).

Sejam n ≥ 2 e A = [aij] ∈ Mn(R). Para cada (i, j) ∈ N2, com 1 ≤ i, j ≤ n,

deﬁne-se a matriz Aij como a matriz de ordem (n − 1) × (n − 1) obtida de A suprimindo-se

a i-´esima linha e a j-´esima coluna.

Seja n ≥ 2. Deﬁniremos indutivamente uma fun¸c˜ao Dn : Mn(R) −→ R satisfa-
zendo os axiomas D1, D2 e D3 da Deﬁni¸c˜ao 3.37. Para n = 2, deﬁnimos D2 : M2(R) −→
R, como sendo









a b

c d

D2







 = a · d − b · c.

A fun¸c˜ao D2, satisfaz os axiomas D1, D2 e D3. De fato, se a, a(cid:48), b, b(cid:48), c, c(cid:48), d, d(cid:48), t ∈ R,

ent˜ao

e





D2





a + ta(cid:48)

b + tb(cid:48)

c

d



 = (a + ta(cid:48)) · d − c · (b + tb(cid:48))


= (ad − bc) + t(a(cid:48) · d − c · b(cid:48))









= D2

a b

c d



 + t · D2


















a(cid:48)

c

b(cid:48)

d





D2





a

b

c + tc(cid:48) d + td(cid:48)



 = a · (d + td(cid:48)) − b · (c + tc(cid:48))


= (ad − bc) + t(a · d(cid:48) − b · c(cid:48))









= D2

a b

c d



 + t · D2
















 ;

a

b

c(cid:48) d(cid:48)

mostrando que a fun¸c˜ao D2 satisfaz o axioma D1.

49

Al´em disto, se





a b

a b


 ∈ M2(R), tem-se





D2





a b

a b







 = a · b − b · a = 0,

mostrando que a fun¸c˜ao D2 satisfaz o axioma D2. Tamb´em, tem-se que





D2





1 0

0 1







 = 1 · 1 − 0 · 0 = 1,

isto ´e, a fun¸c˜ao D2 satisfaz o axioma D3.

Seja agora n ≥ 3. Supondo deﬁnido a fun¸c˜ao Dn−1 : Mn−1(R) −→ R, deﬁnimos

a fun¸c˜ao Di : Mn(R) −→ R, 1 ≤ i ≤ n, como sendo

Di(A) =

n
(cid:88)

(−1)(i+j) · aijDn−1(Aij).

j=1

Teorema 3.38. Seja n ≥ 3. Se Dn−1 : Mn−1(R) −→ R satisfaz os axiomas D1, D2 e
D3, ent˜ao a fun¸c˜ao Di : Mn(R) −→ R tamb´em satisfaz os axiomas D1, D2 e D3, para

todo 1 ≤ i ≤ n.

Demonstra¸c˜ao. Ver em (HEFEZ, 2012, Teorema 8.9, p´ag. 232).

(cid:3)

Exemplo 3.39. O determinante da matriz A =








1

0

2

2 −1 3

4

1

8








∈ M3(R) ´e dado por

det(A) = 1 · det





−1 3

1

8





 − 0 · det







 + 2 · det







2 −1

4

1

2 3

4 8

= 1 · (−11) + 2 · 6

= 1.

Para calcular este determinante, foi utilizado a primeira linha da matriz A. Utilizando, a

50

terceira linha temos o seguinte:

det(A) = 4 · det





0

2

−1 3





 − 1 · det







 + 8 · det







1

0

2 −1

1 2

2 3

= 4 · 2 − 1 · (−1) + 8 · (−1)

= 1.

O mesmo pode ser feito, tamb´em, com a segunda linha.

Proposi¸c˜ao 3.40. Seja A ∈ Mn(R). Se A possui uma linha nula ent˜ao det(A) = 0.

Demonstra¸c˜ao. Se A ∈ M2(R) ´e imediato. Sejam n ≥ 3 e A ∈ Mn(R). Suponha que

(cid:104)

Lk =

ak1 ak12

· · · akn

(cid:105)

´e uma linha nula de A. Ent˜ao

det(A) = Dk(A) =

n
(cid:88)

(−1)(i+j) · akj det(Ak,j) =

j=1

n
(cid:88)

j=1

(−1)(i+j) · 0 · det(Ak,j) = 0.

(cid:3)

3.4 Sistemas lineares de m equa¸c˜oes com n inc´ognitas

Deﬁni¸c˜ao 3.41. Dados os n´umeros reais b e ai, com i = 1, . . . , n, `a equa¸c˜ao

n
(cid:88)

i=1

aixi = b,

(3.12)

onde xi s˜ao vari´aveis em R, denomina-se equa¸c˜ao linear sobre R nas inc´ognitas xi.

Uma solu¸c˜ao da Equa¸c˜ao (3.12) ´e uma n-upla de n´umeros reais (α1, . . . , αn) tal

que

n
(cid:88)

i=1

aiαi = b.

Deﬁni¸c˜ao 3.42. Um sistema linear de m equa¸c˜oes com n inc´ognitas sobre R, ´e um

conjunto de m equa¸c˜oes lineares, cada uma delas com n inc´ognitas, consideradas simul-

51

taneamente. Um sistema linear representa-se do seguinte modo:






a11x1 + a12x2 + . . . + a1nxn = b1,

a21x1 + a22x2 + . . . + a2nxn = b2,
...
am1x1 + am2x2 + . . . + amnxn = bm.

n
(cid:88)

j=1

aijxj = bi,

1 ≤ i ≤ m,

ou

(3.13)

onde os n´umeros reais aij’s e bi’s s˜ao chamados, respectivamente, de coeﬁcientes do sistema
e termos independentes. Os elementos xj’s s˜ao as vari´aveis em R do sistema.

Diz-se que uma n-upla de n´umeros reais (α1, . . . , αn) ´e solu¸c˜ao do sistema linear

3.13, quando ´e solu¸c˜ao de cada uma das equa¸c˜oes do sistema. O conjunto das solu¸c˜oes ´e

chamado conjunto solu¸c˜ao do sistema.

Quanto as suas solu¸c˜oes, um sistema linear classiﬁca-se como: compat´ıvel e de-

terminado, compat´ıvel e indeterminado ou incompat´ıvel. Um sistema linear ´e chamado

compat´ıvel e determinado, quando tem uma ´unica solu¸c˜ao, compat´ıvel e indeterminado,

quando tem mais de uma solu¸c˜ao e incompat´ıvel, quando n˜ao tem solu¸c˜ao.

Deﬁni¸c˜ao 3.43. Diz-se que dois sistemas de equa¸c˜oes lineares s˜ao equivalentes se eles

admitem as mesmas solu¸c˜oes.

O sistema de m equa¸c˜oes e n inc´ognitas (3.13), pode ser expressado como a

equa¸c˜ao matricial

AX = B,

(3.14)

onde

A =











a11

a12

. . . a1n

a21
a22
...
...
am1 am2

. . . a2n
...
. . .
. . . amn











, X =





















x1

x2
...
xn

e B =











.











b1

b2
...
bm

As matrizes A, X e B s˜ao chamadas matrizes dos coeﬁcientes do sistema, matriz das

inc´ognitas e matriz dos termos independentes, respectivamente.

Diz-se que X0 = [αi]n×1 ´e solu¸c˜ao da equa¸c˜ao matricial (3.14), se AX0 = B.

52

Observa¸c˜ao 3.44. Dois sistemas de equa¸c˜oes lineares s˜ao equivalentes se, e somente se,

suas respectivas equa¸c˜oes matriciais possuem as mesmas solu¸c˜oes.

A matriz

C = [A|B] =











a11 a12

. . . a1n

a21 a22
...
. . .
an1 an2

. . . a2n
...
...
. . . amn











b1

b2
...
bm

´e chamada de matriz ampliada do sistema linear (3.13).

Observa¸c˜ao 3.45. Sejam α1, . . . , αn ∈ R. Ent˜ao (α1, . . . , αn) ´e solu¸c˜ao do sistema linear

(3.13) se, e somente se, a matriz X0 = [αi]n×1 ´e solu¸c˜ao da equa¸c˜ao matricial (3.14).

3.4.1 Opera¸c˜oes elementares de matrizes

Deﬁni¸c˜ao 3.46. Seja A ∈ Mm×n(R). Deﬁnimos as opera¸c˜oes elementares nas linhas da

matriz A, como segue:

(1) Permutar duas linhas de A. Se Li e Lj s˜ao linhas de A, a permuta¸c˜ao destas linhas

´e indicada por Li ↔ Lj.

(2) Multiplicar uma linha de A por um n´umero real k (cid:54)= 0. Se Li ´e uma linha de A, a

multiplica¸c˜ao da linha Li por um n´umero real k (cid:54)= 0 ´e indicada por Li ↔ kLi.

(3) Somar a uma linha de A uma outra linha de A. Se Li e Lj s˜ao linhas de A, `a adi¸c˜ao

da linha Li pela linha Lj ´e indicada por Li ↔ Li + Lj.

Deﬁni¸c˜ao 3.47. Sejam A, B ∈ Mm×n(R). A matriz A ´e dita equivalente por linhas `a

matriz B, se B pode ser obtida de A, pela aplica¸c˜ao sucessiva de um n´umero ﬁnito de

opera¸c˜oes elementares sobre linhas.

Teorema 3.48. Dois sistemas lineares com matrizes ampliadas equivalentes tˆem o mesmo

conjunto solu¸c˜ao.

Demonstra¸c˜ao. Basta provar que uma opera¸c˜ao elementar, sobre a matriz ampliada,

sempre produz um sistema equivalente. Para isto, seja

AX = B

53

(3.15)

uma equa¸c˜ao matricial. A equa¸c˜ao matricial 3.15 ´e equivalente ao sistema

L1X = [b1], . . . , LiX = [bi], . . . , LmX = [bm],

(3.16)



onde A =

L1
...
Lm
solu¸c˜ao de (3.16).













e B = [bi]m×1; isto ´e, X0 ´e solu¸c˜ao de (3.15) se, e somente se, X0 ´e

Suponha que a opera¸c˜ao elementar consiste na permuta¸c˜ao da i-´esima e j-´esima

linha de A, com i < j. Ent˜ao, a equa¸c˜ao matricial 3.15 ´e equivalente ao sistema

L1X = [b1], . . . , Li−1X = [bi−1], LjX = [bj], . . . , LiX = [bi], . . . , LmX = [bm].

(3.17)

Agora, ´e claro que Y ´e solu¸c˜ao do sistema 3.16 se, e somente se, Y ´e solu¸c˜ao do sistema

3.17.

Suponha agora que a opera¸c˜ao elementar consiste na substitui¸c˜ao da i-´esima linha

por k vezes a i-´esima linha (k (cid:54)= 0). Ent˜ao, a equa¸c˜ao matricial 3.15 ´e equivalente ao

sistema

L1X = [b1], . . . , Li−1X = [bi−1], (kLi)X = [kbi], . . . , LmX = [bm].

(3.18)

Agora, se Y ´e solu¸c˜ao do sistema 3.16, ent˜ao

LiY = [bi].

Ent˜ao

(kLi)Y = k(LiY ) = k[bi] = [kbi].

Portanto, Y ´e solu¸c˜ao do sistema 3.18. Reciprocamente, se Y ´e solu¸c˜ao do sistema 3.18,

ent˜ao, em particular,

Ent˜ao

(kLi)Y = [kbi].

LiY = (k−1k)(LiY ) = k−1[kbi] = [bi].

Portanto, Y ´e solu¸c˜ao do sistema 3.16.

Por ﬁm, suponha que a opera¸c˜ao elementar consiste na substitui¸c˜ao da i-´esima

54

linha pela i-´esima linha mais a j-´esima linha, com i < j. Ent˜ao, a equa¸c˜ao matricial 3.15

´e equivalente ao sistema

L1X = [b1], . . . , LiX + LjX = [bi + bj], . . . , LjX = [bj], . . . , LmX = [bm].

(3.19)

Agora, se Y ´e solu¸c˜ao do sistema 3.16, ent˜ao

LiY = [bi]

e LjY = [bj].

Ent˜ao

LiY + LjY = [bi] + [bj] = [bi + bj].

Portanto, Y ´e solu¸c˜ao do sistema 3.19. Reciprocamente, seja Y uma solu¸c˜ao do sistema

3.19, ent˜ao, em particular,

LiY + LjY = [bi + bj].

Ent˜ao

LiY = [LiY + LjY ] − (LjY ) = [bi + bj] − [bj] = [bi + (bj − bj)] = [bi].

Portanto, Y ´e solu¸c˜ao do sistema 3.16.

(cid:3)

Observe que, a no¸c˜ao de equivalˆencia de matrizes por linhas, corresponde `a no¸c˜ao

de equivalˆencia de sistemas lineares, quando se efetuam as respectivas opera¸c˜oes elementa-

res sobre as equa¸c˜oes. De fato, a sistemas equivalentes correspondem matrizes ampliadas

equivalentes.

3.4.2 Forma escalonada de uma matriz

Deﬁni¸c˜ao 3.49. Diz-se que, uma matriz A ∈ Mm×n(R) ´e reduzida por linha `a forma

escada se:

(1) o primeiro elemento n˜ao nulo de cada linha n˜ao nula de A for igual a 1;

(2) cada coluna que cont´em o primeiro elemento n˜ao nulo de alguma linha tem todo os

seus outros iguais a zero;

(3) toda linha nula ocorre abaixo de todas as linhas n˜ao nulas;

55

(4) se L1, . . . , Lp s˜ao as linhas n˜ao nulas, e se o primeiro elemento n˜ao nulo da linha Li

ocorre na coluna ki ent˜ao k1 < · · · < kp.

A Figura 3.2, mostra uma matriz reduzida por linha `a forma escada.

Figura 3.2: Matriz reduzida por linha `a forma escada

Observa¸c˜ao 3.50. Se A ´e uma matriz quadrada de ordem n, reduzida por linha `a forma

escada, que n˜ao possui linhas nulas, ent˜ao A = In.

Teorema 3.51 (Existˆencia e unicidade da forma escada). Dada uma matriz A, existe

uma ´unica matriz (cid:101)A reduzida por linha `a forma escada equivalente a esta.

Demonstra¸c˜ao. A demonstra¸c˜ao da existˆencia ´e apresentada em (HEFEZ, 2012, Teorema

2.2, p´ag.34) e, a demonstra¸c˜ao da unicidade, em (HEFEZ, 2012, Teorema 2.13, p´ag.48).

(cid:3)

Uma opera¸c˜ao elementar na linha de uma matriz A ∈ Mm×n(R) ser´a representada

por e; denotar-se-´a por e(A) a matriz obtida de A aplicando-lhe a opera¸c˜ao e.

Deﬁni¸c˜ao 3.52. Uma matriz elementar de ordem n ´e uma matriz obtida da matriz

identidade In a partir da aplica¸c˜ao de uma opera¸c˜ao elementar, isto ´e, trata-se de uma

matriz da forma

E = e(In)

onde e ´e uma opera¸c˜ao elementar.

Seja A ∈ Mm×n(R). Nos dois pr´oximos resultados, denotaremos por Ai, a i-´esima

linha da matriz A. Assim, escreveremos,

A =








A1
...
Am








.

56

Enunciaremos a seguir um lema que ser´a aplicado no Teorema 3.54.

Lema 3.53. Sejam A ∈ Mm×n(R) e B ∈ Mn×p(R). Ent˜ao (AB)i = AiB, para todo

i = 1, . . . , m.

Teorema 3.54. Seja e uma opera¸c˜ao elementar sobre as matrizes Mm×n(R). Considere

a matriz elementar E = e(Im). Ent˜ao

e(A) = EA, para todo A ∈ Mm×n(R).

Demonstra¸c˜ao. Sejam A ∈ Mm×n(R) e E = e(Im). Pelo Lema 3.53,

(EA)i = EiA e Ai = (ImA)i = I i

mA,

(3.20)

para todo i = 1, . . . , m. Provaremos que, e(A) = EA, para cada opera¸c˜ao elementar e.

Consideraremos trˆes casos:

Caso 1:

e ´e a opera¸c˜ao elementar de permutar a j-´esima linha com a k-´esima linha,

onde 1 ≤ j < k ≤ m. Temos que,

Ei = I i

m,

para todo i = 1, . . . , m com i (cid:54)= j, k,

Ej = I k

m e Ek = I j
m.

Logo, pela Equa¸c˜ao 3.20, para todo i = 1, . . . , m com i (cid:54)= j, k,

(EA)i = EiA = I i

mA = Ai,

(3.21)

e, tamb´em,

(EA)j = EjA = I k

mA = Ak

e

(EA)k = EkA = I j

mA = Aj.

(3.22)

Portanto, de (3.21) e (3.22),

e(A) = EA.

Caso 2: e ´e a opera¸c˜ao elementar de multiplicar a j-´esima linha pelo n´umero real λ (cid:54)= 0,

57

onde 1 ≤ j ≤ m. Temos que,

Ei = I i

m,

para todo i = 1, . . . , m com i (cid:54)= j

e

Ej = λI j
m.

Logo, pela Equa¸c˜ao 3.20, para todo i = 1, . . . , m com i (cid:54)= j,

(EA)i = EiA = I i

mA = Ai,

e, tamb´em,

(EA)j = EjA = (λI j

m)A = λ(I j

mA) = λAj.

(3.23)

(3.24)

Portanto, de (3.23) e (3.24),

e(A) = EA.

Caso 3:

e ´e a opera¸c˜ao elementar de somar a j-´esima linha com a k-´esima linha, onde

1 ≤ j < k ≤ m. Temos que,

Ei = I i

m,

para todo i = 1, . . . , m com i (cid:54)= j

e

Ej = I j

m + I k
m.

Logo, pela Equa¸c˜ao 3.20, para todo i = 1, . . . , m com i (cid:54)= j,

(EA)i = EiA = I i

mA = Ai,

e, tamb´em,

(EA)j = EjA = (I j

m + I k

m)A = (I j

mA) + (I k

mA) = Aj + Ak.

Portanto, de (3.25) e (3.26),

e(A) = EA.

58

(3.25)

(3.26)

(cid:3)

Corol´ario 3.55. Sejam A e B em Mm×n(R). Ent˜ao A ´e equivalente a B se, e somente

se, existem matrizes elementares de ordem m tais que

Es · · · E2 · E1 · A = B.

Demonstra¸c˜ao. Por deﬁni¸c˜ao, A ´e equivalente a B quando existem opera¸c˜oes elementares

e1, e2, . . . , es tais que

es(· · · (e2(e1A)) · · · ) = B.

Pelo Teorema 3.54, a igualdade acima equivale a

Es · · · E2 · E1 · A = B,

onde Ei = ei(Im), para cada 1 ≤ i ≤ s.

(cid:3)

Corol´ario 3.56. Toda matriz elementar ´e invert´ıvel e sua inversa tamb´em ´e uma matriz

elementar.

Demonstra¸c˜ao. Seja E uma matriz elementar. Seja e a opera¸c˜ao elementar tal que

E = e(I). Seja e(cid:48) ´e a opera¸c˜ao elementar inversa de e e se E(cid:48) = e(cid:48)(In), pelo Teorema 3.54,

temos

e

In = e(cid:48)(e(In)) = e(cid:48)(E) = e(cid:48)(In)E = E(cid:48)E

In = e(e(cid:48)(In)) = e(E(cid:48)) = e(In)E(cid:48) = EE(cid:48).

Logo, E ´e invers´ıvel e E−1 = E(cid:48).

(cid:3)

Teorema 3.57. Seja A ∈ Mn(R). Ent˜ao, as seguintes aﬁrma¸c˜oes s˜ao equivalentes:

(1) A ´e invers´ıvel;

(2) a matriz linha escada reduzida da matriz A ´e a matriz In;

(3) A ´e uma matriz elementar ou ´e um produto de matrizes elementares.

Demonstra¸c˜ao. (1) ⇒ (2) Seja (cid:101)A a matriz reduzida por linha `a forma escada e equivalente

a matriz A. Pelo Corol´ario 3.55, existem matrizes elementares E1, . . . , Es de ordem n tais

que

Es · · · E1 · A = (cid:101)A.

59

Por outro lado, pelo Corol´ario 3.56, cada Ei ´e invers´ıvel e sendo A, por hip´otese, invers´ıvel,

pela Proposi¸c˜ao 3.32, temos que (cid:101)A ´e invers´ıvel. Ent˜ao, pela Proposi¸c˜ao 3.31, (cid:101)A n˜ao possui

nenhuma linha nula. Logo, (cid:101)A = In.

(2) ⇒ (3) Suponhamos que A n˜ao ´e uma matriz elementar. Pelo Corol´ario 3.55, existem

matrizes elementares E1, . . . , Es de ordem n tais que

Es · · · E1 · A = In.

Pelo Corol´ario 3.56, cada Ei ´e invert´ıvel, assim, multiplicando, a esquerda, ambos os lados

da igualdade por E−1

1

· · · E−1

s

, tem-se

A = E−1

1

· · · E−1

s

.

Tamb´em, pelo Corol´ario 3.56, cada E−1

i

´e uma matriz elementar. Portanto, A ´e um

produto de matrizes elementares.

(3) ⇒ (1) Sejam E1, . . . , Es matrizes elementares tais que A = E1 · · · Es. Pelo Corol´ario
(cid:3)

3.56 cada Ei ´e invers´ıvel. Logo, pela Proposi¸c˜ao 3.32, A ´e invers´ıvel.

Proposi¸c˜ao 3.58. Sejam A ∈ Mn(R) uma matriz invers´ıvel e e1, . . . , es uma sequˆencia de

opera¸c˜oes elementares tais que es(. . . (e2(e1(A))) . . . ) = In. Ent˜ao essa mesma sequˆencia
de opera¸c˜oes elementares aplicada a In produz A−1.

Demonstra¸c˜ao. Para cada 1 ≤ i ≤ s, seja Ei a matriz elementar correspondente `a opera¸c˜ao

ei. Ent˜ao

Assim,

onde

Es · · · E1A = In

Es · · · E1AA−1 = InA−1,

Es · · · E1In = A−1.

Observa¸c˜ao 3.59. Do Teorema 3.57, decorre uma forma de descobrir se uma matriz
A ∈ Mn(R) admite inversa e, caso seja invers´ıvel, pela Proposi¸c˜ao 3.58, decorre uma

forma de determin´a-la. Se aplicarmos uma sequˆencia de opera¸c˜oes elementares em A at´e

60

(cid:3)

obtermos uma matriz (cid:101)A linha `a forma escada reduzida, pelo Teorema 3.57, A ´e invers´ıvel

se, e somente se, (cid:101)A = In. Se (cid:101)A = In, pela Proposi¸c˜ao 3.58, a sucess˜ao de opera¸c˜oes na

linha da matriz A, que levam na matriz In, ´e a mesma sucess˜ao de opera¸c˜oes que levar´a
In em A−1. Assim, para determinar se a matriz A ´e invers´ıvel, reunimos A e In na matriz

em blocos [A|In], e reduzimos por linha `a forma escada [ (cid:101)A|B]. Se (cid:101)A = In, ent˜ao a matriz
A ´e invers´ıvel e B = A−1, ou seja,

[A|In] −→ [In|A−1];

caso contr´ario, isto ´e, (cid:101)A (cid:54)= In, a matriz A n˜ao ´e invers´ıvel.

Exemplo 3.60. Dada a matriz A =








1

0

2

2 −1 3

4

1

8








∈ M3(R), para determinar A−1, caso

exista, forma-se a matriz em blocos [A|I3]3×6 e a reduz por linha `a forma escada [ (cid:101)A|B].

Assim,















1

0

2

1

0 0

0 −1 −1

−2 1 0

4

1

1

0

8

2

0

1

0 1

0 0

0 −1 −1

−2 1 0

0

0 −1

1 0 2

1

−6 1 1


0

0

0 1 1

2 −1

0

0 0 1

6 −1 −1

1 0 0

−11

0 1 0

−4

2

0

0 0 1

6 −1 −1






2

1








.





























L3 ↔ L3 + L2

L2 ↔ −1L2

L2 ↔ L2 + L3








1

0

2

1 0 0

2 −1 3

0 1 0

4

1

1

0

8

0 0 1

2

1

0 0

0 −1 −1

−2 1 0

0

1

0

−4 0 1

1 0

0 1

2

1

1

0

0

2 −1 0

0 0 −1

−6

1

1

1 0 2

1

0 1 0

−4

0

0

0

1

0 0 1

6 −1 −1

L2 ↔ L2 − 2L1

L3 ↔ L3 − 4L1

L3 ↔ −1L3

L1 ↔ L1 − 2L3


















































Como (cid:101)A =















1 0 0

0 1 0

0 0 1

, ent˜ao A−1 =








−11

−4

2

0

2

1

6 −1 −1





.



61

Teorema 3.61 (Teorema de Binet). 1 Sejam A, B ∈ Mn(R), ent˜ao

det(AB) = det(A) det(B).

Demonstra¸c˜ao. Ver em (HEFEZ, 2012, Teorema 8.7, p´ag.228).

(cid:3)

Corol´ario 3.62. Se A ∈ Mn(R) e det(A) (cid:54)= 0, ent˜ao A ´e invers´ıvel.

Demonstra¸c˜ao. Seja (cid:101)A a matriz linha escada reduzida equivalente a matriz A. Pelo

Corol´ario 3.55, existem matrizes elementares E1, . . . , Es de ordem n tais que

Es · · · E1A = (cid:101)A.

Pelo Corol´ario 3.56, cada Ei ´e invers´ıvel, assim, multiplicando a esquerda, ambos os lados

da igualdade por E−1

1

· · · E−1

s

, tem-se

A = E−1

1

· · · E−1

s (cid:101)A.

Logo, pelo Teorema 3.61,

det(A) = det(E−1

1

· · · E−1

s (cid:101)A) = det((E−1
1

· · · E−1

s )( (cid:101)A)).

Como det(A) (cid:54)= 0 segue que det( (cid:101)A) (cid:54)= 0. Ent˜ao, pela Proposi¸c˜ao 3.40, a matriz (cid:101)A n˜ao
possui linha nula. Portanto, pela Observa¸c˜ao 3.50, (cid:101)A = In. Assim, A = E−1
1

· · · E−1

e,

s

pelo Teorema 3.57, A ´e invers´ıvel.

(cid:3)

Deﬁni¸c˜ao 3.63. Sejam A uma matriz de ordem m × n e a matriz (cid:101)A reduzida por linha `a

forma escada da matriz A. O posto de A, em s´ımbolos posto(A) ou pA, ´e igual ao n´umero

de linhas n˜ao nulas de (cid:101)A. A nulidade de A, ´e igual a n − pA.

Observa¸c˜ao 3.64. As opera¸c˜oes elementares e, a redu¸c˜ao por linha de uma matriz `a
forma escada, foram deﬁnidas sobre as linhas da matriz A ∈ Mm×n(R). Por´em, de modo
an´alogo, podem ser deﬁnidas sobre as colunas da matriz A ∈ Mm×n(R), de forma que,

as proposi¸c˜oes, teoremas e deﬁni¸c˜oes apresentadas nesta se¸c˜ao, continuam sendo v´alidas

e s˜ao demonstradas de maneira an´aloga.

1Jacques Philippe Marie Binet (Fran¸ca), 1786– 1856. Binet foi um dos precursores no estudo dos

fundamentos da teoria matricial. Fonte:http://www.ugr.es/ (Universidad de Granada).

62

Observa¸c˜ao 3.65. As opera¸c˜oes elementares foram deﬁnidas sobre as linhas de uma
matriz A ∈ Mm×n(R). Por´em, de modo an´alogo, podem ser deﬁnidas sobre as colunas

desta matriz. Desta forma, obt´em-se deﬁni¸c˜oes e resultados an´alogos aos apresentados

nesta se¸c˜ao. Em particular, pode-se deﬁnir de forma similar o posto de uma matriz e, tem-

se que o posto (linha) ´e igual ao posto (coluna). Como consequˆencia, obtemos n ≥ pA e,

portanto, n − pA ≥ 0.

Teorema 3.66 (Teorema do Posto). Seja AX = B um sistema linear de m equa¸c˜oes e

n inc´ognitas. Sejam pAB o posto da matriz ampliada do sistema e pA o posto da matriz

dos coeﬁcientes do sistema. Ent˜ao:

(1) O sistema ´e compat´ıvel se, e somente se, pAB = pA;

(2) O sistema ´e compat´ıvel e determinado se pAB = pA = n;

(3) O sistema ´e compat´ıvel e indeterminado se pAB = pA < n. Neste caso, n − pA ´e

o n´umero de parˆametros livres do sistema, ou seja, parˆametros que podem assumir

qualquer valor em R.

Demonstra¸c˜ao. Seja AX = B um sistema linear com m equa¸c˜oes e n inc´ognitas . Seja

C = [A|B]m×n a matriz ampliada do sistema e (cid:101)C = [ (cid:101)A| (cid:101)B]m×n a forma linha escada
reduzida de C. Denotaremos (cid:101)A = [(cid:101)aij]m×n e (cid:101)B = [(cid:101)bij]m×n.

Como (cid:101)A ´e a forma escada reduzida de A e, sendo (cid:101)A um bloco de (cid:101)C, temos que

pA = p

(cid:101)A ≤ p( (cid:101)C) = pAB. Temos os seguintes casos a considerar:

pA < pAB ou pA = pAB.

Caso 1: pA < pAB. Neste caso, (cid:101)C tem uma linha do tipo

[ 0 0 · · ·

0 1 ].

Portanto, o sistema (cid:101)AX = (cid:101)B n˜ao possui solu¸c˜ao e, como (cid:101)C ´e equivalente a C, pelo

Teorema 3.48, o sistema AX = B ´e incompat´ıvel.
Caso 2: pAB = pA. Neste caso, (cid:101)C e (cid:101)A tˆem o mesmo n´umero de linhas n˜ao nulas. Como
pA ≤ n, consideraremos os seguintes subcasos:

pA = n ou pA < n.

63

Subcaso 2.1:

matriz com m linhas e n colunas na forma linha escada reduzida com p

pA = n. Como pA ≤ m segue que n ≤ m. Se n < m e, sendo (cid:101)A uma
(cid:101)A = pA = n, tem-se

que





(cid:101)A =

In

O(m−n)×n





m×n

Como pA = pAB = n, segue que (cid:101)B ´e tal que (cid:101)bn+1 = · · · = (cid:101)bm = 0. Portanto, (cid:101)AX = (cid:101)B

p

´e compat´ıvel e determinado com a ´unica solu¸c˜ao x1 = (cid:101)b1, . . . , xn = (cid:101)bn. Se n = m e
(cid:101)A = pA = n, ent˜ao (cid:101)A = In. Logo, (cid:101)AX = (cid:101)B, tamb´em, ´e compat´ıvel e determinado com
a ´unica solu¸c˜ao x1 = (cid:101)b1, . . . , xn = (cid:101)bn. Consequentemente, pelo Teorema 3.48, o sistema

AX = B ´e compat´ıvel e determinado.
Subcaso 2.2: pA < n. Coloquemos p = pA = pAB. Neste caso, (cid:101)A e (cid:101)C tem as primeiras p
linhas n˜ao nulas: L1, . . . , Lp, tais que o primeiro elemento n˜ao nulo de Li est´a na coluna

ki e, assim, k1 < · · · < kp. Al´em disso, como p = pA < m, temos que p < m ou p = m.

Se p < m segue que (cid:101)bp+1 = · · · = (cid:101)bm = 0. Ent˜ao, a equa¸c˜ao (cid:101)AX = (cid:101)B, se escreve como:




















xk1 + (cid:101)a1,k1+1xk1+1 + · · · + (cid:101)a1nxn
xk2 + (cid:101)a2,k2+1xk2+1 + · · · + (cid:101)a2nxn
...
xkp + (cid:101)ap,kp+1xkp+1 + · · · + (cid:101)apnxn
0
...
0




















=







































(cid:101)b1

(cid:101)b2
...
(cid:101)bp

0
...
0

obtendo-se p equa¸c˜oes lineares:

xk1 + (cid:101)a1,k1+1xk1+1 + · · · + (cid:101)a1nxn =
xk2 + (cid:101)a2,k2+1xk2+1 + · · · + (cid:101)a2nxn =
...
xkp + (cid:101)ap,kp+1xkp+1 + · · · + (cid:101)apnxn =

(cid:101)b1,

(cid:101)b2,
...
(cid:101)bp.

Como a matriz (cid:101)A esta na forma linha escada reduzida, temos que (cid:101)ajki = 0, se i > j para
j = 1, . . . , p − 2 e (cid:101)ap−1,ki = 0, se i = kp. Estas igualdades, nos fornece o sistema de

64

equa¸c˜oes

xk1 = −

xk2 = −

...
xkp−1 = −

xkp = −

(cid:88)

j>k1
(cid:88)

j>k2

(cid:101)a1jxj + (cid:101)b1,

onde (cid:101)a1ki = 0, se i > 1;

(cid:101)a2jxj + (cid:101)b2,

onde (cid:101)a2ki = 0, se i > 2;

(cid:88)

(cid:101)ap−1,jxj + (cid:101)bp−1, onde (cid:101)ap−1,ki = 0, se i = kp;

j>kp−1
(cid:88)

(cid:101)apjxj + (cid:101)bp.

j>kp

Isto mostra que podemos escolher arbitrariamente valores para as inc´ognitas no conjunto

{x1, . . . , xn} \ {xk1, . . . , xkp}

(3.27)

e com esses determinar valores para xk1, · · · , xkp. Como o conjunto em 3.27 tem n − p

elementos, o sistema (cid:101)AX = (cid:101)B tem n − p inc´ognitas livres e, consequentemente, o mesmo

ocorre para o sistema AX = B. Finalmente, o caso p = m ´e similar ao visto anteriormente

para o caso p < m.

(cid:3)

3.4.2.1 M´etodo de Gauss-Jordan

Ao reduzir por linha `a forma escada a matriz ampliada de um dado sistema

linear, pelo Teorema 3.51, existe uma ´unica matriz reduzida por linha `a forma escada

equivalente a esta, ainda, pelo Teorema 3.48, encontramos um outro sistema linear com

o mesmo conjunto solu¸c˜ao do sistema dado, por´em, com express˜oes mais simples. Este

processo ´e chamado de M´etodo de Gauss Jordan.

Exemplo 3.67. Seja o sistema





x + 2z = 7

2x − y + 3z = 9

4x + y + 8z = 30

65

tem-se a matriz ampliada C

C = [A|B] =








1

0

2

2 −1 3

7

9

4

1

8 30








.

Atrav´es de uma sequˆencia de opera¸c˜oes elementares sobre as linhas da matriz C = [A|B],

obtemos a matriz reduzida por linha `a forma escada (cid:101)C = [ (cid:101)A| (cid:101)B].








1

0

0









1

0

2

2 −1 3

7

9

4

1

8 30

0
1
2
−1
4

2
1
2
0

7
5
2
−1
2

0

1 0
1
2
0 0

2

0
1
2

1 0 0

0 1 0
1
2

0 0

7

1
3
2

1

2
3
2














































L2 ↔

−1
2

L2 + L1








0

1 0
1
2
4 1

7
2
5
1
2
2
8 30

L3 ↔ 2L3 + L2

L1 ↔ L1 − 4L3

L3 ↔ 2L3









0

1 0
1
2
0 0









0

1 0
1
2
0 0

2
1
2

1
2

0

0
1
2

7
5
2
3
2

1

1
3
2








1 0 0 1

0 1 0 2

0 0 1 3

L3 ↔

−1
4

L3 + L1

L2 ↔ L2 − L3

L2 ↔ 2L2































Pelo m´etodo de Gauss-Jordan, tem-se x = 1, y = 2 e z = 3, portanto, o conjunto

solu¸c˜ao do sistema linear ´e {(1, 2, 3)}.

Quanto as solu¸c˜oes do sistema linear, pelo Teorema do Posto, sabemos se um dado

sistema linear ´e compat´ıvel e determinado, compat´ıvel e indeterminado ou incompat´ıvel.

Tomemos como exemplo, o sistema linear dado no Exemplo 3.67, onde a matriz ampliada

reduzida por linha `a forma escada ´e

(cid:101)C = [ (cid:101)A| (cid:101)B] =








1 0 0 1

0 1 0 2

0 0 1 3








.

66

Segue que pA = pAB = 3 = n, onde n ´e o n´umero de inc´ognitas, logo, pelo Teorema

do Posto, o sistema linear ´e compat´ıvel e determinado. De fato, como apresentado no

Exemplo 3.67, o conjunto solu¸c˜ao do sistema linear ´e {(1, 2, 3)}.

Exemplo 3.68. Seja o sistema linear





x + 2z + 3z = 15

3x + 3y = 6

6x + 6y = 12

(3.28)

tem-se a matriz ampliada C

C = [A|B] =








1 2 3 15

3 3 0

6

6 6 0 12








.

Atrav´es de uma sequˆencia de opera¸c˜oes elementares sobre as linhas da matriz C = [A|B],

obtemos a matriz reduzida por linha `a forma escada (cid:101)C = [ (cid:101)A| (cid:101)B].






















1 2 3 15

3 3 0

6

6 6 0 12

1 2 3 15

0 1 3 13

0 1 3 13















1 0 −3 −11

0 1

0 0

3

0

13

0

Como (cid:101)C = [ (cid:101)A| (cid:101)B] =








.








L2 ↔

−1
3

L2 + L1

L3 ↔ −L3 + L2















1 2 3 15

0 1 3 13

6 6 0 12

1 2 3 15

0 1 3 13

0 0 0

0















L3 ↔

−1
6

L3 + L1

L1 ↔ L1 − 2L2

1 0 −3 −11

0 1

0 0

3

0

13

0



, ent˜ao pA = pAB = 2 < 3 = n, onde n ´e






o n´umero de inc´ognitas, logo, pelo Teorema do Posto, o sistema linear ´e compat´ıvel e

indeterminado e possui n − pA = 3 − 2 = 1 parˆametro livre.

Para determinar o conjunto solu¸c˜ao do sistema linear (3.28), pelo m´etodo de

67

Gauss-Jordan, tomemos o sistema linear equivalente






x − 3z = −11

y + 3z = 13.

(3.29)

Como existe um parˆametro livre, escolhemos z = t com t ∈ R. Substituindo no sistema

linear (3.29), obtemos y = −3t + 13 e x = 3t − 11.

Portanto, o conjunto solu¸c˜ao do sistema linear (3.28) ´e {(3t − 11, −3t + 13, t); t ∈

R}.

Exemplo 3.69. Seja o sistema linear





x + 2z + 3z = 15

3x + 3y = 6

6x + 6y = 13

(3.30)

tem-se a matriz ampliada C

C = [A|B] =








1 2 3 15

3 3 0

6

6 6 0 13








.

Atrav´es de uma sequˆencia de opera¸c˜oes elementares sobre as linhas da matriz C = [A|B],

obtemos a matriz reduzida por linha `a forma escada (cid:101)C = [ (cid:101)A| (cid:101)B].





























1 2 3 15

3 3 0

6

6 6 0 13

1 2 3 15

0 1 3 13
77
6

0 1 3

L2 ↔

−1
3

L2 + L1

L3 ↔ −L3 + L2















1 2 3 15

0 1 3 13

6 6 0 13

1 2 3 15

0 1 3 13
1
6

0 0 0















L3 ↔

−1
6

L3 + L1

L1 ↔ L1 − 2L2

68






















1 0 −3 −11

0 1

0 0

3

0

13
1
6

1 0 −3

0

0 1

0 0

3

0

13

1








L3 ↔ 6L3

L2 ↔ L2 − 13L3















1 0 −3 −11

0 1

0 0

3

0

1 0 −3 0

0 1

0 0

3

0

0

1

13

1


.













L1 ↔ L1 + 11L3

Como (cid:101)C = [ (cid:101)A| (cid:101)B] =








1 0 −3 0

0 1

0 0

3

0

0

1



, ent˜ao pA = 2 < 3 = pAB, logo, pelo Teorema do






Posto, o sistema linear ´e incompat´ıvel, ou seja, n˜ao possui solu¸c˜ao.

3.4.2.2 Regra de Cramer

Teorema 3.70. Seja A uma matriz quadrada de ordem n. Se A ´e invers´ıvel ent˜ao X0 =

A−1B ´e a ´unica solu¸c˜ao da equa¸c˜ao matricial AX = B.

Demonstra¸c˜ao. Como

A(A−1B) = (A−1A)B = InB = B,

segue que X0 = A−1B ´e solu¸c˜ao da equa¸c˜ao matricial AX = B. Provemos que esta

solu¸c˜ao ´e ´unica, para isto, suponha que a equa¸c˜ao matricial AX = B tenha outra solu¸c˜ao

X1, isto ´e, AX1 = B. Ent˜ao,

X1 = InX1 = (A−1A)X1 = A−1(AX1) = A−1B = X0

Portanto, X = A−1B ´e a ´unica solu¸c˜ao do sistema AX = B.

(cid:3)

O resultado anterior ´e chamado de Regra de Cramer.

Exemplo 3.71. Consideremos o sistema





x + 2z

= 7

2x − y + 3z = 9

4x + y + 8z = 30.

69

(3.31)

O sistema linear ´e equivalente a equa¸c˜ao matricial AX = B, onde

A =








1

0

2

2 −1 3

4

1

8








e B =








.








7

9

30

No Exemplo 3.60, provamos que A ´e invers´ıvel e

A−1 =








−11

−4

2

0

2

1

6 −1 −1








.

Ent˜ao, pela Regra de Cramer,

X0 =








−11

−4

2

0

2

1

6 −1 −1






















7

9

30

=















1

2

3

´e a ´unica solu¸c˜ao da equa¸c˜ao matricial AX = B. Portanto, {(1, 2, 3)} ´e o conjunto solu¸c˜ao

do sistema linear (3.31).

Caso det A = 0, a Regra de Cramer ´e inconclusiva. De fato, nos exemplos 3.68 e

3.69, os sistemas lineares (3.28) e (3.30), possuem a mesma matriz dos coeﬁcientes

A =








1 2 3

3 3 0

6 6 0








,

cujo determinante ´e igual a zero. No entanto, o sistema (3.28) possui inﬁnitas solu¸c˜oes e,

o sistema (3.30), n˜ao possui solu¸c˜ao.

70

Cap´ıtulo 4

Aplica¸c˜ao do FreeMat no estudo de

fun¸c˜oes, matrizes e sistemas lineares

Apoiado sob a concep¸c˜ao do uso dos computadores nas pr´aticas docentes, s˜ao

apresentadas trˆes propostas para aplica¸c˜ao do FreeMat no ensino, sendo cada uma destas

voltadas, respectivamente, para o ensino de fun¸c˜oes, matrizes e sistemas lineares. Estas

propostas, desdobram-se atrav´es de atividades aplicadas e que buscam levar ao discente

novos conceitos n˜ao contemplados na grade curricular do ensino m´edio, tais como, posto

de uma matriz, criptograﬁa e programa¸c˜ao computacional, consequentemente, ampliam

o uso deste software para al´em da obten¸c˜ao de resultados.

Quanto `a aplica¸c˜ao das propostas em sala de aula, visto que, os conte´udos abor-

dados na primeira proposta s˜ao apresentados ao aluno no primeiro ano do Ensino M´edio

e, os conte´udos da segunda e terceira propostas, s˜ao vistos pelo discente no segundo ano,

foi aplicada apenas a primeira proposta, devido ao fato que os conte´udos trabalhados

naquele per´ıodo na institui¸c˜ao escolhida, n˜ao estarem em consonˆancia com os abordados

nas outras propostas.

4.1 Proposta I: Uma abordagem para o ensino e aplica¸c˜ao

das fun¸c˜oes

Esta proposta, divide-se em duas etapas: na primeira (Subse¸c˜ao 4.1.1), s˜ao des-

critas atividades sobre plotagens gr´aﬁcas no FreeMat destinadas ao ensino e aplica¸c˜oes

das fun¸c˜oes. Na segunda etapa (Subse¸c˜ao 4.1.2), atrav´es da estrutura tarif´aria da CAB

71

(Concession´aria dos Servi¸cos P´ublicos de Abastecimento de ´Agua e Esgotamento Sanit´ario

de Cuiab´a), busca-se delimitar uma fun¸c˜ao em que o valor a pagar esteja em fun¸c˜ao do

consumo de ´agua em m3 e, construir um programa computacional no FreeMat, onde seja

reportado o valor cobrado para um respectivo consumo.

4.1.1 Plotagem gr´aﬁca de uma fun¸c˜ao

A plotagem gr´aﬁca de fun¸c˜ao no FreeMat, pode ser feita somente se os seus

dom´ınios forem intervalos fechados. Assim, no caso de fun¸c˜oes polinomiais, apenas plotar´a

os gr´aﬁcos das restri¸c˜oes destas, e as chamaremos como polinomiais.

Sejam a, b ∈ R com a < b. Para plotar o gr´aﬁco da fun¸c˜ao f : [a, b] −→ R,

inicialmente, ´e necess´ario inserir o comando:

x=linspace (a,b)

Este comando refere-se aos valores de entrada para que o programa determine o dom´ınio

da fun¸c˜ao. Depois de inserido, o programa reportar´a alguns valores reais x pertencentes

ao intervalo [a, b].

Tendo o dom´ınio da fun¸c˜ao, o pr´oximo passo para que o programa plote o gr´aﬁco

da fun¸c˜ao f ´e inserir a lei de correspondˆencia y = f (x). Por exemplo, ao inserir leis que

determinem fun¸c˜oes constantes e, fun¸c˜oes polinomiais de grau 1, de grau 2 ou de grau

3, respectivamente, atrav´es da fun¸c˜ao pr´e-deﬁnida do FreeMat (fun¸c˜ao anonymous 1),

deve-se escrever os comandos:

y= @(x) 0*x + s

fun¸c˜ao constante,

y= @(x) p*x + s

fun¸c˜ao polinomial de grau 1,

y= @(x) p*x.^2 + r*x + s

fun¸c˜ao polinomial de grau 2,

y= @(x) p*x.^3 + q*x.^2 +r*x + s

fun¸c˜ao polinomial de grau 3,

onde p, q, r e s s˜ao n´umeros reais dados com p (cid:54)= 0.

Finalmente, para fazer a plotagem, gr´aﬁca considera-se os seguintes casos:

1A fun¸c˜ao anonymous, representada pelo comando @(x), permite declarar a vari´avel independente x

ao deﬁnir uma lei de correspondˆencia.

72

Caso 1: Se f ´e dada por uma ´unica senten¸ca, deve-se inserir o comando:

plot(x,y(x))

Caso 2: Se f ´e uma fun¸c˜ao deﬁnida por partes, como segue:

f (x) =






f1(x), x ∈ [a, b1],

f2(x), x ∈ (b1, b2],
...
fn(x), x ∈ (bn−1, bn];

(4.1)

com bn = b e n ≥ 2, deve-se fazer o mesmo procedimento que no Caso 1, com

algumas restri¸c˜oes, pois, dentre algumas limita¸c˜oes do FreeMat, n˜ao ´e poss´ıvel de-

ﬁnir intervalos semiabertos ou abertos; desta maneira, ao deﬁnir cada intervalo do

dom´ınio (bi−1, bi] com 2 ≤ i ≤ n, sugere-se aproximar o intervalo esquerdo bi−1 por

meio da soma de um n´umero decimal suﬁcientemente pequeno.

Por exemplo, neste caso, pode-se estabelecer intervalos fechados [bi−1 + 0.1, bi] e

usar a vari´avel xi para indicar a vari´avel x ∈ [bi−1 + 0.1, bi] e x1 indicando a vari´avel

x ∈ [a, b1].

Assim, para plotar o gr´aﬁco da fun¸c˜ao deﬁnida por partes f , deve-se deﬁnir cada

intervalo:

x1=linspace(a,b1)

comando para deﬁnir o intervalo [a, b1].

xi=linspace(bi−1 + 0.1,bi)

comando para deﬁnir os intervalos [bi−1 + 0.1, bi].

Ap´os isso, para cada intervalo, deﬁnir as senten¸cas y1 = f1(x) e yi = fi(x), por ﬁm,

plota-se o gr´aﬁco inserindo o comando:

plot(x1, y1(x1), x2, y2(x2), ..., xn, yn(xn))

4.1.1.1 Plotagem gr´aﬁca de duas ou mais fun¸c˜oes no mesmo plano cartesiano

Dadas as fun¸c˜oes fi : [a, b] −→ R tal que yi = fi(x), onde 1 ≤ i ≤ n.

73

Para plotar os n gr´aﬁcos no mesmo plano cartesiano, procede-se de modo an´alogo

para a plotagem gr´aﬁca de uma fun¸c˜ao por partes. Inicialmente, inserir o dom´ınio atrav´es

do comando:

x=linspace(a,b)

Ap´os, deﬁne-se a lei de correspondˆencia yi = fi(x) para cada fun¸c˜ao e plota-se o gr´aﬁco

digitando o comando:

plot(x, y1(x), x, y2(x),..., x, yn(x))

Interse¸c˜ao de fun¸c˜oes: Ao plotar gr´aﬁcos no mesmo plano cartesiano que apresentam

interse¸c˜oes, para evidenci´a-las, inicialmente, seleciona-se a op¸c˜ao Sample(Amostra)

disposta no menu da janela gr´aﬁca, como mostra a Figura 4.1.

Figura 4.1: Menu da Janela gr´aﬁca

Selecionado a op¸c˜ao, clica-se sobre os pontos de interse¸c˜oes que se deseja evidenciar.

Assim, os pares ordenados dos pontos ser˜ao apresentados.

4.1.1.2 Valor num´erico da fun¸c˜ao

Dada a fun¸c˜ao f : [a, b] −→ R com a, b ∈ R e a < b, seja k ∈ [a, b], para

determinar o valor num´erico f (k) da fun¸c˜ao, dividiremos em dois casos:

Caso 1: f ´e dada por uma ´unica senten¸ca.

Deﬁnir o dom´ınio de f atrav´es do comando:

x= linspace(a,b)

e, ap´os, deﬁnir a lei de correspondˆencia y = f (x). Com isto, para determinar o

valor num´erico f (k), basta inserir o comando:

y(k)

74

Caso 2: f ´e uma fun¸c˜ao deﬁnida por partes, como na Equa¸c˜ao 4.1.

Deﬁnir os intervalos do dom´ınio de f , atrav´es dos comandos:

x1=linspace(a,b1)

x2=linspace(b1+0.1,b2)

xi=linspace(b2+0.1,b3)

...

xn=linspace(b(n-1)+0.1,bn)

Ap´os, deﬁnir as respectivas senten¸cas:

y1 = f (x1)

y2 = f (x2)

...

yn = f (xn).

Com isto, para determinar o valor num´erico f (k), com k ∈ (bi−1, bi], deve-se inserir

o comando:

Ou, se k ∈ [a, b1], inserindo o comando:

yi(k)

y1(k)

Atividade 1. Dada a fun¸c˜ao f : [−4, 4] −→ R, deﬁnida por f (x) = x3 + x2 + 1, plotar

seu gr´aﬁco no FreeMat.
Objetivo: Observar o comportamento de uma fun¸c˜ao.

Passo 1: Inserir o dom´ınio da fun¸c˜ao.

O dom´ınio da fun¸c˜ao ´e deﬁnido atrav´es do comando:

x=linspace (-4,4)

Ap´os inserido o comando, ´e reportado alguns valores reais pertencentes ao dom´ınio

de f , como mostra a Figura 4.2.

75

Figura 4.2: Interface do FreeMat ap´os inser¸c˜ao do comando x=linspace(-4,4)

Passo 2: Inserir a lei de correspondˆencia.

A lei que deﬁne a fun¸c˜ao ´e inserida atrav´es do comando:

y=@(x) x.^3 + x.^2 + 1

Passo 3: Plotar o gr´aﬁco da fun¸c˜ao.

O gr´aﬁco ´e plotado atrav´es da inser¸c˜ao do comando:

plot(x,y(x))

A Figura 4.3, mostra a execu¸c˜ao dos passos 2 e 3 da Atividade 1 e, a Figura 4.4,

apresenta o gr´aﬁco da fun¸c˜ao f plotado atrav´es do FreeMat.

76

Figura 4.3: Inser¸c˜ao de comandos para plotar o gr´aﬁco da fun¸c˜ao f

Figura 4.4: Gr´aﬁco da fun¸c˜aof : [−4, 4] −→ R, deﬁnida por f (x) = x3 + x2 + 1

77

Atividade 2. Plote o gr´aﬁco da fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = 10.

Objetivo: Analisar o gr´aﬁco de uma fun¸c˜ao constante.

Passo 1: Inserir o dom´ınio da fun¸c˜ao.

O dom´ınio da fun¸c˜ao ´e deﬁnido atrav´es do comando:

x=linspace(-4,5)

Passo 2: Inserir a lei de correspondˆencia

A lei que deﬁne a fun¸c˜ao ´e inserida atrav´es do comando:

y=@(x) 0*x + 10

Passo 3: Plotar o gr´aﬁco da fun¸c˜ao.

O gr´aﬁco ´e plotado atrav´es da inser¸c˜ao do comando:

plot(x,y(x))

Figura 4.5: Gr´aﬁco da fun¸c˜ao f : [−4.5] −→ R, deﬁnida por f (x) = 10

78

Atividade 3. Dada a fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = x2+1, fa¸ca o seguinte:

(a) plote o gr´aﬁco de f ; (b) atrav´es do teste da reta horizontal, ilustre que a fun¸c˜ao n˜ao ´e

injetiva; (c) evidencie os pontos de interse¸c˜ao da reta horizontal do item (b) com o gr´aﬁco

de f .

Objetivo: Analisar o comportamento de uma fun¸c˜ao n˜ao injetiva atrav´es do gr´aﬁco.

(a) Plotagem gr´aﬁca de f .

Passo 1: Inserir o dom´ınio.

O dom´ınio da fun¸c˜ao ´e deﬁnido atrav´es do comando:

x=linspace(-4,5)

Passo 2: Inserir a lei de correspondˆencia.

A lei que deﬁne a fun¸c˜ao ´e inserida atrav´es do comando:

f=@(x) x.^2+1

Passo 3: Plotar o gr´aﬁco da fun¸c˜ao f .

O gr´aﬁco ´e plotado atrav´es da inser¸c˜ao do comando:

plot(x,f(x))

O gr´aﬁco da fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1 ´e apresentado na

Figura 4.6.

79

Figura 4.6: Gr´aﬁco da fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1

(b) Ilustra¸c˜ao que a fun¸c˜ao f n˜ao ´e injetiva.

Observa¸c˜ao 4.1. Ao ilustrar que a fun¸c˜ao f n˜ao ´e injetiva, deve-se escolher uma

reta horizontal que intersete o gr´aﬁco de f em dois pontos. Escolhemos neste caso

a reta y = 10 e, consideremos, o seu gr´aﬁco correspondente ao gr´aﬁco da fun¸c˜ao

constante g : [−4, 5] −→ R, deﬁnida por g(x) = 10 (isto devido `a limita¸c˜ao do

dom´ınio de f ).

Passo 1: Inserir a lei de associa¸c˜ao da fun¸c˜ao g.

A fun¸c˜ao g ´e deﬁnida atrav´es do comando:

g=@(x) 0*x + 10

Passo 2: Plotar o gr´aﬁco da fun¸c˜ao f e da fun¸c˜ao g no mesmo plano cartesiano.

Plota-se os gr´aﬁcos inserindo o comando:

plot(x,f(x),x,g(x))

O gr´aﬁco da fun¸c˜ao f : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1 e da fun¸c˜ao

g : [−4, 5] −→ R, deﬁnida por g(x) = 10, plotados no mesmo plano cartesiano, s˜ao

80

apresentados na Figura 4.7.

Figura 4.7: Gr´aﬁcos das fun¸c˜oes f, g : [−4, 5] −→ R, deﬁnida por f (x) = x2 + 1 e g(x) = 10

(c) Evidenciando os pontos de interse¸c˜ao da reta horizontal com o gr´aﬁco de f .

Os pontos de interse¸c˜ao s˜ao evidenciados selecionando a op¸c˜ao sample e clicando

sobre os pontos respectivos aos pares ordenados (−3, 10) e (3, 10), como mostra a

Figura 4.8.

Figura 4.8: Ponto de interse¸c˜ao entre os gr´aﬁcos das fun¸c˜oes f e g

81

Atividade 4. Para alugar um carro certa pessoa disp˜oe de duas Locadoras, A e B. A

locadora de autom´oveis A, cobra uma taxa de 20 reais mais 2 reais por quilˆometro rodado,

ap´os a retirada do carro da garagem. J´a, a locadora B, cobra uma taxa de 50 reais mais

1 real por quilˆometro rodado. Utilizando o FreeMat, determine o valor cobrado, por cada

locadora, para ve´ıculos que percorreram uma distˆancia de 10 km e 40 km. Compare

as locadoras, atrav´es da plotagem dos gr´aﬁcos referentes as suas fun¸c˜oes e, de acordo

com os gr´aﬁcos, onde o eixo das abcissas representa a distˆancia a percorrer e o eixo das

ordenadas o valor a pagar, determine em que momento a locadora B se torna mais vi´avel

que a locadora A?
Objetivo: Identiﬁcar os efeitos dos coeﬁcientes angular e linear de uma fun¸c˜ao aﬁm na

representa¸c˜ao gr´aﬁca.

Observa¸c˜ao 4.2. Como visto no Exemplo 3.3, as fun¸c˜oes das locadoras A e B s˜ao,

respectivamente, f : [0, +∞) −→ R tal que f (x) = 2x + 20 e g : [0, +∞) −→ R tal que

g(x) = x+50. Devido o comando linspace aceitar s´o intervalos fechados, ser´a restringido

o dom´ınio dos gr´aﬁcos das fun¸c˜oes f e g. De acordo com o Exemplo 3.3, quando x = 30 km

as fun¸c˜oes igualam seus os valores, desta forma, buscando observar o ponto de interse¸c˜ao

das fun¸c˜oes, escolhe-se o dom´ınio [0, 50]. Assim, considera-se f : [0, 50] −→ R, deﬁnida

por f (x) = 2x + 20, para locadora A e g : [0, 50] −→ R, deﬁnida por g(x) = x + 50, para

locadora B.

Passo 1: Deﬁnir o dom´ınio de cada fun¸c˜ao.

O dom´ınio das fun¸c˜oes da locadora A e B ´e deﬁnido atrav´es do comando:

x= linspace(0,50)

Passo 2: Inserir a lei de correspondˆencia para cada fun¸c˜ao.

Para deﬁnir a lei de correspondˆencia da locadora A e B no FreeMat, digita-se,

respectivamente, os comandos:

e

y1= @(x) 20 + 2*x

y2=@(x) 50 + 1*x

82

Passo 3: Calcular o valor num´erico de cada fun¸c˜ao para x = 10 e x = 40.

Para a locadora A, os respectivos valores num´ericos s˜ao calculados inserindo os

comandos:

e

y1(10)

y1(40)

Para a locadora B, de maneira an´aloga, os respectivos valores num´ericos s˜ao calcu-

lados inserindo os comandos:

e

y2(10)

y2(40)

A Figura 4.9, apresenta a execu¸c˜ao dos passos 1,2 e 3 no FreeMat.

Figura 4.9: Comandos para obter os valores num´ericos das fun¸c˜oes das locadoras de autom´oveis
A e B

55

Passo 4: Plotar os gr´aﬁcos das fun¸c˜oes das locadoras no mesmo plano cartesiano.

Os gr´aﬁcos s˜ao plotados atrav´es do comando:

plot (x,y1(x),x,y2(x))

83

Figura 4.10: Janela gr´aﬁca e os gr´aﬁcos das fun¸c˜oes das locadoras A e B

Na Figura 4.10, s˜ao apresentados os gr´aﬁcos das locadoras e, na Figura 4.11,

apresenta-se o ponto de interse¸c˜ao entre os gr´aﬁcos.

Figura 4.11: Gr´aﬁcos e o ponto de interse¸c˜ao das fun¸c˜oes das locadoras A e B

Passo 5: Evidenciar o ponto de interse¸c˜ao entre os gr´aﬁcos das fun¸c˜oes.

Selecionando a op¸c˜ao Sample (Amostra) no Menu de Ferramentas da janela gr´aﬁca

e clicando no ponto de interse¸c˜ao do gr´aﬁco, evidencia-se o par ordenado (30, 80).

Diante disto, conclui-se que a locadora B, em que o coeﬁciente angular ´e maior

do que o da fun¸c˜ao da locadora A, passa a ser vi´avel ap´os 30 km.

84

4.1.2 Como calcular o custo por consumo em m3 de ´agua?

Nesta etapa, s˜ao apresentadas atividades no qual prop˜oe-se construir uma fun¸c˜ao

deﬁnida por partes em que, o valor a pagar de uma conta de ´agua esteja em fun¸c˜ao do

consumo em m3 e, por meio de uma s´erie de algoritmos, inserir comandos no FreeMat que

reportem este valor quando inserido o consumo do mˆes.

A conta de ´agua a ser utilizada ´e do munic´ıpio de Cuiab´a/MT, referente ao ano de

2014. As faixas de consumo e os respectivos valores cobrados por metro c´ubico da conta de

´agua em quest˜ao s˜ao apresentadas na Figura 4.12, fornecida pela p´agina virtual da CAB
(Concession´aria dos Servi¸cos P´ublicos de Abastecimento de ´Agua e Esgotamento Sanit´ario

de Cuiab´a) e, pode ser acessada pelo s´ıtio virtual http://www.cabcuiaba.com.br/InfGeral.aspx:

A conta de ´agua a ser utilizada ´e do munic´ıpio de Cuiab´a/MT, referente ao ano de

2014. As faixas de consumo e os respectivos valores cobrados por metro c´ubico da conta de

´agua em quest˜ao s˜ao apresentadas na Figura 4.12, fornecida pela p´agina virtual da CAB
(Concession´aria dos Servi¸cos P´ublicos de Abastecimento de ´Agua e Esgotamento Sanit´ario

de Cuiab´a) e, pode ser acessada pelo s´ıtio virtual http://www.cabcuiaba.com.br/InfGeral.aspx:

Figura 4.12: Tabela de Estrutura tarif´aria e dos servi¸cos complementares da CAB

Para o desenvolvimento das atividades, ser´a utilizada a categoria 2 da conta de

´agua, como ´e apresentado na Figura 4.13, sendo esta, referente aos valores cobrados pelo

consumo residencial.

A cobran¸ca para um certo consumo de ´agua, de acordo com a estrutura tarif´aria

apresentada na Figura 4.13, ´e feita da seguinte forma: para os primeiros 10 m3 de ´agua

85

Figura 4.13: Faixas de consumo relativa a categoria 2 da conta de ´agua da CAB

consumido, cobra-se R$ 2,27 por m3 mais um acr´escimo de 90% sobre o valor, para os

pr´oximos 10 m3, cobra-se R$ 2,78 por m3 mais 90 % sobre o valor, assim sucessivamente,

respeitando os intervalos da estrutura tarif´aria apresentada na Figura 4.13.

Exemplo 4.3. O valor a pagar pelo consumo de 15 m3 de ´agua, ´e dado da seguinte

maneira:

(cid:136) Tarifa-se 10 m3 de acordo com o primeiro intervalo da estrutura tarif´aria, isto ´e,

2, 27 · (10) + 0, 9 · [2, 27 · (10)] = 43, 13

(cid:136) Tarifa-se 5 m3 de acordo com o segundo intervalo da estrutura tarif´aria, isto ´e,

2, 78 · (5) + 0, 9 · [2, 78 · (5)] = 26, 41

(cid:136) Soma-se os valores obtidos para determinar o valor a pagar pelo consumo de 15 m3.

Logo, R$ 69,54 ´e o valor a pagar por este consumo.

A continua¸c˜ao s˜ao apresentadas as atividades.

86

Atividade 5. Determinar uma lei de correspondˆencia para cada faixa de consumo da

categoria 2 da conta de ´agua, onde, o valor a pagar y esteja em fun¸c˜ao do consumo x em

m3. Ap´os, expresse uma fun¸c˜ao f tal que f (x) = y.

Objetivo: Apresentar uma aplica¸c˜ao ao consumo de ´agua atrav´es de uma fun¸c˜ao deﬁnida

por partes.

Passo 1: Determine uma lei de correspondˆencia para cada faixa de consumo.

Seja xi o consumo em m3 e yi o valor a pagar em reais para uma faixa de consumo

i, com i ∈ {1, 2, 3, 4, 5}.

Para a primeira faixa de consumo, considere D1 = {x1 ∈ R : 0 ≤ x1 ≤ 10}.

Como cada m3 de ´agua consumida custa R$ 2,27 e ainda ´e acrescido 90% sobre o

valor consumido, tem-se o valor a ser pago dado pela express˜ao:

y1 = 2, 27x1 + 0, 9.(2, 27x1) = 4, 313x1.

Para a segunda faixa de consumo, considere D2 = {x2 ∈ R : 10 < x2 ≤ 20}. Como
cada m3 de ´agua consumida custa R$ 2,78 e ainda ´e acrescido 90% sobre o valor

consumido, tem-se o valor a ser pago dado pela express˜ao:

y = 2, 78x2 + 0, 9.(2, 78x2) = 5, 282x2.

Ao expressar a segunda faixa desta maneira, para os 10 m3 relativos ao primeiro

intervalo, ´e cobrado R$ 52, 82 ao inv´es de R$ 43, 13, ou seja, ´e cobrado um valor a

mais de 52, 82 − 43, 13 = R$ 9, 69. Assim,

y2 = 5, 282x2 − 9, 69.

Determina-se as pr´oximas express˜oes procedendo de maneira an´aloga ao m´etodo

apresentado na segunda faixa de consumo.

Para a terceira faixa de consumo, considere D3 = {x3 ∈ R : 20 < x3 ≤ 30}. Tem-se

o valor a ser pago dado pela express˜ao:

y3 = 8, 816x3 − 80, 379.

87

Para a quarta faixa de consumo, considere D4 = {x4 ∈ R : 30 < x4 ≤ 50}. Tem-se

o valor a ser pago dado pela express˜ao:

y4 = 10, 792x4 − 139, 65.

Para a quinta faixa de consumo, considere D5 : {x ∈ R : x > 50}. Tem-se o valor a

ser pago dado pela express˜ao:

y5 = 14, 269x5 − 313, 5.

Passo 2: Expressar uma fun¸c˜ao f tal que f (x) = y.

Observa-se que, D1 ∪ D2 ∪ D3 ∪ D4 ∪ D5 = [0, +∞). Portanto, pode-se expressar a
fun¸c˜ao f : [0, +∞) −→ R, como sendo

f (x) =






4, 313x,

se 0 ≤ x ≤ 10;

5, 282x − 9, 69,

se 10 < x ≤ 20;

8, 816x − 80, 379,

se 20 < x ≤ 30;

10, 792x − 139, 65,

se 30 < x ≤ 50;

14, 269x − 313, 65,

se x > 50.

Atividade 6. Plote o gr´aﬁco da fun¸c˜ao f , obtida na Atividade 5.

Objetivo: Analisar o aumento de valores cobrados de acordo com cada faixa de consumo

relativo a categoria 2 da conta de ´agua.

Observa¸c˜ao 4.4. Como citado na Se¸c˜ao 4.1.1, o FreeMat n˜ao permite deﬁnir intervalos

semiabertos, com isto, o dom´ınio da fun¸c˜ao f ser´a restringido. Com o objetivo de ana-

lisar todas as faixas de consumo, visto que, consumos de ´agua maiores que 100 m3 nas

residˆencias ´e algo incomum. O dom´ınio ser´a dado por [0, 100] e os subintervalos ser˜ao

deﬁnidos como [0, 10], [10.1, 20], [20.1, 30], [30.1, 50] e [50.1, 100].

Passo 1: Deﬁnir os subintervalos do dom´ınio da fun¸c˜ao.

Os subintervalos do dom´ınio ser˜ao deﬁnidos, respectivamente, atrav´es da inser¸c˜ao

88

dos seguintes comandos:

x1= linspace(0,10);

x2= linspace(10.1,20);

x3= linspace(20.1,30);

x4= linspace(30.1,50);

x5= linspace(50.1,100);

Passo 2: Inserir a lei de correspondˆencia para cada intervalo do dom´ınio.

As express˜oes s˜ao inseridas no FreeMat atrav´es dos respectivos comandos:

y1=@(x1) 4.313*x1;

y2=@(x2) 5.282*x2-9.69;

y3=@(x3) 8.816*x3-80.37;

y4=@(x4) 10.792*x4-139.65;

y5=@(x5) 14.269*x5-313.5;

Passo 3: Plotar o gr´aﬁco da fun¸c˜ao f .

O gr´aﬁco ´e plotado com a inser¸c˜ao do comando:

plot(x1,y1(x1),x2,y2(x2),x3,y3(x3),x4,y4(x4),x5,y5(x5))

Figura 4.14: Inser¸c˜ao de comandos no FreeMat para desenvolvimento da Atividade 6

89

Na Figura 4.14, mostra-se a execu¸c˜ao da Atividade 6 no FreeMat e, na Figura

4.15, ´e apresentado o gr´aﬁco da fun¸c˜ao deﬁnida por partes f , referente a categoria 2 da

conta de ´agua em quest˜ao.

Figura 4.15: Gr´aﬁco da fun¸c˜ao f deﬁnida na Atividade 5

Atividade 7. Utilizando a estrutura tarif´aria da categoria 2, fornecido pela CAB (Figura

4.13) e a fun¸c˜ao deﬁnida na Atividade 5, construa um programa no FreeMat e o intitule

de “VALORES”, o qual deve fazer o seguinte: ao inserir um valor correspondente ao

consumo de ´agua em m3 de uma residˆencia, deve ser reportado o valor a pagar em reais.

Objetivo: Evidenciar a matem´atica envolvida na programa¸c˜ao computacional.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘valores’ como o nome para o

programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function VALORES

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda n~ao, na linha

90

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Criar um display com informa¸c˜oes referente a aplica¸c˜ao do programa.

Cria-se o display, inserindo o comando:

disp(‘Programa para determinar o valor decorrente do consumo

de ´agua das resid^encias de Cuiab´a’)

Passo 4: Deﬁnir a entrada das vari´aveis independentes da fun¸c˜ao f .

Para selecionar a entrada de valores correspondentes ao consumo em m3, digita-se

o comando:

x=input (‘Insira o consumo em m3==>’)

Passo 5: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com o consumo inse-

rindo, para determinar o valor a pagar.

P asso 5.1: Inserir comando executando a¸c˜oes se o consumo ´e referente ao pri-

meiro intervalo da fun¸c˜ao f .

if x>=0 & x<=10

consumo=x

y= 4.313*x;

disp(‘Valor a pagar em reais:’)

valor=y

P asso 5.2: Inserir comando executando a¸c˜oes se o consumo ´e referente ao se-

gundo intervalo da fun¸c˜ao f .

91

elseif x>10 & x<=20

consumo=x

y= 5.282*x-9.69;

disp(‘Valor a pagar em reais’)

valor=y

P asso 5.3: Inserir comando executando a¸c˜oes se o consumo ´e referente ao ter-

ceiro intervalo da fun¸c˜ao f .

elseif x>20 & x<=30

consumo=x

y= 8.816*x-80.37;

disp(‘Valor a pagar em reais’)

valor=y

P asso 5.4: Inserir comando executando a¸c˜oes se o consumo ´e referente ao quarto

intervalo da fun¸c˜ao f .

elseif x>30 & x<=50

consumo=x

y= 10.792*x-139.65;

disp(‘Valor a pagar em reais’)

valor=y

P asso 5.5: Inserir comando executando a¸c˜oes se o consumo ´e referente ao quinto

intervalo da fun¸c˜ao f .

elseif x>50

consumo=x

y=14.269*x-313.5;

disp(‘Valor a pagar em reais’)

valor=y

end

92

Passo 6: Deﬁnir uma pergunta, para que o usu´ario escolha se o programa deve ser rei-

nicializado, ap´os, encerrar o programa.

continuar=input(‘Deseja obter o valor cobrado

para outro consumo? sim/nao’);

disp (‘* Fim do programa *’)

end

Figura 4.16: Editor do FreeMat e parte dos comandos relativos ao programa “VALORES”

Passo7: Salvar o programa.

Para salv´a-lo, na barra do Menu do editor, selecione a op¸c˜ao F ile e clique em Save.

Ap´os selecionado, abrir´a uma nova janela onde deve-se escolher um diret´orio para

salvar o arquivo (escolha preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “VALORES” e salvo na extens˜ao .m, assim o

arquivo ﬁnal ser´a: VALORES.m.

Observa¸c˜ao 4.5. O programa ´e apresentado integralmente no Apˆendice A.1, para utiliz´a-

lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha do

editor do FreeMat, salvando-o no diret´orio corrente do computador.

Atividade 8. Utilize o programa, desenvolvido na Atividade 7, para determinar o valor

cobrado para o consumo de 50 m3.

93

Objetivo: Apresentar a aplicabilidade e facilidade trazida pela programa¸c˜ao computacio-

nal para desenvolvimento de problemas e tarefas matem´aticas.

Passo 1: Abrir o programa ‘VALORES’.

Para abrir o programa, na janela de comando digita-se:

VALORES

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.17).

Figura 4.17: Compilando o programa “VALORES” no FreeMat: primeira etapa do programa

Passo 2: Inserir o consumo de 50 m3.

O programa solicitar´a a inser¸c˜ao de um consumo em m3, para inserir o consumo de

50 m3, digita-se:

50

e, ao pressionar Enter, o programa reportar´a o valor cobrado, como mostra a Figura

4.18.

Passo 3: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.17, caso contr´ario, se inserir sim , o programa ´e ﬁnalizado,

sendo apresentado o display da Figura 4.19.

94

Figura 4.18: Compilando o programa “VALORES” no FreeMat: segunda etapa do programa

Figura 4.19: Compilando o programa “VALORES” no FreeMat: terceira etapa do pro-
grama

4.1.3 Relato da aplica¸c˜ao da proposta no Ensino M´edio

As abordagens para o ensino e aplica¸c˜ao das fun¸c˜oes atrav´es do FreeMat foram

desenvolvidas no Instituto Federal de Mato Grosso, Campus S˜ao Vicente, localizado na

BR-163/364, zona rural do munic´ıpio de Santo Antˆonio do Leverger/MT. A institui¸c˜ao

oferta cursos t´ecnicos e superiores, sendo estes, Ensino M´edio T´ecnico em Agropecu´aria,

Bacharelado em Agronomia, Bacharelado em Zootecnia, Tecn´ologo em An´alise e De-

senvolvimento de Sistemas, e, Licenciatura em Ciˆencias da Natureza. O curso T´ecnico

em Agropecu´aria ´e integrado ao Ensino M´edio, sendo, ofertado em modalidade seriado

95

de per´ıodo integral e organizado em trˆes anos. A escola disp˜oe de diversos laborat´orios

climatizados (inform´atica, processamento de carne, matem´atica, biologia, qu´ımica, psicul-

tura, etc), 2 audit´orios, biblioteca, quadra de esporte coberta, alojamentos, restaurante

e salas de aulas climatizadas. Os estudantes matriculados no ensino m´edio moram nos

alojamentos da escola e apresentam idade escolar entre 14 e 16 anos.

Das 5 turmas de primeiro ano do Ensino M´edio T´ecnico em Agropecu´aria, foi

escolhida a “Turma B”, para aplicar as abordagens. Estas, foram aplicadas durante os

dias: 21 de outubro, 4 e 11 de novembro, 2 e 14 de dezembro do ano de 2014. Durante

o desenvolvimento da proposta, a turma apresentava trinta e trˆes discentes matriculados

em per´ıodo integral. Ressalta-se que, aulas sobre fun¸c˜oes j´a haviam sido ministradas para

estes discentes no per´ıodo anterior `a aplica¸c˜ao da proposta e n˜ao havia sido utilizado

nenhum recurso computacional. As aulas foram aplicadas no laborat´orio de inform´atica

da institui¸c˜ao que dispunha de 22 computadores, por´em, apenas 16 estavam funcionando

corretamente. Devido a quantidade de computadores os discentes se organizaram em

pares e, para iniciar as aplica¸c˜oes, cada par fez download do programa na internet e o

instalou. A Figura 4.20, ´e uma foto tirada durante a aula ministrada no dia 4 de novembro

de 2014.

Durante o desenvolvimento da Subse¸c˜ao 4.1.1, percebeu-se que, os passos toma-

dos para a plotagem gr´aﬁca de uma fun¸c˜ao atrav´es do FreeMat, trouxeram ao discente

facilidade em compreender e ﬁxar a deﬁni¸c˜ao de uma fun¸c˜ao, onde, visualizaram-na como

a terna: dom´ınio, contradom´ınio e lei de correspondˆencia. Os discentes tamb´em de-

monstraram facilidades ao plotarem os gr´aﬁcos das fun¸c˜oes apresentadas na proposta,

em decorrˆencia disto, plotaram outros gr´aﬁcos de fun¸c˜oes polinomiais com grau maior

que 3. No ﬁnal da aplica¸c˜ao destas atividades, quando comparado com aulas de esbo¸co

gr´aﬁco utilizando r´egua e quadro, destacou-se a grande quantidade de fun¸c˜oes estudadas

pelos alunos e o estudo de fun¸c˜oes polinomiais de grau maior ou igual a 3, que n˜ao s˜ao

apresentadas aos discentes do ensino b´asico.

Quanto a aplica¸c˜ao da Atividade 4 , onde se prop˜oe delimitar a melhor oferta

ao alugar um autom´ovel, destaca-se que, ao analisar a melhor oferta atrav´es do ponto de

interse¸c˜ao dos gr´aﬁcos, os discentes apresentaram diﬁculdades em identiﬁcar o gr´aﬁco de

cada fun¸c˜ao das locadoras. Diante disto, para an´alises gr´aﬁcas no mesmo plano cartesiano,

observou-se ser necess´ario ensinar o comando que deﬁne a cor do gr´aﬁco de acordo com

96

Figura 4.20: Desenvolvimento da Proposta I com os alunos do IFMT no Laborat´orio de In-
form´atica

a lei estipulada, facilitando a identiﬁca¸c˜ao dos gr´aﬁcos pertencentes ao mesmo plano

cartesiano. Como n˜ao foi deﬁnido as cores do gr´aﬁco para cada fun¸c˜ao, alguns alunos

n˜ao conseguiram identiﬁcar o respectivo gr´aﬁco plotado. Com a ajuda do professor, esta

identiﬁca¸c˜ao foi feita depois de orientada a analogia entre o coeﬁciente linear da fun¸c˜ao

e a interse¸c˜ao deste com o eixo das ordenadas. Constru´ıdo e identiﬁcado cada gr´aﬁco,

os discentes visualizaram facilmente o comportamento de cada fun¸c˜ao e explanaram qual

seria a melhor escolha de acordo com o ponto de interse¸c˜ao do gr´aﬁco, sendo assim,

alcan¸cado o objetivo da atividade.

No desenvolvimento da Subse¸c˜ao 4.1.2, na Atividade 5, relata-se que, muitos alu-

nos apresentaram diﬁculdades em construir uma lei de associa¸c˜ao que caracteriza-se o valor

a pagar em fun¸c˜ao da quantidade em m3 de ´agua consumida. Dentre estas diﬁculdades,

a mais relevante, foi ao determinar as porcentagens e, apresentar a lei de correspondˆencia

para cada faixa de consumo, bem como, na interpreta¸c˜ao das faixas de consumo e, das

mudan¸cas nos valores cobrados de acordo com os intervalos da categoria 2. Deﬁnidas as

leis de correspondˆencia, na Atividade 6, durante a inser¸c˜ao dos comandos das fun¸c˜oes

no FreeMat, os discentes n˜ao apresentaram diﬁculdades, compreendendo e executando

perfeitamente a sequˆencia de comandos inseridos para plotagem gr´aﬁca. O entusiasmo

e facilidade na constru¸c˜ao gr´aﬁca com o aux´ılio do FreeMat, implicou na facilidade em

interpretar graﬁcamente o comportamento da fun¸c˜ao de acordo com o consumo do mˆes.

Durante o desenvolvimento destas atividades, ressalta-se, o bom rendimento dos discen-

97

tes, quanto a utiliza¸c˜ao do FreeMat na inser¸c˜ao de comandos, para determinar o valor

num´erico e plotar o gr´aﬁco da fun¸c˜ao deﬁnida por partes. Pondera-se, as diﬁculdades dos

discentes na interpreta¸c˜ao e constru¸c˜ao de problemas na linguagem matem´atica formal.

Na aplica¸c˜ao da Atividade 7, onde se prop˜oe programar a conta de ´agua, alguns

alunos n˜ao conseguiram deﬁnir os comandos de condi¸c˜ao e repeti¸c˜ao, onde, foi necess´ario

desenvolver no quadro os passos 4.1 e 4.2. Ao observarem o desenvolvimento destes passos

no quadro e a fun¸c˜ao f deﬁnida na Atividade 6, o programa “VALORES” foi constru´ıdo

e aplicado facilmente. Ao ﬁnal desta atividade, houve a percep¸c˜ao e coment´arios dos

discentes quanto a matem´atica presente nas m´aquinas e nos programas utilizados para

determinar valores no com´ercio, bem como, observaram a importˆancia da matem´atica na

vida social e no desenvolvimento da tecnologia, assim como almejado pela proposta.

Ao ﬁnalizar o desenvolvimento da Proposta I, observou-se, a aceita¸c˜ao e entusi-

asmo dos discentes quanto as aulas dentro da metodologia do uso do computador, tamb´em,

poucas diﬁculdades encontradas no que diz respeito ao uso do software e na ﬁxa¸c˜ao dos

conte´udos.

4.2 Proposta II: Ensino de matrizes utilizando o Fre-

eMat, das opera¸c˜oes com matrizes `a criptograﬁa.

Nesta se¸c˜ao, apresentaremos uma a proposta que visa refor¸car o ensino das

opera¸c˜oes com matrizes no Ensino M´edio. Tamb´em, mostra-se aplica¸c˜oes decorrentes

do estudo de determinantes e das matrizes inversas. Na Subse¸c˜ao 4.2.1 s˜ao apresentadas

atividades voltadas para o estudo das opera¸c˜oes com matrizes, determinantes e matriz in-

versa. E, na Subse¸c˜ao 4.2.2, s˜ao descritas atividades voltadas para aplica¸c˜ao das matrizes

na criptograﬁa e desenvolvimento de um programa para criptografar e decifrar mensagens.

4.2.1 Ensino de matrizes

Para inserir um comando que deﬁna uma matriz de ordem m × n no FreeMat,

este deve ser disposto entre colchetes onde, os elementos de uma mesma linha estejam

separados por um espa¸co, neste caso o comando ter´a n−1 espa¸cos, e as linhas devem estar

separadas por ponto e v´ırgula, de forma que o comando tenha m − 1 pontos e v´ırgulas.

98

Assim, dada um matriz real











A =

a11

a12

· · ·

a1n

a22
a21
...
...
am1 am2

· · ·

· · ·

a2n
...
· · · amn











o comando para deﬁni-la seria:

A=[a11 a12

· · ·

a1n ; a21 a22 · · ·

a2n; · · · ;am1 am2

· · ·

amn]

No Cap´ıtulo 2, foram apresentados comandos para determinar opera¸c˜oes com

matrizes e comandos para inser¸c˜ao de alguns tipos de matrizes, a qual ser˜ao utilizados,

corriqueiramente, nesta se¸c˜ao.

A continua¸c˜ao, mostra-se alguns comandos no FreeMat, para calcular algumas

opera¸c˜oes com matrizes.

Determinante: Inserida a matriz A, para calcular o seu determinante, digita-se o co-

mando:

det(A)

Matriz ampliada: Inseridas duas matrizes A e B, para determinar a matriz ampliada

C = [A|B], digita-se o comando:

C=[A B]

Matriz na forma escada: Para determinar a matriz escada reduzida por linha da ma-

triz C, ap´os inserida, digita-se o comando:

rref(C)

Posto da matriz: Para determinar o posto de uma matriz A no FreeMat, considera-se

duas maneiras:

(i) Inserir a matriz A e determinar o valor do posto atrav´es do comando:

rank(A)

99

(ii) Inserir a matriz A e obter a forma escada da matriz atrav´es do comando:

rref(A)

Matriz inversa: Para veriﬁcar se uma matriz A de ordem n admite inversa e determin´a-

la, tamb´em ser´a considerada duas formas:

(i)

P asso 1 : Inserir a matriz A e veriﬁcar se a matriz admite inversa, para

isto, calcula-se o determinante atrav´es do comando:

det(A)

P asso 2 : Se a matriz A admite inversa, determina-se a inversa atrav´es do

comando:

inv(A)

(ii)

P asso 1 : Inserir a matriz A e veriﬁcar se a matriz admite inversa, para

isto, calcula-se o posto atrav´es do comando:

rank(A)

P asso 2 : Se a matriz A admite inversa, para determin´a-la, inserir a matriz

ampliada C = [A|In] atrav´es o comando:

C=[A eye(n)]

P asso 3 : Por ﬁm, obter a matriz inversa atrav´es do comando:

rref(C)

100

Atividade 9. Dadas as matrizes:

A =











1

4

0

2

1

3

15

6 −13

2 −3

5

23 3

5 −7











, B =











5

5

4 −1

3

6

0

50

1

2 −4 15

−12 52 −4

0











e C =











0

5

−4 −1

2

6

0

5

10

12 −3 1

−2

2 −4 1











,

pertencentes a M4(R), calcule (3A + C)B.

Objetivo: Desenvolver as opera¸c˜oes de adi¸c˜ao, subtra¸c˜ao, produto de matrizes e produto

de um escalar pela matriz atrav´es do FreeMat.

Passo 1: Inserir as matrizes A, B e C no FreeMat.

Para inserir as matrizes A, B e C no FreeMat, deve-se digitar os respectivos coman-

dos:

A=[1 2 3 15; 4 1 6 -13; 0 2 -3 5; 23 3 5 -7]]

B=[5 5 3 0; 4 -1 6 50; 1 2 -4 15; -12 52 -4 0]

C=[0 5 2 0; -4 -1 6 5; 10 12 -3 1; -2 2 -4 1]

Passo 2: Calcular (3A + C)B.

Determina-se a matriz decorrente da opera¸c˜ao (3A + C)B, inserindo o seguinte

comando:

obtendo-se a matriz:

(3*A+C)*B











−470

2366 −149 715

−480 −1682

76

−82

840

630 −694

122

303

460

720

715











.

Na Figura 4.21, ´e apresentado o desenvolvimento da Atividade 9 no FreeMat.

101

Figura 4.21: Desenvolvimento da Atividade 9 no FreeMat

Atividade 10. Dada a matriz C =














1 2

4 1

3

6

0 0

5 3

0 2 −3 5 1

4 1

8

5 1

7 5 −3 3 1














, pertencente a M5(R), calcule

det(C)C t, onde C t ´e a matriz transposta de C.

Objetivo: Assimilar os passos para calcular o determinante de uma matriz e a matriz

transposta, bem como, oper´a-los atrav´es da utiliza¸c˜ao do FreeMat.

Passo 1: Deﬁnir a matriz C.

A matriz C ´e inserida atrav´es do comando:

C=[1 2 3 0 0; 4 1 6 5 3; 0 2 -3 5 1; 4 1 8 5 1; 7 5 -3 3 1]

Passo 2: Calcular det(C)C t.

Para calcular det(C)C t, deve-se digitar o comando:

det(C)*C’

102

obtendo-se a matriz:














−1860 −7440

0

−7440 −13020

−3720 −1860 −3720 −1860 −9300

−5580 −11160

5580 −14880

5580

0

0

−9300 −9300 −9300 −5580

−5580 −1860 −1860 −1860














.

Na Figura 4.22, ´e apresentado o desenvolvimento da Atividade 10 no FreeMat.

Figura 4.22: Desenvolvimento da Atividade 10 no FreeMat

Atividade 11. Veriﬁque se a matriz A =








da matriz B =








27/136

1/8 −5/34

−61/136

1/8

5/34

53/136 −1/8 −1/34








2

6

3

7

5

5

1 10 11




.



, pertencente a M3(R), ´e inversa

Objetivo: Fixar a deﬁni¸c˜ao de matriz inversa e desenvolvimento da multiplica¸c˜ao de

matrizes no FreeMat.

Passo 1: Inserir a matriz A e B.

103

As matrizes A e B s˜ao deﬁnidas atrav´es dos seguintes comandos:

A=[2 3 5; 6 7 5; 1 10 11]

B=[27/136 1/8 -5/34; -61/136 1/8 5/34; 53/136 -1/8 -1/34]

Passo 2: Determinar os produtos AB e BA.

Determina-se os produtos atrav´es dos comandos:

A*B

B*A

Passo 3: Veriﬁcar os resultados reportados.

Os resultados reportados pelo FreeMat s˜ao iguais `a matriz identidade. Logo, B ´e

inversa de A.

Na Figura 4.23, ´e apresentado os resultados dos produtos AB e BA.

Figura 4.23: Desenvolvimento da Atividade 11 no FreeMat

104

Atividade 12. Utilize a primeira forma, dada na Subse¸c˜ao 4.2.1, para veriﬁcar se a

matriz A =










1

0

2

2 −1 3

4

1

8

, pertencente a M3(R), admite inversa e, se admitir, determine






a matriz inversa B de A.

Objetivo: Apresentar uma aplica¸c˜ao dos determinantes ao veriﬁcar se uma matriz admite

inversa e o comando para obtˆe-la.

Passo 1: Inserir a matriz A.

Insira a matriz A no FreeMat, atrav´es do comando:

A=[1 0 2 ; 2 -1 3; 4 1 8]

Passo 2: Veriﬁcar se a matriz A admite inversa. Para veriﬁcar se a matriz A admite

inversa, calcule o determinante da matriz inserindo o comando:

det(A)

Como det A = 1 (cid:54)= 0 a matriz admite inversa.

Passo 3: Determinar a matriz inversa.

Determina-se a matriz inversa B, inserindo o comando:

obtendo-se a matriz B =

B=inv(A)








−11

−4

2

0

2

1

6 −1 −1








.

Na Figura 4.24, ´e apresentado o desenvolvimento da Atividade 12 no FreeMat.

105

Figura 4.24: Desenvolvimento da Atividade 12 no FreeMat

Atividade 13. Utilize a segunda forma, dada na Subse¸c˜ao 4.2.1, para veriﬁcar se a matriz





A =






2

6

3

7

5

5

1 10 11

, pertencente a M3(R), admite inversa e, se admitir, determine a






matriz inversa B de A.

Objetivo: Obter a matriz inversa atrav´es da forma escada da matriz ampliada.

Passo 1: Inserir a matriz A.

Insira a matriz A no FreeMat, atrav´es do comando:

A= [2 3 5; 6 7 5; 1 10 11]

Passo 2: Veriﬁcar se a matriz A admite inversa.

Para veriﬁcar se a matriz A admite inversa, calcule o posto da matriz A inserindo

o comando:

rank(A)

Como o posto(A) = 3, a matriz admite inversa.

Passo 3: Deﬁnir a matriz ampliada C = [A|In].

106

A matriz ´e inserida no FreeMat atrav´es do comando:

C=[A eye(3)]

Passo 4: Obter a forma escada reduzida da matriz C.

A matriz ´e obtida atrav´es da inser¸c˜ao do comando:

rref(C)

obtendo-se a matriz








C (cid:48) =

1 0 0

0, 1985

0, 1250 −0, 1471

0 1 0 −0, 4485

0, 1250

0, 1471

0 0 1

0, 3897 −0, 1250 −0, 0294








e, portanto a matriz inversa de A ´e a matriz








B =

0, 1985

0, 1250 −0, 1471

−0, 4485

0, 1250

0, 1471

0, 3897 −0, 1250 −0, 0294








.

Figura 4.25: Desenvolvimento da Atividade 13 no FreeMat

107

Na Figura 4.25, ´e apresentado o desenvolvimento da Atividade 13 no FreeMat.

Observa¸c˜ao 4.6. Na Atividade 11, foi veriﬁcado que a inversa da matriz A ´e a matriz:








27/136

1/8 −5/34

−61/136

1/8

5/34

53/136 −1/8 −1/34








.

J´a, na Atividade 13, a inversa foi dada pela matriz:








0, 1985

0, 1250 −0, 1471

−0, 4485

0, 1250

0, 1471

0, 3897 −0, 1250 −0, 0294








.

Embora sejam matrizes distintas, cada elemento da matriz possui seus valores

aproximados por 4 casas decimais. Isto, deve-se ao fato, do FreeMat estar conﬁgurado

para apresentar at´e 4 casas decimais, ap´os a v´ırgula (format short). No entanto, ´e

poss´ıvel conﬁgur´a-lo para reportar at´e 14 casas decimais, ap´os a v´ırgula, digitando o

comando (format long). Neste ´ultimo formato, o programa ir´a apresentar um valor

aproximado para este elemento com exatamente 14 casas decimais, ap´os a v´ırgula.

Na Figura 4.26, ´e apresentado o desenvolvimento da Atividade 13 utilizando o

comando format long.

Em particular, a matriz inversa da matriz A, apresentada na Atividade 13, ser´a

reportada da seguinte maneira:








0, 19852941176471

0, 12500000000000 −0, 147105882352941

−0, 44852941176471

0, 12500000000000

0, 147105882352941

0, 38970588235294 −0, 12500000000000 −0, 02941176470588








.

108

Figura 4.26: Desenvolvimento da Atividade 13 no FreeMat, utilizando o comando format long

4.2.2 Criptografando mensagens atrav´es do FreeMat

Todas as atividades apresentadas nesta subse¸c˜ao ter˜ao por objetivo criptografar

mensagens no FreeMat, utilizando o sistema poligr´aﬁco apresentado na Subse¸c˜ao 3.3.2.

Atividade 14. Utilizando o FreeMat, insira comandos para corresponder cada letra do

alfabeto dado na Subse¸c˜ao 3.2.2, de acordo com a Tabela 3.2.

As letra do alfabeto dado na Subse¸c˜ao 3.2.2, s˜ao correspondidas a um n´umero

inteiro no FreeMat, ao digitar, simultaneamente, os seguintes comandos entre ponto e

v´ırgula:

a=1; b=2; c=3; d=4; e=5; f=6; g=7; h=8; i=9; j=10; k=11; l=12;m=13;n=14;

o=15; p=16; q=17; r=18; s=19; t=20; u=21; v=22; w=23; x=24; y=25; z=26;

N˜ao h´a necessidade de declarar o caractere 0.

Na Figura 4.27, mostra-se a execu¸c˜ao da Atividade 14 no FreeMat e, na Figura

4.28, apresenta as vari´aveis salvas ap´os a inser¸c˜ao dos comandos.

109

Figura 4.27: Desenvolvimento da Atividade ?? no FreeMat

Figura 4.28: Vari´aveis armazenados e dispostos na janela V ariables

110

Atividade 15. Dado o texto comum “Alan Turing”1, divida este texto em blocos de 3

caracteres e, utilizando a correspondˆencia num´erica da Tabela 3.2 (inserida na Atividade

14), forme uma matriz M de ordem 4 × 3.

Passo 1: Dividir o texto comum em blocos de 3 caracteres.

Acrescentando o caractere 0 para completar espa¸cos em branco e, agrupando em 4

blocos, contendo cada um 3 elementos, obt´em-se os seguintes blocos:

ala

n0t

uri

ng0

Passo 2: Determinar a matriz M , cujas entradas s˜ao dadas pela correspondˆencia num´erica

da Tabela 3.2.

A matriz ´e descrita, inserindo o seguinte comando:

M=[a l a; n 0 t; u r i; n g 0]

Na Figura 4.29, ´e apresentada a matriz reportada pelo programa.

Figura 4.29: Desenvolvimento da Atividade 15 no FreeMat

1Alan Turing, 1912-1954: Matem´atico britˆanico que lan¸cou bases para ciˆencias da computa¸c˜ao for-
malizando o conceito de algoritmo. Durante a Segunda Guerra Mundial teve papel instrumental no
desenvolvimento de t´ecnicas capazes de decifrar mensagens codiﬁcadas usadas pelos alem˜aes. Fonte:
http://www.ugr.es/∼aprieto/Ciclo conferencias vf3.pdf

111

Atividade 16. Considere a matriz chave A =








1

0

2

2 −1 3

4

1

8








∈ M3(R). Por meio do

FreeMat, utilize a matriz chave A, para criptografar a mensagem: “Alan Turing”.

Passo 1: Inserir a matriz chave A.

A matriz ´e inserida atrav´es do comando:

A=[1 0 2; 2 -1 3; 4 1 8]

Passo 2: Dividir o texto comum em blocos de 3 caracteres.

De modo idˆentico ao que foi feito na Atividade 15, acrescenta-se o caractere 0

para completar espa¸cos em branco e, agrupando em 4 blocos, contendo cada um 3

elementos, obt´em-se os seguintes blocos:

ala

n0t

uri

ng0

Passo 3: Inserir a matriz M , cujas entradas s˜ao dadas pela correspondˆencia num´erica

da Tabela 3.2.

A matriz ´e inserida atrav´es do seguinte comando:

M=[a l a; n 0 t; u r i; n g 0]

Passo 4: Obter a matriz cifrada M A.

A matriz cifrada ´e dada, inserindo o comando:

MA=M*A

Na Figura 4.30, ´e apresentada a matriz criptografada M A.

112

Figura 4.30: Desenvolvimento da Atividade 16 no FreeMat

Passo 5: Apresentar a mensagem a ser transmitida.

Agrupando as linhas da matriz M A, em sequˆencia, obt´em-se a mensagem a ser

transmitida:

29 -11 46 94 20 188 93 -9 168 28 -7 49

Atividade 17. Considere a matriz chave A =

FreeMat, decifre o criptograma:








1

0

2

2 −1 3

4

1

8








∈ M3(R). Por meio do

29 -11 46 94 20 188 93 -9 168 28 -7 49

Passo 1: Inserir a matriz chave A.

A matriz ´e inserida atrav´es do comando:

A=[1 0 2; 2 -1 3; 4 1 8]

Passo 2: Agrupar os blocos do criptograma e obter a matriz C formada por estes blocos.

Agrupa-se em 4 blocos, contendo cada um 3 elementos.

29 − 11 46

94 20 168

93 − 9 168

28 − 7 49

113

Ent˜ao

C =











29 −11

46

94

20

168

93 −9

168

28 −7

49











.

Passo 3: Inserir a matriz C de ordem 3 × 4.

Como cada bloco corresponde a uma linha da matriz C, a matriz ´e inserida atrav´es

do comando:

C=[29 -11 46; 94 20 188; 93 -9 168; 28 -7 49]

Passo 4: Obter os blocos do texto comum.

Para obter os blocos do texto comum, deve-se inserir o comando:

M=C*inv(A)

Na Figura 4.31, ´e apresentada a matriz M .

Figura 4.31: Desenvolvimento da Atividade 17 no FreeMat

Passo 5: Apresentar a mensagem transmitida.

114

Agrupando as linhas da matriz M obtida no Passo 4, em sequˆencia, obt´em-se:

1 12 1 14 0 20 21 18 9 14 7 0

Logo, utilizando a correspondˆencia num´erica da Tabela 3.2, obt´em-se o texto co-

mum:

alan0turing0

Portanto, a mensagem transmitida era “Alan Turing”.

Atividade 18. Considere a matriz chave A =





3 1

4 5


 ∈ M2(Z27). Por meio do Free-

Mat, utilize a matriz A, para criptografar a mensagem: “Alan Turing”.

Passo 1: Inserir a matriz chave A.

A matriz ´e inserida atrav´es do comando:

A=[3 1; 4 5]

Passo 2: Dividir o texto comum em blocos de 2 caracteres.

De modo idˆentico ao que foi feito na Atividade 15, acrescenta-se o caractere 0

para completar espa¸cos em branco e, agrupando em 6 blocos, contendo cada um 2

elementos, obt´em-se os seguintes blocos:

al

an

0t

ur

in

g0

Passo 3: Inserir a matriz M , cujas entradas s˜ao dadas pela correspondˆencia num´erica

da Tabela 3.2.

A matriz ´e inserida atrav´es do seguinte comando:

M=[a l; a n; 0 t; u r; i n; g 0]

Passo 4: Obter a matriz cifrada M A.

115

A matriz cifrada com entradas em M2(Z27) ´e obtida inserindo o comando:

MA=mod(M*A,27)

NA Figura 4.32, ´e apresentada a matriz criptografada M A.

Figura 4.32: Desenvolvimento da Atividade 18 no FreeMat

Passo 5: Apresentar a mensagem a ser transmitida.

Agrupando as linhas da matriz M A obtida no Passo 4, em sequˆencia, obt´em-se:

24 7 5 17 26 19 0 3 2 25 21 7

Logo, utilizando a correspondˆencia num´erica da Tabela 3.2, obt´em-se a mensagem

a ser transmitida:

xgeqzs0cbyug

Atividade 19. Considere a matriz chave A =

Mat, decifre o criptograma:





3 1

4 5


 ∈ M2(Z27). Por meio do Free-

Passo 1: Inserir a matriz chave A.

xgeqzs0cbyug

116

A matriz ´e inserida atrav´es do comando:

A=[3 1; 4 5]

Passo 2: Agrupar os blocos do criptograma e obter a matriz C formada por estes blocos.

Agrupa-se em 6 blocos, contendo cada um 2 elementos.

xg

eq zs

0c

by

ug

Ent˜ao,

C =

















x g

e q

z s

0 c

b y

u g

















.

Passo 3: Inserir a matriz C de ordem 2 × 6.

Como cada bloco corresponde a uma linha da matriz C, a matriz ´e inserida atrav´es

do comando:

C=[x g; e q; z s; 0 c; b y; u g]

Passo 4: Obter a matriz chave inversa.

Como 3 · 5 − 4 · 1 = 11 e, pela Tabela 3.1, o inverso multiplicativo de 11 em Z27 ´e

5, ent˜ao,

A−1 = 5 ·





5 −1

−4

3



 .

Logo a matriz invA = A−1 ´e obtida inserindo o comando:

invA= 5*[5 -1;-4 3]

Passo 5: Obter os blocos do texto comum.

117

Para obter os blocos do texto comum, deve-se inserir os comandos:

M=mod(C*invA,27)

Na Figura 4.33, ´e apresentada a matriz M .

Figura 4.33: Desenvolvimento da Atividade 19 no FreeMat

Passo 6: Apresentar a mensagem transmitida.

Agrupando as linhas da matriz M obtida no Passo 4, obt´em-se:

1 12 1 14 0 20 21 18 9 14 7 0

Logo, utilizando a correspondˆencia num´erica da Tabela 3.2, obt´em-se o texto co-

mum:

alan0turing0

Portanto, a mensagem transmitida era “Alan Turing”.

118

Atividade 20. Utilizando o sistema poligr´aﬁco baseado na multiplica¸c˜ao de matrizes

com entradas em R, construa um programa no FreeMat, para criptografar mensagens

de texto comum, e o intitule de ‘CRIPTOGRAFAR’. O programa deve fazer o seguinte:
a) solicitar a inser¸c˜ao da matriz chave A ∈ Mn(R); b) se det A (cid:54)= 0, o programa deve

solicitar o ingresso da matriz M de ordem m × n, onde cada linha da matriz M ´e formada

por m blocos de n letras do texto comum; c) se det A = 0, o programa deve reportar a

seguinte mensagem para o usu´ario: “A matriz chave n˜ao ´e v´alida, pois a matriz n˜ao ´e

invers´ıvel”.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘CRIPTOGRAFAR’ como nome

para o programa.

No menu do FreeMat selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

CRIPTOGRAFAR

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda nao, na linha

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Corresponder cada letra do alfabeto, dado na Subse¸c˜ao 3.2.2, com um n´umero

inteiro, de acordo com a Tabela 3.2.

A correspondˆencia ´e deﬁnida inserindo os comandos:

a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;

o=15;p=16;q=17;r=18;s=19;t=20; u=21; v=22; w=23; x=24; y=25; z=26;

N˜ao h´a necessidade de declarar o caractere 0.

119

Passo 4: Criar um display com informa¸c˜oes referente ao programa e que apresente a

correspondˆencia de cifras, deﬁnida no Passo 3.

Cria-se o display, com os caracteres e valores da tabela deﬁnidos no Passo 2, inserindo

os comandos:

clc

disp(‘Programa para criptograr mensagens pelo sistema poligr´afico’)

disp(‘ baseado no m´etodo de multiplica¸c~ao de matrizes com entradas reais’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26;’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

Passo 5: Deﬁnir comandos para o usu´ario inserir a matriz chave A ∈ Mn(R) e para o

programa armazenar a ordem da matriz inserida.

Para deﬁnir a entrada da matriz chave A e informar ao usu´ario quais matrizes devem

ser inseridas, digita-se o comando:

A=input(‘Entre com a matriz chave de ordem n : A =’)

Para o programa armazenar a ordem da matriz inserida, deﬁne-se o comando

[I,J]= size(A);

Passo 6: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com a chave crip-

togr´aﬁca inserida, para determinar a matriz criptografada ou, caso contr´ario, apre-

sentar mensagens sobre a validade da chave criptogr´aﬁca.

As chaves v´alidas dever˜ao ser de ordem n e invert´ıveis, se estas condi¸c˜oes s˜ao v´alidas

dever´a ser apresentada a matriz decifrada.

P asso 6.1: Inserir comando executando a¸c˜oes se a chave inserida n˜ao ´e invers´ıvel.

elseif det(A)==0

disp(‘A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel’)

. reiniciar=input(‘Deseja encerrar o programa? sim / nao’ )

disp(‘Fim do Programa.’)

120

P asso 6.2: Inserir comando executando a¸c˜oes se a chave criptogr´aﬁca ´e v´alida,

ou seja, se a condi¸c˜ao anterior n˜ao ´e satisfeita.

else

clc

disp (‘A matriz de M deve possuir J elementos em cada linha’)

J=J

M=input(‘Entre com a matriz cujas entradas s~ao caracteres

do texto comum. M=’)

disp (‘Cada linha da matriz MA ´e um bloco do criptograma’)

MA=M*A

continuar=input(‘Deseja encerrar o programa? sim /nao’)

disp (‘Fim do Programa.’)

end

end

Passo 7: Salvar o programa.

Para salv´a-lo, selecione a op¸c˜ao Save ou Save As do menu. Ap´os selecionado, abrir´a

uma nova janela onde deve-se escolher um diret´orio para salvar o arquivo (escolha

preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “CRIPTOGRAFAR” e salvo na extens˜ao .m,

assim o arquivo ﬁnal ser´a: “CRIPTOGRAFAR.m”. Na Figura 4.34, apresenta-se

parte dos comandos relativos a este programa.

Observa¸c˜ao 4.7. O programa ´e apresentado integralmente no Apˆendice A.2, para utiliz´a-

lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha do

editor do FreeMat, salvando-o no diret´orio corrente do computador.

121

Figura 4.34: Editor do FreeMat e parte dos comandos relativos ao programa “CRIPTOGRA-
FAR”

Atividade 21. Utilizando o m´etodo poligr´aﬁco baseado na multiplica¸c˜ao de matrizes

com entradas em R, construa um programa no FreeMat, para decifrar textos cifrados, e

o intitule de “DECIFRAR”. O programa deve fazer o seguinte: a) solicitar a inser¸c˜ao da
matriz chave A ∈ Mn(R); b) se det A (cid:54)= 0, o programa deve solicitar o ingresso da matriz

C de ordem m × n, onde cada linha da matriz C ´e formada por blocos de n caracteres

do texto cifrado; c) se det A = 0, o programa deve reportar a seguinte mensagem para o

usu´ario: ‘A matriz chave n˜ao ´e v´alida, pois a matriz n˜ao ´e invers´ıvel”.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘DECIFRAR’ como nome para o

programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

DECIFRAR

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

122

Para que o programa seja reinicializado, caso o usu´ario responda nao, na linha

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Criar um display com informa¸c˜oes referente ao programa e que apresente a

correspondˆencia de cifras deﬁnida no Passo 2.

Cria-se o display, com os caracteres e valores da tabela deﬁnidos no Passo 2, inserindo

os comandos:

clc

disp(‘Programa para decifrar mensagens pelo sistema poligr´afico’)

disp(‘baseado no m´etodo de multiplica¸c~ao de matrizes com entradas reais.)’

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26;’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

Passo 4: Deﬁnir comandos para que o usu´ario insira a a matriz chave A ∈ Mn(R) e para

o programa armazenar a ordem da matriz inserida.

Para deﬁnir a entrada da matriz chave A e informar ao usu´ario quais matrizes devem

ser inseridas, digita-se o comando:

A=input(‘Entre com a matriz chave de ordem n:

A = ’)

Para o programa armazenar a ordem da matriz inserida, deﬁne-se o comando

[I,J]=size(A)

Passo 5: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com a chave crip-

togr´aﬁca inserida, para determinar a matriz decifrada ou, caso contr´ario, apresentar

mensagens sobre a validade da matriz chave.

A matriz chave v´alida dever´a ser invers´ıvel, se esta condi¸c˜ao ´e valida deve ser re-

portada a matriz decifrada.

123

P asso 5.1: Inserir comando executando a¸c˜oes se a chave inserida n˜ao ´e invers´ıvel.

if det(A)==0

disp(‘A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel.’)

reiniciar=input(‘Deseja encerrar o programa? sim / nao’ )

disp(‘Fim do Programa.’)

P asso 5.2 : Inserir comando executando a¸c˜oes se a chave criptogr´aﬁca ´e v´alida,

ou seja, se a condi¸c˜ao anterior n˜ao ´e satisfeita.

else

disp (‘A matriz de C deve possuir J elementos em cada linha’)

J=J

C=input(‘Entre com a matriz cujos elementos s~ao caracteres)

do criptograma.

C=’)

D=inv(A);

disp (‘*Cada linha da matriz M ´e um bloco do texto comum.*’)

M=C*inv(A)

disp (‘*Utilize a tabela abaixo para escrever o texto comum.*’)

disp (’*Tabela de correspond^encia num´eria*’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11; l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

continuar=input(’Deseja encerrar o programa? sim / nao=’

end

end

Passo 6: Salvar o programa.

Para salv´a-lo, selecione a op¸c˜ao Save ou Save As do menu. Ap´os selecionado, abrir´a

uma nova janela onde deve-se escolher um diret´orio para salvar o arquivo (escolha

preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “DECIFRAR” e salvo na extens˜ao .m, assim

124

o arquivo ﬁnal ser´a: “DECIFRAR.m”. Na Figura 4.35, apresenta-se parte dos

comandos relativos a este programa.

Figura 4.35: Editor do FreeMat e parte dos comandos relativos ao programa “DECIFRAR”

Observa¸c˜ao 4.8. O programa ´e apresentado integralmente no Apˆendice A.3, para utiliz´a-

lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha do

editor do FreeMat, salvando-o no diret´orio corrente do computador.

Atividade 22. Considere a matriz chave: A =















1 0 2

3 5 1

2 2 0

∈ M3(R). Por meio do pro-

grama “CRIPTOGRAFAR” desenvolvido na Atividade 20, utilize a matriz chave A, para

criptografar a mensagem: “Mestrado Proﬁssional em Matem´atica em Rede Nacional”.

Passo 1: Abrir o programa.

Para abrir o programa, na janela de comandos, digita-se:

CRIPTOGRAFIA

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.36).

125

Figura 4.36: Desenvolvimento da Atividade 22, primeira etapa do programa

Passo 2: Inserir a matriz chave A =








1 0 2

3 5 1

2 2 0





.



Para inserir a matriz chave, digita-se o comando:

[1 0 2; 3 5 1; 2 2 0]

e, ao pressionar Enter, ´e solicitado para o usu´ario inserir a matriz M , cujas entradas

s˜ao os caracteres do texto comum, conforme ´e apresentado na Figura 4.37.

Passo 3: Inserir a matriz onde as entradas s˜ao caracteres do texto comum.

A matriz ´e inserida atrav´es do comando:

[m e s;t r a;d o 0;p r o;f i s;s i o;n a l;0 e m;0 m a;t e m;

a t i;c a 0;e m 0;r e d;e 0 n; a c i; o n a; l 0 0]

Ao pressionar Enter, o programa reportar´a a matriz criptografada, apresentada na

Figura 4.38.

126

Figura 4.37: Desenvolvimento da Atividade 22, segunda etapa do programa.

Figura 4.38: Desenvolvimento da Atividade 22, terceira etapa do programa

127

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.36, caso contr´ario, se inserir sim , o programa ´e ﬁnalizado,

sendo apresentado o display da Figura 4.39.

Figura 4.39: Desenvolvimento da Atividade 22, quarta etapa do programa.

Passo 5: Apresentar a mensagem a ser transmitida:

Agrupando as linhas da matriz M A obtida no Passo 3, em sequˆencia, obt´em-se a

mensagem a ser transmitida:

66 63 31 76 92 58 49 75 23 100 120 50 71 83 21 76 75 47 41 29 29 41 51 5 41 67

13 61 51 45 79 118 22 6 5 7 44 65 23 41 33 41 33 28 10 28 33 5 59 72 44 12 0 24

Atividade 23. Considere a matriz chave: A =















1 0 2

3 5 1

2 2 0

∈ M3(R). Por meio do

programa “DECIFRAR”, desenvolvido na Atividade 21, decifre o criptograma:

66 63 31 76 92 58 49 75 23 100 120 50 71 83 21 76 75 47 41 29 29 41 51 5 41 67

13 61 51 45 79 118 22 6 5 7 44 65 23 41 33 41 33 28 10 28 33 5 59 72 44 12 0 24

128

Passo 1: Abrir o programa.

Para abrir o programa, na janela de comandos, digita-se:

DECIFRAR

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.40).

Figura 4.40: Desenvolvimento da Atividade 23, primeira etapa do programa.

Passo 2: Inserir a matriz chave A =








1 0 2

3 5 1

2 2 0





.



Para inserir a matriz chave, digita-se o comando:

[1 0 2; 3 5 1; 2 2 0]

e, ao pressionar Enter, ´e solicitado para o usu´ario inserir a matriz C, cuja entradas

s˜ao caracteres do criptograma, conforme mostra a Figura 4.41.

129

Figura 4.41: Desenvolvimento da Atividade 23, segunda etapa do programa.

Passo 3: Inserir a matriz onde as entradas s˜ao caracteres do criptograma.

A matriz ´e inserida atrav´es do comando:

[66 63 31;76 92 58;49 75 23;100 120 50;71 83 21;76 75 47;41 29 29;41 51 5;41 67 13;

61 51 45; 79 118 22;6 5 7;44 65 23;41 33 41;33 28 10;28 33 5; 59 72 44; 12 0 24]

Ao pressionar Enter, o programa reportar´a a matriz decifrada apresentada na Figura

4.42.

Figura 4.42: Desenvolvimento da Atividade 23, terceira etapa do programa.

130

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.40, caso contr´ario, se inserir sim , o programa ´e ﬁnalizado,

sendo apresentado o display da Figura 4.43.

Figura 4.43: Desenvolvimento da Atividade 23, quarta etapa do programa.

Passo 5: Revelar a mensagem.

Agrupando as linhas da matriz M obtida no Passo 3, obt´em-se:

13 5 19 20 18 1 4 15 0 16 18 15 6 9 19 19 9 15 14 1 12 0 5 13 0 13

1 20 5 13 1 20 9 3 1 0 5 13 0 18 5 4 5 0 14 1 3 9 15 14 1 12 0 0

Logo, utilizando a correspondˆencia num´erica da tabela, apresentada no display,

obt´em-se o texto comum:

mestrado0profissional0em0matematica0em0rede0nacional00

Portanto, a mensagem transmitida era: “Mestrado Proﬁssional em Matem´atica em

Rede Nacional”.

131

Atividade 24. Utilizando o sistema poligr´aﬁco baseado na multiplica¸c˜ao de matrizes
com entradas em Z27, construa um programa no FreeMat, para criptografar mensagens

de texto comum, e o intitule de ‘CRIPTOGRAFAR2HILL’. O programa deve fazer o
seguinte: a) solicitar a inser¸c˜ao da matriz chave A ∈ M2(Z27); b) se A ´e invers´ıvel o

programa deve solicitar o ingresso da matriz M de ordem m × 2, onde cada linha da

matriz M ´e formada por m blocos de 2 letras do texto comum; c) se A n˜ao ´e invers´ıvel,

o programa deve reportar a seguinte mensagem para o usu´ario: “A matriz chave n˜ao ´e

v´alida, pois a matriz n˜ao ´e invers´ıvel”.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘CRIPTOGRAFAR2HILL’ como

nome para o programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

CRIPTOGRAFAR2HILL

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda nao, na linha

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Corresponder cada letra do alfabeto, dado na Subse¸c˜ao 3.2.2, com um n´umero

inteiro, de acordo com a Tabela 3.2.

A correspondˆencia ´e deﬁnida inserindo os comandos:

a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;

o=15;p=16;q=17;r=18;s=19;t=20; u=21; v=22; w=23; x=24; y=25; z=26;

N˜ao h´a necessidade de declarar o caractere 0.

132

Passo 4: Criar um display com informa¸c˜oes referente ao programa e que apresente a

correspondˆencia de cifras deﬁnida no Passo 2.

Cria-se o display, com os caracteres e valores da tabela deﬁnidos no Passo 2, inserindo

o comando:

clc

disp(‘Programa para criptografar mensagens pelo sistema poligr´afico’)

disp(‘ 2-Cifras de Hill.

’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26;’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

Passo 5: Deﬁnir comandos para o usu´ario inserir a matriz chave A ∈ Mn(Z27).

Para deﬁnir a entrada da matriz chave A e informar ao usu´ario quais matrizes devem

ser inseridas, digita-se o comando:

A=input(‘Entre com a matriz chave de ordem 2 : A =’)

Passo 6: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com a matriz chave

inserida, para determinar a matriz criptografada ou, caso contr´ario, apresentar men-

sagens sobre a validade da matriz chave.

As chaves v´alidas dever˜ao ser de ordem 2 e invers´ıveis, se estas condi¸c˜oes s˜ao v´alidas

dever´a ser apresentada a matriz cifrada.

Observa¸c˜ao 4.9. Para constru¸c˜ao do pr´oximo passo, ´e fundamental observar a

Proposi¸c˜ao 3.29 e a Tabela 3.1.

P asso 6.1: Inserir comando executando a¸c˜oes se a chave inserida n˜ao ´e de ordem

2 ou n˜ao ´e invers´ıvel.

if size(A) ∼ =[2,2] || mod(A(1)*A(4)-A(2)*A(3),3)==0

disp(‘A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel.’)

reiniciar=input(‘Deseja encerrar o programa? sim / nao’ )

disp(‘Fim do Programa.’)

133

P asso 6.2: Inserir comando executando a¸c˜oes se a chave criptogr´aﬁca ´e v´alida,

ou seja, se as condi¸c˜oes anteriores n˜ao s˜ao satisfeitas.

else

disp (‘A matriz M deve possuir 2 elementos em cada linha’)

M=input(‘Entre com a matriz cujas entradas s~ao caracteres

do texto comum. M=’)

disp (‘ Cada linha da matriz MA ´e um bloco do criptograma’)

MA=mod(M*A,27)

disp (‘Utilize a tabela abaixo para escrever o criptograma.’)

disp (‘Tabela de correspond^encia num´eria’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11; l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

continuar=input(‘Deseja encerrar o programa? sim /nao’)

disp(‘Fim do Programa’)

end

end

Passo 7: Salvar o programa.

Para salv´a-lo, selecione a op¸c˜ao Save ou Save As do menu. Ap´os selecionado, abrir´a

uma nova janela onde deve-se escolher um diret´orio para salvar o arquivo (escolha

preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “CRIPTOGRAFARHILL2” e salvo na extens˜ao

.m, assim o arquivo ﬁnal ser´a: “CRIPTOGRAFARHILL2.m”.

134

Observa¸c˜ao 4.10. O programa ´e apresentado integralmente no Apˆendice A.4, para uti-

liz´a-lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha

do editor do FreeMat, salvando-o no diret´orio corrente do computador.

Atividade 25. Utilizando o m´etodo poligr´aﬁco baseado na multiplica¸c˜ao de matrizes
com entradas em Z27, construa um programa no FreeMat para decifrar textos cifrados,

e o intitule de “DECIFRARHILL2”. O programa deve fazer o seguinte: a) solicitar a

inser¸c˜ao da matriz chave A =





a1 a2

a3 a4


 ∈ M2(Z27); b) se A ´e invers´ıvel, o programa

deve solicitar o ingresso da matriz C de ordem m × 2, onde cada linha da matriz C ´e

formada por m blocos de 2 caracteres do texto cifrado; c) se A n˜ao ´e invers´ıvel, o programa

deve reportar a seguinte mensagem para o usu´ario: “A matriz chave n˜ao ´e v´alida, pois a

matriz n˜ao ´e invers´ıvel”.
Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘DECIFRARHILL2’ como nome

para o programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

DECIFRARHILL2

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda nao, na linha

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Corresponder cada letra do alfabeto, dado na Subse¸c˜ao 3.2.2, com um n´umero

inteiro, de acordo com a Tabela 3.2.

A correspondˆencia ´e deﬁnida inserindo os comandos:

a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;

o=15;p=16;q=17;r=18;s=19;t=20; u=21; v=22; w=23; x=24; y=25; z=26;

135

N˜ao h´a necessidade de declarar o caractere 0.

Passo 4: Criar um display com informa¸c˜oes referente ao programa e que apresente a

correspondˆencia de cifras deﬁnida no Passo 2.

Cria-se o display, com os caracteres e valores da tabela deﬁnidos no Passo 2, inserindo

os comandos:

clc

disp(‘Programa para decifrar mensagens pelo sistema poligr´afico’)

disp(‘ 2-Cifras de Hill.

’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26;’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

Passo 5: Deﬁnir comandos para que o usu´ario insira a matriz chave A ∈ M2(Z27) e para


o programa armazenar a matriz D =




 ∈ M2(Z27).

a4 −a2

−a3

a1

Para deﬁnir a entrada da matriz chave A e informar ao usu´ario quais matrizes devem

ser inseridas, digita-se o comando:

A=input(‘Entre com a matriz chave de ordem 2:

A = ’)

Para o programa armazenar a matriz D, deﬁne-se o comando:

D[A(4) -A(3); -A(2) A(1)])

Passo 6: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com a matriz chave

inserida, para determinar a matriz criptografada ou, caso contr´ario, apresentar men-

sagens sobre a validade da matriz chave .

As chaves v´alidas s˜ao de ordem 2 e invers´ıveis, se estas condi¸c˜oes s˜ao v´alidas dever´a

ser apresentada a matriz decifrada.

Observa¸c˜ao 4.11. Para constru¸c˜ao do pr´oximo passo, ´e fundamental observar a

Proposi¸c˜ao 3.29 e a Tabela 3.1.

136

P asso 6.1: Inserir comando executando a¸c˜oes se a chave inserida n˜ao ´e de ordem

2 ou n˜ao ´e invers´ıvel.

if size(A) ∼ =[2,2] || mod(A(1)*A(4)-A(2)*A(3),3)==0

disp(‘A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel.’)

reiniciar=input(‘Deseja encerrar o programa? sim / nao’ )

disp(‘Fim do Programa.’)

P asso 6.2: Inserir comandos executando a¸c˜oes se a chave criptogr´aﬁca ´e v´alida,

ou seja, se as condi¸c˜oes anteriores n˜ao s˜ao satisfeitas.

elseif mod(A(1)*A(4)-A(2)*A(3)),27)==1

inv=1*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==2

inv=14*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==4

inv=7*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==5

inv=11*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==7

inv=4*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==8

inv=17*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==10

inv=19*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==11

inv=5*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==13

inv=25*D

137

elseif mod(A(1)*A(4)-A(2)*A(3)),27)==14

inv=2*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==16

inv=22*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==17

inv=8*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==19

inv=10*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==20

inv=23*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==22

inv=16*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==23

inv=20*D

elseif mod(A(1)*A(4)-A(2)*A(3)),27)==25

inv=13*D

elseif mod(A(1)*A(4)-A(2)*A(3),27)==26

inv=26*D

end

disp (‘A matriz de C deve possuir 2 elementos em cada linha’)

C=input(‘Entre com a matriz cujos elementos s~ao caracteres

do criptograma.

C=’)

disp (’*Cada linha da matriz M ´e um bloco do texto comum.*’)

M=mod(C*inv,27);

disp (’*Utilize a tabela abaixo para escrever o texto comum.*’)

disp (’*Tabela de correspond^encia num´eria*’)

disp(‘a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11; l=12;m=13;n=14;’)

disp(‘o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26’)

disp(‘O caractere 0 corresponde a um espa¸co vazio’)

138

continuar=input(’Deseja encerrar o programa? sim=1 / n~ao=0’

end

Passo 6: Salvar o programa.

Para salv´a-lo, selecione a op¸c˜ao Save ou Save As do menu. Ap´os selecionado, abrir´a

uma nova janela onde deve-se escolher um diret´orio para salvar o arquivo (escolha

preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “DECIFRARHILL2” e salvo na extens˜ao .m,

assim o arquivo ﬁnal ser´a: “DECIFRARHILL2.m”.

Observa¸c˜ao 4.12. O programa ´e apresentado integralmente no Apˆendice A.5, para uti-

liz´a-lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha

do editor do FreeMat, salvando-o no diret´orio corrente do computador.

Atividade 26. Considere a matriz chave: A =





3

1

−4 5


 ∈ M2(Z27).

Por meio do programa “CRIPTOGRAFARHILL2” desenvolvido na Atividade 24, utilize

a matriz chave A, para criptografar a mensagem: “Mestrado Proﬁssional em Matem´atica

em Rede Nacional”.

Passo 1: Abrir o programa.

Para abrir o programa, na janela de comandos, digita-se:

CRIPTOGRAFIAHILL2

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.44).

139

Figura 4.44: Desenvolvimento da Atividade 26, primeira etapa do programa

Passo 2: Inserir a matriz chave A =





3

1

−4 5



.

Para inserir a matriz chave, digita-se o comando:

[3 1; -4 5]

e, ao pressionar Enter, ´e solicitado para inserir a matriz M , cuja entradas s˜ao

caracteres do texto comum, como mostra a Figura 4.45.

Figura 4.45: Desenvolvimento da Atividade 26, segunda etapa do programa

140

Passo 3: Inserir a matriz onde as entradas s˜ao caracteres da mensagem texto.

A matriz ´e inserida atrav´es do comando:

[m e; s t; r a;d o; 0 p; r o;f i; s s; i o;n a; l 0; e m; 0 m;

a t;e m;a t; i c;a 0;e m; 0 r; e d;e 0; n a;c i;o n; a l]

e, ao pressionar Enter, o programa reportar´a a matriz criptografada, apresentada

na Figura 4.46.

Figura 4.46: Desenvolvimento da Atividade 26, terceira etapa do programa

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.44, caso contr´ario, se inserir sim , o programa ´e ﬁnalizado,

sendo apresentado o display da Figura 4.47.

141

Figura 4.47: Desenvolvimento da Atividade 26, quarta etapa do programa

Passo 5: Apresentar a mensagem a ser transmitida

Agrupando as linhas da matriz M A obtida no Passo 3, em sequˆencia, obt´em-se:

19 11 4 11 23 23 6 25 17 26 21 12 9 24 8 6 21 3 11 19 9 12 17 16 2 11

4 20 17 16 4 20 15 24 3 1 17 16 9 9 26 25 15 5 11 19 0 21 16 4 9 7

Logo, utilizando a correspondˆencia num´erica da tabela, apresentada no display,

obt´em-se a mensagem a ser transmitida:

skdkwwfyqzulixhfucksilqpbkdtqpdtoxcaqpiizyoeks0updig

Atividade 27. Considere a matriz chave: A =





3

1

−4 5


 ∈ M2(Z27). Por meio do

programa “DECIFRARHILL2”, desenvolvido na Atividade 25, decifre o criptograma:

skdkwwfyqzulixhfucksilqpbkdtqpdtoxcaqpiizyoeks0updig

142

Passo 1: Abrir o programa.

Para abrir o programa, na janela de comandos, digita-se:

DECIFRARHILL2

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.48).

Passo 2: Inserir a matriz chave A =





3

1

−4 5



.

Para inserir a matriz chave, digita-se

[3 1; -4 5]

e, ao pressionar Enter, ´e solicitado inserir a matriz C onde as entradas s˜ao caracteres

do criptograma, como mostra a Figura 4.49.

Figura 4.48: Desenvolvimento da Atividade 27, primeira etapa do programa

143

Figura 4.49: Desenvolvimento da Atividade 27, segunda etapa do programa

Passo 3: Inserir a matriz onde as entradas s˜ao caracteres do criptograma.

A matriz ´e inserida atrav´es do comando:

[s k;d k;w w;f y;q z;u l;i x;h f;u c;k s;i l;q p;b k;d t;q p;d t;o x;c a;q p;i i;z y;o e;

k s;0 u;p d;i g]

e, ao pressionar Enter, o programa reportar´a a matriz decifrada, apresentada na

Figura 4.50.

Figura 4.50: Desenvolvimento da Atividade 27, terceira etapa do programa

144

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.48, caso contr´ario, se inserir sim , o programa ´e ﬁnalizado,

sendo apresentado o display da Figura 4.51.

Figura 4.51: Desenvolvimento da Atividade 27, quarta etapa do programa

Passo 5: Apresentar a mensagem transmitida.

Agrupando as linhas da matriz M obtida no passo 3, em sequˆencia, obt´em-se:

13 5 19 20 18 1 4 15 0 16 18 15 6 9 19 19 9 15 14 1 12 0 5 13 0

13 1 20 5 13 1 20 9 3 1 0 5 13 0 18 5 4 5 0 14 1 3 9 15 14 1 12

Logo, utilizando a correspondˆencia num´erica da tabela, apresentada no display do

programa, obt´em-se:

mestrado0profissional0em0matematica0em0rede0nacional

Portanto, a mensagem transmitida era: “Mestrado Proﬁssional em Matem´atica em

Rede Nacional”.

145

4.3 Proposta III: Resolu¸c˜ao de sistemas lineares de

m equa¸c˜oes com n inc´ognitas

Nesta se¸c˜ao, s˜ao descritas atividades para resolver sistemas lineares, onde, os

m´etodos alg´ebricos, utilizados para resolver estes sistemas, ser˜ao aplicados atrav´es do

FreeMat. Ao ﬁnal da se¸c˜ao, apresenta-se atividades para construir programas no FreeMat

que reportem as solu¸c˜oes de sistemas lineares, expressos pela equa¸c˜ao matricial AX = B.

A utiliza¸c˜ao do FreeMat, nesta proposta, busca facilitar o ensino de sistemas

lineares no Ensino M´edio, visto que, a resolu¸c˜ao destes n˜ao ´e muito aprofundada no

ensino b´asico.

Nas abordagens das atividades seguintes, para resolu¸c˜ao de um sistema linear no

FreeMat, ser´a considerado a Regra Cramer e o m´etodo de Gauss-Jordan.

Regra de Cramer: Para um sistema de m equa¸c˜oes e m inc´ognitas, a resolu¸c˜ao do

sistema, caso o determinante da matriz dos coeﬁcientes seja diferente de zero 1, se dar´a

atrav´es dos seguintes passos:

Passo 1: Inserir a matriz dos coeﬁcientes A e dos termos independentes B.

Passo 2: Veriﬁcar se a matriz A admite inversa, inserindo o comando:

det(A)

Passo 3: Se o resultado reportado ap´os a inser¸c˜ao do comando

det(A) for diferente

de zero, determina-se a solu¸c˜ao (´unica) do sistema inserindo o comando:

X=inv(A)*B

M´etodo de Gauss- Jordan: Para um sistema de m equa¸c˜oes e n inc´ognitas, a resolu¸c˜ao

do sistema se dar´a atrav´es dos seguintes passos:

Passo 1: Inserir a matriz dos coeﬁcientes A e dos termos independentes B.

1Lembre-se que, se o determinante da matriz dos coeﬁcientes for igual a zero, a Regra de Cramer ´e

inconclusiva.

146

Passo 2: Determinar a matriz ampliada C = [A|B] inserindo o comando:

C=[A B]

Passo 3: Determinar os postos da matriz A e B, respectivamente, atrav´es da inser¸c˜ao

dos comandos:

rank(A)

rank(C)

Passo 4: Se o sistema ´e compat´ıvel , determina-se a solu¸c˜ao atrav´es do comando:

rref(C)

Atividade 28. Atrav´es do FreeMat, utilizando a Regra de Cramer, determine, se for

poss´ıvel, a solu¸c˜ao do seguinte sistema linear:





x + 2z

= 7

2x − y + 3z = 9

4x + y + 8z = 30.

Objetivo: Aplicar a Regra de Cramer na resolu¸c˜ao de sistemas lineares.

Passo 1: Deﬁnir a matriz dos coeﬁcientes A e a matriz dos termos independentes B.

As matrizes A e B s˜ao inseridas no FreeMat, atrav´es dos respectivos comandos:

A=[1 0 2; 2 -1 3; 4 1 8]

B=[7; 9; 30]

Passo 2: Calcular o determinante da matriz A.

Calcula-se o det(A) inserindo o comando:

det(A)

Como det(A) = 1 (cid:54)= 0 a matriz A ´e invers´ıvel e o sistema admite ´unica solu¸c˜ao.

147

Passo 3: Determinar a solu¸c˜ao do sistema.

Atrav´es da Regra de Cramer, a solu¸c˜ao do sistema ´e dada pelos elementos da matriz

X, que ´e determinada atrav´es do comando:

X=inv(A)*B

Na Figura 4.52, ´e apresentada a matriz X.

Passo 4: Explicitar a solu¸c˜ao do sistema.

O programa nos fornece os valores:

x = 1,

y = 2,

z = 3.

Portanto, o conjunto solu¸c˜ao do sistema linear dado ´e {(1, 2, 3)}.

Figura 4.52: Desenvolvimento da Atividade 28 no FreeMat

148

Atividade 29. Foram estudados trˆes tipos de alimentos. Fixada a mesma quantidade de

alimento, determinou-se que:

(i) o alimento I tem 1 unidade de vitamina A, 3 unidades de vitamina B e 4 unidades

de vitamina C;

(ii) o alimento II tem 2 unidades de vitamina A, 3 unidades de vitamina B e 5 unidades

de vitamina C;

(iii) o alimento III tem 3 unidades de vitaminas A, 1 unidade de vitamina C e n˜ao cont´em

vitamina B.

Se s˜ao necess´arios 15 unidades de vitamina A, 6 de vitamina B e 13 de vitamina C,

determine, se for poss´ıvel, a quantidade dos alimentos I, II e III, que fornecem a quantidade

de vitaminas desejadas.

Objetivo: Apresentar uma aplica¸c˜ao dos sistemas lineares e do m´etodo de Gauss-Jordan.

Passo 1: Caracterizar o problema.

Sejam x, y e z, a quantidade dos alimentos I, II e III, respectivamente. Ent˜ao o

problema, em quest˜ao, ´e representado pelo sistema linear:





1x + 2y + 3z = 15

3x + 3y + 0z = 6

4x + 5y + 1z = 13.

Passo 2: Inserir no FreeMat a matriz dos coeﬁcientes A, a matriz dos termos indepen-

dentes B, e a matriz ampliada C = [A|B] do sistema linear obtido no Passo 1.

As matrizes A, B e C s˜ao inseridas no FreeMat, atrav´es dos seguintes comandos:

A=[1 2 3;3 3 0; 4 5 1]

B=[15; 6; 13]

C=[ A B]

Passo 3: Veriﬁcar se o sistema admite solu¸c˜ao.

149

Determina-se o posto das matrizes A e C para analisar se o sistema possui solu¸c˜ao,

para isto, digita-se os comandos:

rank(A)

rank(C)

Neste caso, obt´em-se posto(A) =posto(C) = 3, como o n´umero de inc´ognitas

tamb´em ´e 3, o sistema ´e compat´ıvel e determinado.

Passo 4: Determinar a solu¸c˜ao do sistema, exibindo a matriz reduzida por linha `a forma

escada.

Determina-se a matriz reduzida por linha `a forma escada da matriz C = [A|B],

digitando o comando:

obtendo-se a matriz D =

D=rref(C)








1 0 0 1

0 1 0 1

0 0 1 4



, apresentada na Figura 4.53.






Passo 5: Explicitar a solu¸c˜ao do sistema.

A solu¸c˜ao do sistema ´e dada pelos elementos da ´ultima coluna da matriz D, sendo

estes:

x = 1,

y = 1,

z = 4.

Portanto, o conjunto solu¸c˜ao do sistema linear ´e {(1, 1, 4)}.

Na Figura 4.53, ´e apresentado o desenvolvimento da Atividade 29 no FreeMat.

150

Figura 4.53: Desenvolvimento da atividade 29 no FreeMat

Passo 6: Determinar a quantidade de alimentos.

Pelo Passo 5, conclu´ımos que, necessita-se de 1 quantidade do alimento I, 1 quanti-

dade do alimento II e 4 quantidades do alimento III.

Atividade 30. Se o sistema linear que caracterizasse o problema da Atividade 29 fosse

da seguinte forma:





1x + 2y + 3z = 15

3x + 3y + 0z = 6

4x + 5y + 3z = 13,

onde x, y e z representam a quantidade de elementos I, II e III, respectivamente. Existiria

uma quantidade de alimentos I, II e III, que forneceriam as mesmas quantidades de

vitaminas desejadas?

Passo 1: Deﬁnir a matriz dos coeﬁcientes A, a matriz dos termos independentes B, e a

matriz ampliada C = [A|B].

151

As matrizes A, B e C s˜ao inseridas no FreeMat, atrav´es dos seguintes comandos:

A=[1 2 3; 3 3 0; 4 5 3]

B=[15;6; 13]

C=[ A B]

Passo 2: Veriﬁcar se o sistema admite solu¸c˜ao.

Determina-se o posto das matrizes A e C para analisar se o sistema possui solu¸c˜ao.

Para isto, digita-se os seguintes comandos:

rank(A)

rank(C)

Neste caso, obt´em-se posto(A) = 2 e posto(C) = 3. Como posto(A) <posto(C),

ent˜ao o sistema ´e incompat´ıvel.

Portanto, n˜ao existe uma quantidade de alimentos x, y e z que forneceria a quanti-

dade de vitaminas desejada.

Na Figura 4.54, ´e apresentado o desenvolvimento da Atividade 30 no FreeMat.

Figura 4.54: Desenvolvimento da Atividade 30 no FreeMat

152

Atividade 31. Resolva o sistema linear:





1x + 2y − 2z + 3w = 2

2x + 4y − 3z + 4w = 5

5x + 10y − 8z + 11w = 12.

(4.2)

Passo 1: Deﬁnir a matriz dos coeﬁcientes A, a matriz dos termos independentes B, e a

matriz ampliada C = [A|B].

As matrizes A, B e C s˜ao inseridas no FreeMat, atrav´es dos seguintes comandos:

A= [1 2 -2 3; 2 4 -3 4; 5 10 -8 11]

B= [2; 5; 12]

C= [ A B]

Passo 2: Veriﬁcar se o sistema admite solu¸c˜ao.

Determina-se o posto das matrizes A e C para analisar se o sistema possui solu¸c˜ao,

para isto, digita-se os comandos:

rank(A)

rank(C)

Neste caso, obt´em-se posto(A)= 2 e posto(C)= 2. Como posto(A)=posto(C) e o

n´umero de inc´ognitas ´e 4 > 2, o sistema ´e compat´ıvel e indeterminado e possui

4 − 2 = 2 parˆametros livres.

Passo 3: Determinar a solu¸c˜ao do sistema, exibindo a matriz reduzida por linha `a forma

escada.

Determina-se a matriz reduzida `a forma escada da matriz C = [A|B], digitando o

comando:

D=rref(C)

153

obtendo-se a matriz D =








1 2 0 −1 4

0 0 1 −2 1

0 0 0

0

0





.



Passo 4: Explicitar a solu¸c˜ao do sistema.

Pelo Passo 3, o sistema (4.2) ´e equivalente ao sistema:






x + 2y − w = 4

z − 2w

= 1

(4.3)

Como existem dois parˆametros livres, escolhemos y = t e e w = u com t, u ∈ R.

Substituindo no sistema (4.3), obtemos z = 1 + 2u e x = 4 + u − 2t.

Portanto, o conjunto solu¸c˜ao do sistema linear dado ´e {(4 + u − 2t, t, 1 + 2u, u); t, u ∈

R}.

Na Figura 4.55, ´e apresentado o desenvolvimento da Atividade 31 no FreeMat.

Figura 4.55: Desenvolvimento da Atividade 31 no FreeMat

154

Atividade 32. Utilizando a Regra de Cramer, construa um programa no FreeMat e o

intitule de ‘CRAMER’, para determinar, se for poss´ıvel, a solu¸c˜ao de um sistema linear de

m equa¸c˜oes com m inc´ognitas, dada por AX = B, onde A ´e a matriz dos coeﬁcientes e B

´e a matriz dos termos independentes. O programa deve fazer o seguinte: a) se det(A) (cid:54)= 0

for diferente de zero, o programa deve determinar explicitamente a solu¸c˜ao do sistema

linear; b) se det(A) = 0, o programa deve reportar a seguinte mensagem para o usu´ario:

“O determinante da matriz A ´e zero, informa¸c˜oes sobre as solu¸c˜oes s˜ao inconclusivas”.

Objetivo: Desenvolver um programa, atrav´es da Regra de Cramer, que apresente as

solu¸c˜oes de um sistema linear compat´ıvel e determinado.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘CRAMER’ como nome para o

programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

CRAMER

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda n~ao, na linha

abaixo dos comandos, deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

while reiniciar==0

Passo 3: Criar um display com informa¸c˜oes referente a aplica¸c˜ao do programa.

Cria-se o display inserindo o comando:

clc

disp (‘ ’)

disp (‘* Programa para obter solu¸c~ao de sistemas lineares de *’)

disp (‘* m equa¸c~oes com m inc´ognitas *’)

disp (‘* Regra de Cramer *’)

155

Passo 4: Deﬁnir comandos para o usu´ario inserir a matriz dos coeﬁcientes

Para selecionar a entrada da matriz A e informar ao usu´ario quais matrizes devem

ser inseridas digita-se o comando:

A=input(‘Entre com a matriz dos coeficientes: A =’)

Passo 5: Deﬁnir comandos para que seja reportada a matriz A e o seu determinante.

Para que o programa reporte a matriz A e seu determinante, digita-se os comandos:

clc

disp (‘* Matriz A*’)

A=A

disp (‘* Determinante da matriz A*’)

detA=det(A)

Passo 6: Deﬁnir condi¸c˜oes e parˆametros de decis˜ao, de acordo com o valor do deter-

minante da matriz inserida pelo usu´ario, para determinar a solu¸c˜ao do sistema ou

reportar a mensagem dada no enunciado.

P asso 6.1: Inserir comandos para executar a¸c˜oes se o determinante da matriz

A ´e diferente de zero:

if det(A) ∼ =0

B=input(‘ Para determinar a solu¸c~ao, entre com a matriz dos termos

independentes: B =’)

clc

disp (‘* Solu¸c~ao do sistema linear*’)

X=inv(A)*B

continuar=input(‘Deseja revelar cada inc´ognita e seu valor?sim/nao’)

156

P asso 6.2: Inserir comandos para executar a¸c˜oes se o determinante da matriz

A ´e zero:

else det(A)==0

disp (‘* Como det(A)=0, informa¸c~oes sobre as solu¸c~oes *’)

disp (‘* do sistema linear s~ao inconclusivas *’)

reiniciar=input(’ Deseja encerrar o programa? sim / nao ’);

disp (‘* Fim do Programa *’)

end

end

Passo 7: Utilizar o la¸co de repeti¸c˜ao for para apresentar as inc´ognitas e seus respectivos

valores.

Para reportar as inc´ognitas, caso o usu´ario deseje, na linha abaixo dos comandos

inserido no Passo 6.2, digita-se os seguintes comandos:

clc

disp (’ ’)

disp (‘*Conjunto solu¸c~ao do sistema linear {(x1, x2,...,xi,...,xm)}:*’)

[m n]= size(X);

for i=1:m

disp (‘*Valor da inc´ognita xi*’)

i=i

xi= X(i)

end

disp (‘*Fim do programa*’)

Passo 8: Salvar o programa.

Para salv´a-lo, na barra do Menu do editor, selecione a op¸c˜ao F ile e clique em Save.

Ap´os selecionado, abrir´a uma nova janela onde deve-se escolher um diret´orio para

salvar o arquivo (escolha preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “CRAMMER” e salvo na extens˜ao .m, assim o

157

arquivo ﬁnal ser´a: CRAMMER.m. Na Figura 4.56, apresenta-se parte dos comandos

relativos a este programa.

Observa¸c˜ao 4.13. O programa ´e apresentado integralmente no Apˆendice A.6, para uti-

liz´a-lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha

do editor do FreeMat, salvando-o no diret´orio corrente do computador.

Figura 4.56: Editor do FreeMat e parte dos comandos relativos ao programa “CRAMER”

Atividade 33. Utilize o programa ‘CRAMER’, desenvolvido na Atividade 32, para de-

terminar, caso exista, a solu¸c˜ao ´unica do sistema:





3x + 2y + 3z = 32

3x − y

= 2

x − 2y + z = 0.

Passo 1: Abrir o programa ‘CRAMER’.

Para abrir o programa, na janela de comandos digita-se:

CRAMER

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.57).

158

Figura 4.57: Desenvolvimento da Atividade 33, primeira etapa do programa CRAMER

Passo 2: Inserir a matriz dos coeﬁcientes A =








3

2

3

3 −1 0

1 −2 1





.



Para inserir a matriz dos coeﬁcientes, digita-se:

[3 2 3; 3 -1 0; 1 -2 1]

Ap´os pressionar Enter, o programa ir´a reportar a matriz A e seu determinante,

tamb´em, ir´a solicitar para inserir a matriz B, como mostra a Figura 4.58.

Como det A (cid:54)= 0, o programa solicita a inser¸c˜ao da matriz dos termos independentes.

Passo 3: Inserir a matriz dos termos independentes.

Ao solicitar a inser¸c˜ao da matriz dos termos independentes, digita-se o comando:

[32; 2; 0]

Ao pressionar Enter, o programa reportar´a a solu¸c˜ao do sistema, conforme apre-

sentado na Figura 4.59.

159

Figura 4.58: Desenvolvimento da 33, segunda etapa do programa CRAMER

Figura 4.59: Desenvolvimento da Atividade 33, terceira etapa do programa CRAMER

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.57, caso contr´ario, se inserir sim , o programa reportar´a cada

inc´ognita com seu respectivo valor, sendo apresentado o display da Figura 4.60.

160

Figura 4.60: Desenvolvimento da Atividade 33, quarta etapa do programa CRAMER

Passo 5: Explicitar a solu¸c˜ao do sistema.

Pelo Passo 3, a solu¸c˜ao do sistema ´e dada pelos elementos da matriz X, sendo estes:

x = 2,

y = 4,

z = 6.

Portanto, o conjunto solu¸c˜ao do sistema linear dado ´e {(2, 4, 6)}.

Atividade 34. Utilize o programa ‘CRAMER’, desenvolvido na Atividade 32, para de-

terminar, caso exista, a solu¸c˜ao ´unica do sistema:





3x + 2y + 3z = 32

6x − 4y6z

= 2

x − 2y + z = 0.

Passo 1: Abrir o programa ‘CRAMER’.

Para abrir o programa, na janela de comandos digita-se:

CRAMER

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.61).

161

Figura 4.61: Desenvolvimento da Atividade 34, primeira etapa do programa CRAMER

Passo 2: Inserir a matriz dos coeﬁcientes A =








3

2

3

6 −4 6

1 −2 1





.



Para inserir a matriz dos coeﬁcientes, digita-se:

[3 2 3; 6 -4 6; 1 -2 1]

Ap´os pressionar Enter, o programa reportar´a algumas informa¸c˜oes sobre o deter-

minante da matriz A e da sua solu¸c˜ao do sistema, conforme apresentado na Figura

4.62.

Como det A = 0, informa¸c˜oes sobre as solu¸c˜oes do sistema linear s˜ao inconclusivas.

Passo 3: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.61, caso contr´ario, se inserir sim , o programa ser´a encerrado

, sendo apresentado o display da Figura 4.63.

162

Figura 4.62: Desenvolvimento da Atividade 34, segunda etapa do programa CRAMER

Figura 4.63: Desenvolvimento da Atividade 34, terceira etapa do programa CRAMER

163

Atividade 35. Utilizando o m´etodo de Gauss-Jordan, construa um programa no FreeMat

e o intitule de ‘GAUSSJORDAN’, para determinar, se for poss´ıvel, a solu¸c˜ao de um

sistema linear de m equa¸c˜oes com n inc´ognitas, dada por AX = B, onde A ´e a matriz dos

coeﬁcientes e B ´e a matriz dos termos independentes. O programa deve fazer o seguinte:

a) se o sistema for compat´ıvel e determinado, o programa deve determinar explicitamente

a solu¸c˜ao do sistema linear; b) se o sistema for compat´ıvel e indeterminado, o programa

deve determinar a matriz linha escada reduzida, da matriz ampliada C = (A|B), e o

n´umero de parˆametros livres; c) se o sistema for incompat´ıvel, o programa deve reportar a

seguinte mensagem para o usu´ario: “Como posto(A) <posto(C) o sistema linear AX = B

´e incompat´ıvel”.

Objetivo: Desenvolver um programa, atrav´es do m´etodo de Gauss-Jordan, que apresenta

solu¸c˜oes de um sistema linear.

Passo 1: Abrir o editor de texto do FreeMat e deﬁnir ‘GAUSSJORDAN’ como nome

para o programa.

No menu do FreeMat, selecione a op¸c˜ao editor. Aberta a janela de edi¸c˜ao, na linha

1, digita-se o comando:

function

GAUSSJORDAN

Passo 2: Utilizar o la¸co de repeti¸c˜ao while para que, ao serem apresentadas perguntas

que permitam a entrada de dois tipos de respostas (sim/n˜ao), de acordo com a

resposta inserida, o programa seja reinicializado ou, execute a¸c˜oes e encerre-se.

Para que o programa seja reinicializado, caso o usu´ario responda n~ao, na linha

abaixo dos comandos deﬁnidos no Passo 1, digita-se:

sim=1; nao=0; reiniciar=0;

reiniciar=0

while reiniciar==0

Passo 3: Criar um display com informa¸c˜oes referente a aplica¸c˜ao do programa.

164

Cria-se o display, inserindo o comando:

clc

disp(‘ ’)

disp (‘*Programa para obter solu¸c~ao de sistemas lineares de*’)

disp (‘*m equa¸c~oes com n inc´ognitas*’)

disp (‘*M´etodo de Gauss-Jordan*’)

Passo 4: Deﬁnir comandos para o usu´ario inserir a matriz dos coeﬁcientes A.

Para deﬁnir a entrada da matriz A e informar ao usu´ario quais matrizes devem

ser inseridas, digita-se o comando:

A=input(‘Entre com a matriz dos coeficientes: A=’)

Passo 5: Deﬁnir comandos para que, a partir da matriz A, seja reportado o n´umero de

equa¸c˜oes e inc´ognitas do sistema linear.

Para que o programa reporte o n´umero de equa¸c˜oes e inc´ognitas do sistema linear,

digita-se os comandos:

[m, n]= size(A);

clc

disp(‘* m:

N´umero de equa¸c~oes do sistema *’)

m=m

disp(‘* n:

N´umero de inc´ognitas xi *’)

n=n

Passo 6: Deﬁnir comandos para o usu´ario inserir a matriz dos termos independentes B.

Para deﬁnir a entrada da matriz B e informar ao usu´ario quais matrizes devem ser

inseridas, digita-se o comando:

B=input(‘Entre com a matriz dos termos independentes: B=’)

clc

165

Passo 7: Inserir comandos para que seja reportado ao usu´ario a matriz ampliada C =

[A|B], o posto da matriz A e o posto da matriz C.

Para reportar a matriz C, o posto(A) e o posto(C), digita-se os comandos:

disp (‘* Matriz ampliada C: *’)

C= [A B]

disp(‘* Posto da matriz A: *’)

postoA=rank(A)

disp(‘* Posto da matriz C: *’)

postoC=rank(C)

Passo 8: Deﬁnir as condi¸c˜oes e parˆametros de decis˜ao, de acordo com o posto da matriz

A e da matriz C, para determinar o tipo de sistema e a solu¸c˜ao do sistema ou, caso

o sistema seja incompat´ıvel, reportar a mensagem dada no enunciado.

P asso 8.1: Inserir comandos para executar a¸c˜oes se o sistema ´e compat´ıvel e

determinado

if rank(A)==rank(C) & rank(A)==n

disp(‘* Como posto(A)=posto(C) e posto (A)= n

o sistema ´e compat´ıvel e determinado *’)

disp(‘* Matriz C na forma linha escada reduzida *’)

Escada=rref (C)

continuar=input(‘Deseja revelar cada inc´ognita e

seu respectivo valor? sim / nao *’)

P asso 8.2: Inserir comandos para executar a¸c˜oes se o sistema ´e incompat´ıvel.

if rank(A)< rank(C)

disp(‘* Como posto(A) < posto (C) o sistema ´e incompat´ıvel *’)

continuar=input(‘*Deseja encerrar o programa? sim / nao*’)

disp(‘* Fim do Programa *’)

P asso 8.3: Inserir comandos para executar a¸c˜oes se o sistema ´e compat´ıvel e

166

indeterminado.

elseif rank(A)==rank(C) & rank(A)<n

disp(‘ ’)

disp(‘* Como posto(A)=posto(C) e posto (A)< n

o sistema ´e compat´ıvel e indeterminado *’)

disp(‘* N´umero de par^ametros livres do sistema: *’)

n-rank(A)

disp(‘* Matriz C na forma linha escada reduzida *’)

Escada=rref (C)

disp(‘* Atribua quaisquer valores reais para cada

par^ametro livre e substitua no sistema *’)

disp(‘* escalonado, ap´os, fa¸ca substitui¸c~oes regressivas

obtendo o conjunto solu¸c~ao. *’)

continuar=input(‘*Deseja encerrar o programa? sim / nao*’)

disp(‘* Fim do programa *’)

end

end

Passo 9: Caso o sistema seja compat´ıvel e determinado, utilizar o la¸co de repeti¸c˜ao f or

para reportar as inc´ognitas e seus respectivos valores.

Para reportar as inc´ognitas caso o usu´ario deseje, na linha abaixo aos comandos

declarados no Passo 7.3, digita-se os seguintes comandos:

clc

disp (‘ ’)

disp (‘* Conjunto solu¸c~ao do sistema linear:(x1, x2,...,xi,...,xm)*’)

[m n]=size(Escada);

for i=1:m

disp (‘* Valor da inc´ognita xi*’)

i=i

Xi=Escada(m*(n-1)+1*i)

end

disp(‘*Fim do programa*’)

167

Passo 10: Salvar o programa.

Para salv´a-lo, na barra do Menu do editor, selecione a op¸c˜ao F ile e clique em Save.

Ap´os selecionado, abrir´a uma nova janela onde deve-se escolher um diret´orio para

salvar o arquivo (escolha preferencialmente o diret´orio onde esteja salvo o FreeMat).

O arquivo deve ser nomeado como “GAUSSJORDAN” e salvo na extens˜ao .m,

assim o arquivo ﬁnal ser´a: GAUSSJORDAN.m. Na Figura 4.64, apresenta-se parte dos

comandos relativos a este programa.

Figura 4.64: Editor do FreeMat e parte dos comandos relativos ao programa “sistemas”

Observa¸c˜ao 4.14. O programa ´e apresentado integralmente no Apˆendice A.6, para uti-

liz´a-lo, basta copiar os comandos apresentados, neste apˆendice, e digit´a-los em cada linha

do editor do FreeMat, salvando-o no diret´orio corrente do computador.

Atividade 36. Utilize o programa ‘GAUSSJORDAN’, desenvolvido na Atividade 35,

para determinar a solu¸c˜ao do sistema:





1x + 2y + 3z = 15

3x + 3y

= 6

6x + 6y

= 12.

Passo 1: Abrir o programa ‘GAUSSJORDAN’.

168

Para abrir o programa, na janela de comandos digita-se:

GAUSSJORDAN

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.65).

Figura 4.65: Desenvolvimento da Atividade 36, primeira etapa do programa Gauss Jordan

Passo 2: Inserir a matriz dos coeﬁcientes A =








1 2 3

3 3 0

6 6 0





.



Para inserir a matriz dos coeﬁcientes, digita-se:

[1 2 3; 3 3 0;6 6 0]

e, ao pressionar Enter, o programa reportar´a o n´umero de inc´ognitas e equa¸c˜oes do

sistema, conforme mostra a Figura 4.66.

169

Figura 4.66: Desenvolvimento da Atividade 36, segunda etapa do programa Gauss Jordan

Passo 3: Inserir a matriz dos termos independentes.

Para inserir a matriz dos termos independentes, digita-se:

[15; 6; 12]

e, ao pressionar Enter, o programa reportar´a algumas informa¸c˜oes sobre o sistema

e sobre a matriz reduzida por linha `a forma escada da matriz C = [A|B], conforme

mostra as ﬁgura 4.67 e 4.68.

170

Figura 4.67: Desenvolvimento da Atividade 36, terceira etapa do programa Gauss Jordan

Figura 4.68: Desenvolvimento da Atividade 36, quarta etapa do programa Gauss Jordan

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.65, caso contr´ario, se inserir sim , o programa ser´a encerrado,

sendo apresentado o display da Figura 4.69.

171

Figura 4.69: Desenvolvimento da Atividade 36, quinta etapa do programa Gauss Jordan

Passo 5: Explicitar a solu¸c˜ao do sistema.

Pelo Passo 3, o sistema apresentado, no enunciado da Atividade 36, ´e equivalente

ao sistema:






x − 3z = −11

y + 3z = 13

Como existe um parˆametro livre, escolhemos z = t, com t ∈ R. Substituindo neste

sistema, obtemos y = 13 − 3t e x = −11 + 3t.

Portanto, o conjunto solu¸c˜ao do sistema linear dado ´e {(−11 + 3t, 13 − 3t, t); t ∈ R}.

Atividade 37. Utilize o programa ‘GAUSSJORDAN’, desenvolvido na Atividade 35,

para determinar a solu¸c˜ao do sistema:





1x + 2y + 3z = 15

3x + 3y

= 6

6x + 6y

= 13.

Passo 1 Abrir o programa ‘GAUSSJORDAN’.

Para abrir o programa, na janela de comandos, digita-se:

GAUSSJORDAN

172

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.70).

Figura 4.70: Desenvolvimento da Atividade 37, primeira etapa do programa Gauss Jordan

Passo 2: Inserir a matriz dos coeﬁcientes A =








1 2 3

3 3 0

6 6 0





.



Para inserir a matriz dos coeﬁcientes, digita-se:

[1 2 3; 3 3 0;6 6 0]

e, ao pressionar Enter, o programa reportar´a o n´umero de inc´ognitas e equa¸c˜oes do

sistema, conforme mostra a Figura 4.71.

Passo 3: Inserir a matriz dos termos independentes.

Para inserir a matriz dos termos independentes, digita-se:

[15; 6; 13]

e, ao pressionar Enter, o programa reportar´a algumas informa¸c˜oes sobre o sistema

linear e sobre a matriz reduzida por linha `a forma escada da matriz C = [A|B],

conforme mostra a Figura 4.72.

Como posto(A) < posto(C), o sistema n˜ao possui solu¸c˜ao.

173

Figura 4.71: Desenvolvimento da Atividade 37, segunda etapa do programa Gauss Jordan

Figura 4.72: Desenvolvimento da Atividade 37, terceira etapa do programa Gauss Jordan

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.69, caso contr´ario, se inserir sim , o programa ser´a encerrado,

como mostra a Figura 4.73.

174

Figura 4.73: Desenvolvimento da Atividade 37, quarta etapa do programa Gauss Jordan

Atividade 38. Utilize o programa ‘GAUSSJORDAN’, desenvolvido na Atividade 35,

para determinar a solu¸c˜ao do sistema:





1x + 2y + 4z = 15

3x + 3y

= 6

6x + 6y + 2z = 18.

Passo 1 Abrir o programa ‘GAUSSJORDAN’.

Para abrir o programa, na janela de comandos digite:

GAUSSJORDAN

Ap´os, pressione Enter e o programa ser´a compilado (ver Figura 4.74).

Passo 2: Inserir a matriz dos coeﬁcientes A =








1 2 4

3 3 0

6 6 2





.



Para inserir a matriz dos coeﬁcientes, digita-se:

[1 2 4; 3 3 0;6 6 2]

175

e, ao pressionar Enter, o programa reportar´a o n´umero de inc´ognitas e equa¸c˜oes do

sistema, como mostra a Figura 4.75.

Figura 4.74: Desenvolvimento da Atividade 38, primeira etapa do programa Gauss Jordan

Figura 4.75: Desenvolvimento da Atividade 38, segunda etapa do programa Gauss Jordan

Passo 3: Inserir a matriz dos termos independentes B.

176

Para inserir a matriz dos termos independentes, digita-se:

[15; 6; 18]

e, ao pressionar Enter, o programa reportar´a algumas informa¸c˜oes sobre o sistema

linear e sobre a matriz reduzida por linha `a forma escada da matriz C = [A|B],

como mostra as ﬁguras 4.76 e 4.77.

Figura 4.76: Desenvolvimento da Atividade 38, terceira etapa do programa Gauss Jordan

Figura 4.77: Desenvolvimento da Atividade 38, terceira etapa do programa Gauss Jordan

177

Passo 4: Reinicializar ou encerrar o programa.

Ao inserir nao e teclar Enter, o programa ´e reinicializado, sendo apresentado o

display da Figura 4.74, caso contr´ario, se inserir sim , o programa reportar´a o

valor de cada inc´ognita, como mostra a Figura 4.78.

Figura 4.78: Desenvolvimento da Atividade 38, quarta etapa do programa Gauss Jordan

Passo 5: Explicitar a solu¸c˜ao do sistema.

Pelo Passo 3, a solu¸c˜ao do sistema ´e dada pelos elementos da ´ultima coluna da

matriz reduzida por linha `a forma escada, sendo estes:

x = 1,

y = 1,

z = 3.

Portanto, o conjunto solu¸c˜ao do sistema ´e dado por {(1, 1, 3)}.

178

Considera¸c˜oes ﬁnais

.

As fun¸c˜oes s˜ao apresentadas inicialmente no ensino fundamental e, a partir da´ı,

nos outros n´ıveis de ensino s˜ao aprofundados seus estudos. As aplica¸c˜oes deste conte´udo

s˜ao amplas e abordadas nos livros pedag´ogicos, bem como, v´arios trabalhos acadˆemicos

discutem e apresentam estas aplica¸c˜oes. No ˆambito do estudo destas fun¸c˜oes, exem-

plos e exerc´ıcios tratados em salas de aulas do n´ıvel m´edio geralmente n˜ao apresentam

um tratamento adequado, pois, s˜ao abordados como uma equa¸c˜ao polinomial e isto,

tamb´em ´e, observado em algumas literaturas pedag´ogicas. Para o estudo do esbo¸co gr´aﬁco

das fun¸c˜oes, existem diversos softwares computacionais que podem auxiliar os docentes,

por´em, percebe-se esta pr´atica, ainda incomum, no Ensino M´edio.

Desta forma, com as propostas apresentadas, busca-se inserir a utiliza¸c˜ao do

software em sala de aula e auxiliar os docentes com atividades e uma sequˆencia did´atica

que possibilite isto.

Durante a aplica¸c˜ao da Proposta I, observou-se que, al´em do entusiasmo dos

discentes ao utilizar o software, existiram poucas diﬁculdades com a inser¸c˜ao dos coman-

dos. Tamb´em, ressalta-se que atrav´es do desenvolvimento das atividades da proposta, os

discentes interpretaram facilmente um gr´aﬁco, ressaltando que, quando comparado aos

gr´aﬁcos constru´ıdos sem uso de softwares, a facilidade no esbo¸co trouxe oportunidade de

estudar gr´aﬁcos mais complexos para este n´ıvel de ensino.

Dos obst´aculos para desenvolvimento das atividades da Proposta I, destacou-se,

as diﬁculdades de interpreta¸c˜ao de problemas matem´aticos pelos discentes e para deﬁnir

os comandos de condi¸c˜ao e repeti¸c˜ao. Diante disto, sugere-se que, para a aplica¸c˜ao da

Proposta I, seria interessante fazer um algoritmo em portuguˆes no quadro, usando-se os

condicionais: se, enquanto, sen˜ao, ent˜ao, etc., e depois passar para a linguagem de pro-

grama¸c˜ao do FreeMat, semelhante ao que foi apresentado na Se¸c˜ao 2.3. Todavia, a inser¸c˜ao

179

dos comandos e atividades voltadas para a programa¸c˜ao, trouxe novas interpreta¸c˜oes e

leituras da resolu¸c˜ao de um problema pelos discentes.

Portanto, observou-se que a proposta traz um ensino diferenciado, mais dinˆamico

e, conjuntamente, traz um aprofundamento nos conte´udos trabalhados em sala, oportu-

nizando algumas experiˆencias na ´area de programa¸c˜ao. Por ﬁm, destaca-se a vontade

apresentada pelos discentes em continuar estudando dentro desta metodologia, a facili-

dade em trabalhar com os comandos do programa e a ﬁxa¸c˜ao do conte´udo pelos mesmos.

Quanto ao estudo de matrizes e sistemas lineares, sendo estes, conte´udos que na
disciplina de ´Algebra Linear do Ensino Superior, tem seu estudo aprofundado, e de grande

relevˆancia, devido apresentar v´arias aplica¸c˜oes e um tratamento alg´ebrico formal, exigi-se

do discente um bom conhecimento de suas propriedades alg´ebricas. No Ensino M´edio,

o estudo de matrizes e suas aplica¸c˜oes na resolu¸c˜ao de sistemas lineares, geralmente n˜ao

´e aprofundado, tamb´em, percebe-se grandes diﬁculdades em apresentar aplica¸c˜oes deste

conte´udo para o aluno.

Neste sentido, as propostas II e III, foram elaboradas buscando inserir o estudo

das matrizes e de suas aplica¸c˜oes. A sequˆencia das atividades apresentadas, constituem

um caminho e orienta¸c˜ao aos docentes para inser¸c˜ao do software FreeMat no ensino de

matrizes e sistemas lineares na educa¸c˜ao b´asica.

Anseia-se que, na aplica¸c˜ao destas propostas nas escolas de n´ıvel m´edio, os do-

centes consigam aprofundar os estudos do software junto aos alunos, construindo outros

programas, de modo a utilizar cada vez menos as linguagens pr´e-deﬁnidas deste recurso

computacional. Ressalta-se que, ap´os o desenvolvimento das propostas, ´e sempre ne-

cess´ario uma abordagem alg´ebrica usual no quadro.

180

181

Referˆencias Bibliogr´aﬁcas

BATISTA, S. C. F.(2004). Sofmat: Um reposit´orio de softwares para matem´atica do

ensino m´edio- um instrumento em prol de posturas mais conscientes na sele¸c˜ao de

softwares educacionais. Campos Goytacazes, 2004. 202 f. Disserta¸c˜ao (Mestrado em

Engenharia de Produ¸c˜ao) - Centro de Ciˆencia e Tecnologia, Universidade Estadual do

Norte Fluminense.

BELINE, W. COSTA, N. M. L. Educa¸c˜ao matem´atica, tecnologia e forma¸c˜ao de profes-

sores: Algumas reﬂex˜oes. Fecilcan, Paran´a, 2010, p.94–220–218.

BOLDRINI, J. L.; et al. ´Algebra Linear. Editora Harbra, 3 ed. S˜ao Paulo, 1980.

CALLIOLI, C. A.; HYGINO, H. D.; COSTA, R. ´Algebra Linear e Aplica¸c˜oes. ATUAL

EDITORA, 6 ed. S˜ao Paulo, 2000.

BRASIL (2000). Parametros Curriculares Nacionais do Ensino M´edio: ciencias da natu-

reza, matem´atica e suas tecnologias. Minist´erio da Educa¸c˜ao : Secretaria de Educa¸c˜ao

B´asica, Bras´ılia, pg.41.

BRASIL (2014). Guia de livros did´aticos: PNLD 2015. Matem´atica: ensino m´edio. Mi-

nist´erio da Educa¸c˜ao : Secretaria de Educa¸c˜ao B´asica, Bras´ılia, p. 108

CURY, H. N. (2004). Disciplinas Matem´aticas em Cursos Superiores. EDIPICRS, Porto

Alegre, p.17.

FIPIAK,

E.

FIGUEIREDO,

F.

R.

SOMAVILLA,

F.

trodu¸c˜ao

ao

Matlab.

Santa

Maria/SC,

2012.

Dispon´ıvel

In-

em:

http://w3.ufsm.br/petmatematica/arquivos/matlab 2012.pdf. Acesso em:

28 jul.

2014.

182

FUGIMOTO, S. M. A. Inform´atica na educa¸c˜ao: A quest˜ao da utiliza¸c˜ao do compu-

tador na escola em uma perspectiva construtivista. XVII Congresso de Leitura do

Brasil, UNICAMP, Campinas/SP, 2009, p.9. Dispon´ıvel em: http:alb.com.br/arquivo-

morto/edicoesanteriores/anais17/txtcompletos/sem16/COLE1066.pdf. Acesso em: 14

out. 2014.

FREEMAT, Website. Dispon´ıvel em: http://freemat.sourceforge.net/. Acesso em: 29

Agos. 2014.

HEFEZ, A. FERNANDEZ, C. d. S. Introdu¸c˜ao `a ´Algebra Linear. Cole¸c˜ao Profmat, SBM,

1 ed. Rio de Janeiro, 2012.

HOWARD, A. RORRES, C. ´Algebra Linear com Aplica¸c˜oes. Editora Boockman, 8 ed.

Porto Alegre, 2001.

HYGINO, H. D. IEZZI, G. ´Algebra Moderna. Editora Atual, 4 ed. S˜ao Paulo, 2003.

IEZZI, G. MURAKAMI, C. Fundamentos de Matem´atica Elementar. ATUAL EDITORA,

vol 1, 7 ed. S˜ao Paulo, 2002.

LIMA, E. L. N´umeros e Fun¸c˜oes Reais. Cole¸c˜ao Profmat, SBM, 1 ed. Rio de Janeiro,

2013.

LLANO, J. G. (2006). A inform´atica educativa na escola. Edi¸c˜oes Loyola, S˜ao Paulo, p.

27–31.

MARIANI, V. C. SOUZA, V. D. M. Um Breve Relato do Desenvolvimento
do Conceito de Fun¸c˜ao. Educare PUCPR, 2005, PARAN ´A, Dispon´ıvel em:

http://www.pucpr.br/eventos/educere/educere2005/anaisEvento/documentos/com/

TCCI021.pdf; Acesso em: 15 Maio. de 2015.

NOBRE, M.

O uso

guns

t´opicos

de

do
´Algebra

software Matlab

para

o

estudo

de

al-

Linear.

pg.1–2.

Dispon´ıvel

em:

http://www.ucb.br/sites/100/103/TCC/22005/MarcelloNobreCardoso.pdf,

Acesso

em: 21 Agos. de 2014.

POLCINO, f. C. M. An´eis e M´odulos. 1. ed. S˜ao Paulo: IME-USP, 1972. 202 p.

SANTOS, R. LORETO, A. B. GONC¸ ALVES, J. L. Avalia¸c˜ao de softwares matem´aticos

quanto a sua funcionalidade e tipo de licen¸ca para uso em sala de aula. REnCiMa,

vol.1, n.1, p. 47-65, 2010.

SILVA, A. A. Introdu¸c˜ao `a ´Algebra Linear. Ed. Universit´aria/UFPB, 1 ed. Jo˜ao Pessoa,

2007.

SHARMA, N. GOBBERT, M. K. A comparative evaluation comparative of Matlab,

Octave, FreeMat, and Scilab for research and teaching. Department of Mathe-

matics and Statistics, University of Maryland, Baltimore County, Dispon´ıvel em:

http://userpages.umbc.edu/ gobbert/papers/SharmaGobbertTR2010.pdf. Acesso em:

22 agos. 2014.

SODRE, U. OLIVEIRA, A. S. CORRˆEA,T. P. FreeMat:

Uma introdu¸c˜ao.

Londrina-PR, 2009, pg.4—6. Dispon´ıvel em: http://www.uel.br/projetos/ matessen-

cial/superior/pdfs/freemat.pd.Acesso em:20 agos. 2014.

183

Apˆendice: Programas escritos em

FreeMat

.

A.1 Programa para determinar o valor a pagar para

um certo consumo de ´agua das residˆencias em

Cuiab´a/MT

function VALORES

sim=1; nao=0; continuar=1; while continuar==1

clc

disp(’ ’)

disp(’****************************************************************’)

disp(’*Programa para determinar o valor decorrente do consumo de ´agua*’)

disp(’****************************************************************’)

disp(’ ’)

x=input (’Insira o consumo em m3==>’)

clc

if x>=0 & x<=10

disp (’ ’)

disp(’****************************************************************’)

disp(’*

Consumo em m3:

*’)

disp(’****************************************************************’)

184

consumo=x

y= 4.313*x;

disp(’****************************************************************’)

disp(’*

Valor a pagar em reais :

*’)

disp(’****************************************************************’)

valor=y

elseif x>10 & x<=20

disp (’ ’)

disp(’****************************************************************’)

disp(’*

Consumo em m3:

*’)

disp(’****************************************************************’)

consumo=x

y= 5.282*x-9.69;

disp(’****************************************************************’)

disp(’*

Valor a pagar em reais :

*’)

disp(’****************************************************************’)

valor=y

elseif x>20 & x<=30

disp (’ ’)

disp(’****************************************************************’)

disp(’*

Consumo em m3:

*’)

disp(’****************************************************************’)

consumo=x

y= 8.816*x-80.37;

disp(’****************************************************************’)

disp(’*

Valor a pagar em reais :

*’)

disp(’****************************************************************’)

valor=y

elseif x>30 & x<=50

disp (’ ’)

disp(’****************************************************************’)

disp(’*

Consumo em m3:

*’)

185

disp(’****************************************************************’)

consumo=x

y= 10.792*x-139.65;

disp(’****************************************************************’)

disp(’*

Valor a pagar em reais :

*’)

disp(’****************************************************************’)

valor=y

elseif x>50

disp (’ ’)

disp(’****************************************************************’)

disp(’*

Consumo em m3:

*’)

disp(’****************************************************************’)

y=14.269*x-313.5;

disp(’****************************************************************’)

disp(’*

Valor a pagar em reais :

*’)

disp(’****************************************************************’)

valor=y

end

continuar=input(’Deseja obter o valor para outro consumo ? sim /nao’);

disp(’ ’)

disp(’****************************************************************’)

disp(’*

Fim do programa

*’)

disp(’****************************************************************’)

end

186

A.2 Programa para criptografar mensagens pelo sis-

tema poligr´aﬁco, baseado na multiplica¸c˜ao de

matrizes com entradas reais

function CRIPTOGRAFAR

sim=1; nao=0; reiniciar=0; while reiniciar==0

clc

a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;

n=14;o=15;p=16;q=17;r=18;s=19;t=20; u=21; v=22; w=23; x=24; y=25; z=26;

disp (‘ ’)

disp (‘*****************************************************************’)

disp (‘* Programa para criptografar mensagens pelo sistema poligr´afico,*’)

disp (‘*

baseado na multiplica¸c~ao de matrizes com entradas reais

*’)

disp (‘*****************************************************************’)

disp (‘ ’)

disp (‘ ’)

disp (‘*****************************************************************’)

disp (‘*

Tabela de correspond^encia num´eria

*’)

disp (‘*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

187

disp(’ ’)

A=input(’ Entre com a matriz chave de ordem n: A=’)

disp(’ ’)

disp(’ ’)

[I, J]=size(A)

clc

disp(’ ’)

disp(’ ’)

if det(A)==0

disp (’*****************************************************************’)

disp (’* A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel. *’)

disp (’*****************************************************************’)

reiniciar=input(’Deseja encerrar o programa? sim / nao’);

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

else

disp (’******************************************************************’)

disp (’*

A matriz M deve possuir J elementos em cada linha

*’)

disp (’******************************************************************’)

J=J

disp (’******************************************************************’)

M=input(’Entre com a matriz cujas entradas s~ao caracteres da mensagem:M= ’)

clc

disp(’ ’)

disp (’******************************************************************’)

disp (’*

Cada linha da matriz MA ´e um bloco do criptograma

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

MA=M*A

reiniciar=input(’Deseja encerrar o programa? sim /nao’);

188

disp (’ ’)

disp (’ ’)

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

end

end

A.3 Programa para decifrar mensagens pelo sistema

poligr´aﬁco, baseado na multiplica¸c˜ao de matri-

zes com entradas reais

function DECIFRAR

sim=1; nao=0; reiniciar=0;

while reiniciar==0

clc

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘*

Programa para decifrar mensagens pelo sistema poligr´afico, *’)

disp (‘*

baseado na multiplica¸c~ao de matrizes com entradas reais

*’)

disp (‘*****************************************************************’)

disp (’ ’)

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘*

Tabela de correspond^encia num´eria

*’)

disp (‘*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

189

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

disp(’ ’)

A=input(’ Entre com a matriz chave de ordem n: A=’)

[I, J]=size(A);

clc

disp(’ ’)

disp(’ ’)

if det(A)==0

disp (’*****************************************************************’)

disp (’* A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel. *’)

disp (’*****************************************************************’)

reiniciar=input(’Deseja encerrar o programa? sim / nao’);

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

else

disp (’******************************************************************’)

disp (’*

A matriz C deve possuir J elementos em cada linha

*’)

disp (’******************************************************************’)

J=J

disp (’******************************************************************’)

C=input(’Entre com a matriz cujos elementos caracteres do criptograma:C= ’)

clc

disp(’ ’)

190

disp (’******************************************************************’)

disp (’*

Cada linha da matriz M ´e um bloco do texto comum

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

M=C*inv(A)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘

Utilize a tabela abaixo para escrever o texto comum

’)

disp (’*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

disp(’ ’)

reiniciar=input(’Deseja encerrar o programa? sim /nao’);

disp (’ ’)

disp (’ ’)

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

end

end

191

A.4 Programa para criptografar mensagens pelo sis-

tema poligr´aﬁco: 2-Cifras de Hill

function CRIPTOGRAFARHILL2

sim=1; nao=0; reiniciar=0;

while reiniciar==0

clc

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘*Programa para criptografar mensagens pelo sistema poligr´afico, *’)

disp (‘*

2-Cifras de Hill

*’)

disp (‘*****************************************************************’)

disp (’ ’)

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘*

Tabela de correspond^encia num´eria

*’)

disp (‘*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

192

disp(’ ’)

A=input(’ Entre com a matriz chave de ordem 2: A=’)

clc

disp(’ ’)

disp(’ ’)

if size(A)∼= [2,2] || mod(A(1)*A(4)-A(2)*A(3),3)==0

disp (’*****************************************************************’)

disp (’* A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel. *’)

disp (’*****************************************************************’)

reiniciar=input(’Deseja encerrar o programa? sim / nao’);

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

else

disp (’******************************************************************’)

disp (’*

A matriz M deve possuir 2 elementos em cada linha

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

disp (’******************************************************************’)

M=input(’Entre com a matriz cujos elementos caracteres do texto comum:M= ’)

clc

disp(’ ’)

disp (’******************************************************************’)

disp (’*

Cada linha da matriz MA ´e um bloco do criptograma

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

MA=mod(M*A,27)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

193

disp (‘

Utilize a tabela abaixo para escrever o criptograma

’)

disp (’*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

disp(’ ’)

reiniciar=input(’Deseja encerrar o programa? sim /nao’);

disp (’ ’)

disp (’ ’)

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

end

end

A.5 Programa para decifrar mensagens pelo sistema

poligr´aﬁco: 2-Cifras de Hill

function DECIFRARHILL2

sim=1; nao=0; reiniciar=0;

while reiniciar==0

194

clc

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘* Programa para decifrar mensagens pelo sistema poligr´afico,

disp (‘*

2-Cifras de Hill

*’)

*’)

disp (‘*****************************************************************’)

disp (’ ’)

disp (’ ’)

disp (‘*****************************************************************’)

disp (‘*

Tabela de correspond^encia num´eria

*’)

disp (‘*****************************************************************’)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

disp(’ ’)

A=input(’ Entre com a matriz chave de ordem 2: A=’)

D=[A(4) -A(3); -A(2) A(1)];

clc

disp(’ ’)

disp(’ ’)

if size(A)∼= [2,2] || mod(A(1)*A(4)-A(2)*A(3),3)==0

disp (’*****************************************************************’)

disp (’* A matriz chave n~ao ´e v´alida, pois a matriz n~ao ´e invers´ıvel. *’)

195

disp (’*****************************************************************’)

reiniciar=input(’Deseja encerrar o programa? sim / nao’);

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

else

elseif mod(A(1)*A(4)-A(2)*A(3),27)==1

inv=1*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==2

inv=14*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==4

inv=7*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==5

inv=11*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==7

inv=4*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==8

inv=17*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==10

inv=19*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==11

inv=5*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==13

inv=25*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==14

inv=2*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==16

inv=22*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==17

inv=8*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==19

inv=10*D;

196

elseif mod(A(1)*A(4)-A(2)*A(3),27)==20

inv=23*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==22

inv=16*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==23

inv=20*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==25

inv=13*D;

elseif mod(A(1)*A(4)-A(2)*A(3),27)==26

inv=26*D;

end

disp (’******************************************************************’)

disp (’*

A matriz C deve possuir 2 elementos em cada linha

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

C=input(’Entre com a matriz cujos elementos caracteres do criptograma:C= ’)

clc

disp(’ ’)

disp(’ ’)

disp (’******************************************************************’)

disp (’*

Cada linha da matriz M ´e um bloco do texto comum

*’)

disp (’******************************************************************’)

disp(’ ’)

disp(’ ’)

M=mod(C*inv,27)

disp (‘* *’)

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘

Utilize a tabela abaixo para escrever o texto comum

’)

disp (’*****************************************************************’)

disp (‘* *’)

197

disp (‘* *’)

disp (‘*****************************************************************’)

disp (‘*

*’)

disp (‘* a=1;b=2;c=3;d=4;e=5;f=6;g=7;h=8;i=9;j=10;k=11;l=12;m=13;n=14’ *)

disp (‘*

*’)

disp (‘* o=15;p=16;q=17;r=18;s=19;t=20;u=21;v=22;w=23;x=24;y=25;z=26 * ’)

disp (‘*

*’)

disp (‘*****************************************************************’)

disp (‘

O caractere 0 corresponde a um espa¸co vazio

’)

disp (’*****************************************************************’)

disp(’ ’)

disp(’ ’)

reiniciar=input(’Deseja encerrar o programa? sim /nao’);

disp (’ ’)

disp (’ ’)

disp (’*****************************************************************’)

disp (’*

Fim do Programa

*’)

disp (’*****************************************************************’)

end

end

A.6 Programa para resolu¸c˜ao de sistemas pela Regra

de Cramer

function CRAMER

sim=1; nao=0; reiniciar=0;

while reiniciar==0

clc

disp (‘ ’)

disp (‘*********************************************************************’)

198

disp (‘*

disp (‘*

disp (‘*

Programa para obter solu¸c~ao de sistemas lineares de:

m equa¸c~oes com m inc´ognitas

Regra de Cramer

*’)

*’)

*’)

disp (‘*********************************************************************’)

A=input(‘Entre com a matriz dos coeficientes: A =’)

clc

disp (’ ’)

disp (‘*********************************************************************’)

disp (‘*

Matriz A

*’)

disp (‘*********************************************************************’)

disp (’ ’)

A=A

disp (’ ’)

disp (‘*********************************************************************’)

disp (‘*

Determinante da matriz A

*’)

disp (‘*********************************************************************’)

disp (’ ’)

detA=det(A)

if det(A)

sim=0

disp (‘*********************************************************************’)

disp (‘* Como det(A) ´e diferente de zero, o sistema possui solu¸c~ao ´unica *’)

disp (‘*********************************************************************’)

disp (‘ ’)

B=input(‘Para obter a solu¸c~ao, insira a matriz dos termos independentes: B =’)

clc

disp (‘ ’)

disp (‘*********************************************************************’)

disp (‘*

solu¸c~ao do sistema linear:

*’)

disp (‘*********************************************************************’)

X=inv(A)*B

reiniciar=input(‘Deseja revelar cada inc´ognita e o respectivo valor? sim/n~ao’)

clc

199

disp (‘ ’)

disp (‘*********************************************************************’)

disp (‘*

Conjunto solu¸c~ao do sistema linear:{(x1, x2,...,xi,...,xm)}:

*’)

disp (‘*********************************************************************’)

disp (‘ ’)

disp (‘ ’)

[m n]=size(X);

for i=1:m

disp (‘*********************************************************************’)

disp (’*

valor da inc´ognita xi

*’)

disp (‘*********************************************************************’)

i=i

xi=[X(i)]

end

disp (’ ’)

disp (‘*********************************************************************’)

disp (’*

Fim do programa

*’)

disp (‘*********************************************************************’)

elseif det(A)==0

disp (‘*********************************************************************’)

disp (’*

disp (‘*

Como det(A)=0, informa¸c~oes sobre

as solu¸c~oes do sistema linear s~ao inconclusivas

*’)

*’)

disp (‘*********************************************************************’)

disp (’ ’)

disp (‘*********************************************************************’)

disp (‘*

Fim do programa

*’)

disp (‘*********************************************************************’)

end

end

200

A.7 Programa para resolu¸c˜ao de sistemas pelo m´etodo

de Gauss-Jordan

function GAUSSJORDAN

sim=1; nao=0; reiniciar=0;

while reiniciar==0

clc

disp (‘ ’)

disp (’***************************************************************’)

disp (’*

Programa para obter solu¸c~ao de sistemas lineares de

disp (*

disp (’*

m equa¸c~oes com n inc´ognitas

M´etodo de Gauss- Jordan

*’)

*’)

*’)

disp (’***************************************************************’)

disp (’ ’)

A=input(’ Entre com a matriz dos coeficientes :

A = ’ );

[m, n]=size(A);

clc

disp (’ ’)

disp (’ ’)

disp (’***************************************************************’)

disp (’*

m: N´umero de equa¸c~oes do sistema

*’)

disp (’***************************************************************’)

m=m

disp (’***************************************************************’)

disp (’*

n: N´umero de inc´ognitas xi

*’)

disp (’***************************************************************’)

n=n

disp (’***************************************************************’)

B=input(’ Entre com a matriz dos termos independetes:

B = ’ );

clc

disp (’***************************************************************’)

201

disp (’*

Matriz ampliada C=(A|B):

*’)

disp (’***************************************************************’)

C=[A B]

disp (’***************************************************************’)

disp (’*

Posto da matriz A:

*’)

disp (’***************************************************************’)

postoA=rank(A)

disp (’***************************************************************’)

disp (’*

Posto da matriz C:

*’)

disp (’***************************************************************’)

postoC=rank(C)

if rank(A)==rank(C) & rank(A)==n

disp (’’)

disp (’***************************************************************’)

disp (’*

disp (‘*

Como posto(A)=posto(C) e posto (A)= n

o sistema ´e compat´ıvel e determinado

*’)

*’)

disp (’***************************************************************’)

disp (’ ’)

disp (’ ’)

disp (’***************************************************************’)

disp (’*

Matriz C na forma linha escada reduzida

*’)

disp (’***************************************************************’)

Escada=rref (C)

disp (’ ’)

disp (’ ’)

reiniciar=input(’Deseja revelar cada inc´ognita e seu valor? sim /nao’);

clc

disp (’ ’)

disp (’***************************************************************’)

disp (‘* Conjunto solu¸c~ao do sistema linear {(x1, x2,...,xi,...,xm)}:*’)

disp (’***************************************************************’)

disp (’ ’)

202

disp (’ ’)

[m n]=size(X);

for i=1:m

disp (’***************************************************************’)

disp (’*

Valor da inc´ognita xi

*’)

disp (’***************************************************************’)

i=i

Xi=Escada(m*(n-1)+1*i)

disp (’***************************************************************’)

disp (’ ’)

disp (’ ’)

end

disp (’***************************************************************’)

disp (’*

Fim do programa

*’)

disp (’***************************************************************’)

elseif rank(A)< rank(C)

disp (’ ’)

disp (’***************************************************************’)

disp (’*

Como posto(A) < posto (C) o sistema ´e incompat´ıvel

*’)

disp (’***************************************************************’)

disp (’ ’)

disp (’ ’)

reiniciar=input(’ Deseja encerrar o programa? sim / nao ’);

disp (’ ’)

disp (’***************************************************************’)

disp (’*

Fim do programa

*’)

disp (’***************************************************************’)

elseif rank(A)==rank(C) & rank(A)<n

disp (’ ’)

disp (’***************************************************************’)

disp (’*

disp (’*

Como posto(A)=posto(C) e posto (A)< n

o sistema ´e compat´ıvel e indeterminado

*’)

*’)

203

disp (’***************************************************************’)

disp (’ ’)

disp (’ ’)

disp (’***************************************************************’)

disp (’*

N´umero de par^ametros livres do sistema:

*’)

disp (’***************************************************************’)

n-rank(A)

disp (’ ’)

disp (’ ’)

disp (’***************************************************************’)

disp (’*

Matriz C na forma linha escada reduzida

*’)

disp (’***************************************************************’)

Escada=rref (C)

disp (’***************************************************************’)

disp (’* Atribua quaisquer valores reais para cada inc´ognita livre e *’)

disp (‘* substitua no sistema escalonado, ap´os, fa¸ca substitui¸c~oes *’)

disp (‘*

regressivas obtendo um conjunto solu¸c~ao.

*’)

disp (’***************************************************************’)

reiniciar=input(’ Deseja encerrar o programa? sim / nao ’);

disp (‘ ’)

disp (’***************************************************************’)

disp (’*

Fim do programa

*’)

disp (’***************************************************************’)

end

end

204

