2016: DISSERTAC¸ ˜AO DE MESTRADO
Mestrado Proﬁssional em Matem´atica - PROFMAT, Universidade Federal de S˜ao Jo˜ao Del-Rei - UFSJ
Sociedade Brasileira de Matem´atica - SBM

Algoritmos em Grafos e o Problema do Caixeiro Viajante:
uma abordagem no Ensino M´edio utilizando planilhas eletrˆonicas.

Anderson Oliveira Viana 1
Alexandre Celestino Leite Almeida2

Resumo: Este trabalho apresenta uma vis˜ao geral e b´asica sobre Grafos e uma abordagem
especial de dois problemas relacionados a esse tema da Matem´atica: o Problema do
Caminho Mais Curto e o Problema do Caixeiro Viajante. O Problema do Caminho Mais
Curto, pelo grande n´umero de aplica¸c˜oes pr´aticas, mereceu um destaque especial neste
texto. Dois algoritmos resolutivos do problema, o Algoritmo de Dijkstra e o Algoritmo de
Floyd-Warshall, s˜ao apresentados e modelos s˜ao implementados em planilhas eletrˆonicas.
O Problema do Caixeiro Viajante (PCV), um dos problemas mais conhecidos e estudados
na Otimiza¸c˜ao Combinat´oria, ´e caracterizado e variantes s˜ao apresentadas. Modelos do
problema na vers˜ao cl´assica e da variante PCV com Coleta de Prˆemios s˜ao implementados
em planilhas eletrˆonicas. Na se¸c˜ao ﬁnal do trabalho, apresentamos atividades que podem
ser ministradas por professores de Matem´atica em aulas sobre o tema Grafos em turmas
do ensino m´edio.

Palavras-chave: Grafos, Problema do Caminho M´ınimo, Problema do Caixeiro Via-
jante, Algoritmos em Grafos em planilha eletrˆonica, PCV em planilha eletrˆonica.

1

Introdu¸c˜ao

Otimizar ´e empregar t´ecnicas para selecionar as melhores alternativas para se atin-
gir os objetivos propostos. Signiﬁca estabelecer prioridades para uma maior eﬁciˆencia e
eﬁc´acia em busca de obter os melhores rendimentos. Na ´area da Inform´atica, otimizar
um sistema ´e torn´a-lo mais r´apido e eﬁciente, reduzindo o tempo de execu¸c˜ao de tarefas.
Em Matem´atica, o termo otimiza¸c˜ao, refere-se ao estudo de problemas em que se busca
minimizar ou maximizar uma fun¸c˜ao atrav´es da escolha de valores de vari´aveis reais ou
inteiras dentro de um conjunto vi´avel.

Por muitas vezes, em sala de aula, os professores de Matem´atica s˜ao questionados pe-
los alunos quanto `a aplicabilidade e necessidade de aprender determinados conceitos ma-
tem´aticos. Quando falamos em otimiza¸c˜ao, a Administra¸c˜ao, a Engenharia, a Log´ıstica,
a Biologia, por exemplo, fazem uso de modelos matem´aticos para representar problemas

1Aluno de Mestrado do PROFMAT, Turma 2014, Universidade Federal de S˜ao Jo˜ao Del-Rei - UFSJ,

andersonoviana@hotmail.com

2Professor orientador, Departamento de F´ısica e Matem´atica - DEFIM, UFSJ - CAP,

celestino@ufsj.edu.br

e aplicando t´ecnicas matem´aticas chegam a resultados e solu¸c˜oes que contribuem para a
melhoria de algum sistema relacionado a alguma dessas ´areas. O ´ındice de desempenho,
o ´ındice de performance e o ´ındice de eﬁciˆencia s˜ao calculados objetivando encontrar uma
“solu¸c˜ao ´otima”, isto ´e, aquela que resulta no melhor desempenho poss´ıvel de um sistema,
segundo crit´erios previamente deﬁnidos.

Em um problema de otimiza¸c˜ao temos uma fun¸c˜ao objetivo e um conjunto de res-
tri¸c˜oes, ambos relacionados `as vari´aveis de decis˜ao. Os valores poss´ıveis `as vari´aveis de
decis˜ao s˜ao delimitados pelas restri¸c˜oes impostas sobre essas vari´aveis, formando um con-
junto discreto de solu¸c˜oes fact´ıveis a um problema. O problema pode ser de minimiza¸c˜ao
ou de maximiza¸c˜ao da fun¸c˜ao objetivo. A resposta para o problema de otimiza¸c˜ao, ser´a
o menor (ou maior) valor poss´ıvel para a fun¸c˜ao objetivo para o qual o valor atribu´ıdo `as
vari´aveis n˜ao viole nenhuma restri¸c˜ao.

Entre muitos problemas de Otimiza¸c˜ao Combinat´oria, este trabalho dedica-se a pro-
blemas que envolvem Grafos, por ser um tema com grande n´umero de aplica¸c˜oes pr´aticas
e pouco presente em planejamentos curriculares e livros did´aticos do ensino b´asico.

Na sec˜ao 2 apresentamos os conceitos b´asicos sobre grafos, tipos, caracteriza¸c˜ao e for-
mas de representa¸c˜ao. A se¸c˜ao 3 aborda o Problema do Caminho Mais Curto ou Problema
do Caminho M´ınimo em grafos. Ainda na se¸c˜ao 3, dois algoritmos s˜ao apresentados e mo-
delos s˜ao implementados numa planilha eletrˆonica. Na se¸c˜ao 4 apresentamos o Problema
do Caixeiro Viajante (PCV), algumas de suas variantes, formula¸c˜ao matem´atica, m´etodos
de resolu¸c˜ao e tamb´em implementamos dois modelos do PCV em planilhas eletrˆonicas. Na
se¸c˜ao 5, sugerimos algumas atividades que podem ser ministradas em aulas que abordem
os temas aqui apresentados. Neste trabalho utilizamos uma linguagem de f´acil compre-
ens˜ao, o que torna esse texto um singelo guia para professores que desejam trabalhar esses
temas no ensino b´asico.

2 Grafos

Deﬁnimos grafo como o par de conjuntos (V, A) onde V = {v1, v2, ..., vn} ´e um conjunto
de v´ertices ou n´os e A = {(vi, vj) | vi, vj ∈ V } ´e um conjunto de arestas ou arcos. Uma
representa¸c˜ao geom´etrica de um grafo pode ser associar os v´ertices a pontos e as arestas a
linhas que ligam os pares de v´ertices que as formam. Por exemplo, podemos construir um
grafo que represente pessoas apertando as m˜aos numa reuni˜ao. Os v´ertices representam
as pessoas e, se duas pessoas se cumprimentam, ligamos os v´ertices que as representam,
formando assim uma aresta (ou v´ertice). (ﬁgura 1).

Al´em da nota¸c˜ao (vi, vj), outra nota¸c˜ao admitida para representar uma aresta que
liga o v´ertice i ao v´ertice j ´e aij ou simplesmente aj, quando se tratar de grafos n˜ao
direcionados (constitu´ıdo de arestas n˜ao orientadas).

A ﬁgura 2 mostra dois exemplos de grafos: o grafo G1 consiste dos conjuntos V =
{v1, v2, v3, v4, v5} e A = {(v1, v2), (v1, v3), (v2, v4), (v3, v4), (v3, v5), (v4, v5)}; G2 possui o
v´ertice v4 que n˜ao ´e conectado com nenhum outro v´ertice do grafo. Nesse caso, o v´ertice
´e chamado de isolado.

Dois v´ertices i, j s˜ao vizinhos se eles est˜ao conectados por uma aresta , e representamos

2

Figura 1: Grafo representando o cumprimento de pessoas atrav´es do aperto de m˜aos.

Figura 2: Exemplos de grafos.

por i ∼ j. Nesse caso, dizemos que os v´ertices s˜ao adjacentes e que a aresta ´e incidente
aos v´ertices. O n´umero de vezes que as arestas incidem sobre o v´ertice v ´e chamado grau
do v´ertice v, simbolizado por d(v). Por exemplo, nos grafos da ﬁgura 2, em G1 temos que
d(v3) = 3, d(v5) = 2 e em G2, d(v4) = 0. Um grafo ´e dito regular de grau r, quando todos
os seus v´ertices possuem o mesmo grau.

Uma aresta pode ligar um v´ertice a ele mesmo. ´E o que chamamos de la¸co ou loop.
Neste caso a aresta ´e do tipo (vi, vi), formada por um par de v´ertices idˆenticos (ﬁgura 3).
Dois v´ertices podem estar ligados por mais de uma aresta. Neste caso, chamamos o grafo
de multigrafo (ﬁgura 4). Grafos sem la¸cos ou arestas m´ultiplas s˜ao chamados de grafos
simples.

Um percurso ou passeio em um grafo ´e um conjunto de v´ertices (ou de liga¸c˜oes)
sequencialmente adjacentes. Ou seja, um primeiro v´ertice ´e adjacente ao segundo, que ´e
adjacente ao terceiro, e assim sucessivamente at´e chegar ao ´ultimo. Um percurso ´e dito
fechado se o primeiro v´ertice da sequˆencia for tamb´em o ´ultimo. Caso contr´ario, ser´a

3

Figura 3: Grafo com la¸co ou loop.

Figura 4: Multigrafo.

denominado aberto.

O percurso sem repeti¸c˜ao de arestas ´e chamado de cadeia. Caminho ´e uma cadeia
sem repeti¸c˜ao de v´ertices. O caminho de v1 a vk ´e uma sequˆencia de v´ertices v1, ..., vk
tal que (vj, vj+1) ∈ A, 1 ≤ j <| k − 1 | ([26]). Um caminho de k v´ertices ´e formado por
k − 1 arestas (v1, v2), (v2, v3), ..., (vk−1, vk). Um ciclo ´e um caminho v1, ..., vk, vk+1, sendo
v1 = vk+1 e k ≥ 3.

Um caminho que contenha cada v´ertice do grafo exatamente uma vez ´e chamado de
hamiltoniano. Um ciclo v1, ..., vk, vk+1 ´e hamiltoniano quando o caminho v1, ..., vk o for.
O termo hamiltoniano ´e devido a Willian Rowan Hamilton que, em 1857, propˆos um
jogo que denominou A Voyage Around the World (Uma viagem ao redor do mundo). O
objetivo do jogo era encontrar um roteiro de viagem passando por cada cidade exatamente
uma vez, iniciando e terminando numa mesma cidade e para tornar o problema mais
interessante, as cinco primeiras cidades a serem visitadas eram pr´e-estabelecidas. O roteiro
era composto pelas vinte cidades mais importantes da ´epoca, representadas pelos v´ertices
de um dodecaedro. O grafo que representa o jogo ´e mostrado na ﬁgura 5. Uma solu¸c˜ao
de A Voyage Around the World passou a ser denominado de ciclo hamiltoniano, em
homenagem a Hamilton. Uma das solu¸c˜oes do jogo ´e mostrada na ﬁgura 6. Mais adiante,
apresentamos uma se¸c˜ao dedicada a um dos problemas mais conhecidos que envolvem
grafos, o Problema do Caixeiro Viajante, cujo desaﬁo na sua vers˜ao cl´assica ´e encontrar
um ciclo hamiltoniano de custo m´ınimo em um grafo ponderado.

Por outro lado, algum caminho ou ciclo que contenha cada aresta do grafo, tamb´em
exatamente uma vez cada, ´e denominado euleriano. O termo euleriano ´e devido a Leo-
nhard Euler. Em 1736, Euler visitou a cidade de K¨onigsberg (atualmente Kaliningrado
na R´ussia) que, na ´epoca, possu´ıa uma ilha rodeada pelo rio Prega com 7 pontes (ﬁgura
7). Euler tomou conhecimento de um problema que intrigava os habitantes da cidade e
que ﬁcou conhecido como o Problema das Pontes de K¨onigsberg: existia um modo de
atravessar as 7 pontes, sem passar duas vezes na mesma ponte, retornando ao ponto de
partida? O problema d´a origem a um multigrafo e Euler mostrou que n˜ao ´e poss´ıvel
realizar tal percurso.

4

Figura 5: Jogo de Hamilton

Figura 6: Uma solu¸c˜ao do Jogo de Ha-
milton

Figura 7: Problema das Pontes de K¨onigsberg.

Denominamos simplesmente grafo hamiltoniano ou grafo euleriano quando um grafo

G possui ciclo hamiltoniano ou euleriano, respectivamente.

Um grafo G(V, A) ´e denominado conexo quando existe caminho entre cada par de
v´ertices de G. Caso contr´ario G ´e desconexo. No grafo desconexo da ﬁgura 8, por
exemplo, n˜ao podemos estabelecer um caminho de 1 a 7. Um grafo G que n˜ao possui
arestas ´e considerado totalmente desconexo.

Um grafo ´e dito direcionado ou orientado ou dirigido ou d´ıgrafo quando ´e necess´ario
ser estabelecido um sentido (orienta¸c˜ao) para as arestas. O sentido da aresta ´e indicado
atrav´es de uma seta, como ilustrado na ﬁgura 9. Se a seta “sai ” de vi e “chega” a vj,
dizemos que a aresta ´e divergente de vi e convergente a vj.

Um grafo G ´e denominado completo se existe uma aresta ligando cada par de v´ertices

de G, como mostra o exemplo da ﬁgura 10.

Se associamos um peso ou conjunto de pesos a cada aresta, temos um grafo ponderado
ou valorado. O peso ou custo de uma aresta ´e representado por wij, ou seja, w35 ´e o peso

5

Figura 8: Um grafo desconexo.

Figura 9: G3 Grafo direcionado.

Figura 10: G4 Grafo completo.

associado a aresta que une os v´ertices 3 e 5. Podemos tamb´em incluir o peso das arestas
em um conjunto P . Dessa forma o grafo G ´e deﬁnido por G = (V, A, P ).

Um subgrafo de um grafo G = (V, A) ´e o grafo H = (V (cid:48), A(cid:48)) tal que V (cid:48) ⊆ V e A(cid:48) ⊆ A.
Podemos representar na forma H ⊆ G e dizer que G cont´em H. Na ﬁgura 11, os grafos
G6 e G7 s˜ao subgrafos do grafo G5.

Figura 11: Um grafo G5 com dois subgrafos, G6 e G7.

6

2.1 Representa¸c˜ao de Grafos

Alguns problemas que s˜ao resolvidos utilizando grafos s˜ao de complexidade elevada,
tornando o computador uma ferramenta indispens´avel para resolvˆe-los. Em um compu-
tador faz-se necess´ario representar essas estruturas de modo que possam ser armazenadas
e manipuladas sem diﬁculdade. A representa¸c˜ao geom´etrica n˜ao satisfaz essa condi¸c˜ao.
Nesta se¸c˜ao, apresentaremos alguns tipos de representa¸c˜oes de grafos adequadas ao com-
putador.

2.1.1 Matriz de adjacˆencia

Uma das formas mais utilizadas para representar grafos ´e via matriz de adjacˆencia.
Seja R = [rij] uma matriz n × n, onde n ´e o n´umero de n´os de um grafo G = (V, A)
simples e n˜ao direcionado, a matriz de adjacˆencia R ´e constru´ıda da seguinte forma:

R(i, j) =

(cid:26) 1 se i ∼ j

0 caso contr´ario.

A ﬁgura 12 ilustra o conceito de matriz de adjacˆencia para um grafo n˜ao direcionado.

=⇒

1
0
1
0
1
1

2
1
0
1
1
1

3
0
1
0
1
0

4
1
1
1
0
1

5
1
1
0
1
0

1
2
3
4
5

=⇒ R =









0 1 0 1 1
1 0 1 1 1
0 1 0 1 0
1 1 1 0 1
1 1 0 1 0









Figura 12: Um grafo n˜ao direcionado e sua matriz de adjacˆencia.

Para grafos direcionados, a matriz de adjacˆencia R ´e constru´ıda da seguinte forma:

R(i, j) =

(cid:26) 1 se (vi, vj) for aresta divergente de vi e convergente a vj

0 caso contr´ario.

A ﬁgura 13 mostra o conceito de matriz de adjacˆencia para um grafo direcionado.
Quando o grafo ´e ponderado, matriz de adjacˆencia ´e constru´ıda com os valores dos
pesos associados `as arestas. Seja wij o peso associado `a aresta (i, j), a matriz de adjacˆencia
R de um grafo ponderado ´e constru´ıda da seguinte forma:

R(i, j) =

(cid:26) wij
0

se i ∼ j
caso contr´ario.

A ﬁgura 14 mostra o conceito de matriz de adjacˆencia para um grafo ponderado.
Quando se tratar de grafo direcionado ponderado, basta atribuir sinais aos pesos das

arestas, observando a convergˆencia ou divergˆencia da aresta no v´ertice.

7

=⇒

1
0
0
0
0
0

2
1
0
0
0
0

3
0
1
0
1
1

4
0
1
0
0
0

5
1
0
0
0
0

1
2
3
4
5

=⇒ R =









0 1 0 0 1
0 0 1 1 0
0 0 0 0 0
0 0 1 0 0
0 0 1 0 0









Figura 13: Um grafo direcionado e sua matriz de adjacˆencia.

=⇒

v1
0
5
0
7
3

v2
5
0
8
0
6

v3
0
8
0
3
2

v4
7
0
3
0
1

v1
v2
v3
v4
v5

v5
3
6
2
1
0

=⇒ R =









0 5 0 7 3
5 0 8 0 6
0 8 0 3 2
7 0 3 0 1
3 6 2 1 0









Figura 14: Um grafo ponderado e sua matriz de adjacˆencia.

2.1.2 Matriz de incidˆencia

A matriz de incidˆencia B = [bij] de um grafo G = (V, A) n˜ao direcionado, com
V = (v1, v2, ..., vn) e A = (a1, a2, ..., am), de dimens˜ao m × n, onde n ´e o n´umero de
v´ertices e m ´e o n´umero arestas do grafo, ´e deﬁnida da seguinte forma:

B(i, j) =

(cid:26) 1 se vj ∈ ai

0 caso contr´ario

A ﬁgura 15 mostra um grafo n˜ao direcionado e sua matriz de incidˆencia.

=⇒

1
1
0
0
1
1

2
1
1
0
0
0

3
0
1
1
0
1

4
0
0
1
1
0

a1
a2
a3
a4
a5

=⇒ B =









1 1 0 0
0 1 1 0
0 0 1 1
1 0 0 1
1 0 1 0









Figura 15: Um grafo n˜ao direcionado e sua matriz de incidˆencia.

8

Para grafos direcionados (d´ıgrafos), ´e preciso observar o sentido do caminho entre os
n´os e adotar um padr˜ao para o sinal dos 1’s. Por exemplo, podemos construir a matriz
de incidˆencia B de um d´ıgrafo da seguinte forma:

B(i, j) =






+1 se a aresta ai for divergente de vj
−1 se a aresta ai for convergente a vj
0

se a aresta ai n˜ao incide no v´ertice vj.

A ﬁgura 16 mostra o conceito de matriz de incidˆencia para o grafo direcionado da

ﬁgura 13.

=⇒

1
1
0
0
0
0
1

2
-1
1
0
1
0
0

3
0
-1
-1
0
-1
0

4
0
0
1
-1
0
0

5
0
0
=⇒ B =
0
0
1
-1











a1
a2
a3
a4
a5
a6

1 −1
0
0
0
0
1

0
1 −1
0 −1
1
0 −1
0
0

0
0
0
0
0
1
0
0 −1
0
1
0 −1











Figura 16: Matriz de incidˆencia do grafo direcionado da ﬁgura 13.

Para grafos ponderados, devemos adotar o mesmo procedimento no que diz respeito `a

escolha de sinais para representar os arcos e seus pesos.

2.1.3 Lista de Adjacˆencia

H´a muitas representa¸c˜oes de grafos atrav´es de listas. A mais comum ´e a lista de
adjacˆencia. De acordo com [26], a lista ´e uma representa¸c˜ao que favorece a visualiza¸c˜ao
de informa¸c˜oes dos grafos, basicamente por n˜ao possuir informa¸c˜oes de n˜ao adjacˆencia
(os zeros na matriz de adjacˆencia). Seja G = (V, A) um grafo, a lista de adjacˆencias L
de G ´e um conjunto de n listas L(v), uma para cada v ∈ V , e que cont´em os v´ertices w
adjacentes a v em G. A ﬁgura 17 traz um exemplo de uma lista de adjacˆencias do grafo
n˜ao direcionado da ﬁgura 12.

Para grafos direcionados, a lista de adjacˆencias ´e um conjunto de n listas L(v), uma
para cada v ∈ V , e que cont´em os v´ertices w divergentes de v em G. Se o grafo for
ponderado, a informa¸c˜ao do peso da aresta que liga v a w deve ser armazenada em uma
outra lista.

Na pr´oxima se¸c˜ao apresentamos o Problema do Caminho Mais Curto ou Caminho

M´ınimo, um dos problemas mais estudados na Teoria dos Grafos.

9

Figura 17: Lista de adjacˆencia do grafo n˜ao direcionado da ﬁgura 12.

3 O Problema do Caminho Mais Curto ou Caminho

M´ınimo

O Problema do Caminho M´ınimo ou Caminho mais Curto ´e um dos mais importantes
problemas que envolvem grafos, por ter muitas aplica¸c˜oes pr´aticas. Uma das aplica¸c˜oes
´e a determina¸c˜ao, por parte de aparelhos popularmente chamados de GPS, da melhor
rota ou rota mais r´apida entre uma localiza¸c˜ao atual e um destino especiﬁcado. O GPS
trabalha com um grafo direcionado ponderado, no qual o peso das arestas representa a
distˆancia entre dois pontos, o tempo de viagem ou o custo para cumprir um determinado
percurso. A ﬁgura 18 (obtida em [1]) mostra a melhor rota, calculada pelo GPS, entre as
cidades mineiras de Ouro Branco e Par´a de Minas.

Em um grafo n˜ao ponderado, o caminho m´ınimo entre os v´ertices v e w ´e o caminho
que re´une o menor n´umero de arestas utilizadas no percurso entre os referidos v´ertices.
Em um grafo ponderado, o caminho m´ınimo entre os v´ertices v e w ´e o caminho cuja soma
dos pesos das arestas tem o menor valor poss´ıvel dentre todos os caminhos existentes entre
v e w. O termo custo tamb´em pode ser utilizado quando nos referimos ao peso de uma
aresta. Neste trabalho, focaremos no estudo do caminho m´ınimo em grafos ponderados.
A formula¸c˜ao matem´atica do problema do caminho mais curto em um grafo G = (V, A)

´e descrita em [19] assim:

Minimizar z =

(cid:88)

cijxij

(i,j)∈A

sujeito a

10

Figura 18: Uma das aplica¸c˜oes do Problema do Caminho M´ınimo, a determina¸c˜ao da
melhor rota em um GPS.

(cid:88)

xij −

(cid:88)

xki =

(i,j)∈A

(k,i)∈A






+1 se i = v
0
−1 se i = w

se i (cid:54)= v e i (cid:54)= w






xij ∈ {0, 1},

(i, j) ∈ A,

onde os v´ertices v e w representam os v´ertices de in´ıcio e t´ermino do caminho; cij repre-
senta o custo (ou distˆancia) associado `a aresta (i, j) e xij assume o valor 1 se a aresta
(i, j) ´e inclu´ıda no caminho mais curto e 0, caso contr´ario.

3.1 Algoritmos para resolu¸c˜ao do Problema do Caminho M´ınimo

Algoritmos s˜ao rotinas ou passos a serem seguidos numa certa ordem com a ﬁnalidade
de resolver um problema. A partir do conhecimento acumulado ao longo dos anos, devido
ao trabalho de grandes matem´aticos, hoje fazemos uso de algoritmos que tornam simples
e f´acil a resolu¸c˜ao de alguns problemas. Estes, nos ´ultimos tempos, assumiram um papel
importante na Ciˆencia da Computa¸c˜ao, por serem respons´aveis pela execu¸c˜ao de tarefas
em um computador.

Abordaremos, a seguir, dois algoritmos que resolvem o Problema do Caminho Mais

Curto: o algoritmo de Dijkstra e o algoritmo de Floyd-Warshall.

3.1.1 Algoritmo de Dijkstra

Em 1959, o holandˆes Edsger Wybe Dijkstra (1930-2002) apresentou um algoritmo que
soluciona o Problema do Caminho M´ınimo de uma ´unica origem num grafo ponderado
direcionado ou n˜ao direcionado com arestas de peso n˜ao negativo. A execu¸c˜ao do algoritmo
consiste basicamente na ideia de que, para chegar do v´ertice v ao v´ertice w constru´ımos

11

um conjunto que cont´em inicialmente apenas v e, durante a execu¸c˜ao, adicionamos a ele
os v´ertices cujas menores distˆancias de v v˜ao sendo determinadas. Para todo v´ertice fora
deste conjunto guardamos uma distˆancia de v e avaliamos se esta distˆancia foi reduzida
durante a execu¸c˜ao. No caso de redu¸c˜ao desta distˆancia, anotamos o v´ertice antecessor
no caminho e inclu´ımos o v´ertice analisado no conjunto. Ao ﬁnal da execu¸c˜ao, obtemos o
custo ou distˆancia total do caminho mais curto de v a w e os v´ertices inclu´ıdos na rota.
O algoritmo faz uma visita a todos os v´ertices do grafo, iniciando no v´ertice ﬁxo dado e
encontrando sucessivamente o v´ertice mais pr´oximo, o segundo mais pr´oximo, o terceiro
mais pr´oximo e assim por diante, um por vez, at´e que todos os v´ertices do grafo tenham
sido visitados.

Escolhido um v´ertice como raiz da busca, este algoritmo calcula o custo m´ınimo deste
v´ertice para todos os demais v´ertices do grafo. Este algoritmo parte de uma estimativa
para o custo m´ınimo e vai sucessivamente ajustando esta estimativa, mantendo o com-
primento do menor caminho conhecido at´e o momento para cada v´ertice. Ele considera
que um v´ertice estar´a fechado quando j´a tiver sido obtido um caminho de custo m´ınimo
do v´ertice tomado com raiz da busca at´e ele. Caso contr´ario, ele ´e dito estar aberto ou
na ﬁla. Dessa forma, o algoritmo mant´em dois conjuntos de v´ertices: S que ´e o conjunto
dos v´ertices para os quais j´a determinamos o caminho mais curto (v´ertices fechados) e
Q = V − S o conjunto dos v´ertices que ainda est˜ao na ﬁla ou abertos.

Os passos do algoritmo ser˜ao apresentados a seguir. Seja G(V, A) um grafo e v, k e i

v´ertices de G:

1. Atribua zero `a estimativa de custo m´ınimo do v´ertice inicial v e inﬁnito `as demais

estimativas;

2. Atribua um valor qualquer aos antecessores (no caso de grafo direcionado) ou vizi-

nhos (grafo n˜ao direcionado);

3. Enquanto houver v´ertice aberto:

(a) Seja k um v´ertice ainda aberto cuja estimativa seja a menor dentre todos os

v´ertices abertos;

(b) Feche k;

(c) Para todo v´ertice i ainda aberto que seja sucessor ou vizinho de k fa¸ca:

i. Some a estimativa do v´ertice k com o custo da aresta (k, i);
ii. Caso esta soma seja melhor que a estimativa anterior para o v´ertice i,

substitua-a e anote k como precedente de i.

Cada v´ertice i do grafo ´e rotulado com um par de informa¸c˜oes: uma ´e o v´ertice anterior
ao v´ertice i no caminho entre a origem e o v´ertice i, segundo a distˆancia calculada; a outra
informa¸c˜ao ´e a distˆancia calculada pelo algoritmo entre o v´ertice de origem e o v´ertice i.
No ´ın´ıcio, o algoritmo rotula o v´ertice inicial com as informa¸c˜oes: v´ertice inicial e o valor
zero, que ´e a distˆancia do v´ertice inicial a ele mesmo. Os demais v´ertices s˜ao rotulados
com o valor zero para representar o v´ertice anterior no caminho e inﬁnito, representando
que a distˆancia entre eles e o v´ertice inicial n˜ao foi calculada ou n˜ao existe (ﬁgura 20).

12

Em cada itera¸c˜ao, o algoritmo escolhe e remove um v´ertice k do conjunto Q = V − S.
O v´ertice k escolhido ´e aquele que tiver o menor valor da distˆancia em rela¸c˜ao ao v´ertice
inicial, de acordo com o r´otulo. O v´ertice ´e inclu´ıdo no conjunto S e todos os seus vizinhos
(grafos n˜ao direcionados) ou sucessores (grafos direcionados) que n˜ao est˜ao no conjunto
Q s˜ao examinados. Para cada v´ertice i de Q, veriﬁca-se se a distˆancia da origem at´e ele
´e maior que a distˆancia da origem at´e k (que chamaremos de dk) mais o valor do peso
da aresta (k, i) (que chamaremos de wki). Em caso positivo, o caminho da origem at´e o
v´ertice i passando pelo v´ertice k ´e menor que o caminho anteriormente encontrado entre
a origem e i. Neste caso, os valores do r´otulo s˜ao atualizados com:

. k, indicando que o v´ertice anterior a i no caminho entre a origem e i ´e o v´ertice k.

. dk + wki que representa a distˆancia de i ao v´ertice inicial.

Vamos usar o algoritmo de Dijkstra para encontrar o caminho mais curto com origem

no v´ertice v e destino ﬁnal o v´ertice w do grafo G da ﬁgura 19.

Figura 19: Grafo G

A sequˆencia de ﬁguras 20 a 26 mostram a evolu¸c˜ao do algoritmo de Dijkstra no grafo
da ﬁgura 19, com os custos representados nas arestas, percorrendo todos os v´ertices na
busca do caminho mais curto entre os v´ertices e um ponto ﬁxo (v´ertice inicial v). O
algoritmo inicia a busca a partir do v´ertice inicial v (ﬁgura 20).

A pr´oxima etapa ´e a busca do caminho mais curto desde v para se chegar aos v´ertices

p, q, e r (ﬁgura 21).

Os v´ertices p, q e r s˜ao inclu´ıdos no conjunto S e a busca continua, agora com os

v´ertices s, t e u (ﬁgura 22).

Neste caso, o caminho mais curto para se chegar a s e a u ´e vindo de r (ﬁgura 23).
Os v´ertices s, t e u s˜ao inclu´ıdos no conjunto S, pois j´a encontramos o seu caminho
m´ınimo desde o v´ertice inicial v. A pr´oxima busca ocorre com o v´ertice w, o ´ultimo
v´ertice a ser analisado, que ´e v´ertice ﬁnal do caminho (ﬁguras 24, 25 e 26). O algoritmo
deﬁne que o caminho mais curto para se chegar a w ´e vindo de s (ﬁgura 26). Portanto,
o caminho mais curto, partindo de v e chegando a w ´e (v, r, s, w) com peso, distˆancia
ou custo total igual a 123. Assim, ao ﬁnal da execu¸c˜ao do algoritmo, todos os v´ertices

13

Figura 20: Rotula¸c˜ao inicial do Algoritmo de Dijkstra.

Figura 21: Busca pelo caminho mais curto para chegar a p, q e r.

Figura 22: Busca pelo caminho mais curto para chegar a s, t e u.

14

Figura 23: O caminho mais curto para chegar a s e a u ´e vindo de r.

estar˜ao agrupados no conjunto S dos v´ertices fechados (que j´a tem seu caminho m´ınimo
encontrado), e o conjunto Q dos v´ertices abertos estar´a vazio, pois n˜ao haver´a mais buscas
a serem realizadas.

Figura 24: Busca pelo caminho mais curto para chegar a w.

Figura 25: Busca pelo caminho mais curto para chegar a w.

15

Figura 26: O caminho mais curto para chegar a w ´e vindo de s.

3.1.2

Implementa¸c˜ao do Algoritmo de Dijkistra numa planilha eletrˆonica

Em computadores, o algoritmo de Dijkstra pode ser implementado utilizando o recurso
solver em planilhas eletrˆonicas. O modelo que ser´a exibido a seguir utilizou o suplemento
Solver do software Microsoft Oﬃce Excel vers˜ao 2007 para resolver o problema do cami-
nho m´ınimo do grafo da ﬁgura 19. Inicialmente ´e necess´ario construir duas tabelas. A
primeira com informa¸c˜oes sobre o grafo, como arestas e seus respectivos pesos. No caso
de grafos n˜ao direcionados com cij = cji, a tabela das distˆancias dever´a conter essas duas
informa¸c˜oes. A segunda tabela cont´em restri¸c˜oes do problema, conforme a ﬁgura 27.

A coluna Caminho da tabela da esquerda deve inicialmente ser preenchida com valor
zero para todas as c´elulas amarelas, uma vez que n˜ao conhecemos as arestas que comp˜oem
o caminho m´ınimo. Na tabela da direta, a 3a coluna deve ser preenchida com os valores
1 para o v´ertice inicial e −1 para o v´ertice ﬁnal do caminho.

Faz-se necess´ario inserirmos algumas f´ormulas na planilha antes de utilizarmos o solver

para resolver o problema. Colocamos o cursor na c´elula E35 e inserimos a f´ormula

=SOMARPRODUTO(D5:D34;E5:E34)

que soma os produtos dos valores do peso de cada aresta por 1, se a aresta faz parte do
caminho, ou por 0 caso contr´ario.

Na tabela das restri¸c˜oes, o cursor deve ser colocado na c´elula H5 e deve-se inserir a

f´ormula

=SOMASE(B5:B34;G5;E5:E35)−SOMASE(C5:C34;G5;E5:E34).

Nas c´elulas H6 at´e H12, inserimos a mesma f´ormula substituindo o n´umero da linha da
coluna G pelo n´umero da linha que estamos inserindo a f´ormula. Por exemplo, a f´ormula
da c´elula H12 ser´a

=SOMASE(B5:B34;G12;E5:E35)−SOMASE(C5:C34;G12;E5:E34).

16

Figura 27: Tabelas do Excel com informa¸c˜oes do grafo da ﬁgura 19.

A planilha j´a est´a preparada para a utiliza¸c˜ao do solver. Por´em ´e necess´ario ativ´a-lo
nas op¸c˜oes do software. Ap´os ativ´a-lo podemos utiliz´a-lo clicando na aba Dados e depois
procurando por Solver. A sequˆencia de ﬁguras 28 a 34 mostram a utiliza¸c˜ao do solver na
resolu¸c˜ao do Problema do Caminho M´ınimo da ﬁgura 19.

Figura 28: Parˆametros do solver: c´elula de destino ´e a c´elula que cont´em a fun¸c˜ao objetivo,
o dado que queremos minimizar.

17

Figura 29: Parˆametros do solver: c´elulas vari´aveis s˜ao aquelas cujos valores ser˜ao alterados
pelo solver, at´e que a solu¸c˜ao do problema seja encontrada.

Figura 30: Parˆametros do solver: inclus˜ao de restri¸c˜oes que garantem o ﬂuxo do caminho
no grafo.

Figura 31: Parˆametros do solver: inclus˜ao de restri¸c˜ao das condi¸c˜oes bin´arias das vari´aveis.

Figura 32: Op¸c˜oes do solver: modelo de programa¸c˜ao linear e condi¸c˜oes de n˜ao-
negatividade.

18

Figura 33: Parˆametros do solver. Clicando em Resolver, o solver mostrar´a a soluc˜ao do
problema.

Figura 34: Solu¸c˜ao no Excel do Problema do Caminho M´ınimo da ﬁgura 19.

3.1.3 Algoritmo de Floyd-Warshall

Baseado num algoritmo apresentado por Stephen Warshall para o c´alculo de fechos
transitivos em um grafo, o cientista norte-americano Robert W Floyd apresentou (vide

19

[16]), em 1962, um algoritmo que resolve o Problema do Caminho mais Curto entre pares
de v´ertices de um grafo ponderado G = (V, A). Importante salientar que este algoritmo
encontra apenas os valores de tais caminhos, e n˜ao a sequˆencia de arestas a ser percorrida.
Em rela¸c˜ao ao algoritmo de Dijkstra, apresenta as vantagens de admitir arestas de peso
negativo e a entrada e sa´ıda do algoritmo ´e uma matriz.

A entrada do algoritmo ´e uma matriz de adjacˆencia R = [rij] constru´ıda assim:

R(i, j) =






se i = j
0
wij
se i (cid:54)= j e (i, j) ∈ A
∞ se i (cid:54)= j e (i, j) /∈ A

(1)

onde wij ´e o peso, custo ou distˆancia associada `a aresta (i, j). O algoritmo de Floyd-
Warshall compara os caminhos entre os v´ertices i e j passando por k v´ertices inter-
medi´arios, k = 1, ..., n. No algoritmo s˜ao feitas n itera¸c˜oes que corresponde ao n´umero
de v´ertices do grafo. A cada itera¸c˜ao corresponde uma matriz n × n cujos valores s˜ao
modiﬁcados utilizando a f´ormula de recorrˆencia:

wk

ij = min{wk−1

ij

, (wk−1

ik + wk−1

kj )},

onde wk
itera¸c˜ao.

ij ´e o peso do caminho mais curto entre os v´ertices i e j na k−´esima matriz de

O grafo da ﬁgura 35 ser´a utilizado como exemplo para a execu¸c˜ao do algoritmo de

Floyd-Warshall. A matriz R0 inicial ´e mostrada ao lado do grafo.

=⇒ R0 =









8 ∞ ∞
4
0
∞ 0
5
7
2
∞ ∞ 0 ∞ 2
∞ ∞ ∞ 0 ∞
0
∞ ∞ ∞ 1









Figura 35: Grafo ponderado para execu¸c˜ao do algoritmo de Floyd-Warshall.

1a itera¸c˜ao: o v´ertice 1 ´e considerado intermedi´ario no caminho entre os v´ertices i e j.
k = 1,

i = 1, 2, 3, 4, 5: sem altera¸c˜oes, pois w0

i1 = ∞. A matriz R1 = R0.

2a itera¸c˜ao: o v´ertice 2 ´e considerado intermedi´ario no caminho entre os v´ertices i e j.
k = 2,
k = 2,
k = 2,
k = 2,
k = 2,

i = 1,
13, (w1
i = 1,
14, (w1
i = 1,
15, (w1
i = 1,
i = 2, 3, 4, 5: sem altera¸c˜oes, pois w1

j = 1, 2: sem altera¸c˜oes, pois w1
j = 3: w2
13 = min{w1
j = 4: w2
14 = min{w1
15 = min{w1
j = 5: w2

23)} = 6 (alterar).
24)} = 11 (alterar).
25)} = 9 (alterar).

12 + w1
12 + w1
12 + w1
i2 = ∞.

2j = ∞.

20

Assim

R2 =









11
7

9
6
0
4
∞ 0
5
2
∞ ∞ 0 ∞ 2
∞ ∞ ∞ 0 ∞
0
∞ ∞ ∞ 1









3a itera¸c˜ao: o v´ertice 3 ´e considerado intermedi´ario no caminho entre os v´ertices i e j.
k = 3,
k = 3,
k = 3,
k = 3,
k = 3,

i = 1,
i = 1,
i = 2,
i = 2,
i = 3, 4, 5: sem altera¸c˜oes, pois w2

j = 1, 2, 3, 4: sem altera¸c˜oes, pois w2
j = 5: w3
j = 1, 2, 3, 4: sem altera¸c˜oes, pois w2
j = 5: w3

35)} = 4 (alterar).

35)} = 8 (alterar).

15 = min{w2

25 = min{w2

3j = ∞.

3j = ∞.

13 + w2

15, (w2

25, (w2

23 + w2
i3 = ∞.

Assim:

R3 =









11
7

8
6
4
0
∞ 0
4
2
∞ ∞ 0 ∞ 2
∞ ∞ ∞ 0 ∞
0
∞ ∞ ∞ 1









4a itera¸c˜ao: o v´ertice 4 ´e considerado intermedi´ario no caminho entre os v´ertices i e j.
k = 4: sem altera¸c˜oes, pois w3
4j = ∞. A matriz R4 = R3.

5a itera¸c˜ao: o v´ertice 5 ´e considerado intermedi´ario no caminho entre os v´ertices i e j.
k = 5,
k = 5,
k = 5,
k = 5,
k = 5,
k = 5,
k = 5,

i = 1,
i = 1,
i = 2,
i = 2,
i = 3,
34 = min{w4
i = 3,
i = 4, 5: sem altera¸c˜oes, pois w4

j = 1, 2, 3, 5: sem altera¸c˜oes, pois w4
j = 4: w5
j = 1, 2, 3, 5: sem altera¸c˜oes, pois w4
j = 4: w5
j = 1, 2, 3, 5: sem altera¸c˜oes, pois w4
j = 4: w5

54)} = 9 (alterar).

54)} = 5 (alterar).

54)} = 3 (alterar).

14 = min{w4

24 = min{w4

5j = ∞.

5j = ∞.

5j = ∞.

15 + w4

25 + w4

35 + w4

14, (w4

24, (w4

34, (w4
i5 = ∞.

Assim, a matriz R5 abaixo mostra o resultado ﬁnal do algoritmo.

R5 =









9
5
3

8
6
0
4
4
2
∞ 0
∞ ∞ 0
2
∞ ∞ ∞ 0 ∞
0
∞ ∞ ∞ 1









3.1.4

Implementa¸c˜ao do Algoritmo Floyd-Warshall numa planilha eletrˆonica

O Algoritmo Floyd-Warshall tamb´em pode ser implementado numa planilha eletrˆonica.
Usaremos o exemplo apresentado na subse¸c˜ao anterior para mostrar a implementa¸c˜ao.
Mais uma vez, utilizaremos a planilha eletrˆonica do software Microsoft Oﬃce Excel vers˜ao

21

2007. Inicialmente construiremos 6 tabelas, sendo que a primeira delas deve representar
a matriz de adjacˆencia, conforme mostra a ﬁgura 36. Os valores ∞ ser˜ao representados,
na planilha, por um grande inteiro positivo. Nessa planilha foi usado o valor 9999.

Figura 36: Tabelas para implementa¸c˜ao do algoritmo de Floyd-Warshall numa planilha
eletrˆonica.

As outras tabelas representar˜ao as matrizes de itera¸c˜ao da execu¸c˜ao do algoritmo. Em

cada uma das c´elulas dessas tabelas vamos inserir a seguinte f´ormula padr˜ao:
=M´INIMO(c´elula que cont´em wk−1

;c´elula que cont´em wk−1

ik + c´elula que cont´em wk−1

kj ).

ij

Na c´elula L6 da tabela da ﬁgura 36, por exemplo, foi inserida a seguinte f´ormula:

=M´INIMO(E6;C6+E5).

Ao ﬁnal, a planilha apresentou a tabela-solu¸c˜ao da ﬁgura 37.
O Problema do Caminho Mais Curto desde o v´ertice v at´e o v´ertice w no grafo da
ﬁgura 19 tamb´em foi solucionado executando o algoritmo de Floyd-Warshall numa pla-
nilha eletrˆonica. A ﬁgura 38 mostra a 8a itera¸c˜ao da execu¸c˜ao, cuja matriz representa
o resultado ﬁnal do algoritmo. Como era esperado, os dois algoritmos apresentaram o
mesmo resultado.

Na pr´oxima se¸c˜ao, apresentamos um problema relacionado ao Problema do Caminho
mais Curto, o Problema do Caixeiro Viajante, que consiste em determinar o caminho
mais curto, passando exatamente uma vez por cada v´ertice e retornando ao v´ertice de
partida.

22

Figura 37: Tabela com a solu¸c˜ao do Caminho Mais Curto no grafo da ﬁgura 35, utilizando
o algoritmo de Floyd-Warshall.

Figura 38: Solu¸c˜ao do Problema do Caminho mais Curto de v a w no grafo da ﬁgura 19,
utilizando o algoritmo de Floyd-Warshall.

23

4 O Problema do Caixeiro Viajante

O Problema do Caixeiro Viajante ou simplesmente PCV ´e um dos mais tradicionais
e conhecidos problemas de Otimiza¸c˜ao Combinat´oria e consiste em determinar um ciclo
hamiltoniano de menor custo num grafo ponderado G = (V, A), onde V representa o
conjunto de v´ertices e A o conjunto de arestas. ´E comum tratarmos os v´ertices como
cidades, dep´ositos, pontos de visita, etc.. Como j´a foi mencionado neste trabalho, o
ciclo hamiltoniano visita cada v´ertice do grafo uma ´unica vez, iniciando e terminando
o percurso num mesmo v´ertice, chamado de v´ertice inicial. Algumas variantes do PCV
relaxam algumas dessas caracter´ısticas.

A ideia de ciclo hamiltoniano de menor custo surge pela primeira vez na d´ecada de
1920, atrav´es do matem´atico austr´ıaco Karl Menger. Durante a realiza¸c˜ao de um se-
min´ario na Princeton University em New Jersey (EUA), Menger conheceu o matem´atico
norte-americano Hassler Whitney, que em semin´arios posteriores realizados entre 1931 e
1932, fez referˆencia ao problema denominando-o de Caixeiro Viajante.

A importˆancia e grande interesse pelo Problema do Caixeiro Viajante pode ser jus-
tiﬁcada pelo consider´avel n´umero de aplica¸c˜oes pr´aticas, tanto da vers˜ao cl´assica quanto
das variantes, e pela grande diﬁculdade de encontrar uma solu¸c˜ao exata. Em [19] s˜ao
destacadas algumas das aplica¸c˜oes pr´aticas do PCV. Dentre elas, podemos citar: solu¸c˜ao
de problemas de roteamento de ve´ıculos, otimiza¸c˜ao de perfura¸c˜oes de furos em placas de
circuitos impressos, na solu¸c˜ao de problemas de sequenciamento de tarefas, roteamento
de entrega postal e a solu¸c˜ao de problemas de sequenciamento de tarefas.

Matematicamente, o PCV ´e descrito como um grafo G = (V, A), onde V = {1, ..., n} ´e
o conjunto dos v´ertices ou n´os do grafo e A = {(i, j) | i, j ∈ V } o conjunto de arestas ou
arcos ligando esses v´ertices. Associado a cada arco existe um custo cij, tal que cii = ∞ para
evitar la¸cos ou loop. O problema consiste na determina¸c˜ao de um caminho hamiltoniano
de custo m´ınimo sobre G. ´E comum associarmos v´ertices a cidades e custo `a distˆancia
entre as cidades ou tempo de deslocamento de uma cidade a outra.

Na Otimiza¸c˜ao Combinat´oria, o PCV pertence `a classe dos problemas NP-dif´ıceis
([17]), o que signiﬁca dizer que, apesar do uso de computadores superpotentes, n˜ao se
pode determinar a solu¸c˜ao exata para problemas de grande porte (com n´umero grande
de v´ertices) em um tempo computacional vi´avel. Atualmente a literatura apresenta algo-
ritmos que encontram solu¸c˜oes para o problema pr´oximas da otimalidade em um tempo
computacional razo´avel.

4.1 Variantes do PCV

Dado a sua aplica¸c˜ao, semelhan¸ca com diversos problemas do cotidiano e liga¸c˜ao com
outros problemas de otimiza¸c˜ao combinat´oria, diversas variantes do PCV foram apresen-
tadas na literatura. As varia¸c˜oes decorrem, normalmente, pela presen¸ca de um segundo
objetivo associado `a sequˆencia de visitas e/ou acrescentando alguma restri¸c˜ao espec´ıﬁca.
O PCV apresenta um n´umero signiﬁcativo de variantes, entre as quais podemos citar:

• PCV Sim´etrico: o PCV ´e denominado sim´etrico quando a matriz de custos ´e
sim´etrica, ou seja, o custo de deslocamento de qualquer v´ertice i para qualquer

24

v´ertice j tem o mesmo valor de deslocamento de j para i, ou seja cij = cji para todo
i, j ∈ V .

• PCV Euclidiano: seja c o custo de deslocamento entre dois v´ertices quaisquer do
grafo G = (V, A), se cik ≤ cij + cjk, ∀i, j, k ∈ V o PCV satisfaz `a chamada desigual-
dade triangular. Um PCV ´e denominado euclidiano (PCVE) quando sua matriz ´e
sim´etrica e satisfaz `a desigualdade triangular.

• PCV Sim´etrico com Agrupamento: ´e um caso especial de PCV Sim´etrico, em que
existem agrupamentos que possuem restri¸c˜oes que os obrigam a estar em uma de-
terminada sequˆencia de atendimento. Esses conjuntos de n´os s˜ao denominados de
cluster ou grupamentos, conforme [19].

• PCV com Sequˆencias de Clientes: o PCV com Sequˆencias de Clientes pode ser
considerado um caso especial de PCV Generalizado onde os n´os s˜ao divididos em
dois grupamentos ou conjuntos disjuntos: o conjuntos dos n´os denominados L (n´os
linehauls) e o conjuntos dos n´os B (n´os backhauls). Uma condi¸c˜ao imposta pelo
problema ´e a sequˆencia de visita¸c˜ao aos conjuntos L e B. Uma vers˜ao do problema
determina que os n´os de L sejam visitados inicialmente e, posteriormente, os n´os
de B. Uma aplica¸c˜ao pr´atica dessa estrat´egia no ramo de transporte de cargas ´e
a op¸c˜ao por visitar primeiramente as cidades onde ocorrer´a o descarregamento dos
ve´ıculos e, posteriormente, realizar o carregamento em outros pontos, em dire¸c˜ao ao
dep´osito inicial.

• PCV com Bˆonus: o PCV com bˆonus associa um bˆonus ou prˆemio a cada n´o do grafo
e procura uma rota hamiltoniana de menor comprimento atendendo a restri¸c˜ao de
recolher um valor total de bˆonus igual ou superior a um valor pr´e-estabelecido.
Este trabalho apresentar´a, nas pr´oximas p´aginas, um estudo minucioso sobre essa
variante do PCV.

• PCV com Janelas de Tempo: essa variante do PCV consiste em deﬁnir rotas de custo
m´ınimo atendendo restri¸c˜oes de tempo quanto `a chegada, permanˆencia e sa´ıda dos
n´os do ciclo hamiltoniano. Uma das restri¸c˜oes dessa variante pode ser a exigˆencia de
que o local de coleta e/ou entrega dever´a ser visitado em uma janela de atendimento
estipulada, for¸cando o caixeiro a estar em um determinado v´ertice em um instante
de tempo dentro dessa janela. Al´em disso, um tempo de servi¸co est´a associado a
cada coleta e entrega. O tempo de servi¸co indica quanto tempo levar´a para a coleta
ou a entrega ser realizada.

• PCV Generalizado: ´e semelhante ao PCV Sim´etrico com Agrupamento. No PCV
Generalizado, o ciclo hamiltoniano visita, exatamente uma vez, cada grupamento
de n´os, passando por todos eles. Ou seja, deseja-se encontrar a rota parcial de
menor custo passando por, pelo menos, um n´o em cada agrupamento. Cada n´o
deve pertencer a um, e somente um, grupamento. A ﬁgura 39 apresenta um modelo
de uma das muitas alternativas de percorrer um circuito com quatro agrupamentos.
Uma subclasse dessa variante ´e denominada equality e exige que apenas um v´ertice

25

em cada cluster seja visitado (ﬁgura 40). Quando todos os n´os dos grupamentos
s˜ao visitados o problema recai no PCV cl´assico (ﬁgura 41).

Figura 39: O PCV Generalizado.

Figura 40: O PCV Generalizado na
vers˜ao equality.

Figura 41: O PCV cl´assico com os n´os divididos em grupamentos.

• PCV M´ultiplo: o PCV M´ultiplo ´e uma variante do PCV onde ´e necess´ario usar mais
de um caixeiro viajante. O grafo do problema ´e dividido em conjuntos disjuntos de
n´os, cada conjunto percorrido por um caixeiro e o objetivo ´e minimizar os custos
total da rota. Os caixeiros podem ser diferenciados, com a determina¸c˜ao de quais
n´os percorrer˜ao e qual a distˆancia (ou custo) total a ser percorrida por cada um
deles.

• PCV Estoc´astico: no PCV estoc´astico, a existˆencia ou valores relativos a demandas,
custos das arestas, bˆonus associados a v´ertices, janelas de tempo s˜ao elementos
aos quais podemos associar distribui¸c˜oes de probabilidades. Algumas subclasses

26

dessa variante tratam os clientes como estoc´asticos e as rotas deﬁnidas excluem tais
clientes baseados em c´alculos probabil´ısticos.

• PCV com Coleta e Entrega: Considerando que o ve´ıculo do caixeiro viajante possua
uma determinada capacidade e que o caixeiro deva entregar e recolher produtos de
seus clientes e considerando ainda que os produtos coletados possam ser entregues
a outros clientes na rota, o PCV com Coleta e Entrega consiste em programar um
trajeto que, atendendo a todos os clientes de demanda e oferta dentro da capacidade
do ve´ıculo minimize a distˆancia percorrida.([19])

• PCV Seletivo Euclidiano: o PCV Euclidiano consiste em minimizar o custo do ciclo

hamiltoniano ligando um conjunto de pontos no plano euclidiano.

• PCV Alugador : Nessa variante do PCV, o caixeiro aluga ve´ıculos para realizar
seu percurso e os custos de percorrer cada aresta dependem do ve´ıculo utilizado.
O problema ´e de minimiza¸c˜ao do custo da viagem, a partir da deﬁni¸c˜ao de quais
ve´ıculos ser˜ao alugados, das cidades da rota em que cada um desses ve´ıculos ser´a
recebido e devolvido `as locadoras e da rota percorrida por cada ve´ıculo. O percurso
do caixeiro ´e o ciclo hamiltoniano, ou seja, inicia e termina na mesma cidade, e
todas as cidades do grafo s˜ao visitadas exatamente uma vez.

Em [18] e [19] s˜ao descritas e caracterizadas outras variantes do PCV.

4.2 M´etodos de Resolu¸c˜ao do PCV

Os m´etodos desenvolvidos para resolver o PCV podem ser divididos em duas catego-

rias: os m´etodos exatos e os m´etodos heur´ısticos.

• os m´etodos exatos s˜ao aqueles que tˆem como caracter´ıstica a capacidade de deter-
minar sempre uma solu¸c˜ao ´otima para o problema. Para o PCV, um algoritmo
exato deve encontrar o ciclo hamiltoniano de menor custo poss´ıvel para um dado
problema.

• os m´etodos aproximados ou heur´ısticos: as heur´ısticas ou algoritmos heur´ısticos fo-
ram desenvolvidos com a ﬁnalidade de se resolver problemas de elevado n´ıvel de
complexidade em tempo computacional razo´avel. Por ser um problema de natureza
combinat´oria, uma op¸c˜ao para solucionar o PCV seria analisar todas as combina¸c˜oes
de rotas poss´ıveis para conhecer a melhor. Se o problema possui um n´umero redu-
zido de cidades, esta ´e a maneira correta de se buscar a melhor solu¸c˜ao, mas os
problemas com muitas cidades possuem um n´umero elevado de combina¸c˜oes, o que
torna invi´avel a an´alise de todas as combina¸c˜oes, uma vez que o tempo compu-
tacional exigido ﬁca impratic´avel. As heur´ısticas encontram solu¸c˜oes pr´oximas da
otimalidade em um tempo computacional razo´avel, sem, no entanto, conseguir de-
ﬁnir se esta ´e a solu¸c˜ao ´otima, nem o n´ıvel de proximidade que ela est´a da solu¸c˜ao
´otima.

27

O PCV ´e um problema NP-dif´ıcil, n˜ao sendo conhecidos algoritmos de resolu¸c˜ao em
tempo polinomial (vide [12]). Para o PCV, no caso assim´etrico, o n´umero total de rotas
poss´ıveis ´e (n − 1)!, onde n ´e o n´umero de v´ertices. Sendo assim, `a medida que n cresce
o tempo de resolu¸c˜ao cresce exponencialmente, tornando sua resolu¸c˜ao exata invi´avel,
seja avaliando recursos computacionais ou tempo de resolu¸c˜ao. O mesmo ocorre no caso
sim´etrico, que tem (n−1)!/2 rotas poss´ıveis, pois neste caso o custo para percorrer a aresta
aij ´e igual ao custo para percorrer a aresta aji. Esta complexidade justiﬁca o estudo e
desenvolvimento de m´etodos heur´ısticos para solucionar o problema de forma vi´avel, que
apesar de n˜ao garantir a resolu¸c˜ao do problema de forma exata, alcan¸cam solu¸c˜oes ﬁnais
de boa qualidade de forma r´apida.

Para efeitos de compara¸c˜ao, imaginemos um computador arbitr´ario superpotente que
gere e avalie 1 bilh˜ao de rotas por segundo (poucos computadores, atualmente, tˆem essa
capacidade). Neste caso, ´e poss´ıvel construir a tabela 1, que apresenta o n´umero de
v´ertices ou cidades (n), o n´umero de rotas poss´ıveis e o tempo aproximado gasto no
c´alculo pelo computador supracitado, considerando o problema PCV sim´etrico.

Tabela 1: Tempo aproximado de c´alculo do n´umero de rotas entre n cidades (PCV
sim´etrico) por um computador superpotente.

n
5
10
15
20
25

N´umero de rotas (n − 1)!/2
12
181 440
43 589 145 600
60 822 550 204 416 000
310 224 200 866 619 719 680 000

Tempo Aproximado de C´alculo
insigniﬁcante
0, 0002 segundos
43, 5 segundos
704 dias
9 837 145 anos

Pela tabela, percebe-se que a utiliza¸c˜ao de um algoritmo que resolva o problema na
exatid˜ao, gerando todas as possibilidades de rotas poss´ıveis, s´o ´e poss´ıvel em problemas
com n´umero reduzido de v´ertices. No entanto, h´a m´etodos ou recursos que reduzem o
tempo computacional gasto. Um desses m´etodos ´e o branch and bound e baseia-se na ideia
de uma enumera¸c˜ao inteligente das solu¸c˜oes candidatas a solu¸c˜ao ´otima de um problema,
efetuando sucessivas parti¸c˜oes do espa¸co das solu¸c˜oes e cortando a ´arvore de pesquisa
atrav´es da considera¸c˜ao de limites calculados ao longo da enumera¸c˜ao.

No caso do PCV, o m´etodo branch and bound realiza o corte ou poda de partes do
grafo que n˜ao interessam. Um exemplo de poda pode ser visualizado na ﬁgura 42, que
representa um grafo de gera¸c˜ao de rotas arbitr´ario para um problema com quatro cidades.
Os v´ertices representam as cidades, e as arestas as possibilidades de percurso, iniciando
e terminando no v´ertice ou cidade 1. O grafo em quest˜ao ´e completo, ou seja, ´e poss´ıvel
partir de uma cidade i para uma cidade j para todos i e j ∈ V e o problema ´e assim´etrico.

Vamos listar todas as rotas poss´ıveis sempre iniciando e terminando no v´ertice 1 e o

custo de cada uma delas :

• (1, 2, 3, 4, 1) com custo de 21.

• (1, 2, 4, 3, 1) com custo de 32.

28

Figura 42: Grafo de busca completo para um PCV de quatro cidades.

• (1, 3, 2, 4, 1) com custo de 48.

• (1, 3, 4, 2, 1) com custo de 40.

• (1, 4, 2, 3, 1) com custo de 33.

• (1, 4, 3, 2, 1) com custo de 20.

Neste exemplo, a rota ´otima ´e (1, 4, 3, 2, 1) com o custo total de 20 e foi obtida atrav´es
da poda de partes do grafo. A id´eia do m´etodo branch and bound ´e simples: ao encontrar
uma sub-rota cujo custo atual seja superior ao da melhor rota completa j´a descoberta, as
sub-rotas subsequentes s˜ao desconsideradas. ´E f´acil perceber que, se uma rota incompleta,
ou seja, faltando cidades para serem analisadas, j´a contempla um custo superior a melhor
rota atual, n˜ao ´e necess´ario prosseguir no percurso desta parte do grafo, pois n˜ao ´e poss´ıvel
que o custo da rota reduza seu valor. A aplica¸c˜ao desta poda no grafo da ﬁgura 42 geraria
um grafo menor, apresentado na ﬁgura 43, e de menor custo computacional em termos
de tempo.

O algoritmo inicia sua an´alise gerando a primeira rota (1, 2, 3, 4, 1) com custo total 21.
Esta rota ´e considerada a melhor rota at´e o momento e o custo dela ´e armazenado como
custo ´otimo parcial. Uma rota ´otima parcial representa a de menor custo encontrada at´e
o momento. Se o valor desse custo m´ınimo parcial n˜ao for melhorado at´e o ﬁnal, essa rota
torna-se a rota ´otima do sistema.

A segunda rota parte de 1, vai at´e 2, depois at´e 4 terminando em 3. No entanto, ao
chegar em 3, a rota analisada j´a possui o custo de 23 (5 + 13 + 5). Como este custo ´e

29

Figura 43: Exemplo de poda em um grafo de um PCV de quatro cidades.

maior que o custo ´otimo parcial, o valor do custo do ´ultimo passo n˜ao ´e calculado e o
algoritmo segue para o pr´oximo passo. A pr´oxima rota inicia em 1 e vai at´e 3. Novamente,
o custo deste pequeno trecho j´a ´e maior que o custo ´otimo parcial. Desta forma, todo o
subgrafo resultante das possibilidades de rotas a partir da sub-rota 1 − 3 s˜ao ignorados e o
algoritmo continua. A pen´ultima op¸c˜ao ´e gerada, formando uma rota partindo de 1 para
4, depois para 2 e ﬁnalmente chegando a 3, com um custo de 24. Esta sub-rota tamb´em
´e ﬁnalizada e a ´ultima rota poss´ıvel ´e analisada, formando a rota completa (1, 4, 3, 2, 1),
cujo custo tem valor inferior ao ´otimo parcial. A nova rota ´e armazenada e o custo ´otimo
parcial ´e atualizado. Como esta era a ´ultima rota do grafo a ser gerada, o algoritmo
ﬁnaliza, apresentando a solu¸c˜ao ´otima ﬁnal.

Na literatura h´a muitos modelos e algoritmos exatos desenvolvidos para a resolu¸c˜ao

do PCV, onde ´e poss´ıvel citar os trabalhos de [22], [4] e [9].

No entanto, apesar do avan¸co tecnol´ogico colocar `a disposi¸c˜ao das ciˆencias, computa-
dores cada vez mais poderosos, mesmo os melhores algoritmos exatos tem diﬁculdade em
encontrar as solu¸c˜oes ´otimas para problemas de alta complexidade em um tempo compu-
tacional razo´avel. Os m´etodos heur´ısticos fornecem boas solu¸c˜oes em tempos menores.

4.3 Formula¸c˜ao Matem´atica do PCV

Existem muitas formula¸c˜oes matem´aticas para o Problema do Caixeiro Viajante di-
fundidas na literatura. Neste trabalho, apresentaremos duas delas: a Formula¸c˜ao de
Dantzig-Fulkerson-Johnson (DFJ) e a Formula¸c˜ao de Formula¸c˜ao de Miller-Tucker-Zemlin
(MTZ).

30

4.3.1 Formula¸c˜ao de Dantzig-Fulkerson-Johnson (DFJ)

Em [12], Dantzig, Fulkerson e Johnson apresentam uma formula¸c˜ao do PCV como um

problema de programa¸c˜ao bin´aria sobre um grafo G = (V, A), como se segue:

Minimizar z =

n
(cid:88)

n
(cid:88)

cijxij

i=1

j=1
sujeito a

n
(cid:88)

i=1
n
(cid:88)

j=1
(cid:88)

xij = 1, ∀j ∈ V

xij = 1, ∀i ∈ V

xij ≤| S | −1, ∀S ⊂ V

i,j∈S
xij ∈ {0, 1}, ∀i, j ∈ V,

(2)

(3)

(4)

(5)

onde a cij representa o custo para percorrer a arco (i, j); a vari´avel bin´aria xij assume
valor igual a 1, se o arco (i, j) ∈ A for escolhido para integrar a solu¸c˜ao, e 0 em caso
contr´ario; S ´e um subgrafo de G, em que | S | representa o n´umero de v´ertices desse
subgrafo.

A restri¸c˜ao 2 for¸ca a chegada de exatamente um arco no v´ertice j e a restri¸c˜ao 3 for¸ca a
sa´ıda de exatamente um arco do v´ertice i. Mas essas duas ´ultimas restri¸c˜oes n˜ao impedem
a forma¸c˜ao de subcircuitos (ﬁgura 44). O conjunto de restri¸c˜oes 4 determina a elimina¸c˜ao
de subcircuitos. As equa¸c˜oes em | S | tornam os subcircuitos ilegais e determinam que
xii = 0 quando | S |= 1. Para cada subcircuito poss´ıvel ´e necess´aria uma restri¸c˜ao do
tipo 4. Por ﬁm, a restri¸c˜ao 5 garante as condi¸c˜oes bin´arias e de n˜ao negatividade das
vari´aveis.

Nessa formula¸c˜ao teremos n.(n − 1) vari´aveis inteiras bin´arias (´e impl´ıcito considerar

xii = 0), e uma quantidade de restri¸c˜oes na ordem de 2n.

Figura 44: Representa¸c˜ao de subcircuitos.

Essa formula¸c˜ao evidencia a natureza combinat´oria do PCV. Solucionar o PCV ´e

determinar uma certa permuta¸c˜ao legal de custo m´ınimo.

31

Para essa formula¸c˜ao, apresentamos um exemplo gen´erico do problema do caixeiro
viajante com cinco v´ertices ou cidades. O grafo que representa o problema pode ser
visualizado na ﬁgura 45 .

Figura 45: PCV com 5 n´os.

A fun¸c˜ao objetivo ser´a minimizar o custo das distˆancias, ou seja:

Minimizar z =

5
(cid:88)

5
(cid:88)

j=1

i=1

cijxij

ou melhor,

Minimizar z = c11x11 + c21x21 + c31x31 + c41x41 + c51x51 + c12x12 + c22x22 + c32x32 +
c42x42 + c52x52 + c13x13 + c23x23 + c33x33 + c43x43 + c53x53 + c14x14 +
c24x24 + c34x34 + c44x44 + c54x54 + c15x15 + c25x25 + c35x35 + c45x45 + c55x55,

32

onde: cij ´e o custo ou comprimento do arco (i, j) e xij ´e o ﬂuxo no arco (i, j).

As restri¸c˜oes do PCV poder˜ao ser modeladas matematicamente da seguinte forma:
Restri¸c˜ao 2: O ﬂuxo de entrada em cada v´ertice deve ser exatamente 1, para que n˜ao
tenha mais que um caminho convergindo para um ´unico v´ertice. Ent˜ao:

ou seja

5
(cid:88)

i=1

xij = 1,

∀j ∈ {1, 2, 3, 4, 5},

x11 + x21 + x31 + x41 + x51 = 1
x12 + x22 + x32 + x42 + x52 = 1
x13 + x23 + x33 + x43 + x53 = 1
x14 + x24 + x34 + x44 + x54 = 1
x15 + x25 + x35 + x45 + x55 = 1

Restri¸c˜ao 3: O ﬂuxo de sa´ıda de cada v´ertice deve ser exatamente 1, garantindo que, de
cada v´ertice, partir´a um ´unico caminho. Ent˜ao:

ou seja

5
(cid:88)

j=1

xij = 1,

∀i ∈ {1, 2, 3, 4, 5},

x11 + x12 + x13 + x14 + x15 = 1
x21 + x22 + x23 + x24 + x25 = 1
x31 + x32 + x33 + x34 + x35 = 1
x41 + x42 + x43 + x44 + x45 = 1
x51 + x52 + x53 + x54 + x55 = 1

Conjunto de restri¸c˜oes 4:
a) O ﬂuxo do v´ertice para ele mesmo deve ser igual a 0 para evitar la¸cos. Ent˜ao:

(cid:88)

i,j∈S

xij ≤| S | −1 ⇒ 1 − 1 = 0

ou seja

x11 = 0
x22 = 0
x33 = 0
x44 = 0
x55 = 0

S = {1}
S = {2}
S = {3}
S = {4}
S = {5}

33

b) N˜ao podem ocorrer subciclos, ou seja, o ciclo deve percorrer todos os v´ertices do grafo,
satisfazendo uma das caracter´ısticas do problema. Ent˜ao:

ou seja

e

ou seja

e

(cid:88)

i,j∈S

xij ≤| S | −1 ⇒ 2 − 1 ≤ 1

x12 + x21 ≤ 1
x13 + x31 ≤ 1
x14 + x41 ≤ 1
x15 + x51 ≤ 1
x23 + x32 ≤ 1
x24 + x42 ≤ 1
x25 + x52 ≤ 1
x34 + x43 ≤ 1
x35 + x53 ≤ 1
x45 + x54 ≤ 1

S = {1, 2}
S = {1, 3}
S = {1, 4}
S = {1, 5}
S = {2, 3}
S = {2, 4}
S = {2, 5}
S = {3, 4}
S = {3, 5}
S = {4, 5}

(cid:88)

i,j∈S

xij ≤| S | −1 ⇒ 3 − 1 ≤ 2

x12 + x21 + x13 + x31 + x23 + x32 ≤ 2
x12 + x21 + x14 + x41 + x24 + x42 ≤ 2
x12 + x21 + x15 + x51 + x25 + x52 ≤ 2
x13 + x31 + x14 + x41 + x34 + x43 ≤ 2
x13 + x31 + x15 + x51 + x35 + x53 ≤ 2
x14 + x41 + x15 + x51 + x45 + x54 ≤ 2
x23 + x32 + x24 + x42 + x34 + x43 ≤ 2
x23 + x32 + x25 + x52 + x35 + x53 ≤ 2
x24 + x42 + x25 + x52 + x45 + x54 ≤ 2
x34 + x43 + x35 + x53 + x45 + x54 ≤ 2

S = {1, 2, 3}
S = {1, 2, 4}
S = {1, 2, 5}
S = {1, 3, 4}
S = {1, 3, 5}
S = {1, 4, 5}
S = {2, 3, 4}
S = {2, 3, 5}
S = {2, 4, 5}
S = {3, 4, 5}

(cid:88)

i,j∈S

xij ≤| S | −1 ⇒ 4 − 1 ≤ 3

34

ou seja

x12 + x21 + x13 + x31 + x14 + x41 + x23 + x32 + x24 + x42 + x34 + x43 ≤ 3, S = {1, 2, 3, 4}
x12 + x21 + x13 + x31 + x15 + x51 + x23 + x32 + x25 + x52 + x35 + x53 ≤ 3, S = {1, 2, 3, 5}
x12 + x21 + x14 + x41 + x15 + x51 + x24 + x42 + x25 + x52 + x45 + x54 ≤ 3, S = {1, 2, 4, 5}
x13 + x31 + x14 + x41 + x15 + x51 + x34 + x43 + x35 + x53 + x45 + x54 ≤ 3, S = {1, 3, 4, 5}
x23 + x32 + x24 + x42 + x25 + x52 + x34 + x43 + x35 + x53 + x45 + x54 ≤ 3, S = {2, 3, 4, 5}

Restri¸c˜ao 5: As vari´aveis devem ser bin´arias, admitindo valor 0 ou 1. Ent˜ao:

xij ∈ {0, 1}

ou seja x11, x12, x13, x14, x15, x21, x22, x23, x24, x25, x31, x32, x33, x34, x35, x41, x42, x43, x44, x45,
x51, x52, x53, x54, x55 ∈ {0, 1}.

No exemplo apresentado acima, para ciclo com 5 v´ertices, foram necess´arias 40 res-
tri¸c˜oes relativas ao ﬂuxo, como j´a era esperado (n´umero de restri¸c˜oes na ordem de 25 = 32).

4.3.2

Implementa¸c˜ao do PCV em uma planilha eletrˆonica na Formula¸c˜ao
DFJ

O modelo matem´atico do PCV formulado por Dantzig, Fulkerson e Johnson, apre-
sentado na se¸c˜ao anterior, pode ser implementado em planilhas eletrˆonicas. Abaixo, ser´a
descrito os passos para a constru¸c˜ao e c´alculo da planilha.

A planilha eletrˆonica utilizada nesse modelo foi a do software Microsoft Oﬃce Excel
vers˜ao 2007. O modelo proposto aqui ´e de um PCV Sim´etrico com 7 cidades: A, B, C, D,
E, F e G. Sem perda de generalidade, a cidade A ´e considerada cidade inicial. Inicialmente
constru´ımos quatro tabelas como mostra a ﬁgura 46.

Figura 46: Tabelas de uma planilha eletrˆonica para c´alculo da distˆancia total percorrida
no ciclo hamiltoniano de custo m´ınimo do PCV com 7 cidades.

35

Tabela 2: F´ormulas relativas `a elimina¸c˜ao de subciclos no PCV.

F´ormula
C´elula
=SOMA(N6:N12)-SOMA(N6:T6)
N14
=SOMA(O6:O12)-SOMA(N7:T7)
O14
=SOMA(P6:P12)-SOMA(N8:T8)
P14
=SOMA(Q6:Q12)-SOMA(N9:T9)
Q14
R14 =SOMA(R6:R12)-SOMA(N10:T10)
=SOMA(S6:S12)-SOMA(N11:T11)
S14
=SOMA(T6:T12)-SOMA(N12:T12)
T14

Na tabela FLUXO, ser˜ao inseridas as f´ormulas relativas `a elimina¸c˜ao de subciclos,

conforme mostra a tabela 2.

Em todas as c´elulas da tabela VALOR M ´AXIMO FLUXO CIDADES ser˜ao inseridas
uma f´ormula que multiplica os respectivos valores das c´elulas da tabela SOLUC¸ ˜AO por 6,
que representa o valor m´aximo da quantidade de ﬂuxo enviada da cidade i para a cidade
j. Por exemplo, a f´ormula inserida na c´elula N18 ser´a =C18*6 na c´elula T24 ser´a =I24*6.
Na tabela SOLUC¸ ˜AO, nas c´elulas da linha denominada ROTA ji e da coluna ROTA ij
ser˜ao inseridas f´ormulas de soma dos valores da coluna e da linha referente `a cada cidade,
respectivamente. Por exemplo, a f´ormula inserida na c´elula C26 ser´a =SOMA(C18:C24)
e na c´elula K18 ser´a =SOMA(C18:I18). Essas f´ormulas combinadas com as restri¸c˜oes do
solver, for¸car˜ao o caixeiro visitar todas as cidades do ciclo, passando exatamente uma vez
por cada uma delas.

Por ﬁm, devemos inserir a f´ormula da fun¸c˜ao objetivo que minimiza o custo total da
rota do caixeiro no ciclo hamiltoniano. Colocamos o cursor na c´elula J28 e inserimos a
f´ormula:

=SOMARPRODUTO(C6:I12;C18:I24).

A planilha est´a preparada para utiliza¸c˜ao do solver. As ﬁguras 47 e 48 mostram as

conﬁgura¸c˜oes do solver e a ﬁgura 49 mostra a planilha com a solu¸c˜ao do problema.

Figura 47: Fun¸c˜ao objetivo e restri¸c˜oes adicionadas no solver.

36

Figura 48: Op¸c˜oes do solver.

Figura 49: Solu¸c˜ao do PCV com 7 cidades numa planilha eletrˆonica.

4.3.3 Formula¸c˜ao de Miller-Tucker-Zemlin (MTZ)

Em [24], Miller,Tucker e Zemlin prop˜oem a uma formula¸c˜ao matem´atica para o PCV

denominada, segundo [19], Folha de Cravo, que ´e descrita a seguir:

[...]denotamos a cidade 1 como a cidade in´ıcio-ﬁm ou cidade origem. O caixeiro
viajante deve visitar as outras n − 1 cidades exatamente uma vez. Durante seu
trajeto deve retornar a cidade origem exatamente t vezes, incluindo o retorno
ﬁnal, e n˜ao deve visitar mais de p cidades diferentes em um tour ou ciclo. A
formula¸c˜ao requer que

(cid:25)

(cid:24) n − 1
p

≤ t ≤ n − 1,

37

onde (cid:100)a(cid:101) a denota o menor inteiro maior ou igual ao valor de a, ou teto da
divis˜ao, para garantir a existˆencia de tours vi´aveis.

Isto posto, segundo Miller,Tucker e Zemlin, o PCV pode ser formulado assim:

Minimizar z =

n
(cid:88)

n
(cid:88)

cijxij

i=1

j=1
sujeito a

n
(cid:88)

i=2
n
(cid:88)

i=1
n
(cid:88)

xi1 = t

xji = 1,

j = 2, ..., n

xji = 1,

i = 2, ..., n

j=1
ui − uj + pxij ≤ p − 1,
ui ≥ 0,
xij ∈ {0, 1},

2 ≤ i ≤ n

∀i, j ∈ V,

(6)

(7)

(8)

(9)
(10)
(11)

2 ≤ i (cid:54)= j ≤ n

A restri¸c˜ao 6 garante que a cidade origem 1 ´e visitada exatamente t vezes. O arco (i, j)
em toda a solu¸c˜ao vi´avel bin´aria dos conjuntos de restri¸c˜oes 6, 7, 8 obrigam o conjunto
de restri¸c˜oes em p a transformar-se em:

Essa formula¸c˜ao modela o PCV cl´assico, quando t = 1 e p ≥ n − 1.

ui − uj ≤ −1.

4.4 PCV com Bˆonus

O Problema do Caixeiro Viajante com Bˆonus ´e uma variante do PCV em que n˜ao h´a
a exigˆencia de que todos os v´ertices do grafo sejam visitados pelo ciclo hamiltoniano do
caixeiro. Um bˆonus ou prˆemio ´e associado aos v´ertices e um custo (ou distˆancia entre
v´ertices) ´e associado `as arestas do problema. O objetivo geral ´e a otimiza¸c˜ao simultˆanea
do bˆonus recolhido no ciclo e dos custos de viagem.

De acordo com [18], podemos deﬁnir trˆes tipos de problemas do PCV com Bˆonus,

classiﬁcados de acordo como os bˆonus e os custos s˜ao considerados:

1o tipo PCV com Lucros ou Proﬁtable tour problem: foi proposto por [14]. O objetivo ´e
encontrar uma rota que minimiza os custos de viagem subtra´ıdos os bˆonus coletados.

2o tipo PCV Seletivo ou Orienteering Problem: denominado assim por [7]. O objetivo ´e
encontrar uma rota que maximize a coleta bˆonus, desde que os custos da rota n˜ao
ultrapassem um valor pr´e-estabelecido, chamado de cmax. Os custos da rota s˜ao
alocados como restri¸c˜ao do problema. Em alguns casos, cmax ´e o tempo m´aximo
para efetuar o trajeto (tmax).

38

3o tipo PCV com Coleta de Prˆemios ou Prize-Collecting Traveling Salesman Problem:
foi proposto por [3]. O objetivo ´e encontrar a rota de menor custo desde que a coleta
do bˆonus ou prˆemio n˜ao seja menor do que um valor pr´e-estabelecido. A coleta de
bˆonus ´e considerada restri¸c˜ao do problema. Uma penalidade ´e atribu´ıda aos v´ertices
n˜ao visitados. No problema conhecido por Quota TSP, as penalidades tem valor
nulo.

4.4.1 Problema do Caixeiro Viajante com Lucros

Uma formula¸c˜ao matem´atica para o PCV com Lucros tamb´em conhecido na literatura

como Proﬁtable tour problem, ´e apresentada em [15] e a descrevemos a seguir:

Minimizar z =

(cid:88)

(cid:88)

Vi∈V

Vj ∈V \{vi}

cijxij −

(cid:88)

Vi∈V

piyi

sujeito a
(cid:88)

xij = yi,

vi ∈ V

vj ∈V vi
(cid:88)

xij = yj,

vj ∈ V

vi∈V vj
y1 = 1
(cid:88)

(cid:88)

xij ≤| S | −1, S ⊂ V

vj ∈S vi

vi∈S
xij ∈ {0, 1};
yi ∈ {0, 1};

∀i, j = 1, ...N
∀i = 1, ...N.

Para deﬁnir a formula¸c˜ao do problema Quota TSP, a fun¸c˜ao objetivo ´e substitu´ıda

por:

e a inser¸c˜ao da restri¸c˜ao

Minimizar z =

(cid:88)

(cid:88)

cijxij

Vi∈V

Vj ∈V \{vi}

(cid:88)

Vi∈V

piyi ≥ pmin,

onde pmin ´e o bˆonus m´ınimo a ser coletado.

4.4.2 Problema do Caixeiro Viajante Seletivo

Em [27], o PCV Seletivo ou Orienteering Problem ´e deﬁnido da seguinte forma: seja
G = (V, A) um grafo completo e n˜ao orientado onde V = {v1, ..., vn} ´e o conjunto de
v´ertices e A = {(vi, vj) | vi, vj ∈ V, i < j} ´e o conjunto de arestas. Um prˆemio n˜ao-
negativo Si ´e associado a cada v´ertice vi ∈ V e o tempo de viagem tij ´e associado a cada

39

aresta (vi, vj). O problema consiste em determinar um circuito hamiltoniano G(cid:48) ⊂ G
sobre o conjunto V , incluindo a deﬁni¸c˜ao de um v´ertice de sa´ıda (vi) e um v´ertice de
chegada (vn), de forma a maximizar o prˆemio total coletado, n˜ao excedendo o tempo
m´aximo dispon´ıvel tmax.

Este problema pode ser de deﬁnido como um caminho, no qual o v´ertice inicial (vi)
difere do v´ertice ﬁnal (vn), bem como tamb´em pode ser deﬁnido como tendo o v´ertice
ﬁnal coincidente com o v´ertice de sa´ıda, originando assim um caminho fechado.

Considerando a nota¸c˜ao deﬁnida acima, e ainda que a vari´avel de decis˜ao xij = 1
indica que o v´ertice i foi visitado ap´os o v´ertice j, e xij = 0 caso contr´ario e que a
vari´avel ui indica a posi¸c˜ao do v´ertice i no caminho, ent˜ao a formula¸c˜ao matem´atica para
o Orienteering Problem ´e deﬁnida de acordo com [27], assim:

Maximizar z =

n−1
(cid:88)

n
(cid:88)

Sixij

j=2

i=2
sujeito a

n
(cid:88)

j=2

n−1
(cid:88)

i=1

x1j =

xik =

n−1
(cid:88)

i=1

n
(cid:88)

j=2

xin = 1

xkj ≤ 1 ∀k = 2, ..., n − 1

n−1
(cid:88)

n
(cid:88)

tijxij ≤ tmax

i=1
j=2
2 ≤ ui ≤ n;
ui − uj + 1 ≤ (n − 1)(1 − xij);
xij ∈ {0, 1};

∀i, j = 1, ...n.

∀i = 2, ..., n

∀j = 2, ..., n

4.4.3 Problema do Caixeiro Viajante com Coleta de Prˆemios (PCVCP)

Para deﬁnir a formula¸c˜ao do Problema do Caixeiro Viajante com Coleta de Prˆemios
tamb´em conhecido como Prize-Collecting Traveling Salesman Problem, proposta em [3],
considere o seguinte: seja G(cid:48) = (V, A) um grafo completo direcionado, para cada arco
(i, j) de A ´e dado um custo cij, e para cada v´ertice i de V , ´e associada uma penalidade
pi, a ser paga se o v´ertice i n˜ao compor a rota. Al´em disso, para cada v´ertice i, existe
um prˆemio wi associado. Os v´ertices s˜ao numerados de 1 at´e n =| V | (| V | ´e o n´umero
de v´ertices do grafo G(cid:48)), sendo o v´ertice 1, sem perda de generalidade, assumido como
cidade inicial da rota ou dep´osito. Para este v´ertice inicial, temos w1 = 0 e p1 = ∞.

Assumindo que yi seja 1 se o v´ertice i for inclu´ıdo na rota e 0 caso contr´ario, que x ´e
o vetor de incidˆencia associado `a rota (ou seja, assume valor 1 caso a aresta (i, j) esteja
na rota, e 0 caso contr´ario), e que f garante que a diferen¸ca entre o ﬂuxo que chega e que
sai do v´ertice seja igual a 1, se o v´ertice for visitado, e 0 caso contr´ario, e tamb´em n˜ao
permite que a quantidade de ﬂuxo entre os v´ertices i e j ultrapasse o n´umero de v´ertices

40

poss´ıveis de serem visitados, o Problema do Caixeiro Viajante com Coleta de Prˆemios ´e
formulado por [3] assim:

Minimizar z =

(cid:88)

(cid:88)

i∈V

j∈V −{1}

cijxij +

(cid:88)

i∈V

pi(1 − yi)

sujeito a
(cid:88)

xij = yi ∀i = 1, ..., n

j∈V −{i}
(cid:88)

xij = yj ∀j = 1, ..., n

i∈V −{j}
(cid:88)

(wi.yi) ≥ w0

i∈V
(cid:88)

(cid:88)

(cid:88)

(cid:88)

fij −

fji = yi ∀i = 1, ..., n i (cid:54)= 1

j∈V

j∈V

i∈V
i∈V
fij ≤ (n − 1)xij ∀(i, j) ∈ A
xij ∈ {0, 1};
yj ∈ {0, 1};

∀(i, j) ∈ A
∀i = 1, ...n.

(12)

(13)

(14)

(15)

(16)

(17)
(18)
(19)

A fun¸c˜ao objetivo 12 ´e composta pelo custo total do deslocamento somado aos custos
de penalidades pagos por n˜ao visita¸c˜ao de v´ertices. As restri¸c˜oes 13 e 14 s˜ao para garantir
que em todo v´ertice da rota tenha apenas um arco chegando e um arco saindo. A restri¸c˜ao
15 assegura que o prˆemio coletado na rota ser´a maior ou igual ao premio m´ınimo pr´e-
estabelecido. As restri¸c˜oes 16 e 17 garantem que a diferen¸ca de ﬂuxo que chega e que
sai do v´ertice seja igual a 1 caso o v´ertice seja visitado, 0 caso contr´ario e que o ﬂuxo
m´aximo que pode passar por uma aresta ´e (n − 1) (n´umero m´aximo de arestas poss´ıveis),
respectivamente. As restri¸c˜oes 18 e 19 s˜ao relativas aos limites de valores que podem ser
assumidos pelas v´ariaveis de decis˜ao, v´ariaveis que s˜ao inﬂuenciadas pela presen¸ca ou n˜ao
do v´ertice na rota.

4.4.4

Implementa¸c˜ao do PCV com Coleta de Prˆemios numa planilha eletrˆonica

O modelo matem´atico do PCVCP, formulado em [3], ´e classiﬁcado como um modelo de
Programa¸c˜ao Linear Inteira, uma vez que, tanto a fun¸c˜ao objetivo como as restri¸c˜oes s˜ao
equa¸c˜oes/inequa¸c˜oes lineares e as vari´aveis do modelo somente admitem valores inteiros.
A Programa¸c˜ao Linear ´e uma t´ecnica de otimiza¸c˜ao utilizada para encontrar o ´otimo
global, seja ele m´aximo ou m´ınimo, em situa¸c˜oes nas quais temos diversas alternativas de
escolha sujeitas a algum tipo de restri¸c˜ao ou regulamenta¸c˜ao.

Para a resolu¸c˜ao deste modelo de Programa¸c˜ao Linear Inteira, fez-se uso do suple-
mento Solver do software Microsoft Oﬃce Excel vers˜ao 2007 e da vers˜ao demonstra¸c˜ao
de LINGO 15.0 (obtida em [2]), e as etapas para a implementa¸c˜ao de um modelo de
PCVCP em uma planilha eletrˆonica ser˜ao mostradas nas ﬁguras a seguir.

41

A ﬁgura 50 mostra a planilha e as tabelas que foram constru´ıdas: uma tabela de
distˆancias entre cinco cidades do estado de Minas Gerais, uma tabela de bˆonus ou prˆemios
associados `a cada cidade, uma tabela de penalidades aplicadas no caso da cidade n˜ao par-
ticipar da rota, tabelas referentes `as restri¸c˜oes de ﬂuxo, o bˆonus m´ınimo pr´e-estabalecido
e a tabela solu¸c˜ao. Todas as rotas foram iniciadas na cidade de Belo Horizonte.

Figura 50: Tabelas para implementa¸c˜ao do PCVCP no Excel.

A f´ormula da fun¸c˜ao objetivo do modelo proposto digitada na c´elula C38 ´e :

=SOMARPRODUTO(C5:G9;C29:G33)+SOMARPRODUTO(C24:G24;1 − C34:G34)

Sendo o PCVCP uma variante do PCV, as tabelas referentes `as restri¸c˜oes de ﬂuxo e a
tabela solu¸c˜ao foram constru´ıdas seguindo o modelo de PCV cl´assico, implementado por
este trabalho na subse¸c˜ao 4.3.2.

A ﬁgura 51 mostra os parˆametros do solver, tais como a fun¸c˜ao objetivo e as restri¸c˜oes

do problema.

A ﬁgura 52 mostra a melhor rota, partindo de Belo Horizonte, para a coleta de um
bˆonus m´ınimo pr´e-estabelecido no valor de 55. A melhor rota tem o custo total 396, que
foi apurado somando as distˆancias percorridas no trajeto Belo Horizonte-Par´a de Minas-
Ita´una-Conselheiro Lafaiete-Belo Horizonte `a penalidade por n˜ao visitar a cidade de Jo˜ao
Monlevade.

A valida¸c˜ao do modelo se deu atrav´es de v´arios testes, inclusive para um problema
com 6 cidades, incluindo a cidade de Lavras e paralelamente os c´alculos foram checados
com a utiliza¸c˜ao da vers˜ao demonstra¸c˜ao do software LINGO 15.0. LINGO utiliza uma
linguagem de programa¸c˜ao pr´opria e trabalha integrado com o Excel, utilizando-o como

42

Figura 51: Parˆametros do Solver do Excel para o PCVCP.

base de dados. O dados e parˆametros de conﬁgura¸c˜ao do LINGO para este modelo de
PCVCP foram obtidos em [8]. Ap´os a execu¸c˜ao dos c´alculos, os resultados s˜ao transpor-
tados para as tabelas do Excel. As ﬁguras 53 e 54 mostram os parˆametros de c´alculo do
LINGO e a tabela do Excel com os dados de um problema PCVCP.

Pela natureza combinatorial do problema abordado, observa-se que tal modelo s´o
consegue resolver problemas de pequenas dimens˜oes. Os testes e os dados da tabela 1
apontam para a inviabilidade da modelagem exata do PCVCP `a medida que o n´umero de
cidades aumenta. Na resolu¸c˜ao de problemas com alto n´ıvel de complexidade, que envolve
um elevado n´umero de rotas a serem analisadas, utilizamos os algoritmos heur´ısticos. De
acordo com [8], os modelos heur´ısticos, apesar de n˜ao garantirem a otimalidade da solu¸c˜ao
ﬁnal, tˆem capacidade de encontrar boas solu¸c˜oes a um custo computacional razo´avel.

H´a muitos algoritmos heur´ısticos desenvolvidos para a solu¸c˜ao do PCV. Em [18] s˜ao

descritos alguns:

43

Figura 52: Utiliza¸c˜ao do Solver do Excel no c´alculo da melhor rota entre 5 cidades com
bˆonus pr´e-estabelecido.

Figura 53: Parˆametros do LINGO para c´alculo da melhor rota do PCVCP.

44

Figura 54: Tabela do Excel com dados para c´alculo da melhor rota do PCVCP pelo
LINGO 15.0.

• Algoritmo de Bellmore & Nemhauser ou heur´ıstica do vizinho mais pr´oximo.

• Heur´ısticas de Inser¸c˜ao, Deslocamentos de V´ertices e Inser¸c˜ao de Arestas.

• Heur´ısticas Exchange ou troca simples.

• Heur´ısticas de k-substitui¸c˜oes.

• Heur´ıstica Twice-Around.

• Heur´ıstica de Christoﬁdes.

• A T´ecnica de Lin & Kernignan.

A abordagem de t´ecnicas heur´ısticas escapa dos objetivos deste trabalho que foi de-
senvolvido focado em modelos exatos de resolu¸c˜ao do PCV, aplic´aveis no ensino b´asico
da disciplina Matem´atica.

Na pr´oxima se¸c˜ao, propomos algumas atividades que podem ser ministradas em turmas
de ensino m´edio, com o objetivo de abordar e mostrar as aplica¸c˜oes pr´aticas dos temas
apresentados neste trabalho.

45

5 Propostas de Atividades em Sala de Aula

Com o objetivo de auxiliar os professores de Matem´atica na abordagem de conceitos e
modelos aqui apresentados, sugerimos algumas atividades que poder˜ao ser utilizadas em
sala de aula.

Inicialmente expomos nosso entendimento de que os modelos aqui apresentados que
foram implementados em planilhas eletrˆonicas podem ser constru´ıdos por alunos do ensino
m´edio, seja para mostrar a aplicabilidade, despertar o interesse pelos temas, como tamb´em
para validar respostas de exerc´ıcios feitos manualmente. Outra ferramenta muito boa a ser
explorada s˜ao os softwares para constru¸c˜ao de grafos. Encontramos alguns dispon´ıveis na
vers˜ao livre ou demonstra¸c˜ao como yEd Graph Editor, Graphviz, Grafos, al´em do Geogebra
e Paint, esses dois ´ultimos com algumas limita¸c˜oes em rela¸c˜ao a grafos.

A seguir, apresentamos um exerc´ıcio que pode ser proposto para alunos do 2o ou 3o
ano do Ensino M´edio, dependendo da sequˆencia em que o tema Grafos ser´a inserido no
planejamento did´atico.

5.1 A fam´ılia de Pedro mudou-se recentemente para o bairro da Fontinha e ele est´a
ansioso por conhecer os novos colegas da escola do bairro. Mas antes ele ter´a que resolver
um problema: para ir da sua casa `a escola, Pedro tem v´arias op¸c˜oes de trajeto, passando
por alguns pontos de referˆencia do bairro e ele quer saber qual desses caminhos ´e o mais
curto. No grafo da ﬁgura 55, os v´ertices representam os pontos de referˆencia do bairro e
os arcos, as vias de liga¸c˜ao entre estes pontos. Nos arcos h´a a indica¸c˜ao das distˆancias,
dadas em metros.

Figura 55: Grafo representando as liga¸c˜oes entre os pontos de referˆencia do bairro da
Fontinha.

46

a) Escreva a matriz de adjacˆencia de pesos correspondente ao grafo.

Solu¸c˜ao: Na maioria dos planejamentos curriculares, o t´opico Matrizes ´e abordado no
2o ano do ensino m´edio. As entradas de uma matriz de adjacˆencia de pesos de um grafo
G guardam informa¸c˜oes sobre a conectividade dos v´ertices e os custos (ou distˆancias)
associados `as arestas.
. Representando por wij a distˆancia, em metros, entre os pontos
de referˆencia i e j, a matriz de adjacˆencia R do grafo deste exerc´ıcio ser´a constru´ıda da
seguinte forma:

R(i, j) =

(cid:26) wij
0

se i est´a conectado a j
caso contr´ario.

Antes de escrever a matriz, ´e conveniente o aluno construir a tabela de distˆancias
abaixo, que auxilia muito na deﬁni¸c˜ao das entradas. Para simpliﬁcar a escrita , os pontos
de referˆencia do grafo ser˜ao representados assim: C (Casa), F (Farm´acia), G (Gin´asio), S
(Sorveteria), P (Padaria), M (Monumento) e E (Escola).

C
C
0
F 170
G 260
0
S
P
0
M 0
0
E

F
170
0
80
300
300
0
0

G
260
80
0
0
170
250
0

S
0
300
0
0
40
0
240

P M E
0
0
0
0
0
300
0
250
170
240
0
40
310
40
0
400
0
40
0
400
310

Desta forma, a matriz R deste exerc´ıcio ´e apresentada a seguir:

R =













0
170
260
0
0
0
0

170 260
80
0
80
0
0
300
300 170
250
0
0
0

0
0
0
0
300 300
170 250
0
0
40
0
40
0
40
0
0
40
240 310 400













0
0
0
240
310
400
0

b) Calcule o comprimento do caminho mais curto desde a casa de Pedro at´e a escola,
utilizando o algoritmo de Dijkstra.

Solu¸c˜ao: Inicialmente o aluno deve rotular os v´ertices do grafo. O v´ertice inicial C ´e
rotulado com as informa¸c˜oes: v´ertice inicial e o valor zero, que ´e a distˆancia do v´ertice
inicial a ele mesmo. Os demais v´ertices s˜ao rotulados com o valor zero para representar o
v´ertice anterior no caminho e inﬁnito, representando que a distˆancia entre eles e o v´ertice
inicial ainda n˜ao foi calculada. A rotula¸c˜ao inicial do algoritmo ´e mostrada na ﬁgura 56.
A pr´oxima etapa ´e a busca do caminho mais curto desde C para chegar aos v´ertices
F e G. (ﬁgura 57). O caminho mais curto para chegar a G ´e vindo de F (ﬁgura 58).
A pr´oxima busca ocorre com os v´ertices S, P e M (ﬁgura 59). Nesse caso, o caminho

47

Figura 56: Rotula¸c˜ao inicial do grafo do exerc´ıcio 5.1 pelo algoritmo de Dijkstra.

mais curto para chegar a S, P e M ´e vindo de P , G e P , respectivamente (ﬁgura 60).
A ´ultima busca ocorre com o v´ertice ﬁnal E (ﬁgura 61). A ﬁgura 62 mostra o resultado
ﬁnal do algoritmo e o caminho mais curto que Pedro ir´a percorrer ser´a Casa-Farm´acia-
Gin´asio-Padaria-Sorveteria-Escola com distˆancia total percorrida no valor de 700 metros.

c) Calcule o comprimento do caminho mais curto desde a casa de Pedro at´e a escola,
construindo uma planilha eletrˆonica e utilizando o algoritmo de Floyd-Warshall.

Solu¸c˜ao: Seguindo as orienta¸c˜oes das notas deste trabalho, o aluno deve construir 8
tabelas numa planilha eletrˆonica, sendo a primeira delas, a matriz de adjacˆencia dos
pesos obtida a partir da f´ormula 1 da subse¸c˜ao 3.1.3. As outras 7 tabelas representam as
matrizes de itera¸c˜ao do algoritmo e nelas devem ser inseridas as f´ormulas de recorrˆencia,
cujo padr˜ao ´e

wk

ij = min{wk−1

ij

, (wk−1

ik + wk−1

kj )},

onde wk
ij ´e o comprimento do caminho mais curto entre os v´ertices i e j na k−´esima matriz
de itera¸c˜ao. Por exemplo, a f´ormula a ser inserida na c´elula X6 da planilha da ﬁgura 63 ´e
=M´INIMO(O6;M6+O6)

A ﬁgura 63 mostra a planilha eletrˆonica com as tabelas, sendo que a matriz da 7a

itera¸c˜ao apresenta o resultado ﬁnal do algoritmo.

Ap´os a conclus˜ao do exerc´ıcio, ´e importante o professor discutir com a turma os
resultados obtidos nos itens 5.1.b e 5.1.c, fazendo compara¸c˜oes e mostrando as vantagens

48

Figura 57: 1a itera¸c˜ao do algoritmo Dijkstra (exerc´ıcio 5.1.b).

Figura 58: 2a itera¸c˜ao do algoritmo Dijkstra (exerc´ıcio 5.1.b).

49

Figura 59: 3a itera¸c˜ao do algoritmo Dijkstra (exerc´ıcio 5.1.b).

Figura 60: 4a itera¸c˜ao do algoritmo Dijkstra (exerc´ıcio 5.1.b).

50

Figura 61: 5a itera¸c˜ao do algoritmo Dijkstra (exerc´ıcio 5.1.b).

Figura 62: Resultado ﬁnal do algoritmo Dijkstra (exerc´ıcio 5.1.b).

51

Figura 63: Tabelas de uma planilha eletrˆonica representando matrizes de itera¸c˜ao e o
resultado ﬁnal do exerc´ıcio 5.1.c.

e desvantagens da utiliza¸c˜ao de cada algoritmo e da implementa¸c˜ao dos modelos em
planilhas eletrˆonicas.

Apresentamos a seguir, outras sugest˜oes de atividades, descritas de forma sucinta e

separadas por se¸c˜ao:

Atividades relativas `a se¸c˜ao 2: constru¸c˜ao de grafos utilizando softwares, como forma
de ﬁxar os conceitos b´asicos sobre Grafos; constru¸c˜ao de matrizes de adjacˆencia ou in-
cidˆencia a partir de um grafo dado ou vice-versa.

Atividades relativas `a se¸c˜ao 3: atividades relacionadas a encontrar solu¸c˜oes de ca-
minhos mais curtos em problemas que envolvem o cotidiano dos alunos, utilizando os
algoritmos apresentados, que posteriormente devem ser checadas e validadas atrav´es das
planilhas eletrˆonicas.

Atividades relativas `a se¸c˜ao 4: atividades de combinat´oria como, por exemplo, a
explora¸c˜ao das an´alises de rotas poss´ıveis do PCV e o tempo que um computador despende
para efetuar os c´alculos. Atividades para encontrar a rota de custo m´ınimo do caixeiro
viajante envolvendo um n´umero reduzido de cidades e como na se¸c˜ao anterior, as solu¸c˜oes
poder˜ao ser checadas e validadas atrav´es de planilhas eletrˆonicas.

Outras atividades para a abordagem dos temas aqui propostos podem ser encontradas

em [21], [6] e [18].

52

Coment´arios ﬁnais

Numa breve pesquisa num encontro de professores de Matem´atica da cidade de Par´a de
Minas-MG, questionei se os mesmos abordavam o tema Grafos em suas aulas. Nos relatos
constatei que o tema ´e pouco explorado durante as aulas e que alguns n˜ao conheciam
conceitos b´asicos relativos a Grafos. O famoso Problema das Pontes de K¨onigsberg,
por exemplo, n˜ao era conhecido pela maioria deles. Nessa mesma abordagem procurei
encontrar uma justiﬁcativa para esse quadro. A ausˆencia do tema em planejamentos
curriculares e a escassa explora¸c˜ao por parte dos livros did´aticos adotados, apareceram
com frequˆencia entre as justiﬁcativas apresentadas.

Esse quadro despertou em mim a vontade de dedicar esta disserta¸c˜ao a explorar um
tema que trouxesse impacto na pr´atica did´atica em sala de aula e que fosse pertinente
ao curr´ıculo de Matem´atica do ensino b´asico. Sendo assim, a minha pretens˜ao ´e que
este material sirva de referˆencia na abordagem do tema, principalmente em aulas de
Matem´atica para alunos do ensino m´edio. O trabalho apresenta conceitos b´asicos, modelos
de implementa¸c˜ao em planilhas eletrˆonicas e sugest˜oes de atividades em sala de aula.
Na elabora¸c˜ao utilizou-se uma linguagem simples e de f´acil compreens˜ao. A op¸c˜ao de
implementa¸c˜ao de modelos em planilhas eletrˆonicas justiﬁca-se pelo fato dessas serem
amplamente difundidas, de f´acil manipula¸c˜ao e presentes em laborat´orios de inform´atica
de escolas p´ublicas.

A expectativa ´e que a proposta apresentada aqui cumpra os objetivos de servir de
referˆencia para professores de Matem´atica na abordagem do tema Grafos no ensino b´asico
e mostrar a relevˆancia e todo o potencial de utiliza¸c˜ao desse conhecimento.

Por ﬁm, sugerimos outros trabalhos que podem ser desenvolvidos a partir deste, ob-
jetivando ampliar as fontes de referˆencia para professores que desejam abordar o tema
Grafos em aulas do ensino m´edio ou cursos de gradua¸c˜ao:

• aplica¸c˜oes em grafos eulerianos e colora¸c˜ao de grafos,

• estudo mais detalhado de algoritmos heur´ısticos para resolu¸c˜ao do Problema do

Caixeiro Viajante,

• implementa¸c˜ao de outros modelos de variantes do PCV em planilhas eletrˆonicas.

Em trabalhos futuros, pretende-se desenvolver estudo sobre algoritmos exatos e heur´ısticos

utilizados na resolu¸c˜ao de problemas de busca e caminhos em grafos.

53

Agradecimentos

Gostaria de agradecer inicialmente `a minha esposa H´erika, meus ﬁlhos B´arbara e
Arthur e minha irm˜a Andreia, pelo apoio e paciˆencia. Sei que n˜ao foi f´acil superar as
diﬁculdades e o sacrif´ıcio impostos pela minha ausˆencia em virtude da dedica¸c˜ao aos
estudos. Vocˆes foram o motivo da minha inspira¸c˜ao para buscar mais essa vit´oria.

Agrade¸co tamb´em aos meus professores e coordenadores da UFSJ Campus Ouro
Branco, por proporcionarem aulas de qualidade aliadas a uma rela¸c˜ao muito respeitosa e
prazerosa. Ao professor orientador Alexandre Celestino Leite Almeida por toda aten¸c˜ao
dispensada, e por sempre estar `a disposi¸c˜ao para contribuir de todas as formas para que
alcan¸casse o meu objetivo.

Aos meus colegas de curso, pelo apoio, companhia em momentos de estudo e incentivo

nas horas dif´ıceis.

N˜ao poderia esquecer tamb´em de agradecer aos meus grandes amigos Adelson Viegas
e Gesiany Faria, companheiros com os quais dividi carona nesses anos de curso e que me
ajudaram enfrentar 180 perigosos quilˆometros de estrada que separam Par´a de Minas de
Ouro Branco.

Finalmente, agrade¸co `a CAPES pelo apoio ﬁnanceiro e oferta do PROFMAT, um
programa que contribui muito para o aprimoramento da forma¸c˜ao proﬁssional do professor
de Matem´atica do ensino p´ublico.

54

Referˆencias

[1] “Rota de Ouro Branco-MG a Par´a de Minas-MG”. (22 jul. 2016). Google Maps.

Google Inc. Consultado em < https://maps.google.com/ >.

[2] Lingo 15.0 vers˜ao demonstra¸c˜ao de Lindo Systems

em
<http://www.lindo.com/index.php?option=com content&view=article&id=35&Ite
mid=20>. Acesso em 15 jan. 2016.

. Dispon´ıvel

Inc.

[3] E. Balas. The prize collecting traveling salesman problem. Networks, 19(6):621–636,

1989.

[4] E. Balas and M. Guignard. Report of the session on: Branch and bound/implicit

enumeration. Annals of Discrete Mathematics, 5:185–191, 1979.

[5] D. Bienstock, M. X. Goemans, D. Simchi-Levi, and D. Williamson. A note on the
prize collecting traveling salesman problem. Mathematical programming, 59(1-3):413–
420, 1993.

[6] P. O. Boaventura and S. Jurkiewicz. Grafos: introdu¸c˜ao e pr´atica. Editora Blucher,

2009.

[7] I.-M. Chao, B. L. Golden, and E. A. Wasil. The team orienteering problem. European

journal of operational research, 88(3):464–474, 1996.

[8] A. A. Chaves, F. BIAJOLI, O. MINE, and M. SOUZA. Modelagens exata e heur´ıstica
para resolu¸c˜ao do problema do caixeiro viajante com coleta de prˆemios. Relat´orio
T´ecnico–DECOM, Universidade Federal de Ouro Preto, Ouro Preto. Dispon´ıvel em
<http://www. decom. ufop. br/prof/marcone/Orientacoes/OrientacoesConcluidas.
htm>. Acesso em 08 jan. 2016, 2003.

[9] N. Christoﬁdes. The shortest hamiltonian chain of a graph. SIAM Journal on Applied

Mathematics, 19(4):689–696, 1970.

[10] N. Christoﬁdes. Combinatorial optimization. In A Wiley-Interscience Publication,
Based on a series of lectures, given at the Summer School in Combinatorial Optimi-
zation, held in Sogesta, Italy, May 30th-June 11th, 1977, Chichester: Wiley, 1979,
edited by Christoﬁdes, Nicos, 1979.

[11] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Algoritmos: teoria e

pr´atica. Editora Campus, 2002.

[12] G. Dantzig, R. Fulkerson, and S. Johnson. Solution of a large-scale traveling-salesman
problem. Journal of the operations research society of America, 2(4):393–410, 1954.

[13] E. L. de Andrade.

Introdu¸c˜ao `a pesquisa operacional: m´etodos e modelos para a

an´alise de decis˜ao. Grupo Gen-LTC, 2009.

55

[14] M. Dell’Amico, F. Maﬃoli, and P. V¨arbrand. On prize-collecting tours and the
asymmetric travelling salesman problem. International Transactions in Operational
Research, 2(3):297–308, 1995.

[15] D. Feillet, P. Dejax, and M. Gendreau. Traveling salesman problems with proﬁts.

Transportation science, 39(2):188–205, 2005.

[16] R. W. Floyd. Algorithm 97: shortest path. Communications of the ACM, 5(6):345,

1962.

[17] M. R. Garey and D. S. Johnson. A guide to the theory of np-completeness. WH

Freemann, New York, 1979.

[18] M. Goldbarg. Grafos: Conceitos, algoritmos e aplica¸c˜oes. Elsevier Brasil, 2012.

[19] M. C. Goldbarg and H. P. L. Luna. Otimiza¸c˜ao combinat´oria e programa¸c˜ao linear:

modelos e algoritmos. Elsevier, Rio de Janeiro, 2005.

[20] A. d. C. G. J´unior and M. J. F. Souza. Solver (excel): manual de referˆencia. Uni-

versidade Federal de Ouro Preto, MG, 2004.

[21] S. Jurkiewicz. Grafos–uma introdu¸c˜ao. S˜ao Paulo: OBMEP, 2009.

[22] J. D. Little, K. G. Murty, D. W. Sweeney, and C. Karel. An algorithm for the

traveling salesman problem. Operations research, 11(6):972–989, 1963.

[23] M. d. S. Menezes. O problema do caixeiro alugador com coleta de bˆonus: um estudo

algor´ıtmico. Universidade Federal do Rio Grande do Norte, 2014.

[24] C. E. Miller, A. W. Tucker, and R. A. Zemlin. Integer programming formulation of
traveling salesman problems. Journal of the ACM (JACM), 7(4):326–329, 1960.

[25] M. J. F. Souza. Otimiza¸c˜ao combinat´oria - notas de aula. 2010.

[26] J. L. Szwarcﬁter. Grafos e algoritimos computacionais. Campus, 1986.

[27] P. Vansteenwegen, W. Souﬀriau, and D. Van Oudheusden. The orienteering problem:

A survey. European Journal of Operational Research, 209(1):1–10, 2011.

56

