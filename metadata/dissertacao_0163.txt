Universidade Federal de Mato Grosso
Instituto de Ciˆencias Exatas e da Terra

Departamento de Matem´atica

Pensamento computacional no ensino da
Matem´atica: desaﬁos e possibilidades

Juliano Thadeo Alves da Silva

Mestrado Proﬁssional em Matem´atica: Profmat/SBM

Orientador: Prof. Dr. Andr´e Krindges

Trabalho ﬁnanciado pela Capes

Cuiab´a - MT

Dezembro de 2020

Pensamento computacional no ensino da
Matem´atica: desaﬁos e possibilidades

Este exemplar corresponde `a reda¸c˜ao ﬁnal da dis-
serta¸c˜ao, devidamente corrigida e defendida por
Juliano Thadeo Alves da Silva e aprovada pela co-
miss˜ao julgadora.

Cuiab´a, 08 de dezembro de 2020.

Prof. Dr. Andr´e Krindges
Orientador

Banca examinadora:

Prof. Dr. Andr´e Krindges
Prof. Dr. Nelcileno Virg´ılio de Souza Ara´ujo
Prof. Dr. Andr´e Valente do Couto

Disserta¸c˜ao apresentada ao curso de Mestrado
Proﬁssional em Matem´atica – Profmat, da Uni-
versidade Federal de Mato Grosso, como requisito
parcial para obten¸c˜ao do t´ıtulo de Mestre em
Matem´atica.

ii

iii

`A minha fam´ılia.

iv

Agradecimentos

Agrade¸co primeiramente a Deus, por me dar for¸ca e sa´ude para superar os

obst´aculos enfrentados ao longo de toda minha trajet´oria acadˆemica, principalmente, por

sempre estar presente na minha caminhada.

Aos meus pais, por me orientar e ensinar que nos estudos est´a a esperan¸ca de

um futuro melhor. Em especial a minha m˜ae, Arlete Borges que se dedicou a educa¸c˜ao

de seus ﬁlhos, sendo um exemplo de dignidade, perseveran¸ca, amor `a fam´ılia. Aos meus

irm˜aos Marcelo e Caroline, que me ajudaram em todos os momentos de minha vida.

`A minha fam´ılia, agrade¸co pela compreens˜ao, paciˆencia, apoio ao longo dessa

jornada. Meu obrigado a minha esposa, Viviane, pelo suporte, companheirismo e incentivo

durante todo esse percurso. Aos meus ﬁlhos Arthur, Ivia e Eros que me fazem querer ser

uma pessoa melhor a cada dia.

Aos professores do Profmat pelo enriquecimento intelectual proporcionado pelas

excelentes aulas. Aos meus colegas do Profmat pela parceria nos estudos t˜ao impres-

cind´ıveis durante esse percurso.

Ao meu orientador, professor doutor Andr´e Krindges, a quem agrade¸co primeiro

por ter aceito me orientar e depois pela paciˆencia e compreens˜ao no decorrer do percurso.
`A SBM e UFMT, pela oportunidade de proﬁssionalizar os educadores matem´aticos

de todo Brasil.

Ao coordenador do Profmat, professor doutor Geraldo L. Diniz, pela dedica¸c˜ao

e proﬁssionalismo que conduz as a¸c˜oes do Programa, contribuindo para a excelˆencia do

Profmat.

Agrade¸co aos membros da banca examinadora pelas contribui¸c˜oes e pela dis-

posi¸c˜ao em participar desse processo.

Muito obrigado a todos.

v

”Ensinar n˜ao ´e transferir conheci-

mento, mas criar as possibilidades para

a sua pr´opria produ¸c˜ao ou a sua cons-

tru¸c˜ao.”

Paulo Freire.

vi

Resumo

Neste trabalho ´e apresentada uma proposta diferenciada para se ensinar o pensamento

computacional por meio de uma abordagem construcionista e a aplica¸c˜ao de metodologias

ativas, como resolu¸c˜ao de problemas e aprendizagem baseadas em jogos. Com o intuito

de auxiliar os professores de Matem´atica que atuam na Educa¸c˜ao B´asica, se conduziu

a pesquisa sobre o pensamento computacional de forma gradual. A partir de uma in-

trodu¸c˜ao que busca justiﬁcar a necessidade de se trabalhar o pensamento computacional,

tendo em vista que a computa¸c˜ao e as tecnologias que a permeiam est˜ao no centro da

economia e da vida cotidiana. Dessa forma, o pensamento computacional ´e essencial para

que os alunos compreendam o mundo, n˜ao apenas como utilizadores de tecnologia, mas

tamb´em com criadores. Assim, o pensamento computacional e a Ciˆencia da Computa¸c˜ao

est˜ao no cume das reformas curriculares da Educa¸c˜ao B´asica no mundo. Enquanto al-

guns pa´ıses como o Brasil est˜ao apenas na fase inicial dessa jornada, outros j´a possuem

d´ecadas de implanta¸c˜ao do pensamento computacional e Ciˆencias da Computa¸c˜ao. Em

muitos desses pa´ıses, hoje o seu estudo ´e compuls´orio e com disciplina espec´ıﬁca para

a computa¸c˜ao, pondo em igualdade com as outras disciplinas acadˆemicas. O trabalho

´e ﬁnalizado com propostas de atividades, que come¸cam com a utiliza¸c˜ao dos programas

SpriteBox e LightBot, os quais levam o aluno a desenvolver conceitos b´asicos de pro-

grama¸c˜ao de forma signiﬁcativa e prazerosa, e posteriormente, s˜ao sugeridas atividades

que podem ser trabalhadas no Ensino Fundamental I e II.

Palavras chave: Algoritmo, atividades did´aticas, construcionismo

vii

Abstract

This work presents a diﬀerent proposal to teach computational thinking through a cons-

tructionist approach and the application of active methodologies, such as problem solving

and game-based learning. In order to assist mathematics teachers working in basic educa-

tion, research on computational thinking was conducted gradually. From an introduction

that seeks to justify the need to work with computational thinking, considering that com-

puting and the technologies that permeate it are at the center of economics and everyday

life. Thus, computational thinking is essential for students to understand the world, not

only as users of technology, but also with creators. Thus, computational thinking and

Computer Science are at the top of the curriculum reforms of Basic Education in the

world. While some countries like Brazil are only in the initial phase of this stage, others

already have decades of implantation of computational thinking and Computer Science.

In many of these countries, today their study is compulsory and with a speciﬁc discipline

for computing, putting it on an equal footing with other academic disciplines. The work

is ﬁnished with proposals for activities, which start with the use of the SpriteBox and

LightBot programs, which lead the student to develop basic programming concepts in a

meaningful and enjoyable way, and later, activities that can be worked on in Elementary

School are suggested I and II.

Keywords: Algorithm, teaching activities, constructionism

viii

Sum´ario

Agradecimentos

Resumo

Abstract

Lista de ﬁguras

Lista de tabelas

Introdu¸c˜ao

1 Construcionismo e pensamento computacional

1.1 Abstra¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

v

vii

viii

xiii

xiv

1

5

9

1.2 Decomposi¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10

1.3 Reconhecimento de padr˜oes

. . . . . . . . . . . . . . . . . . . . . . . . . . 12

1.4 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

2 Benef´ıcios do pensamento computacional

3 Panorama do pensamento computacional

4 Metodologia de aprendizagem

15

17

22

4.1 Aprendizagem baseada em jogos . . . . . . . . . . . . . . . . . . . . . . . . 23

4.2 Aprendizagem baseada em problemas . . . . . . . . . . . . . . . . . . . . . 24

5 Algoritmo

26

5.1 Fluxograma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

5.2 Pseudocodigo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

ix

5.3 VisuAlg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30

5.3.1 Estrutura b´asica . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31

5.3.2 Declara¸c˜ao de vari´avel

. . . . . . . . . . . . . . . . . . . . . . . . . 32

5.3.3 Atribui¸c˜ao de valores . . . . . . . . . . . . . . . . . . . . . . . . . . 32

5.3.4 Operadores aritm´eticos . . . . . . . . . . . . . . . . . . . . . . . . . 33

5.3.5 Operadores relacionais . . . . . . . . . . . . . . . . . . . . . . . . . 33

5.3.6 Comandos de entrada e sa´ıda de dados . . . . . . . . . . . . . . . . 33

5.3.7 Desvio condicional simples e composto . . . . . . . . . . . . . . . . 34

5.3.8 Comando de sele¸c˜ao m´ultipla . . . . . . . . . . . . . . . . . . . . . 35

5.3.9 Comando de repeti¸c˜ao - loop (la¸cos)

. . . . . . . . . . . . . . . . . 36

6 Proposta de atividades did´aticas

40

6.1 Atividade App SpriteBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41

6.2 Atividade App LightBot . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44

6.3 Atividade Matem´atica - 1” ano . . . . . . . . . . . . . . . . . . . . . . . . 47

6.4 Atividade Matem´atica - 2” ano . . . . . . . . . . . . . . . . . . . . . . . . 47

6.5 Atividade Matem´atica - 3” ano . . . . . . . . . . . . . . . . . . . . . . . . 49

6.6 Atividade Matem´atica - 4” ano . . . . . . . . . . . . . . . . . . . . . . . . 50

6.7 Atividade Matem´atica - 5” ano . . . . . . . . . . . . . . . . . . . . . . . . 51

6.8 Atividade Matem´atica - 6” ano . . . . . . . . . . . . . . . . . . . . . . . . 55

6.9 Atividade Matem´atica - 7” ano . . . . . . . . . . . . . . . . . . . . . . . . 58

6.10 Atividade Matem´atica - 8” ano . . . . . . . . . . . . . . . . . . . . . . . . 64

6.11 Atividade Matem´atica - 9” ano . . . . . . . . . . . . . . . . . . . . . . . . 70

Considera¸c˜oes ﬁnais

Referˆencias Bibliogr´aﬁcas

75

78

x

Lista de Figuras

1.1 Os quatro pilares do pensamento computacional. . . . . . . . . . . . . . . .

9

1.2 Processo de decomposi¸c˜ao - divis˜ao e conquista.

. . . . . . . . . . . . . . . 12

1.3 Algoritmo da adi¸c˜ao.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14

3.1 Trˆes eixos tecnol´ogicos. Fonte: Curr´ıculo de Referˆencia CIEB (2018).

. . . 19

5.1 Diagrama de bloco. Fonte: Adaptado de Manzano e Oliveira (2019). . . . . 28

5.2 Exemplo de ﬂuxograma (calcula o dobro de um n´umero).

. . . . . . . . . . 29

5.3 Exemplo de pseudoc´odigo (calcula o dobro de um n´umero) usando o VisuAlg. 30

5.4 Estrutura b´asica do VisuAlg. . . . . . . . . . . . . . . . . . . . . . . . . . . 31

5.5 Declara¸c˜ao de vari´avel.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32

5.6 Comando de entrada e sa´ıda de dados.

. . . . . . . . . . . . . . . . . . . . 34

5.7 Sintaxe do desvio condicional simples. . . . . . . . . . . . . . . . . . . . . . 34

5.8 Sintaxe do desvio condicional composto.

. . . . . . . . . . . . . . . . . . . 35

5.9 Exemplo de aplica¸c˜ao do desvio condicional composto.

. . . . . . . . . . . 35

5.10 Sintaxe do comando de sele¸c˜ao m´ultipla.

. . . . . . . . . . . . . . . . . . . 36

5.11 Exemplo de comando para sele¸c˜ao m´ultipla.

. . . . . . . . . . . . . . . . . 36

5.12 Sintaxe do comando de repeti¸c˜ao: para...faca.

. . . . . . . . . . . . . . . . 37

5.13 Exemplo de loop - para...faca.

. . . . . . . . . . . . . . . . . . . . . . . . . 38

5.14 Sintaxe do comando de repeti¸c˜ao: loop - enquanto...faca.

. . . . . . . . . . 38

5.15 Exemplo de loop - enquanto...faca . . . . . . . . . . . . . . . . . . . . . . . 39

6.1 Tela do App SpriteBox. Fonte: Site SpriteBox - guia do professor.

. . . . . 42

6.2 SpriteBox - sequˆencia de instru¸c˜oes. Fonte: Site SpriteBox - guia do professor. 43

6.3 SpriteBox - estrutura em loop. Fonte: Site SpriteBox - guia do professor.

. 43

6.4 Tela do App LightBot. Fonte: Site LightBot. . . . . . . . . . . . . . . . . . 45

6.5 Deslocamento: algoritmo sequˆencia de passos.

. . . . . . . . . . . . . . . . 48

xi

6.6 Tabuleiro: algoritmo para movimenta¸c˜ao de objetos. . . . . . . . . . . . . . 50

6.7 Exemplo: algoritmo retorna o menor e o maior n´umero inteiro. . . . . . . . 52

6.8 Exemplo: algoritmo c´alculo de porcentagem.

. . . . . . . . . . . . . . . . . 53

6.9 Exemplo: algoritmo c´alculo da m´edia aritm´etica.

. . . . . . . . . . . . . . 53

6.10 Exemplo: algoritmo grandeza direta.

. . . . . . . . . . . . . . . . . . . . . 54

6.11 Exemplo: deslocamento no plano cartesiano.

. . . . . . . . . . . . . . . . . 55

6.12 Exemplo: algoritmo retorna paridade de um n´umero inteiro.

. . . . . . . . 56

6.13 Exemplo: algoritmo retorna valor poupado. . . . . . . . . . . . . . . . . . . 56

6.14 Exemplo: algoritmo retorna n´umero de v´ertice, faces e arestas. . . . . . . . 57

6.15 Exemplo: algoritmo retorna valor atualizado. . . . . . . . . . . . . . . . . . 58

6.16 Exemplo: algoritmo retorna valor do produto com desconto.

. . . . . . . . 58

6.17 Exemplo: algoritmo convers˜ao real para d´olar.

. . . . . . . . . . . . . . . . 59

6.18 Exemplo: algoritmo convers˜ao real para euro.

. . . . . . . . . . . . . . . . 60

6.19 Exemplo: algoritmo consumo m´edio de combust´ıvel

. . . . . . . . . . . . . 60

6.20 Exemplo: algoritmo compra parcelada . . . . . . . . . . . . . . . . . . . . 61

6.21 Exemplo: algoritmo retorna valor atualizado. . . . . . . . . . . . . . . . . . 61

6.22 Exemplo: algoritmo retorna ´area de um retˆangulo. . . . . . . . . . . . . . . 62

6.23 Exemplo: algoritmo retorna ´area de um triˆangulo. . . . . . . . . . . . . . . 63

6.24 Exemplo: algoritmo veriﬁca a condi¸c˜ao de existˆencia de um triˆangulo. . . . 63

6.25 Exemplo: algoritmo veriﬁca a existˆencia e classiﬁca¸c˜ao de um triˆangulo. . . 64

6.26 Exemplo: algoritmo retorna valor atualizado. . . . . . . . . . . . . . . . . . 65

6.27 Exemplo: algoritmo rendimento de um investimento.

. . . . . . . . . . . . 65

6.28 Exemplo: algoritmo rendimento de um investimento por um per´ıodo.

. . . 66

6.29 Exemplo: algoritmo sal´ario ﬁxo com comiss˜ao. . . . . . . . . . . . . . . . . 66

6.30 Exemplo: algoritmo valor atualizado de um t´ıtulo. . . . . . . . . . . . . . . 67

6.31 Exemplo: algoritmo sequˆencia de Fibonacci.

. . . . . . . . . . . . . . . . . 68

6.32 Exemplo: algoritmo ´area de um terreno retangular.

. . . . . . . . . . . . . 68

6.33 Exemplo: algoritmo ´area de um terreno circular. . . . . . . . . . . . . . . . 69

6.34 Exemplo: algoritmo m´edia aritm´etica.

. . . . . . . . . . . . . . . . . . . . 69

6.35 Exemplo: algoritmo calcula ra´ızes da equa¸c˜ao do 2” grau. . . . . . . . . . . 70

6.36 Exemplo: console da execu¸c˜ao do algoritmo.

. . . . . . . . . . . . . . . . . 71

6.37 Exemplo: algoritmo Fibonacci e n´umero ´aureo.

. . . . . . . . . . . . . . . 71

xii

6.38 Exemplo: console da execu¸c˜ao do algoritmo.

. . . . . . . . . . . . . . . . . 72

6.39 Exemplo: algoritmo c´alculo do imposto de renda.

. . . . . . . . . . . . . . 73

6.40 Exemplo: algoritmo triˆangulo equil´atero.

. . . . . . . . . . . . . . . . . . . 74

xiii

Lista de Tabelas

3.1 Ado¸c˜ao do pensamento computacional

. . . . . . . . . . . . . . . . . . . . 18

5.1 Tipo de vari´avel.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32

6.1

Interface do programa LightBot. . . . . . . . . . . . . . . . . . . . . . . . . 46

6.2 Tabela base para c´alculo do imposto de renda em 2020. . . . . . . . . . . . 73

xiv

Lista de abreviaturas

BNCC Base Nacional Comum Curricular

COOPE Instituto Alberto Luiz Coimbra de P´os-Gradua¸c˜ao e Pesquisa de Engenharia

CC Ciˆencia da Computa¸c˜ao

CIEB Centro de Inova¸c˜ao para a Educa¸c˜ao Brasileira

CSTA Computer Science Teacher Association

ESSA Every Student Succeeds Act

EUA Estados Unidos da Am´erica

FGV Funda¸c˜ao Get´ulio Vargas

GBL Games Based Learning

ISO International Organization for Standardization

ISTE International Society for Technology in Education

LPP Linguagem de Projeto de Programa¸c˜ao

OCDE Organisation for Economic Co-operation and Development

OCDE Organiza¸c˜ao para a Coopera¸c˜ao e Desenvolvimento Econˆomico

PBL Problem Based Learning

PC Pensamento Computacional

PISA Programme for International Student Assessment

SBC Sociedade Brasileira de Computa¸c˜ao

xv

SENAC Servi¸co Nacional de Aprendizagem Comercial

SMS Short Message Service

TDIC Tecnologias Digitais de Informa¸c˜ao e Comunica¸c˜ao

TI Tecnologia da Informa¸c˜ao

UFMT Universidade Federal de Mato Grosso

UFRGS Universidade Federal do Rio Grande do Sul

UFRJ Universidade Federal do Rio de Janeiro

xvi

Introdu¸c˜ao

A sociedade contemporˆanea nos ´ultimos anos vem vivenciando importantes trans-

forma¸c˜oes, cada vez mais temos convivido com os avan¸cos tecnol´ogicos, que tem na com-

puta¸c˜ao o eixo central de tais mudan¸cas. Assim, os computadores se tornam ferramentas

indispens´aveis em quase todos os aspectos de nossa vida, evidenciando a necessidade da

elabora¸c˜ao de estrat´egias que possibilitem aos estudantes o acesso aos conhecimentos em

computa¸c˜ao.

´E not´orio que a utiliza¸c˜ao de recursos tecnol´ogicos tem se tornado cada vez mais

presente em nosso cotidiano, vivemos cercados por tecnologia e dispositivos digitais. Ap´os

a populariza¸c˜ao dos computadores e da internet nas ´ultimas d´ecadas, atualmente, estamos

vivendo o boom na aquisi¸c˜ao dos smartphones. Segundo a pesquisa anual de adminis-

tra¸c˜ao e uso de tecnologia da informa¸c˜ao, realizada pela FGVcia (2020), o Brasil tem hoje

dois dispositivos digitais por habitante. E com isso, o uso de tecnologia tem mudado o

dia a dia de grande parte da popula¸c˜ao brasileira. Reﬂetindo por exemplo, a forma como

as pessoas se comunicam: as liga¸c˜oes telefˆonicas podem ser substitu´ıdas por chamadas

de v´ıdeo, com o envio de arquivos, localiza¸c˜ao; e ´e claro h´a tamb´em reﬂexo no mundo do

trabalho: como o desenvolvimento de um projeto, que atualmente pode ser feito em home

oﬃce de maneira colaborativa, devido a diversas plataformas que permitem: reuni˜oes,

cria¸c˜ao de documentos produzido em coopera¸c˜ao e permitindo intera¸c˜ao dentre todos os

participantes da equipe.

Certamente, as Tecnologias Digitais de Informa¸c˜ao e Comunica¸c˜ao (TDIC) trans-

formam e continuar˜ao transformando o mundo e a for¸ca de trabalho profundamente.

Como efeito disso, a Ciˆencia da Computa¸c˜ao e as tecnologias que ela permite, agora est˜ao

no cerne de nossa economia e da maneira como vivemos nossas vidas.

Assim, com o consumo cada vez maior de tecnologia e computa¸c˜ao em distintos

aspectos de nossa vida, precisamos reﬂetir sobre como os jovens e adolescentes est˜ao sendo

1

preparados para lidar com tais recursos. Para Computer Science Teacher Association

CSTA (2011), com o cen´ario cada vez mais tecnol´ogico ´e fundamental que o estudante

do s´eculo 21 tenha conhecimento dos princ´ıpios e pr´atica da Ciˆencia da Computa¸c˜ao,

independente de seu campo de estudo e ocupa¸c˜ao futura.

A Base Nacional Comum Curricular (BNCC) trouxe algumas diretrizes para auxi-

liar as redes de ensino na constru¸c˜ao e revis˜ao dos seus pr´oprios curr´ıculos. A competˆencia

geral n´umero 5 da BNCC, aponta para a necessidade de se trabalhar Tecnologias Digitais

da Informa¸c˜ao e Comunica¸c˜ao.

Compreender, utilizar e criar tecnologias digitais de informa¸c˜ao e co-
munica¸c˜ao de forma cr´ıtica, signiﬁcativa, reﬂexiva e ´etica nas diversas
pr´aticas sociais (incluindo as escolares) para se comunicar, acessar e
disseminar informa¸c˜oes, produzir conhecimentos, resolver problemas e
exercer protagonismo e autoria na vida pessoal e coletiva (Brasil – MEC,
2018).

Podemos veriﬁcar que a BNCC direciona para que os estudantes da Educa¸c˜ao

B´asica sejam capazes n˜ao apenas de consumir e utilizar a TDIC, mas tamb´em sejam

criadores de tecnologias digitais. Assim, coloca os estudantes como atores ativos, prota-

gonistas e n˜ao apenas consumidores passivos de tecnologia. E nesse contexto, o desaﬁo

dos educadores ´e enorme, pois devemos questionar e reﬂetir como contribuir para que essa

competˆencia geral seja alcan¸cada. Prepar´a-los para as proﬁss˜oes que ainda nem existem,

usar ou talvez inventar novas tecnologias digitais, e resolver problemas que ainda n˜ao

conhecemos.

Propomos uma discuss˜ao em torno do processo de ensino e aprendizagem de

competˆencias, que caracterizam conhecimentos e habilidades no que diz respeito `a com-

puta¸c˜ao e tecnologias digitais da informa¸c˜ao e comunica¸c˜ao. Nesse sentido, os referenciais

propostos pela BNCC destacam conhecimentos de Ciˆencia da Computa¸c˜ao (CC) em trˆes

dimens˜oes: pensamento computacional, mundo digital e cultura digital. Possibilitando

compreender como funciona e como criar tecnologias digitais, assim como o desenvolvi-

mento de competˆencias indispens´aveis para a resolu¸c˜ao de problemas.

Diante do exposto, essas trˆes dimens˜oes detalham conhecimentos de computa¸c˜ao

que consideramos importantes na forma¸c˜ao dos estudantes. Buscando conceituar e alinhar

as deﬁni¸c˜oes das dimens˜oes, consultamos `a BNCC e a Sociedade Brasileira de Computa¸c˜ao

(SBC), e podemos ent˜ao deﬁnir:

– Cultura digital ´e a rela¸c˜ao interdisciplinar da tecnologia com outras ´areas do co-

2

nhecimento, buscando promover a ﬂuˆencia no uso do conhecimento computacional,

ou seja, compreende as rela¸c˜oes humanas mediadas por tecnologias e comunica¸c˜oes

digitais;

– Mundo digital envolvem conhecimentos de componentes f´ısicos e virtuais e assim,

possamos transmitir a informa¸c˜ao de maneira segura, compreendendo a importˆancia

de codiﬁcar, armazenar e proteger a informa¸c˜ao. Logo, representa o conjunto de

conhecimentos relacionados ao funcionamento dos computadores e suas tecnologias,

em especial as redes e internet;

– Pensamento computacional envolve capacidade de compreender, sistematizar,

representar, analisar e resolver problemas, por meio do desenvolvimento de algo-

ritmo. O pensamento computacional se refere `a capacidade de resolver problemas,

utilizando para isso, conhecimento e pr´atica de computa¸c˜ao.

Haja vista, as deﬁni¸c˜oes das dimens˜oes, chegamos ao objeto de estudo desse

trabalho, o pensamento computacional e o seu principal foco a resolu¸c˜ao de problemas,

mediante a elabora¸c˜ao de algoritmo. Para chegar a resolu¸c˜ao de um problema, o estudante

requer entendimento sobre o assunto e para tal compreens˜ao, os alunos precisam mobilizar

conhecimentos e a capacidade de gerenciar informa¸c˜oes, sistematizar, analisar, estabelecer

estrat´egias e, dessa forma, utilizar mecanismos que s˜ao essenciais na busca por solu¸c˜oes

de problemas. E todo esse processo possibilita ao estudante ampliar seu conhecimento

matem´atico, bem como sua vis˜ao sobre os problemas, desenvolvendo sua autoconﬁan¸ca e

tornando-o cidad˜ao cr´ıtico, ciente de suas responsabilidades sociais.

Podemos destacar como objetivos desta pesquisa, buscar introduzir e aplicar os

conte´udos relativos ao pensamento computacional abordados na Educa¸c˜ao B´asica pela

Base Nacional Comum Curricular; trazer propostas de atividades que possam ser aplicadas

aos estudantes na constru¸c˜ao de algoritmos, para solucionar situa¸c˜oes vivenciadas em

nosso cotidiano. Nesta disserta¸c˜ao, pretendemos fazer uso de tecnologias digitais para

aprimorar os aspectos did´aticos envolvendo novas ferramentas metodol´ogicas, como a

metodologia de jogos.

No primeiro cap´ıtulo, introduziremos um breve relato sobre o construcionismo e

o pensamento computacional com seus quatro pilares. Buscando conceituar e mostrar a

sua importˆancia no desenvolvimento de competˆencias como a resolu¸c˜ao de problemas e,

3

assim, justiﬁcando a sua ado¸c˜ao na Educa¸c˜ao B´asica brasileira.

No cap´ıtulo seguinte, destacamos alguns benef´ıcios de se trabalhar com o pensa-

mento computacional, como por exemplo, a compreens˜ao do mundo e a qualiﬁca¸c˜ao de

proﬁssionais para suprir a crescente demanda.

No terceiro cap´ıtulo, dialogamos sobre o panorama da ado¸c˜ao do pensamento

computacional por pa´ıses no mundo, com as a¸c˜oes de governos, empresas sem ﬁns lucra-

tivos e algumas iniciativas privadas.

No quarto cap´ıtulo, discorremos sobre algumas metodologias ativas que poder˜ao

ser trabalhadas para introduzir conceitos do pensamento computacional, como a apren-

dizagem baseada em jogos e resolu¸c˜ao de problemas.

No quinto cap´ıtulo, falamos sobre o algoritmo, detalhando os conceitos, as carac-

ter´ısticas, forma de represent´a-lo (ﬂuxograma, pseudoc´odigo) e apresenta¸c˜ao do programa

Visualg. Nele, ´e exposta a estrutura b´asica do algoritmo: declara¸c˜ao de vari´aveis, coman-

dos de entrada e sa´ıda de dados, os desvios condicionais e as estruturas de repeti¸c˜ao.

No sexto cap´ıtulo, destacamos sugest˜oes de algumas propostas de atividades com

o enfoque metodol´ogico destacado neste trabalho, com o objetivo auxiliar o professor de

Matem´atica na aplica¸c˜ao do pensamento computacional em sua sala de aula.

Este trabalho, portanto, procura apresentar ao leitor uma vis˜ao geral sobre o

pensamento computacional: seus conceitos, benef´ıcios, panorama mundial, sugest˜oes de

abordagens metodol´ogicas e propostas de atividades que podem ser trabalhadas no ensino

fundamental I e II.

4

Cap´ıtulo 1

Construcionismo e pensamento

computacional

Em 1980, Seymour Papert, publicou o livro “Mindstorms: children, computers,

and powerful ideas”, em portuguˆes “Tempestades mentais: crian¸cas, computadores e ideias

poderosas”, ele relata `a ascens˜ao do computador pessoal e quantas pessoas o idealizaram

permeando a vida dom´estica e os neg´ocios. No entanto, Papert (1980) estava pensando

al´em dessas fun¸c˜oes, em “como os computadores podem afetar a maneira como as pessoas

pensam e aprendem”.

Papert, professor PhD em Matem´atica, foi um dos educadores mais conhecidos

pelo uso do computador na educa¸c˜ao, criador da linguagem de programa¸c˜ao Logo em

1967, que procura introduzir conhecimentos de programa¸c˜ao para crian¸cas ou adolescen-

tes. O Logo ´e um ambiente que envolve uma tartaruga gr´aﬁca, uma esp´ecie de robˆo pronto

para responder aos comandos do usu´ario. Sendo adotada em todo o mundo para uso de

tecnologias digitais na educa¸c˜ao. Alguns anos antes, no per´ıodo de 1958 a 1963, Papert

trabalhou em Genebra na Su´ı¸ca, com Jean Piaget, um psic´ologo do desenvolvimento e

aprendizagem das crian¸cas, mais conhecido por ser o pioneiro da teoria da aprendiza-

gem conhecida como construtivismo: em que os alunos constroem novos conhecimentos a

partir da intera¸c˜ao de suas experiˆencias com conhecimentos anteriores.

Por sua vez, por volta da d´ecada de 1980, Papert valendo-se de sua experiˆencia, de

suas pesquisas e dos estudos de outros autores, desenvolveu a teoria do construcionismo.

Acrescentando `a no¸c˜ao de que a aprendizagem ´e aprimorada quando o aluno constr´oi

seu conhecimento a partir do “fazer”, por interm´edio de alguma ferramenta, como por

5

exemplo, o computador. Para ele a educa¸c˜ao poderia se favorecer do computador para

ensinar n˜ao apenas Matem´atica, mas qualquer disciplina. Assim, muitos conceitos que

parecem long´ınquos do mundo real poderiam ser analisados e materializados por meio da

programa¸c˜ao. Para construir um algoritmo que resolva um problema ´e necess´ario que o

estudante conhe¸ca o problema nos m´ınimos detalhes e consiga, a partir disso, criar um

modelo de todo o processo de funcionamento, levando assim a uma concep¸c˜ao de conceitos

e rela¸c˜oes envolvidas.

Para Papert (1972), o computador n˜ao ´e apenas um equipamento para realizar

a manipula¸c˜ao de s´ımbolos ou meramente uma m´aquina instrucional, ele considera que

o computador permite a constru¸c˜ao do conhecimento por meio do aprender - fazendo e

pensar sobre o que est´a fazendo, possibilitando uma a¸c˜ao reﬂexiva do estudante sobre um

resultado alcan¸cado e sobre o seu pr´oprio pensamento.

No entanto, o termo pensamento computacional(PC) popularizou-se com a pu-

blica¸c˜ao de um artigo na revista Communications of the ACM, muito inﬂuente no ˆambito

acadˆemico da Computa¸c˜ao, por Jeannette Wing em 2006, em que ela trouxe um olhar

como cientista da computa¸c˜ao. Wing (2006), em seu texto, apresenta uma compara¸c˜ao

da Ciˆencia da Computa¸c˜ao com as habilidades formativas b´asicas de leitura, escrita e

aritm´etica, colocando-a na categoria de conhecimento b´asico. Assim, a Ciˆencia da Com-

puta¸c˜ao ´e um conjunto de habilidades e atitudes que todos deveriam aprender a utilizar,

ou seja, ´e uma habilidade fundamental para qualquer um, n˜ao apenas para o cientista da

computa¸c˜ao. Com ˆenfase na utiliza¸c˜ao de conceitos fundamentais da computa¸c˜ao (abs-

tra¸c˜ao, decomposi¸c˜ao, recurs˜ao, algoritmo, simula¸c˜ao, entre outros) para a resolu¸c˜ao de

problemas.

Assim, vale destacar que o termo pensamento computacional n˜ao pode ser con-

fundido com a simples aptid˜ao de manuseio de tecnologias digitais, o que poderia ser

deﬁnido como alfabetismo digital. Logo pensamento computacional n˜ao se trata, por

exemplo, de saber veriﬁcar ou enviar e-mail, Short Message Service (SMS) ou mensagem

por aplicativo; realizar a digita¸c˜ao de um documento ou criar uma planilha eletrˆonica com

f´ormulas e gr´aﬁcos. Blikstein (2008), traz um pensamento mais cr´ıtico sobre a utiliza¸c˜ao

da TDIC na educa¸c˜ao.

6

Infelizmente, na maioria de nossas escolas, o que se faz ´e “adestramento
digital” e ao custo de milh˜oes de reais. Pior, estamos ensinando nossos
alunos que a tecnologia serve para recombinar informa¸c˜oes j´a existentes,
e n˜ao para criar conhecimento novo. E o conhecimento novo n˜ao est´a na
internet, facilmente encontr´avel em um mecanismo de busca com meia
d´uzia de palavras-chave. Ele est´a por ser descoberto (Blikstein, 2008).

Nesse sentido, e diante da complexidade nos processos utilizados pelas ind´ustrias

e com´ercios, o proﬁssional precisa de habilidades e atitudes que v˜ao muito al´em da alfa-

betiza¸c˜ao digital, precisam estar preparados para criar novas tecnologias e possibilidades.

Quando ´e ensinado linguagem para um estudante do ensino b´asico, n˜ao temos a inten¸c˜ao

de que ele seja um escritor, romancista, poeta, mas estamos propiciando habilidades es-
senciais para que ele seja um cidad˜ao participativo e cr´ıtico. ´E senso comum, todos

concordam que saber ler e escrever ´e fundamental, assim como as habilidades relaciona-

das `a Matem´atica. O problema ´e que o mundo atual exige muito mais do que ler, escrever,

adicionar e subtrair. Para Barba e Solomon (2016), ainda que a maioria das pessoas n˜ao

queiram ser um cientista da computa¸c˜ao, no entanto, todos podem usar computadores

como uma extens˜ao de sua mente, para experimentar, criar e descobrir.

Segundo Freire (2019), a educa¸c˜ao deve atender as necessidades de independˆencia

da consciˆencia do estudante, possibilitando a sua inser¸c˜ao na cultura e dando-lhe o direito

de se apropriar das tecnologias, para que possa utiliz´a-las tamb´em como um instrumento

de sua emancipa¸c˜ao enquanto ser humano cr´ıtico.

Nesse sentido, a escola deve ser um local para trabalhar em prol da equidade,

permitindo aos estudantes que n˜ao tenham acesso `a tecnologia, consigam na escola de-

senvolver habilidades e conhecimentos necess´arios para apoderar-se dessas tecnologias.

Oportunizando, o ensino democr´atico e, dessa forma, possibilitando que os alunos sejam

capazes de agir no mundo cada vez mais digital. Equipar os jovens com a habilidade

de enfrentar problemas complexos, com ferramentas inteligentes, ir´a equip´a-los para uma

vida inteira de contribui¸c˜ao na constru¸c˜ao de uma sociedade mais justa e igualit´aria.

O pensamento computacional pode ser empregado tanto na resolu¸c˜ao de proble-

mas b´asicos do cotidiano, como a elabora¸c˜ao de uma lista de compras ou colocar as roupas

sujas para lavar, quanto na resolu¸c˜ao de problemas mais complexos, como por exemplo:

quais rotas podem ser feitas para obtermos um menor deslocamento poss´ıvel em entregas

para uma empresa de log´ıstica. Segundo Blikstein (2008), pensamento computacional ´e

saber utilizar o computador como um instrumento para aumentar o poder cognitivo e

7

operacional humano, aumentando a nossa produtividade, inventividade e criatividade.

Wing (2011), almejando criar uma deﬁni¸c˜ao mais clara para o termo PC, pu-

blicou outro artigo, que deﬁniu assim: pensamento computacional s˜ao os processos de

pensamentos envolvidos na formula¸c˜ao de problemas e suas solu¸c˜oes, para que estas se-

jam representadas de uma maneira que possam ser efetivamente executadas por um agente

de processamento de informa¸c˜oes.

Outra deﬁni¸c˜ao importante do termo pensamento computacional, foi na pu-

blica¸c˜ao da International Society for Technology in Education, ISTE (2016), que deﬁne o

pensamento computacional como uma forma de desenvolver e empregar estrat´egias para

compreender e resolver problemas de forma a aproveitar o poder dos m´etodos tecnol´ogicos

para desenvolver e testar solu¸c˜oes.

Para Brackmann (2017) em sua tese de doutorado da Universidade Federal do

Rio Grande do Sul (UFRGS), propˆos a seguinte deﬁni¸c˜ao para o termo Pensamento Com-

putacional (PC):

O pensamento computacional ´e uma distinta capacidade criativa, cr´ıtica
e estrat´egica humana de saber utilizar os fundamentos da Computa¸c˜ao,
nas mais diversas ´areas do conhecimento, com a ﬁnalidade de identiﬁcar
e resolver problemas, de maneira individual ou colaborativa, atrav´es de
passos claros, de tal forma que uma pessoa ou uma m´aquina possam
execut´a-los eﬁcazmente (Brackmann, 2017).

Segundo o Centro de Inova¸c˜ao para a Educa¸c˜ao Brasileira, CIEB (2018), pensa-

mento computacional refere-se `a capacidade de resolver problemas a partir de conheci-

mentos e pr´aticas da computa¸c˜ao, englobando sistematizar, representar, analisar e resolver

problemas.

A BNCC publicada em Brasil – MEC (2018), nos traz uma deﬁni¸c˜ao do termo

pensamento computacional: “envolve as capacidades de compreender, analisar, deﬁnir,

modelar, resolver, comparar e automatizar problemas e suas solu¸c˜oes, de forma met´odica

e sistem´atica, por meio do desenvolvimento de algoritmos”.

´E necess´ario utilizar o pensamento computacional para que possamos estruturar

os problemas e encontrarmos solu¸c˜oes para os mesmos. Para nos auxiliar nesse pro-

cesso, descreveremos os quatro pilares do PC: decomposi¸c˜ao, reconhecimento de padr˜oes,

abstra¸c˜ao e algoritmo. Assim, para se alcan¸car a resolu¸c˜ao de problemas, torna-se ne-

cess´ario identiﬁc´a-lo como um todo, dividir em partes menores e mais f´aceis de solucionar

(decomposi¸c˜ao). Posteriormente, identiﬁcar nas partes menores os problemas que s˜ao

8

semelhantes, e assim, aplicar a mesma solu¸c˜ao (reconhecimento de padr˜oes), para isso

devemos utilizar a capacidade abstra¸c˜ao e identiﬁcar as informa¸c˜oes que s˜ao realmente

relevantes para o problema. Finalizando com os passos e etapas (algoritmo) que precisam

ser executados para a solu¸c˜ao de cada um dos subproblemas.

Na Figura 1.1, podemos observar os quatro pilares que formam a estrutura do

pensamento computacional.

Figura 1.1: Os quatro pilares do pensamento computacional.

Todos os pilares tˆem a sua importˆancia durante o percurso de resolu¸c˜ao de um

determinado problema, auxiliando para que alcancemos uma solu¸c˜ao computacionalmente

vi´avel. Assim, resta nos esclarecer qual o papel de cada um dos pilares.

1.1 Abstra¸c˜ao

Em nosso cotidiano, frequentemente precisamos organizar objetos ou processos

de forma conveniente, para que se atinja o determinado objetivo, e a abstra¸c˜ao ´e um

elemento fundamental para isso. Assim, podemos denominar a abstra¸c˜ao como uma a¸c˜ao

de selecionar caracter´ısticas de um objeto ou processo que devem ser considerados para

satisfazer uma ﬁnalidade. A habilidade est´a em escolher as caracter´ısticas corretas para

que o problema se torne mais f´acil, sem perder nada que seja importante.

Assim, esse pilar envolve a ﬁltragem dos dados e sua classiﬁca¸c˜ao, desconsiderando

elementos que n˜ao s˜ao essenciais e focando apenas nos que s˜ao relevantes, tornando os

9

problemas mais f´acies de serem solucionados. Atrav´es dessa t´ecnica, consegue-se criar

uma representa¸c˜ao abstrata do que se quer resolver. Segundo CAS (2014), o dif´ıcil ´e

escolher o que ser´a considerado irrelevante, para que o problema se torne mais f´acil de ser

compreendido, sem perder nenhuma informa¸c˜ao relevante.

Podemos entender a abstra¸c˜ao como uma etapa fundamental para alcan¸carmos a

solu¸c˜ao de um problema, tendo em vista que permite simpliﬁcar a realidade e representar

apenas aspectos relevantes do problema. Segundo Raabe et al. (2020), no contexto do

pensamento computacional, a abstra¸c˜ao compreende os seguintes aspectos:

– Dados: informa¸c˜oes de entrada e sa´ıda, que permitem descrever os dados envolvidos

na solu¸c˜ao de um problema;

– Processos: etapa e procedimento necess´arios para deﬁnir os algoritmos que descre-

vem a solu¸c˜ao de um problema;

– T´ecnicas de constru¸c˜ao de algoritmos: permitem construir a solu¸c˜ao de problemas

mais complexos.

Para Liukas (2016), a abstra¸c˜ao ´e o processo de separar detalhes que n˜ao s˜ao

necess´arios para se concentrar nas coisas que s˜ao precisas. Por exemplo, um mapa do

metrˆo ´e uma abstra¸c˜ao do mundo real e complexo, da mesma forma um calend´ario ´e uma

abstra¸c˜ao do tempo.

1.2 Decomposi¸c˜ao

Muitas vezes, para chegarmos a solu¸c˜ao de um problema ´e mais f´acil quando o

dividimos em subproblemas, ou melhor dizendo, em problemas menores. Liukas (2016)

deﬁne a decomposi¸c˜ao como um processo pelo qual os problemas s˜ao quebrados em partes

menores. Ela exempliﬁca isto atrav´es da decomposi¸c˜ao de refei¸c˜oes, receitas culin´arias e

as fases que comp˜oem um jogo. Assim, os programadores costumam quebrar um problema

complexo em partes menores, que s˜ao mais f´aceis de entender e manter.

Contudo, o processo de decomposi¸c˜ao pode ser utilizado em nosso cotidiano,

como por exemplo, quando um professor precisa realizar um planejamento de uma aula.

Se dividirmos o planejamento em partes, ele pode ser facilmente elaborado. Vejamos

algumas poss´ıveis divis˜ao:

10

– Identiﬁca¸c˜ao do tema da aula;

– Deﬁni¸c˜ao de objetivos educacionais;

– Identiﬁca¸c˜ao dos conte´udos;

– Estabelecer a metodologia;

– Deﬁnir o cronograma;

– Levantamento do conhecimento pr´evio dos alunos;

– Proposta de atividades individuais e cooperativas;

– Planejamento da avalia¸c˜ao das aprendizagens.

Quando um problema n˜ao est´a decomposto, sua resolu¸c˜ao ´e muito mais dif´ıcil.

Segundo Brackmann (2017), quando a decomposi¸c˜ao ´e aplicada a elementos f´ısicos, como

por exemplo, consertar uma bicicleta atrav´es da decomposi¸c˜ao de suas partes, `a manu-

ten¸c˜ao torna-se mais f´acil. Haja vista, que se o objeto n˜ao pudesse ser dividido em partes

menores o conserto ﬁcaria invi´avel, sendo somente poss´ıvel a substitui¸c˜ao da bicicleta

como um todo.

Para Raabe et al. (2020), a decomposi¸c˜ao ´e a t´ecnica mais importante para so-

lucionar um problema. E consiste em separar o problema em problemas menores, soluci-

onando e depois combinando as solu¸c˜oes para chegarmos `a solu¸c˜ao original do problema.

Na ﬁgura 1.2, podemos observar o processo de decomposi¸c˜ao de um problema em pro-

blemas menores, at´e que todos os subproblemas sejam resolvidos e, assim, tenhamos a

solu¸c˜ao do problema como um todo.

11

Figura 1.2: Processo de decomposi¸c˜ao - divis˜ao e conquista.

Essa t´ecnica em computa¸c˜ao ´e conhecida como divis˜ao e conquista, foi utilizada

pela primeira vez por Anatolii Karatsuba em 1960 no algoritmo de karatsuba. Ele criou

o primeiro m´etodo para a multiplica¸c˜ao de n´umeros, especialmente n´umeros grandes.

Quebrando o problema em subproblemas que s˜ao similares ao problema original, recur-

sivamente resolve os subproblemas e, ﬁnalmente, combina as solu¸c˜oes para resolver o

problema original.

1.3 Reconhecimento de padr˜oes

O h´abito de identiﬁcar padr˜oes nos acompanha desde o nosso nascimento. Trata-

se de um processo de constru¸c˜ao continuada e o nosso repert´orio de padr˜oes ´e crescente.

Assim, ao nos depararmos com um novo problema ´e muito comum adotarmos um padr˜ao

de comportamento para abord´a-lo e, com isso, obtemos uma maneira de resolver novos

problemas rapidamente com base em problemas anteriores que resolvemos. Desta forma,

sempre que tivermos que resolver um problema novo, aplicamos os mesmos processos

j´a utilizados em solu¸c˜oes gen´ericas. Podemos encontrar na literatura a associa¸c˜ao de

reconhecimento de padr˜oes ao termo generaliza¸c˜ao.

Reconhecimento de padr˜oes permite construir uma solu¸c˜ao mais gen´erica a partir

12

de outra e, dessa forma, um algoritmo pode ser utilizado em outro contexto. Segundo

Raabe et al. (2020), reutilizar e adaptar algoritmos ´e fundamental e exige um grande

poder de abstra¸c˜ao. Problemas que `a primeira vista parece totalmente diferentes podem

ser solucionados pelo mesmo algoritmo, apenas com pequenas adapta¸c˜oes.

Para Liukas (2016), reconhecimento de padr˜oes ´e o processo de encontrar seme-

lhan¸cas e padr˜oes para resolver problemas complexos com mais eﬁciˆencia. Para encontrar

padr˜oes nos problemas procuramos coisas que s˜ao iguais ou muito semelhantes em cada

problema. Assim, ao realizar `a decomposi¸c˜ao de um problema complexo, provavelmente

encontraremos semelhan¸cas entre os subproblemas gerados. Dessa forma, podemos en-

tender o processo de reconhecimento de padr˜oes como a associa¸c˜ao de algum objeto ou

parte dele, palp´avel ou n˜ao, com padr˜oes familiares que permitam identiﬁcar e classiﬁcar.

Brackmann (2017), traz um exemplo pr´atico da aplica¸c˜ao da t´ecnica de reconhe-

cimento de padr˜oes, identiﬁcando semelhan¸cas entre ra¸ca de cachorros. Eles possuem

alguns atributos como os olhos, pelo, rabo, entretanto, suas caracter´ısticas podem ser

diferentes como a cor dos olhos, a tipologia da pelagem e o comprimento do rabo. No

pensamento computacional, estas caracter´ısticas s˜ao chamadas de padr˜oes.

1.4 Algoritmo

A palavra algoritmo, segundo o dicion´ario Oxford ´e aplicada nas ´areas de Ma-

tem´atica e Computa¸c˜ao. Na esfera da Matem´atica ´e deﬁnida como sequˆencia ﬁnita de

regras, racioc´ınios ou opera¸c˜oes, que aplicada a um n´umero ﬁnito de dados, permite solu-

cionar classes semelhantes de problemas. Na Computa¸c˜ao, est´a associada a um conjunto

de regras e procedimentos l´ogicos perfeitamente deﬁnidos que levam `a solu¸c˜ao de um

problema, em um n´umero ﬁnito de etapas.

Dessa forma, podemos deﬁnir um algoritmo como um conjunto de etapas es-

pec´ıﬁcas que vocˆe pode seguir para resolver um problema, sendo que para chegarmos `a

solu¸c˜ao do problema j´a passamos pelo processo de abstra¸c˜ao, decomposi¸c˜ao e reconheci-

mento de padr˜oes. O algoritmo ´e um pilar que agrega todos os demais, assim podemos

entender como uma forma de chegar a uma solu¸c˜ao por meio da deﬁni¸c˜ao clara das etapas

necess´arias - nada acontece por acaso.

Para Liukas (2016), algoritmo ´e um conjunto de passos espec´ıﬁcos usado para

13

solucionar um problema e n˜ao deve ser confundido com o termo programa que foi deﬁ-

nido como sendo “uma sequˆencia de instru¸c˜oes precisas escritas em uma linguagem que

computadores compreendam” (Liukas, 2016). O algoritmo pode ser entendido como sendo

um conjunto de regras ou instru¸c˜oes que se forem seguidas com precis˜ao, levam `a resposta

tanto do problema original, como de problemas similares. Em um algoritmo, as instru¸c˜oes

s˜ao ordenadas e descritas para que seja atingido um determinado objetivo, podendo para

tal, ser escrita em formato de diagrama ou pseudoc´odigo (linguagem humana).

Na escola, desde os anos iniciais aprendemos a utilizar algoritmos como por exem-

plo, algoritmo da adi¸c˜ao, entre tantos outros. E se n´os conseguirmos seguir os passos de

execu¸c˜ao do algoritmo, chegaremos a resposta para qualquer problema que necessite so-

mar dois n´umeros quaisquer. Logo, se soubermos o algoritmo, n˜ao precisamos descobrir

como realizar uma adi¸c˜ao sempre que nos deparamos com um novo problema. E ´e isso que

torna o algoritmo t˜ao importante, a sua capacidade de automatizar as tarefas. Na Figura

1.3, ´e apresentado um exemplo de adi¸c˜ao de dois n´umeros, em que ´e poss´ıvel identiﬁcar

uma sequˆencia de passos necess´arios para atingir o resultado.

Figura 1.3: Algoritmo da adi¸c˜ao.

Essencialmente, os algoritmos s˜ao procedimentos que realizados passo a passo e

ordenadamente, pode solucionar um problema. Utilizado em diversas ´areas do conhe-

cimento, ´e uma estrat´egia muito importante, tendo em vista que o computador pode

realizar compara¸c˜oes e opera¸c˜oes matem´aticas em uma velocidade gigantesca e, assim,

com a utiliza¸c˜ao de um algoritmo adequado podemos chegar a resultados almejados.

14

Cap´ıtulo 2

Benef´ıcios do pensamento

computacional

Para Brackmann (2017), os esfor¸cos para tornar o pensamento computacional

uma habilidade b´asica para qualquer pessoa surgiu devido a diferentes raz˜oes. Como por

exemplo: emprego, compreender o mundo, alfabetiza¸c˜ao digital, produtividade, transver-

salidade em diferentes ´areas, inclus˜ao de minorias, trabalhar em equipe, entre outras.

Atualmente, empresas l´ıderes no mercado de tecnologia necessitam cada vez mais

de proﬁssionais com conhecimento em computa¸c˜ao. Proﬁss˜oes que antigamente n˜ao ne-

cessitavam de conhecimentos s´olidos em computa¸c˜ao como: Ciˆencias, Engenharia, Ma-

tem´atica, Biologia e Medicina, hoje, precisam cada vez mais.

Nesse contexto, o tema tem despertado interesse de governantes e de empresas de

tecnologias, como Microsoft, Google e Facebook; que procuram fomentar o pensamento

computacional mediante diferentes iniciativas. Podemos citar um evento promovido pelo

ent˜ao presidente dos Estados Unidos da Am´erica (EUA), Barack Obama, “Computer

Science For All” em 2016, que visava formar estudantes americanos em habilidades com-

putacionais de que precisam para prosperar em uma economia digital.

Por outro lado, a comunidade acadˆemica tem vivenciado uma urgˆencia em prepa-

rar os estudantes para um mundo cada vez mais digital, em que ´e necess´ario n˜ao apenas

utilizar os recursos tecnol´ogicos como tamb´em ser capazes de compreender e criar novas

tecnologias. Logo, iniciativas ligadas somente ao ensino de programa¸c˜ao usando apenas

os argumentos relacionados a preencher vagas no mercado de trabalho trata-se de uma

vis˜ao muito limitada. Considerando que podemos tamb´em destacar como benef´ıcio do

15

pensamento computacional a compreens˜ao do mundo.

Grover e Pea (2013), ap´os ampla revis˜ao bibliogr´aﬁca, resumiram em nove ele-

mentos que o PC tende a atender para apoiar a aprendizagem dos alunos de forma inter-

disciplinar, bem como avaliar o seu desenvolvimento, no que se refere `a:

– Abstra¸c˜ao e reconhecimento de padr˜oes (incluindo modelos e simula¸c˜oes);

– Processamento sistem´atico da informa¸c˜ao;

– Sistema de s´ımbolos e representa¸c˜oes;

– No¸c˜oes de controle de ﬂuxo em algoritmos;

– Decomposi¸c˜ao de problemas estruturados (modulariza¸c˜ao);

– Pensamento iterativo, recursivo e paralelo;

– L´ogica condicional;

– Eﬁciˆencia e restri¸c˜oes de desempenho;

– Depura¸c˜ao e detec¸c˜ao de erro sistem´atico.

O pensamento computacional est´a se tornando a nova alfabetiza¸c˜ao do s´eculo

21. Podemos dizer que se apropriando do pensamento computacional ´e poss´ıvel adap-

tar a computa¸c˜ao `as nossas necessidades. Segundo Cuny et al. (2010), os benef´ıcios do

pensamento computacional para todos signiﬁcam ser capaz de:

– Entender quais aspectos de um problema s˜ao pass´ıveis de computa¸c˜ao;

– Avaliar a correspondˆencia entre as ferramentas e t´ecnicas computacionais e um

problema;

– Compreender as limita¸c˜oes e o poder das ferramentas e t´ecnicas computacionais;

– Aplicar ou adaptar uma ferramenta ou t´ecnica computacional para um novo uso;

– Reconhecer uma oportunidade de usar a computa¸c˜ao de uma nova maneira;

– Aplicar estrat´egias computacionais como dividir e conquistar em qualquer dom´ınio.

16

Cap´ıtulo 3

Panorama do pensamento

computacional

Ap´os os avan¸cos tecnol´ogicos e automatiza¸c˜ao ocorrida na ind´ustria e na agri-

cultura, estudos direcionam para que o pr´oximo setor que ser´a afetado ´e o de presta¸c˜ao

de servi¸co. Segundo pesquisas publicadas pela Mckinsey e Company (2020) apontam

que mais da metade dos postos de trabalho correm alto risco de serem automatizados na

pr´oxima d´ecada. E isso ´e um processo que est´a ocorrendo em todo o mundo, e temos

como grande desaﬁo a recoloca¸c˜ao desses trabalhadores em proﬁss˜oes que est˜ao surgindo,

logo, o dilema que se apresenta ´e preparar esses trabalhadores e estudantes para essas

novas proﬁss˜oes.

O interesse e entusiasmo em torno do pensamento computacional cresceu al´em

da educa¸c˜ao superior. Assim projetos mais recentes est˜ao focados em incorporar o pen-

samento computacional desde o jardim de infˆancia e por todo o Ensino B´asico.

Em muitos pa´ıses do mundo, o pensamento computacional e a Ciˆencia da Com-

puta¸c˜ao est˜ao no topo da agenda de reforma curricular na Educa¸c˜ao B´asica. Haja

vista, que o uso de habilidades da ´area da Computa¸c˜ao possui benef´ıcios educacionais e

econˆomicos, pois al´em de atender a demanda por proﬁssionais com boa forma¸c˜ao, permite

que os alunos compreendam o mundo, desenvolvendo habilidades de reﬂex˜ao e resolu¸c˜ao

de problemas.

Nos ´ultimos anos, v´arios pa´ıses tomaram medidas para incorporar de alguma

forma a Ciˆencia da Computa¸c˜ao ou o pensamento computacional em seus curr´ıculos esco-

lares. Como por exemplo, EUA, Canad´a, Finlˆandia, Reino Unido, Austr´alia, Argentina,

17

Chile, ´Africa do Sul, Emirados ´Arabes, Iraque, Singapura, China, Cor´eia do Sul, Turquia

e Portugal. Sendo que alguns deles, colocaram a Ciˆencia da Computa¸c˜ao em condi¸c˜oes

de igualdade com outras disciplinas acadˆemicas, outros pa´ıses buscam implement´a-las em

conjunto com outras disciplinas.

Nos Estados Unidos, conhecimentos relacionados com a computa¸c˜ao, inicialmente

eram trabalhados pela disciplina de Matem´atica, por´em no ano de 2015 foi assinado a lei

federal Every Student Succeeds Act (ESSA), respons´avel pelas pol´ıticas p´ublicas na ´area

educacional no pa´ıs. ESSA busca incluir disposi¸c˜oes para ajudar a garantir o sucesso

de alunos e escolas. Dentre diversos pontos, a lei coloca a Ciˆencia da Computa¸c˜ao em

condi¸c˜oes de igualdade com outras disciplinas acadˆemicas, como Matem´atica, Geograﬁa,

Hist´oria e Ciˆencias.

No Reunido Unido desde 2014, o ensino de programa¸c˜ao ´e obrigat´orio no Ensino

B´asico. Os alunos tˆem contato com a nova disciplina a partir dos cinco anos de idade,

cujo objetivo nessa faixa et´aria n˜ao ´e aprender a programar, mas conhecer a l´ogica de

programa¸c˜ao para realizar tarefas simples. Na tabela 3.1, trouxemos um pequeno resumo

da implementa¸c˜ao da computa¸c˜ao na modalidade do Ensino B´asico, em diversos pa´ıses.

Tabela 3.1: Ado¸c˜ao do pensamento computacional

Pa´ıs

Ano

Ensino Fundamental

Ensino M´edio

Facultativo Compuls´orio Facultativo Compuls´orio

Alemanha
Argentina
Austr´alia
Cor´eia do Sul
Estados Unidos
Finlˆandia
Fran¸ca
Gr´ecia
Iraque
Portugal
Reino Unido

2004
2015
2015
2007
2015
2016
2016
1993
1976
2012
2014

X
X

X

X

X

X
X
X
X

X
X

X

X

X

X
X

X
Fonte: Adapta¸c˜ao de (Raabe et al., 2020, pg.42).

X
X

No Brasil, desde publica¸c˜ao da BNCC (2018), a Computa¸c˜ao (pensamento com-

putacional, mundo digital e a cultura digital) n˜ao aparece como uma disciplina, mas est´a

elencada de uma maneira transversal, sendo principalmente citada na disciplina de Ma-

tem´atica. No entanto, a BNCC n˜ao detalha como ser´a realizada essa implementa¸c˜ao da

computa¸c˜ao nas disciplinas.

18

Em meio ao processo de aprimoramento da Educa¸c˜ao B´asica no Brasil, norte-

adas pelas propostas da BNCC, o Centro de Inova¸c˜ao para a Educa¸c˜ao Brasileira est´a

propondo um Curr´ıculo de Referˆencia em Tecnologia e Computa¸c˜ao para as escolas de En-

sino Fundamental. Tal curr´ıculo, tem como objetivo apoiar as redes de ensino e as escolas

incluir os temas tecnol´ogicos e computacionais em suas propostas curriculares, buscando

alinhar `as competˆencias gerais e `as habilidades da BNCC. O Curr´ıculo de referˆencia do

Centro de Inova¸c˜ao para a Educa¸c˜ao Brasileira (CIEB) est´a organizado em trˆes eixos,

como podemos observar na ﬁgura 3.1, cada um com seus conceitos.

Figura 3.1: Trˆes eixos tecnol´ogicos. Fonte: Curr´ıculo de Referˆencia CIEB (2018).

Iniciativas globais de organiza¸c˜oes sem ﬁns lucrativos, como o Code.org que or-

ganiza a Hora do C´odigo, buscam promover `a Ciˆencia da Computa¸c˜ao, por meio da

introdu¸c˜ao de conceitos de programa¸c˜ao, em que os participantes buscam desenvolver um

programa (c´odigo) em uma hora. O objetivo do programa ´e levar a CC at´e as escolas,

desmistiﬁcando a programa¸c˜ao e mostrando que qualquer pessoa pode aprender os fun-

damentos b´asicos desta ciˆencia, come¸cando com uma hora de c´odigo. O programa atende

mais de 180 pa´ıses e j´a participaram do evento mais de 100 milh˜oes de alunos.

Iniciativas privadas, como por exemplo o Supergeeks, que foi a primeira escola

de programa¸c˜ao e rob´otica para crian¸cas a partir dos 7 anos de idade. Atualmente o

Supergeeks conta com 54 unidades ou franquias, suas aulas se baseiam na metodologia

ativa para a cria¸c˜ao de jogos, aplica¸c˜oes, rob´otica e empreendedorismo. Podemos destacar

19

tamb´em, Happy Code, Buddys, Crtl + Play, DragonByte, MadCode, entre outras tantas

que buscam trabalhar conceitos de computa¸c˜ao.

Em 2021, na pr´oxima edi¸c˜ao do Programme for International Student Assessment

(PISA), o pensamento computacional j´a estar´a presente. O programa mede o desempenho

dos estudantes de 15 anos, em trˆes dom´ınios b´asicos: leitura, matem´atica e ciˆencias. Vale

lembrar que o seu objetivo ´e ser uma avalia¸c˜ao comparativa que reﬂete a realidade da

educa¸c˜ao mundial e, principalmente, servindo para nortear as novas a¸c˜oes educacionais que

permitam melhorar as pr´aticas pedag´ogicas. E com isso, possibilitar a plena participa¸c˜ao

dos alunos em uma sociedade baseada no conhecimento e dependente das tecnologias

digitais.

Segundo a Organiza¸c˜ao para a Coopera¸c˜ao e Desenvolvimento Econˆomico (OCDE),

o PISA “analisa a capacidade dos alunos de aplicar conhecimentos e as habilidades de

analisar, raciocinar e comunicar-se com eﬁc´acia `a medida que examinam, interpretam e

resolvem problemas” (OCDE, 2020). Dessa forma, o programa busca diagnosticar a ca-

pacidade dos alunos de n˜ao apenas repetir o que aprenderam na escola, mas empregar

conhecimento e habilidade de forma criativa, interdisciplinar e pr´atica.

O Brasil infelizmente n˜ao obteve nenhum avan¸co no desempenho dos estudantes

na disciplina de Matem´atica no PISA, que ´e o ranking mais importante da educa¸c˜ao

mundial, na verdade, o resultado aponta para uma estagna¸c˜ao na ´ultima d´ecada. Segundo

o resultado do PISA divulgado no dia 03/12/2019, o Brasil teve um ligeiro aumento

da nota m´edia, mas os estudantes brasileiros seguem entre os ´ultimos 10 colocados na

avalia¸c˜ao de matem´atica.

Isso nos serve de alerta para que possamos repensar as nossas pr´aticas pedag´ogicas

e curr´ıculos escolares e compreendermos que se faz necess´ario, urgentemente, a imple-

menta¸c˜ao de novas abordagens no processo de ensino aprendizagem. Para Backmann

(2020), um dos obst´aculos que deve ser superado para colocar em pr´atica competˆencias

relacionadas `a computa¸c˜ao, baseia-se na forma¸c˜ao de professores. E que alguns pa´ıses

como o EUA e a Alemanha, encontraram `a solu¸c˜ao para a falta de professores habilitados

para lecionar a disciplina de computa¸c˜ao nas aulas de Matem´atica, e esse modelo pode

ser seguido pelo Brasil.

Segundo o referido autor, o pr´oximo momento seria a oferta de disciplinas volta-

das para a computa¸c˜ao de maneira opcional, possibilitando o acesso dos estudantes aos

20

conceitos do pensamento computacional, para que em uma etapa posterior, essa disciplina

fa¸ca parte do curr´ıculo obrigat´orio nacional. E conclui que desperdi¸car essa oportunidade

seria desfavor´avel para o nosso pa´ıs e acarretaria um preju´ızo incalcul´avel para o nosso

futuro, tendo em vista que as oportunidades de emprego exigem como requisito, um con-

junto de habilidades t´ecnicas inerentes `a computa¸c˜ao.

21

Cap´ıtulo 4

Metodologia de aprendizagem

A docˆencia requer um constante processo de reﬂex˜ao sobre sua pr´atica pedag´ogica,

gerando autocr´ıtica sobre o fazer proﬁssional, e assim, criando novas possibilidades e

metodologias para que aconte¸ca o processo de ensino e aprendizado.

De acordo com Moran e Bacich (2018), desde de que nascemos aprendemos a

partir de situa¸c˜oes concretas, que aos poucos conseguimos ampliar e generalizar (processo

indutivo), e tamb´em aprendemos por meio de ideias ou teorias para test´a-las depois no

concreto (processo dedutivo). Nesse sentido, a aprendizagem por meio da transmiss˜ao ´e

importante, no entanto, o processo de ensino aprendizagem por questionamento e experi-

menta¸c˜ao ´e mais relevante para uma concep¸c˜ao mais ampla e profunda.

Freire (2019) refor¸ca que “ensinar n˜ao ´e simplesmente transferir conhecimento,

mas criar as possibilidades para a sua produ¸c˜ao ou a sua constru¸c˜ao”, respeitando a au-

tonomia do educando. De acordo com o pr´oprio autor, “´e preciso aprender a ser coerente.

De nada adianta o discurso competente se a a¸c˜ao pedag´ogica ´e imperme´avel `as mudan¸cas”.

Diante do exposto, existe uma necessidade dos educadores de criarem as possibilidades

para a produ¸c˜ao ou constru¸c˜ao do conhecimento pelos alunos. Dessa forma, o professor

pesquisador deve repensar e buscar constantemente melhorias nas pr´aticas que norteiam

o campo da Matem´atica, como em qualquer outra ´area do conhecimento.

Mediante o cen´ario atual, com os avan¸cos na TDIC e a populariza¸c˜ao da inter-

net, possibilitou que o acesso `a informa¸c˜ao aconte¸ca em qualquer hora e em qualquer

lugar. Assim, m´etodos tradicionais que privilegiam apenas `a transmiss˜ao de informa¸c˜oes

pelos professores, n˜ao fazem mais sentido. Devemos buscar novas metodologias de ensino

aprendizagem que se alicer¸cam na concep¸c˜ao do aluno como sujeito central e protagonista

22

de seu desenvolvimento educacional.

Nesse sentido, podemos caracterizar as metodologias ativas pela rela¸c˜ao entre

cultura, educa¸c˜ao e sociedade, sendo desenvolvida por meio de m´etodos criativos e, prin-

cipalmente, centrado na a¸c˜ao do fazer do aluno. Assim, se temos o objetivo de propiciar

uma aprendizagem signiﬁcativa, as metodologias devem estar alinhadas com os objetivos

pretendidos. Se aspiramos que os alunos sejam proativos, necessitamos de pr´aticas docen-

tes pautadas em metodologias que tragam o aluno para o centro do processo pedag´ogico.

Envolvendo-o em atividades relacionadas a resolu¸c˜ao de problemas cada vez mais comple-

xos, capacitado `a tomar decis˜oes e avaliar os resultados com apoio da TDIC, tornando-se

assim, protagonista do processo de ensino e aprendizagem. Dentre as diversas metodolo-

gias ativas, destacamos aqui a aprendizagem baseada em jogos e a aprendizagem baseada

em problemas por estarem mais alinhadas aos objetivos do nosso trabalho.

4.1 Aprendizagem baseada em jogos

Aprendizagem baseada em jogos (Games Based Learning (GBL)), trata-se de uma

abordagem que utiliza os jogos, em sua perspectiva l´udica, que transformam os objetos

de aprendizagem em atividades educacionais mais atraentes e prazerosas. Assim, com a

ajuda dos jogos, os alunos s˜ao desaﬁados a testar limites, formular hip´oteses, solucionar

problemas, vencer etapas. Competindo sob normas que regem o jogo, e ditando como

cada jogador deve se comportar para alcan¸car os objetivos propostos.

´E importante destacar aqui a diferen¸ca entre Gamiﬁcation, que ´e transformar

o processo de aprendizagem como um todo em um jogo, e a aprendizagem baseada em

jogos que utiliza um jogo como parte do processo de aprendizagem. Apesar da diferen¸ca,

para o autor de The Gamiﬁcation of Learning and instruction, (Kapp, 2012), o objetivo

de ambos ´e o mesmo tentando resolver um problema, motivar e promover o aprendizado

usando o pensamento e as t´ecnicas baseadas em jogos.

Na aprendizagem baseada em jogos, existem diferentes formas de aplica¸c˜ao dos

jogos em contextos pedag´ogicos, o docente pode utilizar os jogos nos formatos digitais

(computadores, tablet e smartphones) ou f´ısico, plugados ou desplugados, dependendo

dos recursos dispon´ıveis.

Cada vez mais presente nas escolas, essa estrat´egia de aprendizagem encanta e

23

motiva, tornando o processo mais r´apido e prazeroso. A aprendizagem baseada em jogos

´e considerada uma forma eﬁcaz de ensinar novos conceitos `as pessoas, dada a natureza

interativa dos jogos, os desaﬁos, os n´ıveis de diﬁculdades e a progress˜ao. Assim, os jogos

trazem as competˆencias necess´arias para cada etapa, dando informa¸c˜oes indispens´aveis

para que os alunos consigam realizar determinada tarefa.

A ´area de educa¸c˜ao tem elevado potencial de implementa¸c˜ao desse conceito, tendo

em vista que a GBL procura promover a motiva¸c˜ao e o envolvimento dos alunos. No en-

tanto, algumas quest˜oes que envolvem a aprendizagem baseada em jogos devem ser con-

sideradas para determinar a abordagem mais apropriada e que maximize as experiˆencias

de aprendizagem. Nesse contexto, SENAC – Departamento Nacional (2018), nos traz

um alerta que primeiramente ´e indispens´avel analisar o grau de contribui¸c˜ao dos jogos

para o desenvolvimento do processo de aprendizagem, de modo que n˜ao sejam desinteres-

santes e inﬂex´ıveis a ponto de perder o seu car´ater l´udico, tampouco, solto ou de forma

descontextualizada que diﬁculte a reﬂex˜ao sobre qual objeto de aprendizagem.

4.2 Aprendizagem baseada em problemas

A aprendizagem baseada em problemas, em inglˆes Problem Based Learning (PBL)

´e um m´etodo de aprendizagem centrado no aluno, busca mobiliz´a-lo a encontrarem poss´ıveis

solu¸c˜oes, quando estes se deparam com um problema. Em outras palavras, PBL ´e uma

abordagem pedag´ogica que possibilita que os alunos aprendam enquanto se envolvem ati-

vamente com problemas signiﬁcativos. E, dessa forma, prepara os alunos para um mundo

em constante mudan¸ca, que exige pessoas dispostas a resolver novos problemas.

Atualmente, a aprendizagem baseada em problemas tem sido amplamente utili-

zada em diversos campos e contextos educacionais buscando al´em da resolu¸c˜ao de proble-

mas em situa¸c˜oes de aprendizagem reais, o desenvolvimento do pensamento cr´ıtico. Nessa

dire¸c˜ao, a BNCC enfatiza como uma das ﬁnalidades do Ensino M´edio o aprimoramento

do educando como pessoa humana, considerando sua forma¸c˜ao ´etica, o desenvolvimento

da autonomia intelectual e do pensamento cr´ıtico.

Assim, o desenvolvimento da independˆencia propiciado por atividades de re-

solu¸c˜oes de problemas, poder´a contribuir na forma¸c˜ao de um ser humano cr´ıtico, ex-

plorador, criativo e autˆonomo em suas iniciativas. Dante (2003) destaca que estimular o

24

aluno a pensar, desenvolver o racioc´ınio l´ogico, ensinar a enfrentar situa¸c˜oes novas, torna

as aulas mais interessantes e motivadoras.

No entanto, ´e importante tamb´em deixar claro a diferencia¸c˜ao entre o exerc´ıcio

que serve para praticar determinado processo ou algoritmo e a atividade baseada em

resolu¸c˜ao de problemas, que envolve uma situa¸c˜ao em que se busca algo desconhecido e

n˜ao temos previamente nenhum algoritmo que garanta a solu¸c˜ao. Assim, o processo de

resolu¸c˜ao de problemas exige muita criatividade, investiga¸c˜ao, aliada ao conhecimento de

algumas estrat´egias.

Segundo Dante (2003), os problemas propostos aos alunos precisam ser bem es-

colhidos, e para auxiliar devemos observar algumas caracter´ısticas: ser desaﬁador, real e

interessante, sendo que sua resolu¸c˜ao pode ter um ou mais algoritmos. Devemos salientar

ainda que o tempo deve ser o suﬁciente para que os alunos realizem o processo completo

de resolu¸c˜ao do problema. Logo, o professor n˜ao deve dar respostas diretas, precisa incen-

tivar no aluno, o interesse pela investiga¸c˜ao e resolu¸c˜ao do problema. Nessa perspectiva

did´atica, a for¸ca motriz da aprendizagem consiste em despertar o interesse do aluno a

partir de situa¸c˜oes cotidianas, de forma a provocar a reﬂex˜ao.

Conforme a Base Nacional Comum Curricular, a Matem´atica ´e uma ´area do

conhecimento, que disp˜oe de v´arias articula¸c˜oes com o intuito de garantir o relacionamento

do aluno com o mundo real. No Ensino Fundamental, centraliza na compreens˜ao de

conceitos e procedimentos em seus diferentes campos e no desenvolvimento do pensamento

computacional, visando `a resolu¸c˜ao e formula¸c˜ao de problemas em contextos diversos. No

Ensino M´edio, na ´area de Matem´atica e suas tecnologias, os estudantes devem consolidar

os conhecimentos desenvolvidos na etapa anterior e agregar novos, ampliando o leque de

recursos para resolver problemas mais complexos, que exijam maior reﬂex˜ao e abstra¸c˜ao.

O desenvolvimento dessas habilidades est´a intrinsecamente relacionado com os

m´etodos de aprendizagem, estrat´egias de ensino e as situa¸c˜oes da vida cotidiana. Nesse

sentido, PBL utiliza um problema como ponto de partida, buscando motiva¸c˜ao para que

o aprendizado aconte¸ca. O objetivo ﬁnal n˜ao ´e apenas ter o problema resolvido, mas

enfatizar todo o processo de aprendizagem, ou seja, os caminhos e etapas na busca de

uma solu¸c˜ao vi´avel do problema.

25

Cap´ıtulo 5

Algoritmo

A Base Nacional Comum Curricular prevˆe a utiliza¸c˜ao do pensamento computaci-

onal e de seus pilares na disciplina de Matem´atica, auxiliando na investiga¸c˜ao e resolu¸c˜ao

de problemas. Em contrapartida, a aprendizagem de ´algebra pode contribuir para o de-

senvolvimento do PC dos alunos, considerando que eles devem ser capazes de traduzir uma

determinada situa¸c˜ao em outras linguagens, como por exemplo, l´ıngua materna, f´ormulas,

tabelas e gr´aﬁcos e vice-versa.

Associado ao pensamento computacional, cumpre salientar a im-
portˆancia dos algoritmos e de seus ﬂuxogramas, que podem ser objetos
de estudo nas aulas de Matem´atica. Um algoritmo ´e uma sequˆencia ﬁ-
nita de procedimentos que permite resolver um determinado problema.
Assim, o algoritmo ´e a decomposi¸c˜ao de um procedimento complexo em
suas partes mais simples, relacionando-as e ordenando-as, e pode ser
representado graﬁcamente por um ﬂuxograma (Brasil – MEC, 2018).

Embora tenhamos resolvido algoritmo por milhares de anos, fazer isso manual-

mente pode consumir uma grande quantidade de tempo e requerer muitos c´alculos, depen-

dendo da complexidade do problema. Segundo Mueller e Massaron (2018), os algoritmos

dizem respeito a encontrar solu¸c˜oes, e quanto mais r´apido e f´acil, melhor. Assim, utili-

zar os computadores para resolver problemas empregando algoritmo apropriado acelera

a tarefa signiﬁcativamente, e ´e a raz˜ao pela qual o desenvolvimento de novos algoritmos

progrediu t˜ao rapidamente desde o surgimento de sistemas computacionais potentes.

De maneira geral, os sistemas computacionais s˜ao compostos por 3 etapas ba-

sicamente: entrada, processamento e sa´ıda. Dessa forma, para que seja realizada uma

transforma¸c˜ao nos dados de entrada, ´e preciso que ocorram procedimentos que realizem

o processamento e retorne `a informa¸c˜ao desejada. Para descrever esses procedimentos

26

(processamento) podemos utilizar o algoritmo (representa¸c˜ao textual) ou o ﬂuxograma

(representa¸c˜ao gr´aﬁca).

Na cria¸c˜ao de um algoritmo que resolva um determinado problema, os procedi-

mentos, rotinas ou m´etodos devem ser bem deﬁnido e, desse modo, podemos identiﬁcar

cinco caracter´ısticas indispens´aveis para cria¸c˜ao de um algoritmo.

– Finitude: um algoritmo deve sempre terminar ap´os um n´umero ﬁnito de passos,

ou seja, deve ter ﬁm;

– Assertividade: as a¸c˜oes devem ser deﬁnidas rigorosamente e nunca de forma

amb´ıgua e, assim, n˜ao deve se dar margem `a dupla interpreta¸c˜ao;

– Entrada: ´e a capacidade de receber dados de entrada do mundo externo, logo, um

algoritmo pode ter nenhum ou mais dados de entrada;

– Sa´ıdas: resultado do processamento do algoritmo, s˜ao os dados de sa´ıda para o

mundo externo, podendo ter um ou mais dados de sa´ıda;

– Efetividade: as opera¸c˜oes devem ser suﬁcientemente simples de modo que possam

ser, em princ´ıpio, executadas manualmente, assim, todas as etapas especiﬁcadas no

algoritmo devem ser alcan¸c´aveis em um tempo ﬁnito.

5.1 Fluxograma

Fluxograma ´e um tipo de diagrama, empregado para representar um processo

ou algoritmo, ou seja, ´e uma sequˆencia operacional para o desenvolvimento de um de-

terminado processo. Muitas vezes, ´e utilizado para modelar e documentar um sistema

computacional.

Para Manzano et al. (2018), o ﬂuxograma ´e um conjunto de s´ımbolos (repre-

senta¸c˜ao gr´aﬁca) que retratam todos os passos do algoritmo. Sendo que cada s´ımbolo

possui uma a¸c˜ao espec´ıﬁca, dessa forma, os ﬂuxogramas (diagrama de blocos) s˜ao com-

postos por s´ımbolos que mostram a linha de racioc´ınio usada para resolver o problema

proposto.

Os s´ımbolos adotados no diagrama de blocos est˜ao normatizados pela Internati-

onal Organization for Standardization (ISO) 5807:1985 (E). Assim, o diagrama ´e cons-

27

tru´ıdo de modo que qualquer proﬁssional da ´area de Tecnologia da Informa¸c˜ao (TI) possa

entender o que representa cada s´ımbolo, como podemos observar na ﬁgura 5.1.

Figura 5.1: Diagrama de bloco. Fonte: Adaptado de Manzano e Oliveira (2019).

Podemos destacar algumas vantagens na utiliza¸c˜ao do ﬂuxograma, que por ser

uma ferramenta global e muito conhecida, possui padr˜ao mundial, e os s´ımbolos dizem

mais do que palavras. Entre as desvantagens, d´a pouca aten¸c˜ao aos dados n˜ao oferecendo

recursos para descrevˆe-los ou represent´a-los, tornando complexo sua estrutura¸c˜ao `a me-

dida que o algoritmo cresce. Na ﬁgura 5.2 temos um exemplo de ﬂuxograma para calcular

o dobro de um n´umero.

28

Figura 5.2: Exemplo de ﬂuxograma (calcula o dobro de um n´umero).

5.2 Pseudocodigo

Um algoritmo ´e a descri¸c˜ao de um conjunto de comandos que, quando executados,

resultam em uma sucess˜ao ﬁnita de procedimentos, que retornam ou n˜ao valores. Em vez

de implementar um m´etodo diretamente em uma linguagem de programa¸c˜ao, ´e prefer´ıvel

descrevˆe-lo por meio de uma nota¸c˜ao algor´ıtmica.

Manzano e Oliveira (2019) nos alerta que o pseudoc´odigo ´e uma linguagem de pro-

jeto de programa¸c˜ao(LPP), e n˜ao uma linguagem de programa¸c˜ao real. O pseudoc´odigo

permite descrever de forma simples, sem o rigor t´ecnico de uma linguagem de programa¸c˜ao

formal (uso de parˆenteses, pontua¸c˜oes e parˆametros) as etapas que o programa de com-

putador deve executar, desde que essas etapas estejam deﬁnidas e delineadas, e n˜ao com

uma das ferramentas gr´aﬁcas existentes como o ﬂuxograma. Tornando poss´ıvel abstrair

dos detalhes de uma linguagem de programa e, com isso, permite concentrar apenas nos

aspectos matem´aticos do m´etodo.

As linguagens de projeto de programa¸c˜ao possuem como caracter´ıstica principal o

29

regionalismo, pois s˜ao expressas no idioma oﬁcial do pais em que s˜ao utilizadas. No Brasil,

denominamos de portugol ou portuguˆes estruturado. Visando ser uma forma preliminar

de escrever um programa de computador sem se preocupar com a sintaxe dos comandos

de uma linguagem de programa¸c˜ao. Al´em do mais, a descri¸c˜ao do m´etodo em uma

nota¸c˜ao algor´ıtmica facilitar´a uma futura implementa¸c˜ao do c´odigo em uma linguagem

de programa¸c˜ao. Na ﬁgura 5.3, podemos observar um algoritmo escrito em portugol, que

calcula e retorna o dobro de um n´umero.

Figura 5.3: Exemplo de pseudoc´odigo (calcula o dobro de um n´umero) usando o VisuAlg.

O pseudocodigo pode ser criado sem a utiliza¸c˜ao de dispositivos digitais, no en-

tanto, o processo de ensino aprendizagem se torna mais dinˆamico com o uso de programas.
´E sugerido neste trabalho o software VisuAlg para computadores, e tamb´em pode ser uti-

lizada uma vers˜ao para smartphone: o App PseudoCode, o que permite aproveitar desse

recurso mesmo quando o laborat´orio de inform´atica n˜ao est´a dispon´ıvel.

5.3 VisuAlg

O VisuAlg ´e um programa de uso livre e distribu´ıdo gratuitamente, que permite
criar, editar, interpretar e executar os algoritmos em portuguˆes estruturado. ´E utilizado

por diversas institui¸c˜oes no Brasil e exterior, para o ensino de l´ogica de programa¸c˜ao.

O programa foi desenvolvido originalmente e mantido at´e a vers˜ao 2.5 pelo profes-

sor Cl´audio Morgado de Souza, com o intuito de ajudar os estudantes a aprender conceitos

de programa¸c˜ao, em uma linguagem mais pr´oxima a l´ıngua materna. Morgado se desli-

gou do projeto e convidou o professor Antonio Carlos Nicologi para que o substitu´ısse no

desenvolvimento e aprimoramento do projeto, passando os c´odigos fontes do programa.

30

Atualmente, o programa VisuAlg est´a na vers˜ao 3.0, possui uma interface agrad´avel

e intuitiva, composta pela barra de tarefas, ´area do editor de c´odigo fonte, ´area das

vari´aveis de mem´oria, ´area do simulador de sa´ıda e da barra de status. Quando o pro-

grama ´e carregado, j´a apresenta no editor um “esqueleto” de pseudoc´odigo, com a inten¸c˜ao

de poupar trabalho ao usu´ario e de mostrar o formato b´asico que deve ser seguido.

5.3.1 Estrutura b´asica

A linguagem permite apenas um comando por linha: desse modo, n˜ao h´a neces-

sidade de tokens separadores de estruturas, como o ponto e v´ırgula em Pascal. E para

facilitar a digita¸c˜ao e evitar confus˜oes, todas as palavras-chave do VisuAlg foram imple-

mentadas sem acentos e cedilha, quando estiverem em min´usculos. O VisuAlg tamb´em

n˜ao distingue mai´usculas e min´usculas no reconhecimento de palavras-chave e nomes de

vari´aveis. Na ﬁgura 5.4, ´e mostrado o formato b´asico do VisuAlg.

Figura 5.4: Estrutura b´asica do VisuAlg.

A primeira linha ´e composta pela palavra-chave “algoritmo” seguida do seu nome

delimitado por aspas duplas. Este nome ser´a usado como t´ıtulo nas janelas de leitura de

dados. A se¸c˜ao que se segue ´e a de declara¸c˜ao de vari´aveis, que termina com a linha

que cont´em a palavra-chave “inicio”. Deste ponto em diante est´a a se¸c˜ao de comandos,

que continua at´e a linha em que se encontre a palavra-chave “ﬁmalgoritmo”. Esta ´ultima

linha marca o ﬁnal do pseudoc´odigo: todo texto existente a partir dela ´e ignorado pelo

interpretador.

31

5.3.2 Declara¸c˜ao de vari´avel

Na Se¸c˜ao de Declara¸c˜ao, o VisuAlg prevˆe quatro tipos de dados:

inteiro, real,

cadeia de caracteres e l´ogico. Observe as palavras-chave que deﬁnem as vari´aveis, n˜ao

possuem acentua¸c˜ao. Na tabela 5.1, seguem deﬁni¸c˜oes referentes a cada tipo de dados.

Tabela 5.1: Tipo de vari´avel.

Descri¸c˜ao
Tipo de dado
deﬁne vari´aveis num´ericas do tipo inteiro
inteiro
real
deﬁne vari´aveis num´ericas do tipo real
caractere ou caracter deﬁne vari´aveis do tipo string, ou seja, cadeia de caracteres
logico (sem acento)

deﬁne vari´aveis do tipo booleando (Verdadeiro ou Falso)

Toda vari´avel possui um nome ou identiﬁcador, cujas regras variam de acordo

com a linguagem de programa¸c˜ao escolhida. No Visual, os nomes das vari´aveis devem

come¸car por uma letra e depois conter letras, n´umeros ou underline, e tem limite de 30

caracteres. A se¸c˜ao de declara¸c˜ao de vari´aveis come¸ca com a palavra-chave var e continua

com o nome-da-vari´avel, depois o caractere dois pontos, ﬁnalizando o tipo da vari´avel,

como podemos observar na ﬁgura 5.5.

Figura 5.5: Declara¸c˜ao de vari´avel.

5.3.3 Atribui¸c˜ao de valores

A atribui¸c˜ao de valores a vari´aveis pode ser feita com os operadores < − (menor,

tra¸co) ou := (dois pontos, igual). Do seu lado esquerdo ﬁca a vari´avel `a qual est´a sendo

atribu´ıdo o valor, e `a sua direita pode-se colocar qualquer express˜ao (constantes, vari´aveis,

express˜oes num´ericas), desde que seu resultado tenha tipo igual ao da vari´avel. Como por

exemplo, quantidade < −15 (vari´avel quantidade recebe o valor 15).

32

5.3.4 Operadores aritm´eticos

Os s´ımbolos utilizados para realiza¸c˜ao de c´alculos matem´aticos, s˜ao os tradicionais

operadores aritm´eticos: adi¸c˜ao (+), subtra¸c˜ao (−), multiplica¸c˜ao (∗) e divis˜ao (/); al´em

dos operadores de potencia¸c˜ao e divis˜ao inteira (\). Por conven¸c˜ao, as prioridades das

opera¸c˜oes s˜ao as mesmas utilizadas na matem´atica. Da mesma forma, para modiﬁcar a

ordem de execu¸c˜ao das opera¸c˜oes ´e necess´ario usar parˆenteses como em qualquer express˜ao

aritm´etica.

5.3.5 Operadores relacionais

Os s´ımbolos utilizados em express˜oes l´ogicas para testar ou deﬁnir uma rela¸c˜ao

entre dois valores do mesmo tipo. O Visualg trabalha com os operadores:

igual (=),

menor que (<), maior que (>), menor ou igual a (<=), maior ou igual a (>=) e diferente

de (<>). Por exemplo: 3 > 2 (3 ´e maior do que 2) retorna Verdadeiro.

5.3.6 Comandos de entrada e sa´ıda de dados

A entrada de dados no VisuAlg ´e feita atrav´es do comando leia (<lista-de-

vari´aveis>). Este comando recebe valores digitados pelos usu´arios, atribuindo-os `as
vari´aveis cujos nomes est˜ao em <lista-de-vari´aveis>. ´E respeitada a ordem especiﬁcada

nesta lista. Por exemplo: leia (nota1).

O comando de sa´ıda “escreva”, escreve no dispositivo de sa´ıda padr˜ao o conte´udo

de cada uma das express˜oes que comp˜oem <lista-de-express˜oes>. As express˜oes dentro

desta lista devem estar separadas por v´ırgulas; depois de serem avaliadas, seus resultados

s˜ao impressos na ordem indicada. A sintaxe do comando escreva ´e: escreva (<lista-de-
express˜oes>). ´E poss´ıvel utilizar tamb´em o comando “escreval”, com a ´unica diferen¸ca

que ap´os escrever o resultado solicitado, ele pular´a uma linha.

Para vari´aveis reais, pode-se tamb´em especiﬁcar o n´umero de casas decimais que

ser˜ao exibidas. Por exemplo, considerando “media” como uma vari´avel real, o comando

escreva (media:4:2) escreve seu valor em 4 espa¸cos colocando 2 casas decimais. Como

podemos observar na ﬁgura 5.6.

33

Figura 5.6: Comando de entrada e sa´ıda de dados.

5.3.7 Desvio condicional simples e composto

Muitas vezes ´e necess´ario que uma parte do c´odigo s´o seja executada se deter-

minada condi¸c˜ao for satisfeita. Essa condi¸c˜ao ´e deﬁnida por uma express˜ao l´ogica cujo

resultado sempre ser´a um valor booleano, ou seja, verdadeiro ou falso. O desvio condici-

onal tem por ﬁnalidade tomar uma decis˜ao de acordo com o resultado de uma condi¸c˜ao

ou crit´erio (teste l´ogico), e executar um bloco de c´odigos dependendo do resultado dessa

decis˜ao. Segue sintaxe na ﬁgura 5.7 do desvio condicional simples.

se <express˜ao=l´ogica> entao

<sequˆencia=de=comandos>

ﬁmse

Figura 5.7: Sintaxe do desvio condicional simples.

A express˜ao l´ogica que testar´a as condi¸c˜oes ou crit´erios impostos pelo algoritmo,

utiliza uma rela¸c˜ao entre um par de elementos, o qual pode ser composto por vari´avel,

constante e um operador relacional. Dessa forma, ao encontrar este comando, o VisuAlg

analisa a <express˜ao-l´ogica>. Se o seu resultado for verdadeiro, todos os comandos da

<sequˆencia-de-comandos> s˜ao executados at´e a instru¸c˜ao “ﬁmse”.

No desvio condicional composto, se o resultado da avalia¸c˜ao de <express˜ao-

l´ogica> for verdadeiro, todos os comandos da <sequˆencia-de-comandos-1> s˜ao exe-

cutados, e a execu¸c˜ao cont´ınua depois a partir da primeira linha depois do “ﬁmse”. Se

34

o resultado for falso, estes comandos s˜ao desprezados e o algoritmo continua a ser exe-

cutado a partir da primeira linha depois do “sen˜ao”, executando todos os comandos da

<sequˆencia-de-comandos-2>. Segue na ﬁgura 5.8 sintaxe para o desvio condicional com-

posto, que deve ser utilizado quando temos duas alternativas poss´ıveis.

se <express˜ao=l´ogica> entao

<sequˆencia=de=comandos=1>

senao

<sequˆencia=de=comandos=2>

ﬁmse

Figura 5.8: Sintaxe do desvio condicional composto.

A seguir, na ﬁgura 5.9, vamos acompanhar um exemplo da aplica¸c˜ao com co-

mando de desvio condicional composto. O algoritmo solicita duas notas e calcula a m´edia

aritm´etica das notas. Se a m´edia for maior ou igual a sete, ele retorna a mensagem “O

aluno est´a aprovado”, caso contr´ario, ele retorna “O aluno est´a reprovado”.

Figura 5.9: Exemplo de aplica¸c˜ao do desvio condicional composto.

5.3.8 Comando de sele¸c˜ao m´ultipla

Em casos que temos uma condi¸c˜ao que necessite ser avaliada a partir de m´ultiplos
valores, o uso de estruturas de decis˜ao encadeadas pode se tornar trabalhoso. ´E recomen-

35

dado, nesses casos, o uso de estrutura de desvio de sele¸c˜ao m´ultipla (caso). Essa estrutura

possui um pequeno inconveniente, ela s´o pode ser utilizada nos casos em que as condi¸c˜oes

de sele¸c˜ao s˜ao sempre do tipo “igual a”. Na ﬁgura 5.10, observamos a sintaxe do comando.

escolha <express˜ao=de=sele¸c˜ao>
caso <exp11>, <exp12>, ..., <exp1n>
<sequˆencia=de=comandos=1>
caso <exp21>, <exp22>, ..., <exp2n>
<sequˆencia=de=comandos=2>

...
outrocaso

<sequˆencia=de=comandos=extra>

ﬁmescolha

Figura 5.10: Sintaxe do comando de sele¸c˜ao m´ultipla.

No exemplo a seguir (ﬁgura 5.11), podemos veriﬁcar o funcionamento do comando

de sele¸c˜ao m´ultipla.

Figura 5.11: Exemplo de comando para sele¸c˜ao m´ultipla.

5.3.9 Comando de repeti¸c˜ao - loop (la¸cos)

Ao escrevermos um algoritmo, muito vezes precisamos que ele execute o mesmo

trecho de c´odigo mais de uma vez. Em muitos casos, o n´umero de vezes necess´ario para

36

efetuar a repeti¸c˜ao ´e elevado e inviabiliza qualquer tentativa de reescrever aquele trecho

de c´odigo tantas vezes quanto necess´arias.

Com a t´ecnica de la¸cos resolvemos esse problema, permitindo que o usu´ario con-

trole quantas vezes determinada por¸c˜ao de instru¸c˜ao deve ser repetida. Assim, uma

estrutura de repeti¸c˜ao faz com que uma sequˆencia de comandos seja executada repetida-

mente at´e que uma dada condi¸c˜ao de interrup¸c˜ao seja satisfeita. Basicamente, existem

dois tipos de estrutura de repeti¸c˜ao, dependendo se conhecemos o n´umero de repeti¸c˜oes

ou n˜ao.

5.3.9.1 Estrutura de repeti¸c˜ao: para ... faca

Esta estrutura repete uma sequˆencia de comandos um determinado n´umero de

vezes.

para <vari´avel> de <valor=inicial> ate <
valor=ﬁnal> [passo <incremento>]
faca
<sequˆencia=de=comandos>

ﬁmpara

Figura 5.12: Sintaxe do comando de repeti¸c˜ao: para...faca.

O argumento “vari´avel” ´e respons´avel por realizar uma contagem de repeti¸c˜oes.

Tal contagem tem in´ıcio num “valor-inicial” e termina num “valor-ﬁnal”, tamb´em des-
critos na primeira linha da sintaxe. ´E importante ressaltar que quando na atribui¸c˜ao

“ate <valor-ﬁnal>”, n˜ao signiﬁca que esse valor ser´a exatamente atingido, mas que as

instru¸c˜oes ocorrer˜ao enquanto o contador for menor ou igual a esse valor. O comando

“passo” ´e opcional. Serve para informar qual ser´a o valor do incremento da contagem de

repeti¸c˜oes.

37

Figura 5.13: Exemplo de loop - para...faca.

No exemplo da ﬁgura 5.13, utilizamos a estrutura de repeti¸c˜ao para criar um loop

na impress˜ao dos dez primeiros n´umeros naturais.

5.3.9.2 Estrutura de repeti¸c˜ao: enquanto ... faca

Esta estrutura repete uma sequˆencia de comandos enquanto uma determinada

condi¸c˜ao (especiﬁcada atrav´es de uma express˜ao l´ogica) for satisfeita.

enquanto <express˜ao=l´ogica> faca
<sequˆencia=de=comandos>

ﬁmenquanto

Figura 5.14: Sintaxe do comando de repeti¸c˜ao: loop - enquanto...faca.

Esta express˜ao que ´e avaliada antes de cada repeti¸c˜ao do la¸co, quando seu re-

sultado for verdadeiro, <sequˆencia-de-comandos> ´e executada. Podemos observar na

ﬁgura 5.15, uma adapta¸c˜ao do algoritmo anterior com o comando “enquanto...faca”.

38

Figura 5.15: Exemplo de loop - enquanto...faca

39

Cap´ıtulo 6

Proposta de atividades did´aticas

Baseando nos conceitos do construcionismo e aprendizagem centrada no aluno

como abordagens de ensino, optamos pelas duas metodologias de ensino apresentadas

nesse trabalho: aprendizagem baseada em problemas e a aprendizagem baseada em jo-

gos. Criamos algumas propostas de atividades que visam trabalhar, de forma did´atica e

gradual, conhecimentos necess´arios tanto para o uso de tecnologias digitais quanto para

a sua cria¸c˜ao, desenvolvendo l´ogica de resolu¸c˜ao de problemas.

Dessa forma, a proposta de atividade did´atica traz um modelo de ensino e apren-

dizagem que foi pensado em promover o desenvolvimento de competˆencias, com atividades

que os alunos possam tomar decis˜ao, resolver problemas e socializar com os colegas. As-

sim, essas pr´aticas pedag´ogicas buscam formar cidad˜aos respons´aveis e cr´ıticos em uma

sociedade digital e, com isso, tornando-os aptos a exercer sua cidadania.

Nesse vi´es, a proposta de atividade did´atica foi elaborada com o intuito de auxiliar

os professores da rede de ensino no Brasil a incluir pr´aticas no cotidiano escolar, que

desenvolvam o pensamento reﬂexivo e cr´ıtico, assim como o protagonismo e a autonomia

nos estudantes.

Em meio a uma necessidade urgente de ado¸c˜ao de pr´aticas pedag´ogicas que con-

templem o eixo do pensamento computacional, e levando em considera¸c˜ao todas as diﬁ-

culdades com estrutura e tecnologia das nossas escolas, buscamos abordar atividades que

possam ser trabalhadas tanto no computador quanto no smartphone. Vale ainda destacar,

que as atividades podem ser realizadas de maneira desplugada, caso n˜ao se tenha acesso

a nenhum dos dispositivos. Por exemplo, o docente pode confeccionar um tabuleiro inspi-

rado no jogo LigthBot, com regras adaptadas e contendo como adicional a possibilidade de

40

deﬁnir o grau de complexidade que permita ajustar a diﬁculdade conforme a experiˆencia

dos estudantes.

Nas atividades 1 e 2, buscamos abordar conceito de programa¸c˜ao de uma ma-

neira l´udica e diferenciada, para isso utilizamos a metodologia de aprendizagem baseada

em jogos. Os aplicativos educacionais aqui sugeridos (LightBot e SpriteBox) visam pro-

porcionar uma experiˆencia divertida ao usu´ario, levando o racioc´ınio l´ogico e conceitos

b´asicos de programa¸c˜ao de maneira despretensiosa. Tendo em vista, que os games utili-

zam comandos que fazem referˆencia direta aos algoritmos computacionais, explorando as

estruturas sequenciais, loop (repeti¸c˜ao) e de fun¸c˜oes/procedimentos sem a necessidade de

escrever uma linha de pseudoc´odigos.

Os aplicativos aqui sugeridos fazem uso de blocos para ensino de programa¸c˜ao,

que ´e uma pr´atica conhecida e adotada em ferramentas famosas na ´area de educa¸c˜ao, como

o Scratch. A sua utiliza¸c˜ao e intera¸c˜ao (arrastar e soltar com o dedo) ´e bem simples, e

se mostram adequados diante das limita¸c˜oes no tamanho da tela e entrada de dados dos

dispositivos m´oveis, favorecendo a jogabilidade.

Vale refor¸car que ´e fundamental que o docente conhe¸ca os aplicativos e conhe¸ca

as instru¸c˜oes que resolvam determinadas situa¸c˜oes, para que assim ele tenha condi¸c˜oes de

direcionar o processo de ensino e aprendizagem por meio de jogos eletrˆonicos.

Para desenvolvemos as atividades de codiﬁca¸c˜ao em pseudoc´odigo, foi sugerido

a utiliza¸c˜ao do VisuAlg no computador, ou Pseudocode para smartphone. Assim, to-

das as atividades aqui propostas poder˜ao ser realizadas, tanto no computador, como no

smartphone.

6.1 Atividade App SpriteBox

SpriteBox ´e um jogo de quebra-cabe¸ca l´ogico dos criadores do LightBot que com-

bina a divers˜ao de jogos de “plataforma”, como por exemplo o Super Mario Bros, com

a aprendizagem dos fundamentos da codiﬁca¸c˜ao. O uso de recursos visuais, presente nos

jogos, ´e um facilitador para o aprendizado de conceitos abstratos e mais complexos da pro-

grama¸c˜ao, como a repeti¸c˜ao, recursividade e condicionantes. SpriteBox cobre conceitos

b´asicos de algoritmos, como sequenciamento de instru¸c˜oes, instru¸c˜oes com parˆametros,

loops simples e complexos.

41

Controles (Web):

Teclas de seta: correr para a esquerda / direita, pular, subir escadas

Mouse / trackpad: interagir / codiﬁcar

No decorrer do jogo, os estudantes descobrir˜ao que algumas se¸c˜oes est˜ao intran-

sit´aveis. Nesse ponto, eles devem procurar uma SpriteBox amarela, pular e bater nela por

baixo. Isso chamar´a Sprite, que tentar´a ajud´a-lo, como na ﬁgura.

Figura 6.1: Tela do App SpriteBox. Fonte: Site SpriteBox - guia do professor.

Sprite pode ent˜ao ajudar o jogador a progredir modiﬁcando o ambiente do jogo e

tornando transit´aveis as se¸c˜oes anteriormente intranspon´ıveis. Para essa primeira miss˜ao,

o Sprite ir´a pedir que o jogador reorganize as instru¸c˜oes para que o jogador possa assim

avan¸car, como no exemplo da ﬁgura 6.2.

42

Figura 6.2: SpriteBox - sequˆencia de instru¸c˜oes. Fonte: Site SpriteBox - guia do professor.

Ao pressionar Play, Sprite executar´a as instru¸c˜oes de cima para baixo. Aqui,

Sprite ir´a mover para a esquerda, mover para a esquerda, mover para cima, mover para

cima, set (box).

Aos poucos, as miss˜oes ﬁcar˜ao mais complicadas e dif´ıceis de se transpor. Na

segunda fase, o Sprite ir´a apresentar a constru¸c˜ao loop. Um loop permite que os jogadores

repitam as instru¸c˜oes que existem dentro do loop qualquer n´umero de vezes, conforme

ﬁgura 6.3.

Figura 6.3: SpriteBox - estrutura em loop. Fonte: Site SpriteBox - guia do professor.

Sprite pedir´a que o jogador copie os padr˜oes mostrados em cada quebra-cabe¸ca.

Esses quebra-cabe¸cas s´o ser˜ao desbloqueados quando todos os outros n´ıveis forem resolvi-

43

dos e os sprites encontrados. Aqui, os jogadores ter˜ao uma quantidade limitada de espa¸co

e, portanto, devem utilizar loops dentro de loops para resolver os quebra-cabe¸cas.

6.2 Atividade App LightBot

Essa atividade, visa contribuir para a constru¸c˜ao de um processo de ensino apren-

dizagem gamiﬁcado, no qual o desenvolvimento do racioc´ınio l´ogico, matem´atico e compu-

tacional ´e estimulado atrav´es de pr´aticas que abordam a montagem de sequˆencias l´ogicas

de forma estruturada.

LightBot ´e um jogo de quebra-cabe¸ca de programa¸c˜ao; ele usa mecˆanicas de jogo

que est˜ao ﬁrmemente enraizadas em conceitos de programa¸c˜ao. O LightBot permite que

os jogadores obtenham uma compreens˜ao pr´atica de conceitos b´asicos como sequˆencia

de instru¸c˜oes, procedimentos e loops, apenas guiando um robˆo para iluminar as pe¸cas e

resolver os n´ıveis.

O jogo conta com um robˆo cuja fun¸c˜ao ´e realizar um percurso dentro de um

labirinto com n´umero limitado de passos. O jogador visualiza um bloco de a¸c˜oes principal

main e outro a¸c˜ao secund´aria proc1, e dependendo do n´ıvel de diﬁculdade ﬁca dispon´ıvel

mais um bloco de a¸c˜ao secund´ario proc2. O robˆo pode executar comandos como: andar

para frente, acender a luz, virar `a esquerda, virar `a direita, pular e acionar procedimentos

repetitivos (P1 e P2). Podemos observar na ﬁgura 6.4, a tela com um dos desaﬁos que

deve ser superado.

44

Figura 6.4: Tela do App LightBot. Fonte: Site LightBot.

H´a tamb´em a op¸c˜ao do uso de estruturas de repeti¸c˜ao, que se conﬁguram em um

conjunto de a¸c˜oes que podem acontecer mais de uma vez dentro de uma mesma rodada.

Esse conjunto de a¸c˜oes ﬁca pr´e-deﬁnido e s´o h´a a necessidade de escrevˆe-lo uma ´unica vez

para sempre que necess´ario, reutiliz´a-lo. No caso do LightBot, o jogo s´o permite a cria¸c˜ao

de dois procedimentos que se refere aos comandos P1 e P2. Na tabela 6.1, a interface do

programa ´e detalhada.

45

N” Nome
1 MAIN

2

3
4

PROC1

PROC2
´Area principal

Tabela 6.1: Interface do programa LightBot.

Descri¸c˜ao
Bloco de a¸c˜ao onde os comandos s˜ao colocados. ´E o bloco prin-
cipal, onde rodam as primeiras a¸c˜oes do robˆo.
Caso seja utilizado, ´e um bloco de a¸c˜oes extras, que pode servir
para estruturas de repeti¸c˜ao loops.
Idem PROC1.
Labirinto onde o robˆo realizar´a as a¸c˜oes do MAIN (“tabuleiro”).
Seta para cima: o robˆo anda uma casa para frente.

Lˆampada: o robˆo acende a luz da casa em que se encontra.

Seta no sentido anti-hor´ario: o robˆo vira para sua esquerda.

5

Comandos

Seta no sentido hor´ario: o robˆo vira para sua direita.

Mola: o robˆo pula para a casa a sua frente.

P1: executa o bloco de a¸c˜oes que est˜ao no PROC1.

P2: executa o bloco de a¸c˜oes que est˜ao no PROC2.

Fonte: Site LightBot.

O LightBot destina-se a apresentar as crian¸cas e adolescentes que n˜ao tˆem ne-

nhuma experiˆencia em programa¸c˜ao, sendo adequado para todas as idades.

Isso sig-

niﬁca que qualquer pessoa no Ensino B´asico pode jogar, se divertir e aprender l´ogica

de programa¸c˜ao. Para realizar a instala¸c˜ao, basta acessar a loja de aplicativos do seu

smartphone e baixar o programa, ou se preferir utilizar no computador, basta acessar o

site https://lightbot.com.

O uso de um jogo l´udico como forma de ensinar um conceito b´asico ´e uma ma-

neira interessante de trabalhar com um p´ublico que est´a muito conectado `as tecnologias

digitais. Dessa maneira, o jogo ´e recebido com entusiasmo por parte dos estudantes, que

normalmente demonstram empolga¸c˜ao e motiva¸c˜ao com a metodologia adotada.

Ressaltamos que as crian¸cas devem ser estimuladas desde cedo no contato com a

programa¸c˜ao. E assim, a partir dessas atividades l´udicas, os alunos dos anos iniciais tra-

balhem conhecimentos na ´area de programa¸c˜ao, algoritmos e resolu¸c˜ao de problemas sem

perceber, ou seja, o pensamento computacional ´e utilizado naturalmente para a solu¸c˜ao

do desaﬁo proposto.

46

6.3 Atividade Matem´atica - 1” ano

Unidades tem´aticas: Grandezas e medidas

Objetos de conhecimento: Medidas de tempo: unidades de medida de tempo, suas

rela¸c˜oes e o uso do calend´ario

Habilidades: (EF01MA16) Relatar em linguagem verbal ou n˜ao verbal sequˆencia de

acontecimentos relativos a um dia, utilizando, quando poss´ıvel, os hor´arios dos eventos.

Atividade 1: Desenvolver um algoritmo verbal sobre os acontecimentos ao longo do dia.

Por exemplo:

1” passo: acorda, vai tomar banho e escovar os dentes;

2” passo: sai de casa `as 7h e vai para a escola;

3” passo: na escola, estuda as disciplinas di´aria;

4” passo: sai da escola `as 12h, vai para a casa;

5” passo: toma banho e almo¸ca;

6” passo: come¸ca a fazer as tarefas e estudar `as 15h;

7” passo: janta `as 19h;

8” passo: assiste televis˜ao;

9” passo: tomar banho, escovar os dentes e vai dormir `as 22h.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal ou imagens.

Observa¸c˜ao: Pode ser utilizado imagens para ilustrar os acontecimentos, e solicitar que

os alunos coloquem em ordem de execu¸c˜ao.

6.4 Atividade Matem´atica - 2” ano

Unidades tem´aticas: ´Algebra

Objetos de conhecimento: Problemas envolvendo signiﬁcados de dobro, metade, triplo

e ter¸ca parte

Habilidades: (EF02MA08) Resolver e elaborar problemas envolvendo dobro, metade,

triplo e ter¸ca parte, com o suporte de imagens ou material manipul´avel, utilizando es-

trat´egias pessoais.

Atividade 1: Solicitar que os alunos descrevam os passos (escrevam um algoritmo) para

calcular o dobro de um n´umero qualquer. O professor dever´a deﬁnir as palavras que ser˜ao

47

utilizados.

Por exemplo:

1” passo: Receber (Pegar) um ”n´umero qualquer”

2” passo: Multiplicar o n´umero recebido por 2;

3” passo: Escreve o resultado.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal ou imagens.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Esbo¸co de roteiros e de plantas simples

Habilidades: (EF02MA12) Identiﬁcar e registrar, em linguagem verbal ou n˜ao verbal, a

localiza¸c˜ao e os deslocamentos de pessoas e de objetos no espa¸co, considerando mais de

um ponto de referˆencia, e indicar as mudan¸cas de dire¸c˜ao e de sentido.

Atividade 2: Escrever e executar um algoritmo simples em portuguˆes estruturado,

usando um vocabul´ario restrito para as instru¸c˜oes. Solicitar para que os alunos executem

uma sequˆencia de instru¸c˜oes para o deslocamento de uma pessoa, utilizando o pr´oprio

corpo, um objeto ou animal, diante de desenho com imagens: frente, traz, vire `a direita,

vire `a esquerda.

Figura 6.5: Deslocamento: algoritmo sequˆencia de passos.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal ou imagens. Compreender e executar

uma sequˆencia de instru¸c˜oes, por meio de s´ımbolos ou palavras deﬁnidas pelo professor.

48

6.5 Atividade Matem´atica - 3” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Procedimentos de c´alculo (mental e escrito) com n´umeros

naturais: adi¸c˜ao e subtra¸c˜ao

Habilidades: (EF03MA05) Utilizar diferentes procedimentos de c´alculo mental e es-

crito, inclusive os convencionais, para resolver problemas signiﬁcativos envolvendo adi¸c˜ao

e subtra¸c˜ao com n´umeros naturais.

Atividade 1: Solicitar que os alunos descrevam os passos para realizar a soma entre

dois n´umeros, ou seja, o algoritmo da conta armada. Vale lembrar que os passos devem

ser precisos e assertivos. Detalhando as a¸c˜oes que devem ser realizadas, evitando passos

como coloque um n´umero embaixo do outro e some.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal ou imagens.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Localiza¸c˜ao e movimenta¸c˜ao: representa¸c˜ao de objetos e

pontos de referˆencia

Habilidades: (EF03MA12) Descrever e representar, por meio de esbo¸cos de trajetos

ou utilizando croquis e maquetes, a movimenta¸c˜ao de pessoas ou de objetos no espa¸co,

incluindo mudan¸cas de dire¸c˜ao e sentido, com base em diferentes pontos de referˆencia.

Atividade 2: Escrever um algoritmo simples em portuguˆes estruturado, usando um vo-

cabul´ario restrito para as instru¸c˜oes. Solicitar para que os alunos executem uma sequˆencia

de instru¸c˜oes para o deslocamento de um objeto em um tabuleiro. Por exemplo, para se

descolar de uma posi¸c˜ao A para uma posi¸c˜ao B, utilizando comando/a¸c˜ao deﬁnidas pelo

professor. Salientamos que o docente dever´a ir aumentando a diﬁculdade conforme os

alunos consigam realizar as atividades iniciais.

49

Figura 6.6: Tabuleiro: algoritmo para movimenta¸c˜ao de objetos.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal ou imagens. Reconhecer padr˜oes de

deslocamento e veriﬁcar que os passos s˜ao repetidos determinadas vezes.

6.6 Atividade Matem´atica - 4” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Propriedades das opera¸c˜oes para o desenvolvimento de

diferentes estrat´egias de c´alculo com n´umeros naturais

Habilidades: (EF04MA03) Resolver e elaborar problemas com n´umeros naturais envol-

vendo adi¸c˜ao e subtra¸c˜ao, utilizando estrat´egias diversas, como c´alculo, c´alculo mental e

algoritmos, al´em de fazer estimativas do resultado.

Atividade 1: Solicitar que os alunos descrevam os passos para realizar a subtra¸c˜ao entre

dois n´umeros, ou seja, o algoritmo da conta armada.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal.

Unidades tem´aticas: ´Algebra

Objetos de conhecimento: Sequˆencia num´erica recursiva formada por m´ultiplos de um

n´umero natural

Habilidades: (EF04MA11) Identiﬁcar regularidades em sequˆencias num´ericas compostas

por m´ultiplos de um n´umero natural.

50

Atividade 2: Crie um algoritmo em portugol, que solicite o primeiro e o segundo n´umero

de uma sequˆencia e retorne, o pr´oximo n´umero da sequˆencia.

Por exemplo: Dados os n´umeros 3 e 6, determine o pr´oximo n´umero da sequˆencia.

1” passo: Entre com os valores para o primeiro e segundo n´umeros da sequˆencia;

2” passo: terceiro n´umero ´e igual ao segundo n´umero mais diferen¸ca entre os

n´umeros;

3” passo: Escreva o terceiro n´umero.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Localiza¸c˜ao e movimenta¸c˜ao: pontos de referˆencia, dire¸c˜ao

e sentido

Habilidades: (EF04MA16) Descrever deslocamentos e localiza¸c˜ao de pessoas e de objetos

no espa¸co, por meio de malhas quadriculadas e representa¸c˜oes como desenhos, mapas,

planta baixa e croquis, empregando termos como direita e esquerda, mudan¸cas de dire¸c˜ao

e sentido, intersec¸c˜ao, transversais, paralelas e perpendiculares.

Atividade 3: Utilizar os app´s SpriteBox e LightBot, onde os alunos podem deﬁnir a

sequˆencia de passos e depois executar, e se necess´ario pode corrigir o algoritmo.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal. Trabalhar todos os pilares do pensa-

mento computacional: abstra¸c˜ao, decomposi¸c˜ao, reconhecimento de padr˜ao e algoritmo.

6.7 Atividade Matem´atica - 5” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Sistema de numera¸c˜ao decimal: leitura, escrita e ordena¸c˜ao

de n´umeros naturais (de at´e seis ordens)

Habilidades: (EF05MA01) Ler, escrever e ordenar n´umeros naturais at´e a ordem das

centenas de milhar com compreens˜ao das principais caracter´ısticas do sistema de nu-

mera¸c˜ao decimal.

Atividade 1: Escreva um algoritmo que leia dois n´umeros naturais (diferentes) e retorne,

51

os n´umeros ordenados do menor para o maior.

Figura 6.7: Exemplo: algoritmo retorna o menor e o maior n´umero inteiro.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: C´alculo de porcentagens e representa¸c˜ao fracion´aria

Habilidades: (EF05MA06) Associar as representa¸c˜oes 10%, 25%, 50%, 75% e 100%

respectivamente `a d´ecima parte, quarta parte, metade, trˆes quartos e um inteiro, para

calcular porcentagens, utilizando estrat´egias pessoais, c´alculo mental e calculadora, em

contextos de educa¸c˜ao ﬁnanceira, entre outros.

Atividade 2: Crie um algoritmo em portugol, que calcule porcentagens (10%, 25%, 50%,

75% e 100%) de um determinado valor informado.

52

Figura 6.8: Exemplo: algoritmo c´alculo de porcentagem.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Problemas: multiplica¸c˜ao e divis˜ao de n´umeros racionais

cuja representa¸c˜ao decimal ´e ﬁnita por n´umeros naturais

Habilidades: (EF05MA08) Resolver e elaborar problemas de multiplica¸c˜ao e divis˜ao

com n´umeros naturais e com n´umeros racionais cuja representa¸c˜ao decimal ´e ﬁnita (com

multiplicador natural e divisor natural e diferente de zero), utilizando estrat´egias diversas,

como c´alculo por estimativa, c´alculo mental e algoritmos.

Atividade 3: Crie um algoritmo em portugol, que calcule solicite duas notas e retorne a

m´edia aritm´etica das notas.

Figura 6.9: Exemplo: algoritmo c´alculo da m´edia aritm´etica.

53

Unidades tem´aticas: ´Algebra

Objetos de conhecimento:Grandezas diretamente proporcionais

Habilidades: (EF05MA12) Resolver problemas que envolvam varia¸c˜ao de proporciona-

lidade direta entre duas grandezas, para associar a quantidade de um produto ao valor

a pagar, alterar as quantidades de ingredientes de receitas, ampliar ou reduzir escala em

mapas, entre outros.

Atividade 4: Crie um algoritmo em portugol, que solicite o valor unit´ario de um produto

e a quantidade desejada, e por ´ultimo retorne, o valor total a pagar.

Figura 6.10: Exemplo: algoritmo grandeza direta.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Plano cartesiano: coordenadas cartesianas (1” quadrante)

e representa¸c˜ao de deslocamentos no plano cartesiano

Habilidades: (EF05MA15) Interpretar, descrever e representar a localiza¸c˜ao ou movi-

menta¸c˜ao de objetos no plano cartesiano (1” quadrante), utilizando coordenadas cartesi-

anas, indicando mudan¸cas de dire¸c˜ao e de sentido e giros.

Atividade 5: Escrever um algoritmo simples em portuguˆes estruturado. Por exemplo,

Quais passos s˜ao necess´ario para se descolar de um ponto A para um ponto B. O docente

dever´a ir aumentando a diﬁculdade a mediada que os alunos consigam realizar as ativi-

dades iniciais, ´e importante observar que existem v´arios passos/caminhos que podem ser

utilizados para o deslocamento.

54

Figura 6.11: Exemplo: deslocamento no plano cartesiano.

Atividade 6: Utilizar os app´s SpriteBox e LightBot, onde os alunos podem deﬁnir a

sequˆencia de passos e depois executar, e se necess´ario pode corrigir o algoritmo.

Objetivo das atividades: Compreender o conceito de algoritmo como uma sequˆencia

de passo ou instru¸c˜oes, por meio de linguagem verbal. Trabalhar todos os pilares do

pensamento computacional, e elementos de programa¸c˜ao como estrutura condicional e

repeti¸c˜ao.

6.8 Atividade Matem´atica - 6” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Fluxograma para determinar a paridade de um n´umero

natural

Habilidades: (EF06MA04) Construir algoritmo em linguagem natural e represent´a-lo

por ﬂuxograma que indique a resolu¸c˜ao de um problema simples (por exemplo, se um

n´umero natural qualquer ´e par).

Atividade 1: Escreva um algoritmo que leia um n´umero inteiro, e determine a paridade

do mesmo.

55

Figura 6.12: Exemplo: algoritmo retorna paridade de um n´umero inteiro.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: C´alculo de porcentagens por meio de estrat´egias diversas,

sem fazer uso da “regra de trˆes”

Habilidades: (EF06MA13) Resolver e elaborar problemas que envolvam porcentagens,

com base na ideia de proporcionalidade, sem fazer uso da ?regra de trˆes?, utilizando

estrat´egias pessoais, c´alculo mental e calculadora, em contextos de educa¸c˜ao ﬁnanceira,

entre outros.

Atividade 2: Uma fam´ılia deseja guardar um percentual de sua renda para investimentos

futuros. Crie um algoritmo que leia a renda familiar e o percentual que desejam poupar,

e retorne o valor que dever´a ser guardado para investimentos futuros.

Figura 6.13: Exemplo: algoritmo retorna valor poupado.

56

Unidades tem´aticas: Geometria

Objetos de conhecimento: Prismas e pirˆamides: planiﬁca¸c˜oes e rela¸c˜oes entre seus

elementos (v´ertices, faces e arestas)

Habilidades: (EF06MA17) Quantiﬁcar e estabelecer rela¸c˜oes entre o n´umero de v´ertices,

faces e arestas de prismas e pirˆamides, em fun¸c˜ao do seu pol´ıgono da base, para resolver

problemas e desenvolver a percep¸c˜ao espacial.

Atividade 3: Crie um algoritmo que solicite a quantidade de lados do pol´ıgono da base

de uma pirˆamide, e retorne `a quantidade de v´ertices, faces e arestas desse pol´ıgono.

Figura 6.14: Exemplo: algoritmo retorna n´umero de v´ertice, faces e arestas.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Constru¸c˜ao de retas paralelas e perpendiculares, fazendo

uso de r´eguas, esquadros e softwares

Habilidades: (EF06MA23) Construir algoritmo para resolver situa¸c˜oes passo a passo

(como na constru¸c˜ao de dobraduras ou na indica¸c˜ao de deslocamento de um objeto no

plano segundo pontos de referˆencia e distˆancias fornecidas etc.).

Atividade 4: Utilizar os app´s SpriteBox e LightBot, onde os alunos podem deﬁnir a

sequˆencia de passos e depois executar, e se necess´ario pode corrigir o algoritmo.

Objetivo da atividade: Compreender o conceito de algoritmo como uma sequˆencia de

passo ou instru¸c˜oes, por meio de linguagem verbal. Trabalhar todos os pilares do pensa-

mento computacional, e elementos de programa¸c˜ao como loop (estrutura de repeti¸c˜ao) e

estrutura de condi¸c˜ao.

57

6.9 Atividade Matem´atica - 7” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: C´alculo de porcentagens e de acr´escimos e decr´escimos

simples

Habilidades: (EF07MA02) Resolver e elaborar problemas que envolvam porcentagens,

como os que lidam com acr´escimos e decr´escimos simples, utilizando estrat´egias pessoais,

c´alculo mental e calculadora, no contexto de educa¸c˜ao ﬁnanceira, entre outros.

Atividade 1: Crie um algoritmo que solicite o valor de t´ıtulo, e calcule o seu valor

atualizado, sabendo que ap´os o vencimento ´e cobrado o valor inicial da d´ıvida mais 5%

da mesma.

Figura 6.15: Exemplo: algoritmo retorna valor atualizado.

Atividade 2: Dado o valor de um produto e um desconto `a vista, crie um algoritmo que

retorne o valor do produto com o desconto informado.

Figura 6.16: Exemplo: algoritmo retorna valor do produto com desconto.

58

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Fra¸c˜ao e seus signiﬁcados: como parte de inteiros, resultado

da divis˜ao, raz˜ao e operador

Habilidades: (EF07MA05) Resolver um mesmo problema utilizando diferentes algorit-

mos.

(EF07MA06) Reconhecer que as resolu¸c˜oes de um grupo de problemas que tˆem a mesma

estrutura podem ser obtidas utilizando os mesmos procedimentos.

(EF07MA07) Representar por meio de um ﬂuxograma os passos utilizados para resolver

um grupo de problemas.

Atividade 3: Elaborar um algoritmo que efetue a convers˜ao de um valor em real (R$)

para d´olar (US$). O algoritmo dever´a solicitar o valor da cota¸c˜ao do d´olar e tamb´em a

quantidade de reais dispon´ıveis com o usu´ario.

Figura 6.17: Exemplo: algoritmo convers˜ao real para d´olar.

Atividade 4: Elaborar um algoritmo que efetue a convers˜ao de um valor em real (R$)

para euro. O algoritmo dever´a solicitar o valor da cota¸c˜ao do euro e tamb´em a quantidade

de reais dispon´ıveis com o usu´ario.

59

Figura 6.18: Exemplo: algoritmo convers˜ao real para euro.

Atividade 5: Escrever um algoritmo para determinar o consumo m´edio de um autom´ovel,

sendo fornecida a distˆancia total percorrida pelo autom´ovel e o total de combust´ıvel gasto.

Figura 6.19: Exemplo: algoritmo consumo m´edio de combust´ıvel

Atividade 6: A Loja MT est´a vendendo seus produtos em at´e 6 (seis) presta¸c˜oes sem

juros. Fa¸ca um algoritmo que receba um valor de uma compra e o n´umero de parcela, e

mostre o valor das presta¸c˜oes.

60

Figura 6.20: Exemplo: algoritmo compra parcelada

Unidades tem´aticas: ´Algebra

Objetos de conhecimento: Linguagem alg´ebrica: vari´avel e inc´ognita

Habilidades: (EF07MA13) Compreender a ideia de vari´avel, representada por letra

ou s´ımbolo, para expressar rela¸c˜ao entre duas grandezas, diferenciando-a da ideia de

inc´ognita.

Atividade 7: Crie um algoritmo que solicite um n´umero inteiro e retorne o seu fatorial.

Figura 6.21: Exemplo: algoritmo retorna valor atualizado.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Triˆangulos: constru¸c˜ao, condi¸c˜ao de existˆencia e soma das

medidas dos ˆangulos internos

61

Habilidades: (EF07MA24) Construir triˆangulos, usando r´egua e compasso, reconhecer

a condi¸c˜ao de existˆencia do triˆangulo quanto `a medida dos lados e veriﬁcar que a soma

das medidas dos ˆangulos internos de um triˆangulo ´e 180(cid:176).

(EF07MA26) Descrever, por escrito e por meio de um ﬂuxograma, um algoritmo para a

constru¸c˜ao de um triˆangulo qualquer, conhecidas as medidas dos trˆes lados.

(EF07MA31) Estabelecer express˜oes de c´alculo de ´area de triˆangulos e de quadril´ateros.

Atividade 8: Crie um algoritmo que calcule a ´area de retˆangulo, dados a medida dos

seus lados.

Figura 6.22: Exemplo: algoritmo retorna ´area de um retˆangulo.

Atividade 9: Crie um algoritmo que calcule a ´area de um triˆangulo, dados as suas

medidas da base e altura.

62

Figura 6.23: Exemplo: algoritmo retorna ´area de um triˆangulo.

Atividade 10: Crie um algoritmo que veriﬁque a condi¸c˜ao de existˆencia de um triˆangulo,

dadas as medidas de seus lados.

Figura 6.24: Exemplo: algoritmo veriﬁca a condi¸c˜ao de existˆencia de um triˆangulo.

Atividade 11: Escrever um algoritmo que leia trˆes valores e veriﬁque se eles podem ser

os lados de um triˆangulo. Se forem informar qual o tipo de triˆangulo que eles formam:

equil´atero, is´osceles ou escaleno.

63

Figura 6.25: Exemplo: algoritmo veriﬁca a existˆencia e classiﬁca¸c˜ao de um triˆangulo.

6.10 Atividade Matem´atica - 8” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Potencia¸c˜ao e radicia¸c˜ao

Habilidades: (EF08MA02) Resolver e elaborar problemas usando a rela¸c˜ao entre poten-

cia¸c˜ao e radicia¸c˜ao, para representar uma raiz como potˆencia de expoente fracion´ario.

Atividade 1: Fa¸ca um algoritmo que solicite a altura e peso de uma pessoa, e retorne o

seu IMC.

64

Figura 6.26: Exemplo: algoritmo retorna valor atualizado.

Atividade 2: Fa¸ca um algoritmo que receba um valor que foi depositado e exiba o valor

com rendimento ap´os um mˆes. Considere ﬁxa a taxa de juros da poupan¸ca em 0,70% a.m.

Figura 6.27: Exemplo: algoritmo rendimento de um investimento.

Atividade 3: Fa¸ca um algoritmo que receba um valor que foi depositado e a quantidade

de mˆes que ser´a reajustado, e exiba o valor com rendimento ap´os o per´ıodo. Considere

ﬁxa a taxa de juros da poupan¸ca em 0,70% a.m.

65

Figura 6.28: Exemplo: algoritmo rendimento de um investimento por um per´ıodo.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Porcentagens

Habilidades: (EF08MA04) Resolver e elaborar problemas, envolvendo c´alculo de por-

centagens, incluindo o uso de tecnologias digitais.

Atividade 4: Escrever um algoritmo que leia o sal´ario ﬁxo de um vendedor e o total

de vendas efetuadas por ele no mˆes. Sabendo que este vendedor ganha 15% de comiss˜ao

sobre suas vendas efetuadas, retorne o valor da comiss˜ao do mˆes e o seu sal´ario ﬁnal.

Figura 6.29: Exemplo: algoritmo sal´ario ﬁxo com comiss˜ao.

66

Unidades tem´aticas: ´Algebra

Objetos de conhecimento: Valor num´erico de express˜oes alg´ebricas

Habilidades: (EF08MA06) Resolver e elaborar problemas que envolvam c´alculo do valor

num´erico de express˜oes alg´ebricas, utilizando as propriedades das opera¸c˜oes.

Atividade 5: Fa¸ca um algoritmo que calcule o valor atualizado de um t´ıtulo, sabendo

que deve ser cobrado mora, e juros di´ario. Solicite que o usu´ario informe o valor do t´ıtulo,

o percentual de mora, valor dos juros di´ario e a quantidade de dias em atraso, e retorne

o valor atualizado do t´ıtulo.

Figura 6.30: Exemplo: algoritmo valor atualizado de um t´ıtulo.

Unidades tem´aticas: ´Algebra

Objetos de conhecimento: Sequˆencias recursivas e n˜ao recursivas

Habilidades: (EF08MA11) Identiﬁcar a regularidade de uma sequˆencia num´erica recur-

siva e construir um algoritmo por meio de um ﬂuxograma que permita indicar os n´umeros

seguintes.

Atividade 6: Crie um algoritmo e retorne os 20 primeiros n´umeros da sequˆencia de

Fibonacci.

67

Figura 6.31: Exemplo: algoritmo sequˆencia de Fibonacci.

Unidades tem´aticas: Geometria
Objetos de conhecimento: ´Area de ﬁguras planas

Habilidades: (EF08MA19) Resolver e elaborar problemas que envolvam medidas de ´area

de ﬁguras geom´etricas, utilizando express˜oes de c´alculo de ´area (quadril´ateros, triˆangulos

e c´ırculos), em situa¸c˜oes como determinar medida de terrenos.

Atividade 7: Crie um algoritmo que calcule a ´area de um terreno retangular, dados a

medida dos seus lados.

Figura 6.32: Exemplo: algoritmo ´area de um terreno retangular.

68

Atividade 8: Crie um algoritmo que calcule a ´area de um terreno circular, dada a medida

do seu raio.

Figura 6.33: Exemplo: algoritmo ´area de um terreno circular.

Unidades tem´aticas: Probabilidade e estat´ıstica

Objetos de conhecimento: Medidas de tendˆencia central e de dispers˜ao

Habilidades: (EF08MA25) Obter os valores de medidas de tendˆencia central de uma

pesquisa estat´ıstica (m´edia, moda e mediana) com a compreens˜ao de seus signiﬁcados e

relacion´a-los com a dispers˜ao de dados, indicada pela amplitude.

Atividade 9: Crie um algoritmo que leia 10 n´umeros e retorne a m´edia aritm´etica dos

valores.

Figura 6.34: Exemplo: algoritmo m´edia aritm´etica.

69

6.11 Atividade Matem´atica - 9” ano

Unidades tem´aticas: N´umeros

Objetos de conhecimento: Potˆencias com expoentes negativos e fracion´arios

Habilidades: (EF09MA03) Efetuar c´alculos com n´umeros reais, inclusive potˆencias com

expoentes fracion´arios.

Atividade 1: Crie um algoritmo que calcule as ra´ızes para equa¸c˜ao do segundo grau.

Figura 6.35: Exemplo: algoritmo calcula ra´ızes da equa¸c˜ao do 2” grau.

70

Figura 6.36: Exemplo: console da execu¸c˜ao do algoritmo.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: N´umeros reais: nota¸c˜ao cient´ıﬁca e problemas

Habilidades: (EF09MA04) Resolver e elaborar problemas com n´umeros reais, inclusive

em nota¸c˜ao cient´ıﬁca, envolvendo diferentes opera¸c˜oes.

Atividade 2: Crie um algoritmo que mostre os trinta primeiros n´umeros da sequˆencia de

Finobacci e mostre o valor do n´umero ´aureo (a partir da divis˜ao dos dois ´ultimos termos)

com 8 casas decimais.

Figura 6.37: Exemplo: algoritmo Fibonacci e n´umero ´aureo.

71

Figura 6.38: Exemplo: console da execu¸c˜ao do algoritmo.

Unidades tem´aticas: N´umeros

Objetos de conhecimento: N´umeros reais: nota¸c˜ao cient´ıﬁca e problemas

Habilidades: (EF09MA05) Resolver e elaborar problemas que envolvam porcentagens,

com a ideia de aplica¸c˜ao de percentuais sucessivos e a determina¸c˜ao das taxas percentuais,

referencialmente com o uso de tecnologias digitais, no contexto da educa¸c˜ao ﬁnanceira.

Atividade 3: Crie um algoritmo que leia o sal´ario bruto de uma pessoa, e retorne o valor

que ser´a descontado de Imposto de Renda.

72

Tabela 6.2: Tabela base para c´alculo do imposto de renda em 2020.
Al´ıquota Dedu¸c˜ao do IRPF
Base de c´alculo
R$ 0,00
At´e R$ 1.903,98
R$ 142,80
De R$ 1.903,99 at´e R$ 2.826,65
R$ 354,80
De R$ 2.826,66 at´e R$ 3.751,05
R$ 636,13
De R$ 3.751,06 at´e R$ 4.664,68
R$ 869,36
Acima R$ 4.664,68
Fonte: Receita Federal - imposto de renda pessoa f´ısica.

Isento
7,5%
15%
22,5%
27,5%

Figura 6.39: Exemplo: algoritmo c´alculo do imposto de renda.

Unidades tem´aticas: Geometria

Objetos de conhecimento: Pol´ıgonos regulares

Habilidades: (EF09MA15) Descrever, por escrito e por meio de um ﬂuxograma, um

algoritmo para a constru¸c˜ao de um pol´ıgono regular cuja medida do lado ´e conhecida,

utilizando r´egua e compasso, como tamb´em softwares.

73

Atividade 4: Crie um algoritmo com os passos necess´ario para criar um triˆangulo

equil´atero de 4cm, utilizando apenas r´egua e compasso.

1. Marque um ponto A;

2. Tra¸car segmento de 4 cm, ponto B;

3. Trace a circunferˆencia de raio 4cm, com centro em A;

4. Trace outra circunferˆencia de raio 4cm, com centro em B;

5. Na interse¸c˜ao das circunferˆencias, marque o ponto C;

6. Trace mais dois segmentos AC e BC.

Figura 6.40: Exemplo: algoritmo triˆangulo equil´atero.

Atividade 5: Crie um algoritmo com os passos necess´ario para criar um quadrado de

5cm, utilizando apenas r´egua e compasso.

1. Marcar o ponto A;

2. Tra¸car segmento de 5 cm;

3. Tra¸car a perpendicular ao lado que passa por A;

4. Tra¸car a circunferˆencia de raio 5 e centro A;

5. Marcar o ponto C de interse¸c˜ao da perpendicular com a circunferˆencia;

6. Tra¸car duas circunferˆencias de raio 5cm e centros em B e C;

7. Marcar o ponto D, interse¸c˜ao das circunferˆencias.

74

Considera¸c˜oes ﬁnais

Esta pesquisa procurou apresentar uma estrat´egia para auxiliar no processo de

ensino aprendizagem do pensamento computacional, sugerindo uma abordagem constru-

cionista e a utiliza¸c˜ao de metodologias ativas. Observando os ´ultimos anos de ensino de

computa¸c˜ao nas escolas, existem dois segmentos bem distintos: aprender sobre compu-

tadores e aprender com computadores. Embora seja importante o primeiro segmento, o

´ultimo tem papel crucial no processo de ensino e aprendizagem.

Com a elabora¸c˜ao da BNCC (2018), o pensamento computacional passou a fazer

parte do nosso curr´ıculo nacional, logo, n˜ao podemos permitir que seja esquecido ou tra-

tado superﬁcialmente. N´os, professores e escolas, temos o dever de oferecer um curr´ıculo

amplo e equilibrado que aparelhe os alunos com t´ecnicas utilizadas no pensamento com-

putacional e dessa forma, possam compreender e mudar o mundo.

Assim, o objetivo do pensamento computacional se move para a utiliza¸c˜ao do

algoritmo na resolu¸c˜ao de problemas do cotidiano. O pensamento computacional ´e uma

habilidade que encoraja, fortalece e empodera, e sendo assim, todos os alunos devem

compreender e desenvolver essa competˆencia. Os alunos que podem pensar computa-

cionalmente s˜ao mais capazes de resolver problemas, compreender e usar a tecnologia

baseada em computador e, portanto, est˜ao melhor preparados para o presente e o futuro.

Almejamos que as atividades aqui apresentadas possam inspirar pesquisas relaci-

onadas ao tema e incentivar o uso de metodologias ativas que coloquem o aluno no centro

do processo de ensino. Esperamos que esse material possa contribuir e apoiar os professo-

res de Matem´atica a desenvolver com excelˆencia o ensino do pensamento computacional

em suas salas de aula, promovendo o uso apropriado da tecnologia para apoiar o processo

de ensino. Fornecendo amplo escopo de atividades did´aticas para que os alunos possam

desenvolver conhecimento, habilidades e atitudes para solucionar problemas.

75

Referˆencias Bibliogr´aﬁcas

Barba, L. A. e Solomon, C. (2016). Computational thinking: I do not think it means

what you think it means. Dispon´ıvel em https://lorenabarba.com/blog/computational-

thinking-i-do-not-think-it-means-what-you-think-it-means/ Acesso em: 03/05/2020.

Blikstein,

P.

(2008).

O

pensamento

computacional

e

reinven¸c˜ao

do

computador

na

educa¸c˜ao.

Dispon´ıvel

a

em

http://www.blikstein.com/paulo/documents/online/ol pensamento computacional.html

Acesso em: 07/05/2020.

Brackmann, C. P. (2017). Desenvolvimento do pensamento computacional atrav´es de

atividades desplugadas na educa¸c˜ao b´asica Porto Alegre/RS – Brazil: Paradigmas para

a Pesquisa sobre o Ensino Cient´ıﬁco e Tecnol´ogico. Tese de Doutorado, CINTED–

UFGRS, Porto Alegre/RS.

Brasil – MEC (2018). Minist´erio da Educa¸c˜ao. Base Nacional Comum Curricular. Dis-

pon´ıvel em http://basenacionalcomum.mec.gov.br/a-base Acesso em: 20/07/2020.

CAS (2014). Developing computational thinking. teaching London computing. Dis-

pon´ıvel em http://teachinglondoncomputing.org/resources/developing-computational-

thinking/ Acesso em: 10/05/2020.

CIEB (2018). Curr´ıculo de referˆencia Centro de Inova¸c˜ao para a Educa¸c˜ao Brasileira.

Dispon´ıvel em https://curriculo.cieb.net.br/ Acesso em: 09/04/2020.

CSTA (2011).

K-12 Computer

Science

standards.

Dispon´ıvel

em

http://scratch.ttu.ee/failid/CSTA K-12 CSS.pdf Acesso em: 16/04/2020.

Cuny, J., Snyder, L., e Wing, J. M. (2010). Demystifying computational thinking for non-

76

computer scientists. Dispon´ıvel em https://www.cs.cmu.edu/link/research-notebook-

computational-thinking-what-and-why Acesso em: 20/04/2020.

Dante, L. R. (2003). Did´atica da resolu¸c˜ao de problemas de matem´atica, 1a. a 5a. series:
para estudantes do curso de Magisterio e professores do 1o. grau. Ed. ´Atica, S. Paulo.

FGVcia

(2020).

31a Pesquisa Anual do Uso de TI.

Dispon´ıvel

em

https://eaesp.fgv.br/producao-intelectual/pesquisa-anual-uso-ti

Acesso

em:

06/08/2020.

Freire, P. (2019). Pedagogia da autonomia: Saberes necess´arios `a pr´atica educativa. Ed.

Paz e Terra, S. Paulo.

Grover, S. e Pea, R. (2013). Computational thinking in k–12: A review of the state of

the ﬁeld. Educational researcher, 42(1):38–43.

ISTE

(2016).

Iste

standards

for

students.

Dispon´ıvel

em

http://www.iste.org/standards/standards/for-students#startstandards Acesso

em:

10/07/2020.

Kapp, K. M. (2012). The gamiﬁcation of learning and instruction: game-based methods

and strategies for training and education. Ed. Pfeiﬀer, Pennsylvania, USA.

Liukas, L. (2016). Hello Ruby: adventures in coding. Ed. Penguin Books Australia,

Hawthorn, Austr´alia.

Manzano, J. A., Louren¸co, A. E., e Matos, E. (2018). Algoritmos T´ecnicas de Pro-

grama¸c˜ao. Ed. ´Erica, S. Paulo.

Manzano, J. A. e Oliveira, J. F. (2019). Algoritmos l´ogica para desenvolvimento de pro-

grama¸c˜ao de computadores. Ed. ´Erica, S. Paulo.

Mckinsey

e Company

(2020).

Future

of work.

Dispon´ıvel

em

https://www.mckinsey.com/featured-insights/future-of-work Acesso em: 23/04/2020.

Moran, J. e Bacich, L. (2018). Metodologias ativas para uma educa¸c˜ao inovadora. In

S´erie desaﬁos da educa¸c˜ao. Ed. Penso, P. Alegre.

77

Mueller, J. P. e Massaron, L. (2018). Algoritmos para leigos. Os primeiros passos para o

sucesso. Ed. Alta Books, R. Janeiro.

OCDE

(2020).

Pisa

–

perguntas

frequentes.

Dispon´ıvel

em

https://www.oecd.org/pisa/pisafaq/ Acesso em: 15/05/2020.

Papert, S. A. (1972). A computer laboratory for elementary schools. Artiﬁcial Intelligence

Lab. Massachusetts, USA.

Papert, S. A. (1980). Mindstorms: Children, Computers, and Powerful Ideas. Ed. Basic

books, New York.

Raabe, A., Zorzo, A. F., e Blikstein, P. (2020). Computa¸c˜ao na educa¸c˜ao b´asica: Fun-

damentos e experiˆencias. In S´erie Tecnologia e inova¸c˜ao na educa¸c˜ao brasileira. Ed.

Penso, P. Alegre.

SENAC – Departamento Nacional (2018). Metodologias Ativas de Aprendizagem.

Dispon´ıvel http://www.extranet.senac.br/modelopedagogicosenac/ em Acesso em:

15/05/2020.

Wing, J. M. (2006). Computational thinking. Communications of the ACM, 49(3):33–35.

Wing, J. M. (2011). Research notebook: Computational thinking what and why. The

link magazine. Pittsburgh, USA.

78

