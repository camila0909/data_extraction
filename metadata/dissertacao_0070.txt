2019: DISSERTAC¸ ˜AO DE MESTRADO
Mestrado Proﬁssional em Matem´atica - PROFMAT, Universidade Federal de S˜ao Jo˜ao Del-Rei - UFSJ
Sociedade Brasileira de Matem´atica - SBM

Aplica¸c˜oes de ´Algebra Linear na Compress˜ao de Imagens.

Guilherme Fernandes Carias Barbosa 1
Humberto Cesar Fernandes Lemos2

Resumo: Este trabalho tem como intuito ilustrar algumas ideias b´asicas da ´Algebra
Linear aplicadas ao processo de compress˜ao de imagens com perdas. A t´ıtulo de exem-
plo, o processo descrito utiliza principalmente a transformada discreta do cosseno (DCT,
do inglˆes discrete cosine transform), al´em disso utiliza-se a codiﬁca¸c˜ao de Huﬀman e ´e
descrito os passos para a compress˜ao em formato JPEG. Trataremos da compress˜ao com
perdas, pois a nossa ˆenfase est´a nos princ´ıpios b´asicos da compress˜ao e a ´Algebra Linear no
processo, lembrando que nosso interesse n˜ao ´e melhorar o armazenamento nem conservar
a qualidade da imagem.

Palavras-chave: Transformada discreta do cosseno, Aplica¸c˜ao da DCT, compress˜ao
JPEG, codiﬁca¸c˜ao de Huﬀman, compress˜ao de imagens com perda.

Abstract: This work aims to illustrate some basic ideas of Linear Algebra applied to the
lossy image compression process. As an example, we describe a process that mainly uses
the discrete cosine transform (DCT). In addition, Huﬀman encoding is used and the steps
for compression in JPEG format are described. We will deal with lossy compression, as
our emphasis is on the basic principles of compression and Linear Algebra topics used in
the process, remembering that our interest is not to improve storage or preserve image
quality.

Keywords: Discrete cosine transform, DCT, JPEG, Huﬀman encoding, lossy image
compression.

1

Introdu¸c˜ao

Com o passar do tempo tudo evolui e cria alguma necessidade, a matem´atica, a vida,
o corpo humano, a inform´atica e etc. Nos dias atuais, notamos um alto crescimento
na busca por melhores imagens digitais e melhoramento dos dispositivos de captura que
proporcionam o m´aximo de qualidade, com isso surge a necessidade de otimizar o com-
partilhamento de imagens. Com isso, m´etodos de compress˜ao vˆem surgindo ao longo dos

1Aluno de Mestrado do PROFMAT, Turma 2018, Universidade Federal de S˜ao Jo˜ao Del-Rei - UFSJ,

guilherme fcb@yahoo.com.br

2Professor orientador, Departamento de Estat´ıstica, F´ısica e Matem´atica - DEFIM, UFSJ,

humbertolemos@ufsj.edu.br

anos de acordo com a necessidade para o armazenamento e agilidade na transmiss˜ao de
imagens.

Quando usamos algum algoritmo para compress˜ao de imagens devemos levar em con-
sidera¸c˜ao alguns fatores de extrema importˆancia, como diminuir de forma substancial o
espa¸co ocupado, o quanto de qualidade ´e poss´ıvel perder sem que note alguma altera¸c˜ao
em sua visualiza¸c˜ao, o m´etodo de compress˜ao mais vi´avel devido a otimiza¸c˜ao de tempo,
qualidade oferecida e melhor taxa de compress˜ao oferecida. Os m´etodos por transformada
s˜ao os mais usados, pela boa capacidade de compress˜ao e pela qualidade oferecida ao ﬁnal,
esses m´etodos convertem dados de dom´ınio espacial em dom´ınio de frequˆencia.

Aqui, neste trabalho, abordaremos o m´etodo de compress˜ao para o formato JPEG,
por´em nosso foco ´e na ´Algebra Linear por tr´as desse processo, onde em cada um dos
passos descritos ´e poss´ıvel notar alguns t´opicos, contudo ao longo do texto ser˜ao expostos
de forma clara.

Na se¸c˜ao 2 introduzimos alguns conceitos de ´Algebra Linear que consideramos b´asicos
e fundamentais para se tratar dos processos que aqui ser˜ao descritos. Na se¸c˜ao 3 falamos
sobre os estudos de Fourier, em particular sobre a s´erie de Fourier. Usando a s´erie de Fou-
rier e suas propriedades, deﬁnimos tanto a transformada de Fourier, quanto suas vers˜oes
discretas, a saber a transformada Discreta de Fourier e, ﬁnalmente, a transformada dis-
creta do cosseno, que ´e de grande importˆancia nesse processo de compress˜ao. J´a na se¸c˜ao
4 tratamos brevemente a respeito de no¸c˜oes de programa¸c˜ao, onde abordamos um pouco
sobre o formato JPEG e tamb´em sobre a codiﬁca¸c˜ao de Huﬀman. Na se¸c˜ao 5, ´e poss´ıvel
notar a liga¸c˜ao entre as se¸c˜oes anteriores e aplica¸c˜ao no processo de compress˜ao quando
apresentamos as principais ideias do processo de compress˜ao, fazendo alguns exemplos
que mostram o passo a passo, e chamamos a aten¸c˜ao para o uso da ´Algebra Linear neste
processo. Na se¸c˜ao 6 sugerimos trˆes atividades contextualizadas e interdisciplinares, que
podem ser desenvolvidas no ensino b´asico, com isso mostrando aos alunos que por tr´as
das fotos que eles tiram e enviam existe matem´atica envolvida. E por ´ultimo, na se¸c˜ao 7,
temos as considera¸c˜oes ﬁnais.

2 No¸c˜oes de ´Algebra Linear

Nesta se¸c˜ao ser˜ao apresentado e deﬁnidos alguns itens importantes de ´algebra linear,
que possuem aplica¸c˜ao direta no processo de compress˜ao de imagens com perdas no for-
mato JPEG. N˜ao pretendemos apresentar um conte´udo completo de ´Algebra Linear, para
isso recomendamos a consulta em material no assunto em especiﬁco, como por exemplo
os que aqui usamos [1], [2], [3] e [5].

2.1 Espa¸co Vetorial

Deﬁnimos espa¸co vetorial como qualquer conjunto n˜ao-vazio V, munido das opera¸c˜oes
de adi¸c˜ao entre dois vetores do espa¸co (+) e multiplica¸c˜ao (·) sobre um corpo K, os
elementos do corpo K s˜ao denominados escalares. As opera¸c˜oes de adi¸c˜ao de vetores e
multiplica¸c˜ao por escalar devem obedecer aos seguintes axiomas:

2

A: Axiomas da adi¸c˜ao: dados u, v, w ∈ V, tem-se:

A1
A2
A3
A4

: u + v = v + u;
: u + (v + w) = (u + v) + w;
: ∃ u∗ tal que u + u∗ = u∗ + u = u;
: ∃ − u tal que u + (−u) = (−u) + u = u∗.

M: Axiomas da multiplica¸c˜ao: dados u, v, ∈ V e α, β ∈ K, tem-se:

M1
M2
M3
M4

: α(βu) = (αβ)u;
: α(u + v) = αu + αv;
(α + β)u = αu + βu;
:
: ∃ 1 ∈ K tal que 1u = u.

Nesse texto, consideraremos sempre K = R, ou seja, trabalharemos sobre espa¸cos
vetoriais reais. Por´em existem espa¸cos vetoriais sobre outros corpos, um exemplo comum
s˜ao espa¸cos vetoriais complexos, que s˜ao aqueles que atuam sobre sobre C. Podemos citar
como exemplos de espa¸cos vetoriais reais:

• o plano R2 e o espa¸co R3;

• os espa¸cos Rn em geral;

• as matrizes Mnm(R) de entradas reais;

• os polinˆomios Pn;

• as fun¸c˜oes reais de uma vari´avel f .

A demonstra¸c˜ao de que alguns desses conjuntos acima listados s˜ao espa¸cos vetoriais

pode ser vista em [22]

Em todos os contextos, u ∈ V ´e chamado vetor do espa¸co V. Relembraremos a seguir

mais alguns conceitos importantes no estudo de espa¸cos vetoriais.

Deﬁni¸c˜ao 2.1 Sejam V um espa¸co vetorial e v1, ..., vn ∈ V. Dizemos que o conjunto
{v1, ..., vn} ´e linearmente independente (LI), ou que os vetores c1, ..., vn s˜ao LI, se a
equa¸c˜ao a1v2 + ... + anvn = 0 implica que a1 = ... = an = 0. No caso em que exista algum
(cid:54)= 0 dizemos que {v1, ..., vn} ´e linearmente dependente (LD), ou que os vetores
ai
v1, ..., vn s˜ao LD

A deﬁni¸c˜ao de independˆencia linear ´e importante para podermos deﬁnir a base de um

espa¸co vetorial. O conceito de base ser´a importante em todo o nosso trabalho.

Deﬁni¸c˜ao 2.2 Um conjunto {v1, ..., vn} de vetores de V ´e dito uma base de V se:

3

i) O conjunto {v1, ..., vn} ´e LI,

ii) o conjunto {v1, ..., vn} gera o espa¸co vetorial V. Isso signiﬁca que para todo x ∈ V,

existem n´umeros reais x1, . . . , xn tais que

x = x1v1 + x2v2 + . . . + xnvn.

Os n´umeros x1, . . . , xn s˜ao as componentes do vetor x na base.

Podemos deﬁnir tamb´em a dimens˜ao de um espa¸co vetorial como o n´umero de vetores
em uma base. Por exemplo, se {v1, ..., vn} ´e uma base de V, ent˜ao dizemos que dim V = n.
Um importante conceito e que ser´a brevemente abordado em nosso trabalho ´e o de
subespa¸co vetorial. No entanto n˜ao iremos nos alongar demais aqui, o leitor interessado
pode consultar [1], [2], [3] e [5].

Deﬁni¸c˜ao 2.3 Dado um espa¸co vetorial V sobre R, um subconjunto W, n˜ao vazio, ser´a
um subespa¸co vetorial de V se:

i) Para quaisquer u, v ∈ W tem-se u + v ∈ W.

ii) Para quaisquer α ∈ R e u ∈ W tem-se αu ∈ W.

A no¸c˜ao de subespa¸co nos permite, entre outras coisas, trabalhar com apenas a parte
do espa¸co vetorial que nos ser´a relevante para o problema. No caso do nosso texto, que
fala sobre o processo de compress˜ao, essa ´e uma maneira simples de economizar recursos
computacionais.

2.2 Produto Interno

Deﬁniremos agora o importante conceito de produto interno, por vezes conhecido
tamb´em como produto escalar. Embora a deﬁni¸c˜ao de produto interno possa ser dada em
um espa¸co vetorial V sobre qualquer corpo num´erico, iremos usar a deﬁni¸c˜ao dada sobre
o corpo dos reais, pois s´o iremos trabalhar este caso ao longo do texto.

Deﬁni¸c˜ao 2.4 Seja V um espa¸co vetorial sobre o corpo dos reais R. Um aplica¸c˜ao (cid:104)·, ·(cid:105) :
V × V (cid:55)→ R ´e um produto interno caso ela satisfa¸ca `as propriedades a seguir:

i) (cid:104)u, u(cid:105) ≥ 0, para todo u ∈ V. Al´em disso temos que (cid:104)u, u(cid:105) = 0 se, e somente se u,

for o vetor nulo.

ii) (cid:104)v, u(cid:105) = (cid:104)u, v(cid:105), ∀ u, v ∈ V.

iii) (cid:104)u, αv(cid:105) = α(cid:104)u, v(cid:105), ∀ u, v ∈ V, e ∀ α ∈ R.

iv) (cid:104)u, v + w(cid:105) = (cid:104)u, v(cid:105) + (cid:104)u, w(cid:105), ∀ u, v, w ∈ V.

Um importante exemplo ´e o produto interno canˆonico em Rn.

Exemplo 2.1 Sejam dois vetores x = (x1, ..., xn) e y = (y1, ..., yn) ∈ Rn.

4

(a) O produto interno canˆonico de x e y ´e dado por

x · y = x1y1 + x2y2 + ... + xnyn =

n
(cid:88)

i=1

xiyi.

(b) Deﬁnimos a norma de um vetor x = (x1, ..., xn) ∈ Rn por

(cid:107)x(cid:107) =

√

x · x =

(cid:113)

x2
1 + ... + x2

n =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

n
(cid:88)

i=1

x2
i

.

Escrevendo dois vetores x, y ∈ Rn como matrizes colunas

x =











x1
...
xn

e

y =




 ,






y1
...
yn

o produto interno desses vetores pode ser escrito em termos do produto de matrizes como

onde xt ´e a matriz transposta de x.

x · y = xty,

OBS.: Optamos por deﬁnir o produto interno canˆonico pelo s´ımbolo x · y, e reservamos
(cid:104)x, y(cid:105) para um produto interno arbitr´ario.

Exemplo 2.2 Sejam v = (3, −4, 1, 0, −1, 5) e w = (2, 2, −1, 6, 1, −3) vetores do R6. O
produto escalar entre v e w ´e dado por

v · w = (3)(2) + (−4)(2) + (1)(−1) + (0)(6) + (−1)(1) + (5)(−3) = −19.

As normas de v e w s˜ao respectivamente dadas por

(cid:107)v(cid:107) = (cid:112)32 + (−4)2 + 12 + 02 + (−1)2 + 52 =
(cid:107)w(cid:107) = (cid:112)22 + 22 + (−1)2 + 62 + 12 + (−3)2 =

√

√

53 ,

55.

Deﬁni¸c˜ao 2.5 Seja V um espa¸co vetorial com produto interno. Dizemos que dois ele-
mentos u, v ∈ V s˜ao ortogonais se, e somente se, (cid:104)u, v(cid:105) = 0.

Observe que, no caso em que V = R2 ou V = R3, o produto interno canˆonico entre dois
vetores u, v ∈ V pode ser expresso como

u · v(cid:105) = (cid:107)u(cid:107) (cid:107)v(cid:107) cos θ,

onde 0 ≤ θ ≤ π ´e o ˆangulo entre os vetores u e v. Supondo u e v n˜ao nulos, eles s˜ao
ortogonais se, e somente se, temos θ = π/2.

5

Proposi¸c˜ao 2.1 Se v1, ..., vk s˜ao vetores n˜ao nulos de Rn ortogonais, isto ´e, vi·vj = 0,
para i (cid:54)= j, ent˜ao o conjunto {v1, ..., vk} ´e LI.

Demonstra¸c˜ao: Considere a equa¸c˜ao vetorial, lembrando que 0 = (0,...,0) ´e o vetor
nulo e com xi ∈ R.

x1v1 + . . . + xkvk = 0.

(1)

Fazendo o produto escalar de ambos os membros da equa¸c˜ao (1) com vi, i = 1, ..., k e
aplicando as propriedades do produto escalar, obtemos

x1(v1 · vi) + ... + xi(vi · vi) + ... + xk(vk · vi) = 0.

(2)

Por hip´otese temos vivj = 0, se i (cid:54)= j. Assim de (2) obtemos que

xi(cid:107)vi(cid:107)2 = 0.

Como vi (cid:54)= 0, ent˜ao (cid:107)vi(cid:107) (cid:54)= 0, logo xi = 0 para todo i = 1, . . . , k.

2.3 Bases Ortogonais e Ortonormais
Deﬁni¸c˜ao 2.6 Seja {v1, ..., vk} uma base de um subespa¸co de Rn.

(a) Dizemos que {v1, ..., vk} ´e uma base ortogonal, se (cid:104)vi, vj(cid:105) = 0, para i (cid:54)= j, ou seja,

se quaisquer dois vetores da base s˜ao ortogonais.

(b) Dizemos que {v1, ..., vk} ´e uma base ortonormal, se al´em de ser uma base orto-

gonal, (cid:107)vi(cid:107) = 1, ou seja, o vetor vi ´e unit´ario, para i = 1, ..., k.

Exemplo 2.3 A base canˆonica do Rn, que ´e formada pelos vetores e1 = (1, 0, ..., 0), e2 =
(0, 1, 0, .., 0), ..., en = (0, 0, 0, . . . , 1) ´e uma base ortonormal do Rn.

Exemplo 2.4 A base V ∈ R3, composta pelos vetores v1 = (−1, 2, 1), v2 = (2, 1, 0) e
v3 = (−1, 2, −5), ´e uma base ortogonal mas n˜ao ´e ortonormal.

Podemos veriﬁcar tal aﬁrma¸c˜ao fazendo o produto interno entre os vetores.

v1 · v2 = (−1, 2, 1) · (2, 1, 0) = −2 + 2 + 0 = 0

v1 · v3 = (−1, 2, 1) · (−1, 2, −5) = 1 + 4 − 5 = 0

v2 · v3 = (2, 1, 0) · (−1, 2, −5) = −2 + 2 + 0 = 0

v1 · v1 = (−1, 2, 1) · (−1, 2, 1) = 1 + 4 + 1 = 6 (cid:54)= 1

v2 · v2 = (2, 1, 0) · (2, 1, 0) = 4 + 1 + 0 = 5 (cid:54)= 1

v3 · v3 = (−1, 2, −5) · (−1, 2, −5) = 1 + 4 + 25 = 30 (cid:54)= 1.

Caso desejemos transformar a base do exemplo anterior em ortonormal, basta multiplicar
cada vetor pelo inverso de sua norma.

6

u1 =

v1
(cid:107) v1 (cid:107)

=

(−1, 2, 1)
(cid:112)(−1)2 + (2)2 + (1)2

=

(−1, 2, 1)
√
6

=

u2 =

v2
(cid:107) v2 (cid:107)

=

(2, 1, 0)
(cid:112)(2)2 + (1)2 + (0)2

=

(2, 1, 0)
√
5

=

(cid:32)

(cid:32)

√

−

6
6
√
5
2

,

5

,

√
6
3
√

(cid:33)

√
6
6

,

(cid:33)

5
5

, 0

u3 =

v3
(cid:107) v3 (cid:107)

=

(−1, 2, −5)
(cid:112)(−1)2 + (2)2 + (−5)2

=

(−1, 2, −5)
√
30

(cid:32)

=

−

√

30
30

,

√

30
15

√

30
6

(cid:33)

.

, −

2.4 Transforma¸c˜ao Linear

Um importante conceito em ´Algebra Linear ´e o de transforma¸c˜ao linear, com aplica¸c˜oes
Iremos apenas enunic´a-lo e usar para falar sobre

em diversas ´areas do conhecimento.
mudan¸ca de bases.

Deﬁni¸c˜ao 2.7 Dados dois espa¸cos vetoriais V e W, uma transforma¸c˜ao (ou fun¸c˜ao)
entre esses espa¸cos ´e uma lei que associa a todo vetor v ∈ V, um ´unico vetor w ∈ W, tal
que w = T (v). O vetor T (v) ∈ W ´e chamado imagem de v pela transforma¸c˜ao T .

Deﬁni¸c˜ao 2.8 Sejam V e W dois espa¸cos vetoriais. A aplica¸c˜ao T : V → W ´e uma
transforma¸c˜ao linear se:

i) T (u + v) = T (u) + T (v), ∀ u, v ∈ V,

ii) T (αv) = αT (v), ∀ v ∈ V, ∀ α ∈ R.

Chamamos essas duas propriedades de linearidade da transforma¸c˜ao T .

Obs: A propriedade da linearidade pode tamb´em ser testada em uma ´unica an´alise, a
saber T ´e linear se T (αu + v) = αT (u) + T (v), ∀u, v ∈ V, ∀α ∈ R.

Exemplo 2.5 T : R2 → R3, dada por T (x, y) = (x + y, x, x − y) ´e uma transforma¸c˜ao
linear, pois dados u = (x1, y1), v = (x2, y2) ∈ R2, temos (u + v) = (x1 + x2, y1 + y2) e
αu = (αx1, αy1), logo:

T (u + v) = (x1 + x2 + y1 + y2, x1 + x2, x1 + x2 − y1 − y2)

= (x1 + y1, x1, x1 − y1) + (x2 + y2, x2, x2 − y2)
= T (u) + T (v),

T (αu) = (αx1 + αy1, αx1, αx1 − αy1)
= α(x1 + y1, x1, x1 − y1)
= αT (u).

7

Exemplo 2.6 T : R → R, dada por T (x) = 2x + 1 n˜ao ´e uma transforma¸c˜ao linear. De
fato, para u = (x1), v = (x2) ∈ R, temos:

T (u + v) = T (x1 + x2) = 2(x1 + x2) + 1

(cid:54)= (2x1 + 1) + (2x2 + 1)
= T (u) + T (v).

Exemplo 2.7 T : R2 → R3, deﬁnida por T (v) = Av (ou TA(v) = Av), com A3,2 uma
matriz qualquer, ´e uma transforma¸c˜ao linear, pois, da ´algebra matricial:

TA(αu + v) = A(αu + v) = A(αu) + A(v) = αA(u) + A(v) = αTA(u) + TA(v).

Em um caso particular, podemos ter a matriz

A =





0
1
−1 4
3
2



 ,

e ent˜ao

TA(v) =





0
1
−1 4
3
2



 ·

(cid:21)

(cid:20) x
y

= (y, −x + 4y, 2x + 3y)T .

De fato, ´e poss´ıvel mostrar que para toda transforma¸c˜ao linear entre espa¸cos vetoriais
T : V → W, com dim V = m e dim W = n, existe uma matriz An,m que representa
tal transforma¸c˜ao nas respectivas bases. Reciprocamente, toda matriz An,m deﬁne uma
transforma¸c˜ao linear T : V → W, com dim V = m e dim W = n.

2.5 Mudan¸ca de Base

Sejam A e B bases de um espa¸co vetorial V. Chamamos matriz de mudan¸ca da base
B, como uma matriz que expressa as coordenadas de um vetor v em

A para a base B, [I]A
rela¸c˜ao a base A numa outra base qualquer B.

Por exemplo, consideremos o caso3 em que dim V = 3. Sejam A = {v1, v2, v3} e
B = {w1, w2, w3} duas bases arbitr´arias de V. Dado um vetor v ∈ V, este pode ser
expresso como combina¸c˜ao linear dos vetores das bases A e B. Comecemos escrevendo v
em termos da base A

ou simplesmente

J´a para a base B temos

v = x1v1 + x2v2 + x3v3,

vA = (x1, x2, x3).

v = y1w1 + y2w2 + y3w3,

3O problema para os espa¸cos de dimens˜ao ﬁnita n qualquer ´e an´alogo.

8

(3)

(4)

ou ent˜ao

vB = (y1, y2, y3).

Por sua vez os vetores da base A podem ser escritos em rela¸c˜ao `a base B, isto ´e

v1 = a11w1 + a21w2 + a31w3,
v2 = a12w1 + a22w2 + a32w3,
v3 = a13w1 + a23w2 + a33w3,

(5)

Substituindo (5) em (3), obtemos

v = x1(a11w1 +a21w2 +a31w3)+x2(a12w1 +a22w2 +a32w3)+x3(a13w1 +a23w2 +a33w3). (6)

Reorganizando os termos, podemos reescrever a equa¸c˜ao acima como

v = (a11x1 + a12x2 + a13x3)w1 + (a21x1 + a22x2 + a23x3)w2 + (a31x1 + a32x2 + a33x3)w3, (7)

e comparando (7) com (4), segue

y1 = a11x1 + a12x2 + a13x3,

y2 = a21x1 + a22x2 + a23x3,

y3 = a31x1 + a32x2 + a33x3,

que na forma matricial pode ser reescrito como





y1
y2
y3





 =



a11 a12 a13
a21 a22 a23
a31 a32 a33











 ,

x1
x2
x3

ou, mais simplesmente, pela equa¸c˜ao:

Assim sendo, a matriz

[v]B = [I]A

B [v]A.

[I]A

B =





a11 a12 a13
a21 a22 a23
a31 a32 a33



 ,

´e chamada matriz mudan¸ca de base, que permite escrever um vetor v qualquer, cujas
componentes na base A sejam conhecidas, em termos de suas componentes da base B.
Para a mudan¸ca de base de B para A, temos que

[I]B

A =

(cid:16)

(cid:17)−1

.

[I]A
B

N˜ao ´e nosso objetivo nesse texto, mas ´e poss´ıvel mostrar que uma matriz mudan¸ca de
base sempre tem inversa.

9

3 S´eries de Fourier

Nesta se¸c˜ao ser˜ao deﬁnidos itens de extrema importˆancia, mostrando a a inﬂuˆencia
direta de ´Algebra linear na transformada discreta do cosseno (DCT), para maiores in-
forma¸c˜oes veja [20], [16], [17], [18] e [19]. No entanto, devemos come¸car deﬁnindo a s´erie
de Fourier, e para falarmos sobre ela devemos entender conceitos b´asicos como fun¸c˜oes,
fun¸c˜oes trigonom´etricas e principalmente as fun¸c˜oes peri´odicas.

3.1 Fun¸c˜oes Peri´odicas

Sabe-se que as fun¸c˜oes peri´odicas s˜ao todas aquelas cujos os valores da fun¸c˜ao y = f (x)
se repetem para determinados valores da vari´avel x, sendo assim, para cada per´ıodo
deﬁnido pelos valores de x, sempre teremos os valores repetidos para aquela fun¸c˜ao.

Deﬁni¸c˜ao 3.1 Uma fun¸c˜ao f : R −→ R ´e peri´odica se existe T ∈ R, T (cid:54)= 0, tal que
f (x + T ) = f (x), ∀x ∈ R. O n´umero real T ´e chamado um per´ıodo para a fun¸c˜ao f .
Chamamos de per´ıodo fundamental o menor per´ıodo positivo da fun¸c˜ao f .

Claramente, se T ´e um per´ıodo para a fun¸c˜ao f , ent˜ao qualquer m´ultiplo inteiro de T
tamb´em ´e um per´ıodo para f : 2T, −2T, 3T, −3T, 4T, −4T , etc. O menor valor positivo
do per´ıodo ´e chamado de per´ıodo fundamental de f (x). Tamb´em, a fun¸c˜ao constante
´e considerada peri´odica com qualquer per´ıodo e sem per´ıodo fundamental. Em geral o
per´ıodo fundamental de uma fun¸c˜ao peri´odica ´e referido simplesmente como per´ıodo da
fun¸c˜ao. Por que o valor de uma fun¸c˜ao peri´odica repete-se a cada intervalo de comprimento
igual ao seu per´ıodo, para conhecer uma fun¸c˜ao peri´odica de per´ıodo T basta descrevˆe-la
em qualquer intervalo de comprimento T ; o seu gr´aﬁco ´e obtido repetindo-se o gr´aﬁco
neste intervalo em qualquer outro intervalo de comprimento T .

Exemplo 3.1 As fun¸c˜oes seno e cosseno s˜ao peri´odicas e ambas tˆem per´ıodo fundamental
2π. Quando tratamos das propriedades dessas fun¸c˜oes, queremos referenciar o dom´ınio,
imagem e periodicidade das fun¸c˜oes. No caso das fun¸c˜oes seno e cosseno temos coin-
cidˆencia nas propriedades. Sobre o dom´ınio, ambas est˜ao deﬁnidas para qualquer valor
real, sendo assim dom(sen) = dom(cos) = R, sobre a imagem, ambas fun¸c˜oes est˜ao com-
preendidas com valores reais entre 1 e -1, Im(sen) = Im(cos) = I = {y ∈ R| − 1 ≤ y ≤ 1}
e ao tratarmos da periodicidade temos que ambas possuem o mesmo per´ıodo de 2π para
todo x ∈ R e k ∈ Z.

sen(x) = sen(x + 2π) = sen(x + 4π) = ... = sen(x + 2kπ)

cos(x) = cos(x + 2π) = cos(x + 4π) = ... = cos(x + 2kπ)

Exemplo 3.2 As fun¸c˜oes sen( mπ
per´ıodo fundamental T = 2L
m .

L x) e cos( mπ

L x) para m = 1, 2, 3, ... s˜ao peri´odicas com

10

Para veriﬁcar essa caracter´ıstica lembramos que sen x e cos x tem como per´ıodo fun-
α . Assim escolhendo
L x) ´e dado por
m . Adicionalmente, como todo m´ultiplo inteiro de um per´ıodo tamb´em
L x) e cos( mπ
L x) tem um per´ıodo comum

damental 2π e que sen αx e cos αx tem como per´ıodo fundamental 2π
L veriﬁcamos que o per´ıodo fundamental T de sen( mπ
α = mπ
T = 2π( mπ
´e um per´ıodo ent˜ao cada uma das fun¸c˜oes sen( mπ
2L.

L x) e cos( mπ

L )−1 = 2L

3.2 S´eries de Fourier

A s´erie de Fourier apareceu nos estudos de Joseph Fourier a respeito do calor. A solu¸c˜ao
da equa¸c˜ao diferencial parcial (EDP) do calor naturalmente leva a solu¸c˜oes que s˜ao s´eries
de senos e cossenos, que ser˜ao descritas na equa¸c˜ao (8) a seguir. O leitor interessado em
tais solu¸c˜oes pode consultar [6]. Enfatizamos que n˜ao iremos utilizar diretamente a s´erie
de Fourier no processo de compress˜ao de imagens, mas sim a transformada discreta do
cosseno que ser´a vista a seguir. Entretanto como ela ´e a primeira a ser estuda em cursos
b´asicos de EDP’s. Consideremos agora uma fun¸c˜ao cont´ınua4 e de per´ıodo fndamental
2L. Tomando a representa¸c˜ao da fun¸c˜ao no intervalo [−L, L], a s´erie de Forier de f ´e

f (x) =

a0
2

+

∞
(cid:88)

(cid:104)

m=1

an cos

(cid:17)

(cid:16)nπx
L

+ bn sen

(cid:16)nπx
L

(cid:17)(cid:105)

,

onde os coeﬁcientes podem ser calculados por

an =

bn =

1
L
1
L

(cid:90) +L

−L
(cid:90) +L

−L

f (x) cos

f (x) sen

(cid:17)

(cid:17)

(cid:16) nπx
L
(cid:16)nπx
L

dx , n = 0, 1, 2, . . .

dx , n = 1, 2, 3, . . .

(8)

(9)

´E poss´ıvel escrever a transformada de Fourier em sua forma complexa usando a iden-

tidade de Euler

e±iθ = cos θ ± i sen θ,

onde i2 = −1 ´e o n´umero imagin´ario. Assim temos que (8) pode ser reescrito como

f (x) =

+∞
(cid:88)

n=−∞

cn exp

(cid:17)

(cid:16)

i

nπx
L

,

onde os coeﬁcientes agora s˜ao dados por

cn =

1
2L

(cid:90) +L

−L

f (x) exp

(cid:16)

−i

(cid:17)

nπx
L

dx , n ∈ Z.

(10)

(11)

As express˜oes (8)-(9) e (10)-(11) s˜ao equivalentes, por´em apresentam algumas diferen¸cas:
se f for uma fun¸c˜ao real, a s´erie de Fourier (8) apresenta coeﬁcientes an e bn reais, o que ´e

4Essa hip´otese ´e muito forte pode ser relaxada.

11

mais intuitivo a primeira vista. Por outro lado a s´erie de Fourier complexa (10) apresenta
uma express˜ao mais sim´etrica para seus coeﬁcientes (11). Nosso interesse, no entanto, ´e
que a serie de Fourier complexa nos permite uma extens˜ao natural para a transformada
de Fourier, como veremos na se¸c˜ao 3.4.

3.3 S´erie de Fourier e ´Algebra Linear

Sejam u e v fun¸c˜oes reais cont´ınuas em um intervalo α < x < β, O conjunto de tais
fun¸c˜oes forma um espa¸co vetorial. Ver exemplo 1 no cap´ıtulo 1 em [3]. O produto interno
canˆonico (cid:104)u, v(cid:105) ´e deﬁnido como:

(cid:104)u, v(cid:105) =

(cid:90) β

α

u(x)v(x)dx.

(12)

Podemos demonstrar que o produto interno deﬁnido pela equa¸c˜ao (12) satisfaz `as propri-
edades mostradas na se¸c˜ao 2.2. Com efeito, para a primeira prorpiedade temos

(cid:104)u, v(cid:105) =

(cid:90) β

α

u(x)v(x)dx =

(cid:90) β

α

v(x)u(x)dx = (cid:104)v, u(cid:105).

J´a para a segunda propriedade, segue

(cid:104)v, v(cid:105) =

(cid:90) β

α

v(x)v(x)dx =

(cid:90) β

α

[v(x)]2dx ≥ 0,

por tratar-se de um integrando n˜ao negativo. Podemos ver que a igualdade s´o ´e v´alida
quando v ´e a fun¸c˜ao identicamente nula. Continuando, vemos que as propriedades de
linearidade saem diretamente do fato da integral ser linear, isto ´e

(cid:90) β

α

(cid:104)u+v, w(cid:105) =

e

(u(x)+v(x))w(x)dx =

(cid:90) β

α

u(x)w(x)dx+

(cid:90) β

α

v(x)w(x)dx = (cid:104)u, w(cid:105)+(cid:104)v, w(cid:105),

(cid:104)λu, v(cid:105) =

(cid:90) β

α

(λu(x))v(x)dx = λ

(cid:90) β

α

u(x)v(x)dx = λ(cid:104)u, v(cid:105).

Sendo (12) um produto interno, as fun¸c˜oes u e v s˜ao chamadas de ortogonais no

intervalo α < x < β caso

(cid:104)u, v(cid:105) =

(cid:90) β

α

u(x)v(x)dx = 0.

(13)

3.3.1 Rela¸c˜oes de Ortogonalidade

Inicialmente, com base em trigonometria b´asica, vamos relembrar as formulas de seno

e cosseno da soma e da diferen¸ca.

sen(α + β) = sen α cos β + cos α sen β,
sen(α − β) = sen α cos β − cos α sen β,
cos(α + β) = cos α cos β − sen α sen β,
cos(α − β) = cos α cos β + sen α sen β.

12

(14a)
(14b)
(14c)
(14d)

Usando essas f´ormulas ´e poss´ıvel obter as identidades a seguir, as quais ter˜ao aplica¸c˜ao
mais adiante, somando (14c) com (14d) temos (15a), fazendo tamb´em a subtra¸c˜ao (14a)
- (14b) temos (15b) e por ﬁm subtraindo (14d) - (14c) temos (15c). Veja os resultados a
seguir,

2 cos α cos β = cos(α + β) + cos(α − β),
2 cos α sen β = sen(α + β) − sen(α − β),
2 sen α sen β = cos(α − β) − cos(α + β).

Fazendo α = (cid:0) mπ

L x(cid:1) e β = (cid:0) nπ

cos

(cid:16) mπ
L

(cid:17)

x

cos

(cid:16)nπ
L

x

(cid:17)

L x(cid:1), considerando m (cid:54)= n, temos:
(cid:20) (m + n)π
L

+ cos

cos

1
2

=

(cid:26)

x

(cid:21)

(cid:20)(m − n)π
L

(cid:21)(cid:27)

x

cos

(cid:16)mπ
L

(cid:17)

x

sen

(cid:17)

x

=

(cid:16)nπ
L

sen

(cid:16)mπ
L

(cid:17)

x

sen

(cid:17)

x

=

(cid:16) nπ
L

(cid:26)

sen

(cid:26)

cos

(cid:20)(m + n)π
L
(cid:20)(m − n)π
L

1
2

1
2

(cid:21)

x

+ sen

(cid:21)

x

− cos

(cid:20)(m − n)π
L
(cid:20) (m + n)π
L

(cid:21)(cid:27)

x

(cid:21)(cid:27)

x

(15a)
(15b)
(15c)

(16)

(17)

(18)

,

,

.

No caso particular em que m = n as rela¸c˜oes anteriores (16), (17) e (18), reduzem-se

`as seguintes rela¸c˜oes:

cos2 (cid:16)mπ
L

(cid:17)

x

=

1
2

(cid:26)

1 + cos

cos

(cid:17)

x

(cid:16)mπ
L
sen2 (cid:16) mπ
L

sen

(cid:16) mπ
L

(cid:17)

x

=

1
2

(cid:17)

x

=

(cid:26)

1
2

1 − cos

x

(cid:21)(cid:27)

(cid:20)2mπ
L
(cid:20)2mπ
L
(cid:21)(cid:27)

sen

(cid:20)2mπ
L

x

.

,

(cid:21)

x

,

Tendo isso, podemos enunciar e demonstrar o teorema a seguir:

Teorema 3.1 (Rela¸c˜oes de Ortogonalidade), com m, n ∈ Z∗
+

(cid:90) L

cos

(cid:16) mπ
L

(cid:17)

x

cos

(cid:17)

x

(cid:16)nπ
L

dx =

(cid:26) 0 se m (cid:54)= n
L se m = n

cos

(cid:16) mπ
L

(cid:17)

x

sen

(cid:17)

x

(cid:16) nπ
L

dx = (cid:8) 0 ∀ m e n

−L
(cid:90) L

−L

(cid:90) L

−L

sen

(cid:16) mπ
L

(cid:17)

x

sen

(cid:17)

x

(cid:16) nπ
L

dx =

(cid:26) 0 se m (cid:54)= n
L se m = n

Os resultados acima s˜ao chamados de “Rela¸c˜oes de Ortogonalidade”.

13

(19)

(20)

(21)

(22)

(23)

(24)

Um conjunto de fun¸c˜oes formam um conjunto ortogonal se cada par de fun¸c˜oes dife-
rentes pertencentes ao conjunto ´e ortogonal. Assim, as fun¸c˜oes sen( mπ
L x) para
m = 1, 2, 3, . . . formam um conjunto ortogonal de fun¸c˜oes no intervalo −L < x < L. Estas
rela¸c˜oes acimas podem ser provadas facilmente a partir da integra¸c˜ao direta, usando as
rela¸c˜oes trigonom´etricas (19), (20) e (21) .

L x) e cos( mπ

Demonstra¸c˜ao:
A prova da rela¸c˜ao (22) ser´a apresentada a seguir, pois nosso in-
tuito ´e falar sobre a transformada discreta do cosseno. As demonstra¸c˜oes das demais
rela¸c˜oes s˜ao an´alogas, por exemplo consulte [17]. Se m (cid:54)= n temos o seguinte:

P =

(cid:90) L

−L

cos

(cid:16)mπ
L

(cid:17)

x

cos

(cid:17)

x

(cid:16) nπ
L

dx =

1
2

(cid:26)(cid:90) L

(cid:20)

cos

(cid:20)(m + n)π
L

(cid:21)

x

+ cos

(cid:20)(m − n)π
L

(cid:21)(cid:21)

(cid:27)

x

dx

,

P =

(cid:20)

1
2

L
π(m + n)

sen

(cid:20)(m + n)π
L

L
π(m − n)

sen

(cid:20)(m − n)π
L

x

(cid:21)(cid:21)L

,

−L

−L

(cid:21)

x

+

P =

L
2π(m + n)

(cid:20)

sen

(cid:20)(m + n)π
L

x

(cid:21)(cid:21)L

−L

+

L
2π(m − n)

(cid:20)

sen

(cid:20)(m − n)π
L

x

(cid:21)(cid:21)L

,

−L

P =

(cid:26)

L
2π

1
(m + n)

[sen(m + n)π − sen(−1)(m + n)π] +

1
(m − n)

[sen(m − n)π − sen(−1)(m − n)π]

,

(cid:27)

P =

(cid:20)

L
π

1
(m + n)

sen(m + n)π +

1
(m − n)

(cid:21)

sen(m − n)π

= 0.

(cid:3)
Lembrando que os m´ultiplos de π s˜ao tais que sen(kπ) = 0 para k ∈ Z. Para m = n,
temos:

P =

(cid:90) L

−L

cos2 (cid:16)mπ
L

(cid:17)

x

dx =

P =

(cid:20)

1
2

x + sen

(cid:26)(cid:90) L

1
2
−L
(cid:18) 2mπ
L

(cid:20)

1 + cos

(cid:18) 2mπ
L

x

(cid:19)(cid:21)

(cid:27)

dx

,

(cid:19) L
2mπ

x

(cid:21)L

,

−L

P =

(cid:20)

1
2

L − (−L) +

L
2mπ

sen(2mr) −

sen[(−1)(2mπ)]

,

(cid:21)

L
2mπ

P = L +

L
2mπ

sen(2mπ) = L.

(cid:3)

O nome rela¸c˜oes de ortogonalidade deve-se ao fato de que as express˜oes citadas acima
signiﬁcam que as fun¸c˜oes sen(nπx/L) e cos(nπx/L) s˜ao ortogonais no espa¸co vetorial das
fun¸c˜oes quadrado-integr´aveis deﬁnidas no intervalo [−L, L]. De fato, no espa¸co

L2([a, b]) =

(cid:26)

u : [a, b] → R :

u2(x)dx < ∞

(cid:27)

,

(cid:90) b

a

14

das fun¸c˜oes deﬁnidas no intervalo [a, b] cujo quadrado ´e integr´avel, podemos deﬁnir o
produto interno por

(cid:90) b

(cid:104)u, v(cid:105) =

u(x)v(x)dx.

Por serem as fun¸c˜oes quadrado-integr´aveis, a integral acima est´a bem deﬁnida.

a

3.4 Transformada de Fourier

A equa¸c˜ao (10) tem sua aplica¸c˜ao voltada a representa¸c˜ao de fun¸c˜oes peri´odicas de
per´ıodo 2L, j´a quando as fun¸c˜oes s˜ao n˜ao peri´odicas ´e necess´ario calcular o limite ten-
dendo ao inﬁnito que acaba gerando a Transformada de Fourier, n˜ao iremos mostrar o
desenvolvimento desse limite e podendo ser visto em [6]. A transformada de Fourier de
uma fun¸c˜ao f : R −→ C ´e denotada pelo simbolo ˆf e tem a seguinte deﬁni¸c˜ao:

ˆf (ξ) =

1
2π

(cid:90) ∞

−∞

e−ixξf (x)dx.

(25)

com ξ ∈ R. Logo temos que se f : R −→ R e usando a f´ormula de Euler, temos:

ˆf (ξ) =

1
2π

(cid:18)(cid:90) ∞

−∞

cos(ξx)f (x)dx − i

sen(ξx)f (x)dx

.

(26)

(cid:19)

(cid:90) ∞

−∞

J´a a transformada inversa ´e dada pela equa¸c˜ao:

f (x) =

(cid:90) ∞

−∞

ˆf (ξ)e2πiξxdx.

(27)

A identidade de Euler, uma exponencial complexa, pode ser vista na Transformada Dis-
creta de Fourier onde seus coeﬁcientes s˜ao, quase sempre, n´umeros complexos. Por outro
lado, os coeﬁcientes da DCT (discrete cosine transform ser˜ao mostrados no se¸c˜ao seguinte)
s˜ao sempre n´umeros reais.

3.4.1 Transformada discreta de Fourier

Se um sinal for considerado discreto e sendo ele digital, aplicamos a transformada
discreta de Fourier (DFT, do inglˆes Discrete Fourier Transform), assim como as outras
analises de Fourier tamb´em ´e baseada na decomposi¸c˜ao de sinais em sen´oides, ´e utilizada
para sinais digitalizados e com grande aplica¸c˜ao na ´area computacional em processamento
digital de sinais, pois trabalha com sinais discretos e peri´odicos assim como os computa-
dores. Lembrando que Fourier sempre considera os sinais tem dura¸c˜ao inﬁnita, mas ao
trabalhar com um computador os sinais devem ter necessariamente dura¸c˜ao ﬁnita. Um
modelo da transformada para fun¸c˜oes discretas ´e dado pela express˜ao abaixo, na ordem
´e apresentado a transformada e sua inversa:

• DFT unidimensional

15

Fk =

fj =

1
√
n

1
√
n

n−1
(cid:88)

k=0

n−1
(cid:88)

j=0

fje− 2πi

n jk

k = 0, ..., n − 1

2πi
n jk

Fke

j = 0, ..., n − 1

• DFT bidimensional

F(wx,wy) =

n−1
(cid:88)

m−1
(cid:88)

f(x,y)e−2iπ( wxx
n +

wy y
m )

√

1
nm

y=0
Para wx = 1, 2, . . . , n − 1 e wy = 1, 2, . . . , m − 1

x=0

f(x,y) =

√

1
nm

n−1
(cid:88)

m−1
(cid:88)

wx=0

wy=0

F(wx,wy)e2iπ( wxx
n +

wy y
m )

Para x = 1, 2, . . . , n − 1 e y = 1, 2, . . . , m − 1

(28)

(29)

(30)

(31)

3.5 Transformada discreta do cosseno (DCT)

Nessa se¸c˜ao ser˜ao apresentados duas formas de Transformada discreta do Cosseno (Ou
DCT do inglˆes Discrete Cosine Transform), DCT 1D e DCT 2D, contudo daremos mais
enfase a DCT bidimensional, a qual tem maior importˆancia nesse trabalho. A DCT tem
sua aplica¸c˜ao voltada a compress˜ao de dados e processamento digital de imagens, assim
como em outras transformadas ela tem por objetivo descorrelacionar os dados da imagem
ou video que esta sendo tratado. As imagens que tiveram seus dados transformados
podem ser facilmente restauradas ao seu formato original sem perdas. Esta transformada
tem seu funcionamento baseado na escolha de uma base onde seus primeiros elementos
tem baixa frequˆencia de varia¸c˜ao, ou seja um bloco separado de uma imagem natural
onde os valores de cada pixel s˜ao pr´oximos, e os ´ultimos elementos tem alta frequˆencia
de varia¸c˜ao. O primeiro valor transformado na sequˆencia ou na matriz ´e conhecido como
valor m´edio, referimos a ele como coeﬁciente DC, os demais valores ser˜ao chamados de
AC e sua maioria ´e zero e guarda as varia¸c˜oes do valor m´edio. Com referˆencia na ´Algebra
linear, o que acontece quando usamos a transformada ´e uma mudan¸ca de base, da base
canˆonica para uma base ortonormal e os coeﬁcientes transformados s˜ao vistos como a
discretiza¸c˜ao do cosseno de uma determinada frequˆencia. Os processos descritos aqui
ser˜ao explicados a seguir parte a parte com mais detalhes para maior compreens˜ao.

3.5.1 DCT 1D

A DCT unidimensional ´e aplicada a vetores em uma dimens˜ao

c(u) = α(u)

N −1
(cid:88)

x=0

f (x) cos

(cid:20)π(2x + 1)u
2N

(cid:21)

(32)

16

Para x = 0, 1, 2, ..., N − 1.
E a DCT-1D inversa ´e dada pela equa¸c˜ao:

f (x) =

N −1
(cid:88)

u=0

α(u)c(u) cos

(cid:20)π(2x + 1)u
2N

(cid:21)

(33)

Para u = 0, 1, 2, ..., N − 1.
Para ambas equa¸c˜oes α(u) ser´a dado como:

α(u) =

para u = 0

(cid:40) 1√
N
(cid:113) 2
N para u (cid:54)= 0

3.5.2 DCT 2D

Como o intuito desse trabalho ´e a compress˜ao de imagens, temos que a DCT 2D quem
apresenta mais eﬁc´acia no processo de compacta¸c˜ao de energia, a DCT bidimensional ´e
basicamente uma extens˜ao da DCT unidimensional e ser´a dada pela seguinte forma, com
N ∈ N:

C(i, j) = α(i)α(j)

N −1
(cid:88)

N −1
(cid:88)

x=0

y=0

f (x, y) cos

(cid:18)(2x + 1)iπ
2N

(cid:19)

cos

(cid:18) (2y + 1)jπ
2N

(cid:19)

(34)

Para i, j = 0, 1, ..., N − 1, e

α(x) =

se

(cid:40) 1√
N
(cid:113) 2
N se x = 1, 2, ..., N − 1

x = 0

.

Onde C(i, J) ´e a Transformada Discreta do Cosseno, f (x, y) s˜ao os valores da imagem
original em escalas de cinza e N ´e a dimens˜ao da imagem (matriz ou bloco).

Com o intuito de maior eﬁc´acia da aplica¸c˜ao da DCT nos c´alculos ´e necess´ario dividir
a imagem em matrizes quadradas (blocos), podem ter ordem 4, 8, 16, 32 e at´e 64. Nor-
malmente s˜ao usados blocos de ordem 8 pela eﬁciˆencia. A inversa dessa transformada ´e
dada por:

f (x, y) =

N −1
(cid:88)

N −1
(cid:88)

x=0

y=0

α(i)α(j)c(i, j) cos

(cid:18) (2x + 1)iπ
2N

(cid:19)

cos

(cid:18)(2y + 1)jπ
2N

(cid:19)

.

(35)

At´e aqui foi introduzido a parte de Matem´atica envolvida que ser´a aplicada no pro-
cesso, na pr´oxima se¸c˜ao ser´a abordado um pouco de no¸c˜oes b´asicas de programa¸c˜ao que
tamb´em s˜ao necess´arias na compress˜ao, lembrando que ao falamos de programa¸c˜ao fala-
mos tamb´em de matem´atica.

17

4 No¸c˜oes de Programa¸c˜ao

4.1 JPEG

O padr˜ao JPEG ´e um m´etodo de compress˜ao muito usado e tamb´em ´e considerado
como um formato de arquivo. Esse m´etodo foi desenvolvido a quase duas d´ecadas pelo
grupo Joint Photographics Experts Group, cujo acrˆonimo cria sua sigla. Nos dias atu-
ais, ainda ´e considerado um dos melhores m´etodos de compress˜ao pois, consegue juntar
redu¸c˜ao de dados no armazenamento com qualidade de imagem satisfat´oria mesmo com
a perdas no processo. Para uma leitura complementar com mais detalhes veja [13], [9].

4.1.1 Caracter´ısticas

O tamanho do arquivo ﬁnal pode ser manipulado, quanto maior a compress˜ao menor
ser´a o arquivo a ser armazenado e de forma proporcional ser´a a qualidade ﬁnal. Possui
maior aplica¸c˜ao em imagens de tons cont´ınuos, imagens naturais com muitas cores repeti-
das e sem grande varia¸c˜ao de uma cor para outra, onde seu desempenho ´e ´otimo. No caso
de imagens com baixos n´ıveis de cor, imagens monocrom´aticas ou escritas, sua aplica¸c˜ao
deixa de ser efetiva, pois torna vis´ıvel a distor¸c˜ao da imagem mesmo em baixos ´ındices
de compress˜ao.

O formato JPEG ´e considerado uma das t´ecnicas de compress˜ao com perdas pois
ele ´e baseado na transformada discreta do cosseno, por´em essas perdas se tornam mais
aceit´aveis j´a que s˜ao impercept´ıveis e h´a um grande benef´ıcio no armazenamento.

O algoritmo para compress˜ao no formato JPEG explora e for¸ca a ocorrˆencia de re-
dundˆancias entre os pixels (dados repetidos), que ´e de onde vem seu sucesso pois as
varia¸c˜oes de cor s˜ao menos percept´ıveis do que as varia¸c˜oes de brilho aos olhos huma-
nos. Nas imagens naturais e de cores continuas as perdas n˜ao s˜ao notadas facilmente se
as taxas de compress˜ao estiverem entre 10:1 e 20:1, se as taxas passarem disso poder˜ao
ser notadas pequenas distor¸c˜oes, imagens monocrom´aticas as distor¸c˜oes s˜ao notadas com
taxas de compress˜ao acima de 5:1, ´e onde n˜ao recomenda se aplicar esse m´etodo.

4.2 Codiﬁca¸c˜ao de Huﬀman

A codiﬁca¸c˜ao de huﬀman foi desenvolvida na d´ecada de 50 quando o seu criador, Da-
vid Huﬀman, ainda cursava o doutorado no MIT (Massachusetts Institute of Technology).
Esse modelo de codiﬁca¸c˜ao usa modelos estat´ısticos, pela frequˆencia ou pela probabili-
dade de ocorrˆencia, e permite criar diferentes c´odigos bin´arios para cada pixel. Cada
pixel recebe um c´odigo de acordo com o n´umero de vezes que aparece, se aparece v´arias
vezes ter´a um c´odigo menor e se aparece pouco seu c´odigo ser´a maior, dessa maneira a
codiﬁca¸c˜ao ﬁnal ﬁca menor que uma codiﬁca¸c˜ao onde todos os elementos tem a mesma
dimens˜ao. Codiﬁca¸c˜ao de tamanho vari´avel, (em inglˆes VLC, para variable length code),
´e a nomea¸c˜ao que esse c´odigo recebe. Ver maiores detalhes em [7] e [8].

18

4.2.1

´Arvore de codiﬁca¸c˜ao

A codiﬁca¸c˜ao de Huﬀman cria uma ´arvore onde os elementos aparecem ordenados
de forma decrescente por ordem de frequˆencia ou probabilidade de ocorrˆencia, e suas
ramiﬁca¸c˜oes surgem a partir da liga¸c˜ao dos caracteres sempre em ordem crescente de
frequˆencia, onde s˜ao ligados dois a dois e tem suas frequˆencias somadas criando no ﬁnal
um ponto com a frequˆencia acumulada . Com a ´arvore pronta, cada ramiﬁca¸c˜ao recebe
um c´odigo, a esquerda recebe o c´odigo 0, o da direita recebe 1, dessa forma at´e estar
toda completa, levando em considera¸c˜ao que cada ramo se torna um novo c´odigo e acaba
quando junta todos os caminhos em um s´o ponto que chamaremos de raiz. Sendo as-
sim, cada caractere com maior frequˆencia recebe uma codiﬁca¸c˜ao menor e na medida
que a frequˆencia diminui vai aumentando a codiﬁca¸c˜ao. Quando falamos de codiﬁca¸c˜ao
normalmente ´e lembrando da codiﬁca¸c˜ao binaria ﬁxa onde cada caractere recebe uma
codiﬁca¸c˜ao de 8 bits, com a codiﬁca¸c˜ao de Huﬀman, que ´e uma codiﬁca¸c˜ao de tamanho
vari´avel, cada caractere recebe uma codiﬁca¸c˜ao de tamanho diferente de acordo com sua
frequˆencia. Observe o exemplo a seguir:

Exemplo 4.1 Vejamos a frase de Pit´agoras: ”Educai as crian¸cas para que n˜ao
seja necess´ario punir os adultos”.

Antes de tudo ser˜ao deﬁnidos alguns detalhes s´o para facilitar a compreens˜ao: Veremos
todas as letras como se fossem mai´usculas, os acentos n˜ao as tornam diferentes umas das
outras, os espa¸cos ser˜ao diferenciados com um tra¸co.

Observe que o exemplo ser´a feito por frequˆencia, podendo ser feito em outros casos
por probabilidade de ocorrˆencia – o processo ser´a o mesmo. Primeiramente separamos as
letras, por frequˆencia, e as colocamos em ondem decrescente como mostra a tabela 1, onde
´e poss´ıvel notar o numero de vezes que cada caractere aparece e somando temos a quanti-
dade total de caracteres da frase usada como exemplo. Caso algumas letras apare¸cam com
frequˆencia repetida, elas podem ser listadas em qualquer ordem – optamos por deixar em
ordem alfab´etica, por exemplo como acontece com as letras J,L,Q e T, todas de frequˆencia
1.

Uma vez constru´ıda nossa tabela de frequˆencia, vamos iniciar a constru¸c˜ao da ´arvore
de Huﬀman. Para melhor compreens˜ao deste processo, ilustramos cada passo com as
ﬁguras de 1 a 9. Nessa parte do processo, vamos juntando os caracteres dois a dois
e somando suas frequˆencias de modo que vamos criando os caminhos, lembrando que
come¸camos sempre juntado das menores para as maiores e repetindo essa liga¸c˜ao a cada
passo. ´E poss´ıvel ver na ﬁgura 1 que juntamos as letras Q e T somando suas frequˆencias
e criando uma ramiﬁca¸c˜ao. Para economizar um passo de compress˜ao, o que signiﬁca
economia de recursos computacionais em um processo real, j´a juntamos tamb´em o J e o L,
conforme mostrado na mesma imagem. J´a olhando a ﬁgura 2 ´e poss´ıvel notar que dessa vez
iremos juntar as frequˆencias menores novamente, nesse caso a jun¸c˜ao de Q+T e J+L bem
como tamb´em temos D e o P de mesma frequˆencia, e assim seguem os passos seguintes,
sempre juntando as menores frequˆencias primeiro. Observando o imagem 5 podemos
notar uma ramiﬁca¸c˜ao de valor 12 e duas ramiﬁca¸c˜oes de valor 16, temos que usar a
ramiﬁca¸c˜ao 12 primeiro e posteriormente escolhi a ramiﬁca¸c˜ao 16 mais a direita como

19

mostra a imagem 6, continuando o processo at´e juntar todas as ramiﬁca¸c˜oes montando
a ´arvore. Aqui ´e poss´ıvel ver que estamos usando um subespa¸co pois n˜ao usamos todas
as letras do alfabeto e ele seria considerado o espa¸co total. Fazendo esse caminho ate
juntar todos os caracteres em um ´unico ponto com soma no valor total de caracteres,
assim como podemos ver nas imagens de 1 a 8. Lembrando que a ´arvore ´e constru´ıda
dessa forma juntando primeiro os caracteres de menor frequˆencia para que os de maior
frequˆencia recebam c´odigos menores, caso contr´ario a codiﬁca¸c˜ao n˜ao seria t˜ao eﬁcaz
quanto o esperado. Com isso acabamos de criar a ´arvore de codiﬁca¸c˜ao de Huﬀman,
logo entramos no parte em que daremos um c´odigo a cada caractere, na ´arvore cada
ramiﬁca¸c˜ao a esquerda recebe c´odigo 0 (zero) e cada ramiﬁca¸c˜ao a direita recebe c´odigo 1
(um), veja como ﬁca a ´arvore com c´odigos para seus caminhos na imagem 9. Passado esse
processo de constru¸c˜ao da ´arvore de c´odigos vamos criar a codiﬁca¸c˜ao para cada caractere
seguindo o caminho das ramiﬁca¸c˜oes da frequˆencia total at´e a frequˆencia de cada caractere
individual, assim podemos ver o c´odigo pronto de cada caractere na tabela 2.

A -
10
10

S E C I N O R U D P J L Q T
1
7

1

4

4

4

4

4

5

1

4

1

2

2

Tabela 1: Caracteres em ordem decrescente de frequˆencia

Figura 1: Imagem 1

Figura 2: Imagem 2

20

Figura 3: Imagem 3

Figura 4: Imagem 4

Figura 5: Imagem 5

21

Figura 6: Imagem 6

Figura 7: Imagem 7

22

Figura 8: Imagem 8

Figura 9: Imagem 9

23

A
000
R
1100

-
001
U
1101

S
10
D
11100

E
101
P
11101

C
0100
J
111100

I
0101
L
111101

N
0110
Q
111110

O
0111
T
111111

Tabela 2: C´odigos Caracteres

Em c´odigo bin´ario vari´avel, codiﬁca¸c˜ao de Huﬀman, a frase pode ser escrita com 236

bits, e ´e representada numericamente assim:

101 11100 1101 0100 000 0101 001 000 100 001 0100 1100 0101 000 0110 0100 000
100 001 11101 000 1100 000 001 111110 1101 101 001 0110 000 0111 001 100 101 111100
000 001 0110 101 0100 101 100 100 000 1100 0101 0111 001 11101 1101 0110 0101 1100
001 0111 100 001 000 11100 1101 111101 111111 0111 100

Em c´odigo bin´ario ﬁxo a frase seria escrita com 512 bits, e seria representado da se-

guinte forma num´erica:

01000101 01100100 01110101 01100011 01100001 01101001 00100000 01100001 01110011

00100000 01100011 01110010 01101001 01100001 01101110 11100111 01100001 01110011
00100000 01110000 01100001 01110010 01100001 00100000 01110001 01110101 01100101
00100000 01101110 11100011 01101111 00100000 01110011 01100101 01101010 01100001
00100000 01101110 01100101 01100011 01100101 01110011 01110011 01100001 01110010
01101001 01101111 00100000 01110000 01110101 01101110 01101001 01110010 00100000
01101111 01110011 00100000 01100001 01100100 01110101 01101100 01110100 01101111
01110011

Ao comparar as duas codiﬁca¸c˜oes podemos notar que a codiﬁca¸c˜ao de Huﬀman se tonar

mais efetiva no intuito de redu¸c˜ao de dados.

5 Compress˜ao de Imagens

5.1 Passos para compress˜ao de imagens

A compress˜ao de imagens no padr˜ao JPEG usando a DCT (Transformada discreta do
cosseno) e tamb´em muito de ´algebra linear tem o seguintes passos como mostra a imagem
abaixo e cada um dos passos s˜ao descritos logo em seguida, conforme pode ser visto em
[12].

24

Figura 10: Passos compress˜ao JPEG, Google imagens

• 1o passo. Converter as cores do sistema RGB para Y CbCr.

• 2o passo. Divis˜ao da imagem em blocos.

• 3o passo. Aplica¸c˜ao da Transformada Discreta do Cosseno (TDC).

• 4o passo. Quantiza¸c˜ao dos blocos.

• 5a passo: Sequenciamento zig-zag.

• 6o passo. Codiﬁca¸c˜ao da imagem.

Inicialmente temos que RGB ´e a sigla do sistema de cores aditivas formado pelas ini-
ciais das cores em inglˆes Red, Green e Blue, que signiﬁca em portuguˆes, respectivamente,
Vermelho, Verde e Azul. O sistema de cores luminosas RGB (tamb´em designado por cor-
luz) ´e usado nos objetos que emitem luz como, por exemplo, os monitores de computador
e televis˜ao, as cˆameras digitais, o scanner, entre outros. As cores s˜ao obtidas atrav´es das
misturas das trˆes cores prim´arias, em quantidades determinadas. Cada uma das cores
obtidas est˜ao enquadradas numa escala que varia de 0 a 255. Quando a mistura das trˆes
cores est´a no valor m´ınimo (0, 0, 0), o resultado ´e a cor preta. Quanto est´a no m´aximo
(255, 255, 255), resulta na cor branca. A varia¸c˜ao entre valores m´ınimos corresponde a
tons escuros e entre os valores m´aximos, os tons s˜ao mais intensos, mais claros.

J´a o sistema Y CbCr, muito usado em formatos digitais, como fotos e v´ıdeos, consiste
em uma componente de brilho Y e duas componentes de cores Cb e Cr (b e r de blue e
red, respectivamente).

No passo 2, onde acontece a divis˜ao dos blocos, ´e feito antes de aplicar DCT (Trans-
formada Discreta do Cosseno) a imagem deve ser separada em blocos (matrizes) para
uma maior otimiza¸c˜ao de tempo e uma taxa mais aceit´avel de compress˜ao. Normalmente

25

a imagem ´e separada em blocos de 8x8 pixels, blocos disjuntos, mas a imagem pode ser
dividida em blocos de 4x4, 8x8, 16x16, 32x32 e at´e 64x64.

No terceiro passo temos que a cada bloco criado no segundo passo, aplicamos o algo-
ritmo da transformada discreta do cosseno, considerado como o passo mais importante
no processo de compress˜ao, ela toma um conjunto de dados inciais (dados espaciais) e os
converte em dados de frequˆencia. Uma das caracter´ısticas mais not´aveis na transformada
´e que os dados resultantes exigem uma quantidade maior de espa¸co para armazenamento.
A transformada deve eliminar as correla¸c˜oes pois ao observar os pixels em uma imagem
natural pode se notar um n´ıvel muito alto, ou seja, os pixels pr´oximos s˜ao semelhantes
e muitas vezes redundantes, com isto necessitamos de representar somente um desses
valores, sem perda aparente para a imagem. Uma outra caracter´ıstica importante ao
trabalhar com dom´ınio de frequˆencia ´e que as distor¸c˜oes acontecem onde nossos olhos n˜ao
percebem, que seriam nas arestas onde ocorre uma troca mais suave de tons.

´E importante ressaltar que o trabalho da transformada consiste em converter um
bloco de um espa¸co a um espa¸co de frequˆencia, ela n˜ao desempenha o papel de perdas na
compress˜ao, n˜ao salva nenhuma informa¸c˜ao. As perdas acontecem quando quantizamos
os blocos transformados e as informa¸c˜oes ser˜ao salvas no processo de codiﬁca¸c˜ao por
entropia, ou seja uma codiﬁca¸c˜ao que comprimi sem perdas.

No quarto passo,nota-se que a matriz transformada ocupa mais espa¸co de armazena-
mento que a matriz inicial pois ela transforma os elementos inteiros em elementos reais
e ´e onde entra o processo de quantiza¸c˜ao para diminuir esses dados, ou seja, reduzir o
n´umero de bits para armazenar.

Na compress˜ao de imagens as perdas signiﬁcantes acontecem no processo de quan-
tiza¸c˜ao, isso pelo fato de que descartamos alguns valores irrelevantes que posteriormente,
no processo de decodiﬁca¸c˜ao, n˜ao poder˜ao ser mais recuperados. Uma imagem que passou
por esse processo jamais poder´a voltar a seu formato original.

Este processo ocorre logo ap´os obter os blocos transformados, os elementos dos blo-
cos transformados sofrem uma divis˜ao por elementos correspondentes de uma matriz de
quantiﬁca¸c˜ao seguido por um arredondamento, os elementos reais do bloco transformado
perdem a parte decimal e voltam a ser inteiros com isso muitos s˜ao convertidos a zeros,
onde ocorre as perdas e tamb´em ocorre a redu¸c˜ao de espa¸co para armazenamento.

De uma forma bem sutil, o processo de quantizar passa os blocos transformados por
uma fun¸c˜ao de arredondamento, pois ´e melhor salva zero ou um bit do que algum intervalo
inﬁnito entre zero e um.

veja maiores informa¸c˜oes sobre quantiza¸c˜ao em [9] e [10].
No quinto passo ocorre o sequenciamento Zig-Zag, isso antes de passar pelo processo
de codiﬁca¸c˜ao por entropia, processo sem perdas nesse caso a codiﬁca¸c˜ao de Huﬀman, a
matriz sofre uma reordena¸c˜ao em zig-zag e seus elementos perdem a forma matricial de
duas dimens˜oes e tomam a forma de sequˆencia em uma dimens˜ao. Existem outras formas
de reordena¸c˜ao por´em o formato JPEG usa o sequenciamento de zig-zag que se sobressai
aos demais, isso pois como os valores importantes ﬁcam no canto esquerdo superior da
matriz transformada e esse m´etodo os coloca na frente e em ordem crescente de frequˆencia
da sequˆencia criada, facilitando a aplica¸c˜ao da codiﬁca¸c˜ao e aumentando sua otimiza¸c˜ao
de tempo.

26

Aqui no sexto e ultimo passo, ap´os passar os passos anteriores, os blocos resultantes
s˜ao sequˆencias de 64 elementos onde os dados relevantes se encontram no ﬁnal, e ´e not´avel
que as sequˆencias derivadas das matrizes esparsa (matriz onde a maioria dos elementos
valem zero)possuem grande quantidade de elementos nulos, aumentando a eﬁcacia da co-
diﬁca¸c˜ao. Esses dados s˜ao compactados mais uma vez e usando a codiﬁca¸c˜ao de Huﬀman,
dessa vez com um algoritmo sem perdas, logo em seguida s˜ao salvos no arquivo JPEG.

5.2

´Algebra linear nos passos de compress˜ao

Nessa se¸c˜ao ser´a descrita toda ´algebra envolvida na compress˜ao, not´avel que alguns
passos possuem mais ´algebra envolvida que outros por´em todos tem grande importˆancia.
Algumas matrizes aqui descritas podem ser vistas com outros detalhes em [15].

• 1o passo. Converter as cores do sistema RGB para Y CbCr.

• 2o passo. Divis˜ao da imagem em blocos.

• 3o passo. Aplica¸c˜ao da Transformada Discreta do Cosseno (TDC).

• 4o passo. Quantiza¸c˜ao dos blocos.

• 5a passo: Sequenciamento zig-zag.

• 6o passo. Codiﬁca¸c˜ao da imagem.

Em seguida iremos descrever cada passo aqui citado,

No primeiro passo ´e feita a convers˜ao do sistema RGB para Y CbCr, uma das formas
´e dada pelo sistema abaixo que representa uma transforma¸c˜ao linear e tem como fun¸c˜ao
um produto matricial, essa convers˜ao ´e feita pois o sistema RGB tem seus dados muito
bem agrupados e ﬁca dif´ıcil a aplica¸c˜ao do DCT j´a no espectro de crominˆancia ´e poss´ıvel
trabalhar melhor a transformada, temos esse sistema de convers˜ao logo abaixo que ´e tipico
e j´a ´e pr´e deﬁnido para o padr˜ao. Lembrando que nessa transforma¸c˜ao vamos considerar
as bases canˆonicas do espa¸co R3 e com isso no sistema RGB temos (1,0,0) a cor vermelha,
(0,1,0) a cor verde e (0,0,1) a cor azul.





 =







Y
Cb
Cr

0, 114
0, 587
0, 299
−0, 169 −0, 331
0, 500
0, 500 −0, 419 −0, 081













R
G
B

No segundo passo a imagem ´e separada em matrizes (blocos) quadradas de ordem 8

onde seus elementos s˜ao as escalas de cinza de cada pixel.

Exemplo 5.1 A imagem mostrada vista na ﬁgura 11 foi capturada pela cˆamera NIKON
7200, com sua qualidade m´axima possui dimens˜oes de 6000 × 4000 pixels. Para ser feita
a compress˜ao dessa foto, ela deve ser separada em blocos (matrizes) de 8 × 8 disjuntos,
temos no entanto 750 × 500 blocos, num total de 375.000 matrizes de 64 elementos. Ao
compararmos a mesma foto salva em RAW e em JPEG ´e poss´ıvel notar a diferen¸ca no
espa¸co ocupado, onde uma ocupa um espa¸co de 31,6 MB e a outra ocupa 19,1 MB, nesse
caso uma economia de 40% no armazenamento.

27

Figura 11: Imagem acervo pessoal

Exemplo 5.2 Aqui no trabalho vamos usar matrizes na sua forma mais simples, como
matrizes de imagens em preto e branco, apenas para dar uma ideia de como funciona
o processo lembrando que imagens coloridas possuem 3 componentes na entrada de cada
pixel e o processo ´e aplicado a cada umas dessas componentes. Por´em, um bloco 8 × 8 de
uma imagem colorida seria algo parecido com















(5, 11, 243)
(116, 196, 159)
(147, 80, 229)
(128, 163, 101)
(120, 25, 93)
(9, 98, 152)
(240, 213, 80)
(154, 106, 69)

(237, 44, 158)
(61, 255, 36)
(13, 207, 100)
(96, 193, 255)
(176, 57, 45)
(45, 169, 230)
(0, 75, 98)
(106, 70, 201)

(23, 115, 51)
(149, 205, 28)
(247, 214, 77)
(185, 23, 66)
(34, 211, 211)
(44, 206, 188)
(71, 0, 255)
(70, 23, 45)

(120, 68, 170)
(245, 246, 27)
(0, 142, 142)
(158, 111, 122)
(110, 178, 103)
(179, 248, 205)
(122, 111, 23)
(69, 255, 0)















.

...
...
...
...
...
...
...
...

Notem que na matriz acima, por falta de espa¸co, representamos apenas as primeiras
quatro colunas da mesma. Cada elemento dessa matriz ´e um vetor de 3 componentes,
seja ele na escala RGB, ou depois da convers˜ao na escala Y CbCr. Entretanto, como
ja’dito anteriormente, para demonstrar os pr´ıncipios da compress˜ao de imagens basta

28

considerarmos um bloco de mesmo tamanho representando uma imagem em escala de
cinzas. Temos ent˜ao algo como a matriz abaixo















66
90

61
85

70
109

52 55 61
64 73
69 72
63 59 55
62 59 68 113 144 104 66 73
63 58 71 122 154 106 70 69
68 70
67 61 68 104 126
58 75
77
79 65 60
65 83
55
85 71 64
78 94
65
87 79 69

88
68
61
76

70
59
68















.

No terceiro passo, como estamos comprimindo imagens e seus dados est˜ao em matrizes

usaremos a TDC bidimensional na compress˜ao, com isso ser´a usada seguinte express˜ao.

G(i, j) = α(i)α(j)

N −1
(cid:88)

N −1
(cid:88)

x=0

y=0

f (x, y) cos

(cid:18) (2x + 1)iπ
2N

(cid:19)

cos

(cid:18) (2y + 1)jπ
2N

(cid:19)

,

para i, j = 0, 1, ..., N − 1, com

α(x) =





1
√
N
(cid:114) 2
N

se

x = 0,

se x = 1, 2, ..., N − 1,

onde Gi,j ´e um elemento da matriz Transformada Discreta do Cosseno, f (x, y) Valores da
imagem original (escalas de cinza) e N Dimens˜ao da imagem (ou bloco).

Exemplo 5.3 Seja a matriz A, um bloco retirado de uma imagem qualquer, nele ser´a
aplicado o processo da DCT.















A =

66
90

61
85

70
109

64 73
52 55 61
63 59 55
69 72
62 59 68 113 144 104 66 73
63 58 71 122 154 106 70 69
68 70
67 61 68 104 126
58 75
77
79 65 60
65 83
55
85 71 64
78 94
65
87 79 69

88
68
61
76

70
59
68















Para a aplica¸c˜ao da DCT os coeﬁcientes s˜ao normalizados com valores entre -128 e
127, tendo que os valores iniciais est˜ao variando de 0 a 255 numa escala de cinza, essa
normaliza¸c˜ao ´e feita subtraindo 128 de cada componente. Fazendo ent˜ao Ni,j = Ai,j − 128
para cada elemento da matriz inicial A, criamos uma matriz normalizada como mostra a
seguir:

29

N =















−76 −73 −67 −62 −58 −67 −64 −55
−65 −69 −73 −38 −19 −43 −59 −56
16 −24 −62 −55
−66 −69 −60 −15
−65 −70 −57 −6
26 −22 −58 −59
−61 −67 −60 −24 −2 −40 −60 −58
−49 −63 −68 −58 −51 −60 −70 −53
−43 −57 −64 −69 −73 −67 −63 −45
−41 −49 −59 −60 −63 −52 −50 −34















Aplicando a DCT a cada elemento da matriz N , obtemos a matriz G como resultado,

ser´a citada como matriz transforma:

−415, 38 −30, 19 −61, 20
−21, 86 −60, 76















G =

4, 47
−46, 83
−48, 53
12, 12
−7, 73
−1, 03
−0, 17

0, 46
56, 13 −20, 10 −2, 39
27, 24
4, 88
13, 15 −7, 09 −8, 54
10, 25
5, 42 −5, 65
9, 93
77, 13 −24, 56 −28, 91
7, 37
1, 95
6, 30
1, 83
12, 07
34, 10 −14, 76 −10, 24
3, 14
1, 75 −2, 79
−6, 55 −13, 20 −3, 95 −1, 88
1, 85
4, 30
0, 94
−5, 94 −2, 38
2, 91
2, 38
0, 66
4, 12
0, 42
0, 18
−2, 42 −0, 88 −3, 02
1, 68
0, 50
−1, 07 −4, 19 −1, 17 −0, 10
0, 14















Entrando no quarto passo, o bloco transformado ´e passado por um processo de quan-
tiza¸c˜ao. Aqui ´e onde temos as perdas permanentes, uma vez que os elementos transfor-
mados s˜ao divididos por elementos correspondentes de uma matriz de quantiza¸c˜ao e em
seguida s˜ao arredondados para o inteiro mais pr´oximo. O processo de quantiza¸c˜ao pode
ser descrito pela express˜ao:

Fi,j = round

(cid:18) Gi,j
Qi,j

(cid:19)

,

para i, j = 0, 1, 2, ..., 7, onde Gi,j ´e a matriz transformada, Qi,j ´e a matriz de quantiza¸c˜ao
t´ıpica e Fi,j ´e a matriz resultante j´a quantizada e pronta para o sequenciamento zig-zag.

Os elementos da matriz de quantiza¸c˜ao Qi,j, s˜ao criados atrav´es de uma formula

pr´opria descrita por

Qi,j = 1 + (1 + i + j) ∗ fator de qualidade,

sendo que o Fator de Qualidade pode variar entre 2 e 25, pois valores acima de 25 afetam
muito a qualidade ﬁnal da imagem, ent˜ao se deseja ter uma boa taxa de compress˜ao com
as perdas insigniﬁcantes ´e necess´ario que o fator de qualidade esteja no intervalo sugerido,
lembrando que quanto menor maior qualidade e menor compress˜ao .

Exemplo 5.4 Veja abaixo uma matriz de quantiza¸c˜ao t´ıpica usada pelo padr˜ao JPEG.
Outras matrizes de quantiza¸c˜ao poder˜ao ser criadas desde que se especiﬁque. Utilizando a

30

matriz G descrita no 3a passo e passando ela pela quantiza¸c˜ao, obtemos a matriz F abaixo:

Q =















51
24
16 11 10 16
55
26
12 12 14 19
56
40
14 13 16 24
62
51
14 17 22 29
77
68
18 22 37 56
24 35 55 64
92
81
49 64 78 87 103 121 120 101
99
72 92 95 98 112 100 103

51
40
60
58
69
57
87
80
109 103
104 113

F =















−26 −3 −6
0 −2 −4
1
−3
1
−3
0
1
0
0
0
0
0
0

2 −1 0 0
2
0 0
0
1
1
0 0
0
5 −1 −1
0 0
0
0
2 −1
0 0
0
0
0
0
0 0
0
0
0
0
0 0
0
0
0
0
0 0
0
0
0
0





























Exemplo 5.5 Cada elemento da matriz G passa polo processo de quantiza¸c˜ao e forma
os elementos de F , como ser´a mostrado a seguir para o primeiro elemento.

f0,0 = round

f0,0 = round

(cid:19)

(cid:18) g0,0
q0,0
(cid:18) −415, 38
16

(cid:19)

f0,0 = round (−25, 96125)

f0,0 = −26

J´a no quinto passo, temos que o processo somente reordena os coeﬁcientes da matriz,
para a codiﬁca¸c˜ao, conforme mostra a imagem abaixo, para exempliﬁcar de forma mais
clara observe o exemplo a seguir:

Exemplo 5.6 Considere a matriz A, uma matriz esparsa, podemos notar, que a sequen-
cia logo abaixo foi criada com os elementos de A, reordenados segundo o sequenciamento
zig-zag.

31

Figura 12: Sequˆencia zig-zag,Google imagens















A =

9

−46 24
26
−6
4 −8
7 −1
0
−1
0
0
0
0

18 −5 4 1 −2
0
3 −1 0 6
0
1 0
1
0
0 0
0
0
0 0
0
0
0 0
0
0
0 0
0

2 0 −3 −1 1
0
0
0
0
0
0
0

0
0
0
0
0
0
0















[-46, 24, 26, -6, 18, 9, 2, -5, 3, 4, 7, -8, -1, 4, 0, -3, 1, 0, 1, -1, -1, 0, 0, 0, 1, 6, -2,
-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0]

Ao chegar aqui, no sexto passo, os dados transformados, quantizados e sequenciados
vem em forma de sequˆencia num´erica. Essa sequˆencia sofre um pouco de inﬂuˆencia es-
tat´ıstica, onde seus elementos s˜ao ordenados de forma decrescente em referˆencia a sua
frequˆencia de ocorrˆencia. Como ´e mostrado no Exemplo 4.1, que ser´a relembrado em
partes a seguir. Lembrando que no processo de compress˜ao estaremos trabalhando com
valores num´ericos e n˜ao letras como mostra o exemplo, porem a codiﬁca¸c˜ao segue o mesmo
racioc´ınio para codiﬁca¸c˜ao. Baseado no exemplo temos que em seu primeiro passo os da-
dos s˜ao ordenados por frequˆencia, como mostra a tabela 3. O segundo passo ´e criar a
´arvore de Huﬀman, ver imagem 13. Por ﬁm montamos os c´odigos referentes aos caracte-
res, escrevemos a sequˆencia codiﬁcada e est´a pronto a ser salvo no arquivo JPEG, assim

32

A -
10
10

S E C I N O R U D P J L Q T
1
7

5

4

2

4

4

4

4

1

1

1

2

4

Tabela 3: Caracteres em ordem decrescente de frequˆencia

como mostra a ﬁgura 14.

Figura 13: ´Arvore de Huﬀman

Figura 14: C´odigos caracteres

Em c´odigo bin´ario vari´avel, codiﬁca¸c˜ao de Huﬀman, a frase pode ser escrita com 236

bits, e ´e representada numericamente assim:

101 11100 1101 0100 000 0101 001 000 100 001 0100 1100 0101 000 0110 0100 000 100
001 11101 000 1100 000 001 111110 1101 101 001 0110 000 0111 001 100 101 111100 000
001 0110 101 0100 101 100 100 000 1100 0101 0111 001 11101 1101 0110 0101 1100 001
0111 100 001 000 11100 1101 111101 111111 0111 100.

33

6 Aplica¸c˜ao no Ensino B´asico

Antes de inciar alguma atividade em qualquer turma devemos mostrar aos alunos
o que ´e apresentado aqui e posteriormente introduzir o pensamento cr´ıtico em algumas
situa¸c˜oes, por exemplo: Como a combina¸c˜ao de cores monta uma imagem? C´odigos usados
na inform´atica devem ser aplicados? ´Algebra linear aplicada a compress˜ao de imagens,
onde? O que ´e uma matriz? Quais opera¸c˜oes envolvendo matrizes eu irei aplicar?

Ainda que de modo vision´ario, este trabalho tem assuntos que podem ser trabalhados
no ensino m´edio e tamb´em no ensino fundamental, o ensino da matem´atica de forma
interdisciplinar com a ´area tecnol´ogica do tratamento de imagens e v´ıdeos. Em alguns
casos, quando ensinamos matem´atica no ensino m´edio, introduzimos a no¸c˜ao de matrizes
e suas opera¸c˜oes, sempre temos aqueles alunos que questionam ”onde eu poderei aplicar
esse conhecimento?”, aqui ´e poss´ıvel ver com clareza a grande aplica¸c˜ao. No ensino
fundamental j´a ´e poss´ıvel introduzir a no¸c˜ao de codiﬁca¸c˜ao binaria mostrando quantidades
e formas de relacionar a escrita binaria na matem´atica com a computa¸c˜ao. Este trabalho
pode ser usado como apoio a professores e alunos que desejam deixar mais interessante a
obten¸c˜ao e dom´ınio do conte´udo de matrizes, mostrando a vasta aplica¸c˜ao no cotidiano.

Exemplo 6.1 Cada aluno escolher uma foto em seu acervo pessoal e analisar o formato
em que foi salvo, tamanho que a imagem ocupa, veriﬁcar se existe a necessidade e possi-
bilidade de compress˜ao, quantas matrizes 8x8 existem naquela imagem.

Exemplo 6.2 Comparar uma foto antes e depois da compress˜ao, tamanho para armaze-
namento, formato, veriﬁcar se aquela ´e uma compress˜ao aceit´avel.

Exemplo 6.3 Pegar uma matriz 8x8 qualquer e fazer o sequenciamento zig-zag com seus
elementos, escrevendo os mesmos em linha, sempre olhando a posi¸c˜ao dos elementos. ´E
poss´ıvel fazer a atividade ao contr´ario com uma sequˆencia de 64 elementos, escrevendo os
mesmos em uma matriz 8x8.(Pode ser aplicado no ensino fundamental dando introdu¸c˜ao
a no¸c˜ao de sequˆencia num´erica.)

Considera¸c˜oes Finais

Com este trabalho abordamos uma pequena parte da aplica¸c˜ao de ´Algebra Linear que
existe por tr´as de um “simples”processo, que ´e a compress˜ao de uma imagem, ou melhor
dizendo a mudan¸ca do formato de uma imagem para reduzir o tamanho do armazena-
mento, facilitando a transmiss˜ao via rede e mantendo uma qualidade aceit´avel. Dentro
desse processo de cada passo est´a permeado pelo uso de ferramentas vindas da ´Algebra
Linear. Por exemplo, ao usarmos a Transformada Discreta do Cosseno, lidamos com
conceitos como as bases ortogonais e ortonormais, e tamb´em com mudan¸cas de bases.

Citando outros exemplos, temos uma transforma¸c˜ao linear no produto entre matrizes
para mudan¸ca de um sistema de cor a outro, que tamb´em pode ser visto tamb´em como
mudan¸ca de base, separa¸c˜ao de um bloco grande de pixels (imagem) em matrizes quadra-
das 8×8 para a aplica¸c˜ao da transformada discreta do cosseno, uso de subespa¸cos vetoriais

34

quando trabalhamos apenas com a base necess´aria para codiﬁca¸c˜ao da mensagem, entre
outros. Em resumo, existe matem´atica em praticamente tudo que trabalhamos. No en-
tanto, o trabalho al´em de mostrar a ´Algebra Linear por tr´as de uma situa¸c˜ao que muitas
vezes passa despercebida, alcan¸ca uma maior propor¸c˜ao dado que se faz necess´ario chamar
a aten¸c˜ao para o ensino de matem´atico em tempos atuais, em todos os n´ıveis de estudo,
para que isso busque e cres¸ca o interesse dos alunos dentro das salas.

Abordamos tamb´em alguns conceitos de programa¸c˜ao, como o padr˜ao JPEG que ´e
considerado uma excelente t´ecnica de compress˜ao e formato de armazenamento, onde sua
aplica¸c˜ao tem maior eﬁciˆencia como em imagens naturais de tons cont´ınuos, e tamb´em
onde n˜ao ´e recomendado como imagens em preto e branco, textos ou gr´aﬁcos. Ainda
falando sobre programa¸c˜ao temos a codiﬁca¸c˜ao de Huﬀman que mostra grande auxilio no
processo de compress˜ao ao codiﬁcar os dados com c´odigos bin´arios de tamanhos vari´aveis,
a qual tamb´em usa conceitos matem´aticos de probabilidade. Ressaltamos aqui que o pro-
cesso mostrado ´e uma vers˜ao muito simpliﬁcada do que acontece realmente, onde t´ecnicas
cada vez melhores visam melhorar a compress˜ao de arquivos para seu crescente uso. En-
tretanto as ideias principais est˜ao presentes aqui no texto, e esperamos ter alcan¸cado nosso
principal objetivo de mostrar o recorrente uso de Matem´atica, em particular da ´Algebra
Linear, em processos presentes no cotidiano de nossos alunos.

Espero que este trabalho possa ajudar aos professores do ensino b´asico, oferecendo
a eles uma forma diferente de trabalhar alguns conceitos matem´aticos, contextualizado
com a ´area de computa¸c˜ao, abordando, com did´atica, assuntos onde a ´Algebra Linear tem
grande aplica¸c˜ao como a compress˜ao de imagens.

Dedicat´oria

Dedico esse trabalho as pessoas que amo, em especial a meu ﬁlho, Lu´ıs Guilherme,
que ´e para quem desejo ser um bom exemplo de pessoa, esfor¸co e conhecimento. Dedico
tamb´em a mim mesmo, pois est´a sendo uma conquista e parte da realiza¸c˜ao de um sonho.

Agradecimentos

Agrade¸co, primeiramente, a mim mesmo por nunca desistir e ser meu maior apoio

sempre.

A todos que me apoiaram, deram suporte e sempre incentivaram a ser melhor e con-

tinuar melhorando.

A m˜ae de meu ﬁlho e amiga, que sempre me apoiou nos estudos e me ajudou demais

com a cria¸c˜ao de nosso ﬁlho, muitas vezes sozinha.

Aos meus colegas de mestrado, que sempre ajudaram nos estudos e d´uvidas, tanto na

turma de 2014 quando na turma de 2018.

Ao W´almisson R´egis de Almeida, que sempre me ajudou a ser algu´em melhor, que me

ajudou demais nas viagens a Ouro Branco, e mostrou ser um ´otimo amigo.

Aos professores que me ensinaram demais, mostraram que devo estudar com mais

dedica¸c˜ao e tiveram grande inﬂuˆencia no meu crescimento.

35

A meus grandes amigos Daniela Maia e Patrick Fonseca, que sempre me ajudaram em

momentos dif´ıceis e sempre buscando o meu melhor.

`A CAPES pelo apoio ﬁnanceiro, possibilitou mais tempo para os estudos e com mais

tranquilidade.

E a todos que me deram apoio, mesmo de forma subliminar.

Referˆencias

[1] BOLDRINI, J. L. ´Algebra Linear. 3aed., S˜ao Paulo - Brasil: Editora Harbra, 1986.

[2] SANTOS, Reginaldo J. Introdu¸c˜ao `a ´Algebra Linear. 1aed., Belo Horizonte - Brasil:

Imprensa Universitaria da UFMG, 2013.

[3] HEFEZ, Abramo; FERNANDEZ, Cec´ılia de Souza. Introdu¸c˜ao `a ´Algebra Linear.

2aed., Rio de Janeiro - Brasil: Editora SBM - Cole¸c˜ao Profmat, 2016.

[4] HEFEZ, Abramo. Aritm´etica. 3aed., Rio de Janeiro - Brasil: Editora SBM - Cole¸c˜ao

Profmat, 2013.

[5] STEINBRUCH, Alfredo; WINTERLE, Paulo. ´Algebra Linear. 2aed., S˜ao Paulo -

Brasil: Editora PEARSON, 1987.

[6] BOYCE, William E.; DIPRIMA, Richard C. Equa¸c˜oes Diferenciais Elementares e
Problemas de Valores de Contorno. 9aed., Rio de Janeiro - Brasil: Editora LTC,
2010.

[7] Codiﬁca¸c˜ao de Huﬀman 1. Dispon´ıvel em: <http://www.inf.unioeste.br/∼adair/PID/
Notas%20Aula/Codiﬁcacoes %20Huﬀman%20e%20Aritmetica.pdf> Acesso em: 25
de Setembro de 2016

[8] Codiﬁca¸c˜ao de Huﬀman 2. Dispon´ıvel em: <http://www.inf.ufes.br/∼pdcosta/ensino/
2009-1-estruturas-de-informacao/material/CodiﬁcacaoHuﬀman.pdf> Acesso em: 25
de Setembro de 2016

[9] SILVA, Francisco Assis da, Compress˜ao de imagens usando a Transformada discreta
do cosseno. Disserta¸c˜ao de Gradua¸c˜ao, Unoeste, FIPP, Presidente Prudente, 1998.

[10] LIMA, Nilson Teixeira, Compress˜ao de imagens JPEG. Trabalho de Gradua¸c˜ao, Pro-

cessamento digital de sinais, UFPR, Presidente Prudente, 2007.

[11] GROLLI, Wellingtom Luiz Julio Rodrigues, Compress˜ao de imagens (JPEG). Tra-
balho de Gradua¸c˜ao, Processamento digital de sinais, UFPR, Presidente Prudente,
2007.

[12] FRASSON, Miguel, Transformada Discreta de Cosseno: uma aplica¸c˜aao da ´Algebra

Linear na compress˜ao de imagens do formato JPEG, 2013.

36

[13] VASCONCELOS; CARTAXO; RIBEIRO; ANDRYˆE, Transformada Discreta do Cos-

seno Aplicada ao Padr˜ao JPEG, IFPB.

[14] Signiﬁcado JPEG. Dispon´ıvel em: <https://www.signiﬁcados.com.br/jpeg/> Acesso

em 13 de Novembro de 2016

[15] SILVA, Felipe A.; DOMINIQUINI, Rafael B. T´ecnicas para identiﬁca¸c˜ao de mani-
pula¸c˜oes baseadas em insconsistˆencias de compress˜ao. Ttrabalho de gradua¸c˜ao, 2010.

[16] As S´eries de Fourier. Dispon´ıvel

em:

<https://seara.ufc.br/pt/tintim-por-

tintim/matematica/as-series-de-fourier/> Acesso em:04 de Janeiro de 2017

[17] S´eries de Fourier Dispon´ıvel em: <http://www.feis.unesp.br/Home/departamentos

/engenhariaeletrica/mcap03.pdf> Acesso em:04 de Janeiro de 2017

[18] BIEZUNER, Rodney j. Introdu¸c˜ao `as Equa¸c˜oes Diferenciais Parciais. Notas de Aula,

UFMG, 2007.

[19] SANTOS, Reginaldo J. S´eries de Fourier. UFMG, 2002.

[20] BOYCE, William E. e DIPrIMA, Richard. Equa¸c˜oes Diferenciais Elementares e
Problemas de Valores de Contorno. 8aed., Rio de Janeiro - Brasil: Editora LTC,
2005.

[21] SANTOS, Reginaldo

em:
<http://www.mat.ufmg.br/∼regi/eqdif/transfourier.pdf> Acesso em:05 de Ja-
neiro de 2017

de Fourier,2010. Dispon´ıvel

J. Transformada

[22] Espa¸cos vetoriais, exemplos. Dispon´ıvel em: <https://www.ime.unicamp.br/ mar-
21 de

cia/AlgebraLinear/Arquivos%20PDF/exemplos espacos.pdf> Acesso em:
Agosto de 2020

37

