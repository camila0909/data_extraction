SOCIEDADE BRASILEIRA DE MATEMÁTICA 

FUNDAÇÃO UNIVERSIDADE FEDERAL DE RONDÔNIA 

MESTRADO PROFISSIONAL EM MATEMÁTICA EM REDE NACIONAL 

JOSIEUDO PEREIRA GAIÃO 

UTILIZAÇÃO DO SOFTWARE OPENMODELICA COMO FERRAMENTA DE 
AUXÍLIO AO ENSINO DA MATEMÁTICA. 

PORTO VELHO - RO 
2021 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
JOSIEUDO PEREIRA GAIÃO 

UTILIZAÇÃO DO SOFTWARE OPENMODELICA COMO FERRAMENTA DE 
MODELAGEM E AUXÍLIO AO APRENDIZADO DA MATEMÁTICA. 

Trabalho de Conclusão de Curso apresentado 

ao  Mestrado  Profissional  em  Matemática  em 

Rede  Nacional  –  PROFMAT  no  Polo  da 

Universidade  Federal  de  Rondônia  –  UNIR, 

como  requisito  parcial  para  obtenção  de 

Mestre                     em Matemática, tendo como orientador 

o Prof. Dr. Adeilton Fernandes da Costa 

PORTO VELHO - RO 
2021 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Autorizo a reprodução e divulgação total ou parcial deste trabalho, por qualquer 

meio  convencional  ou  eletrônico,  para  fins  de  estudo  e  pesquisa,  desde  que 

citada a fonte. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Aos meus pais José da Nobrega Gaião e Maria 

Neusa Pereira Gaião que  sempre priorizaram 

a minha educação e se sacrificaram de forma 

incondicional  para  que  eu 

tivesse  êxito 

profissional. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
. 

AGRADECIMENTOS 

Agradeço  primeiramente  a  Deus,  por  proporcionar  a  saúde  e  a  sabedoria 

necessárias a conclusão deste curso; 

Aos meus pais, pela motivação e apoio incondicional as minhas decisões e que 

mostraram  que  o  conhecimento  sempre  deve  ser buscado  ao  longo  da nossa 

jornada pela vida; 

Ao meu filho Gabriel Pereira Gaião que entenderá no futuro a necessidade das 

minhas ausências; 

Ao  meu  orientador  Prof.  Dr.  Adeilton  Fernandes  da  Costa,  por  me  inspirar  a 

desenvolver essa dissertação e pelo enorme apoio; 

Aos meus amigos de curso que também me ajudaram a sanar dúvidas. 

Aos docentes do PROFMAT-UNIR: Prof. Dr. Adeilton Fernandes da Costa, Prof. 

Phd  Tomás  Daniel  Menéndez  Rodriguez,  Prof.  Dr.  Marinaldo  Felipe  da  Silva, 

Prof. Dr. Flávio Batista Simão e Prof. Ms. Ronaldo Chaves Cavalcanti, por terem 

a  paciência  e  dedicação  de  repassarem  os  seus  brilhantes  conhecimentos 

matemáticos. 

 
 
 
 
 
 
 
 
 
 
 
 
 
RESUMO 

A  ligação  entre  conteúdos  de  duas  ou  mais  disciplinas  deve  ser  sempre 

incentivada pois permite que o aluno elabore uma visão mais ampla a respeito 

dos  assuntos  envolvidos.  O  objetivo  principal  deste  trabalho  é  estimular  o 

interesse  dos  alunos  a  usarem  o  software  OpenModelica,  para  auxiliar  no 

aprendizado  e  consequentemente  na  solução  de  problemas  de  matemática. 

Para  realizar  o  objetivo  proposto  foram  desenvolvidas  várias  soluções  de 

problemas  matemáticos  utilizando  a  modelagem  via  interligação  de  blocos  do 

OpenModelica.  As  soluções  propostas  nesse  trabalho  não  são  únicas,  o  que 

torna este assunto atraente já que cada um poderá desenvolver a sua própria 

solução. Pretende-se dessa forma mostrar os benefícios no aprendizado através 

da correspondência das áreas da matemática e informática de modo a estimular 

os alunos a utilizarem a tecnologia para auxiliar na compreensão da matemática.  

Palavras chaves: Modelagem Matemática, Aprendizado, OpenModelica. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
ABSTRACT 

The link between contents of two or more subjects should always be encouraged 

as  it  allows the  student  to  develop  a broader view  of  the  issues  involved.  The 

main  objective  of  this  work  is  to  stimulate  students'  interest  in  using 

OpenModelica  software,  to  aid  in  learning  and,  consequently,  in  solving  math 

problems. To achieve the proposed objective, several solutions to mathematical 

problems were developed using OpenModelica block interconnection modeling. 

The  solutions  proposed  in  this  work  are  not  unique,  which  makes  this  subject 

attractive as each one will be able to develop their own solution. It is intended in 

this way to show the benefits in learning through the correspondence of the areas 

of mathematics and information technology in order to encourage students to use 

technology to help in the understanding of mathematics. 

Keywords: Mathematical Modeling, Learning, OpenModelica. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
LISTA DE FIGURAS 

Figura 1: tela de abertura do OMEdit ............................................................... 24 

Figura 2: janela de abertura do OMedit. ........................................................... 25 

Figura 3: janela de modelagem do OMEdit ...................................................... 25 

Figura 4: janela de gráficos do OMEdit ............................................................ 26 

Figura 5: janela para nomear o modelo a ser criado no OMEdit ...................... 27 

Figura 6: conexão entre blocos ........................................................................ 27 

Figura 7: blocos da biblioteca Math e Source................................................... 33 

Figura 8: modelagem da primeira equação do sistema (4). ............................. 33 

Figura 9: modelagem da segunda equação do sistema (4). ............................ 34 

Figura 10: modelagem que resolve o sistema (4). ........................................... 34 

Figura 11: resposta gráfica gerada no OpenModelica para o valor de x do 

sistema (1). ...................................................................................... 35 

Figura 12: resposta gráfica gerada no OpenMdelica para o valor de y do 

sistema (1). ...................................................................................... 35 

Figura 13: variável 𝑥 da 1ª equação do sistema (11) como função de 𝑦 e 𝑧. ... 37 

Figura 14: variável 𝑥 da 2ª equação do sistema (11) como função de 𝑦 e 𝑧. ... 38 

Figura 15: variável 𝑥 da 3ª equação do sistema (11) como função de 𝑦 e 𝑧. ... 38 

Figura 16: o diagrama de blocos final que resolve o sistema (11). .................. 39 

Figura 17: gráfico que mostra a solução do sistema (11). ................................ 39 

Figura 18: diagrama de blocos de uma solução da equação (15) com o 

OpenModelica. ................................................................................ 40 

Figura 19: gráfico da equação (15) mostrando o vértice V. .............................. 42 

Figura 20: diagrama de blocos que resolve equação (15). .............................. 42 

Figura 21: primeira solução da equação (15). .................................................. 43 

Figura 22: segunda solução da equação (15). ................................................. 43 

Figura 23: diagrama de blocos para solução de equação do segundo grau com 

raízes complexas. ............................................................................ 46 

Figura 24: raízes reais e imaginários da 1° solução de 𝑥2 + 10𝑥 + 50 = 0. ..... 47 

Figura 25: valor real da 2° solução de 𝑥2 + 10𝑥 + 50 = 0 ................................ 48 

Figura 26: valor imaginário da 2° solução de 𝑥2 + 10𝑥 + 50 = 0 ...................... 48 

Figura 27: modelagem para equação do segundo grau raízes complexas. ..... 49 

Figura 28: valores reais e imaginários da 1ª solução de 𝑥2 + 10𝑥 + 50 = 0. .... 49 

 
Figura 29: valores reais e imaginários da 2ª solução de 𝑥2 + 10𝑥 + 50 = 0. ... 50 

Figura 30: montagem para solução da equação 𝑠𝑒𝑛(𝑥) = 0.5 . ....................... 51 

Figura 31: solução gráfica da equação trigonométrica 𝑠𝑒𝑛(𝑥) = 0.5 ................ 51 

Figura 32: montagem para solução da equação 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2 .................... 52 

Figura 33: gráfico da solução da equação 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2 ............................. 52 

Figura 34: montagem para encontrar o valor da identidade trigonométrica 

𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥). ........................................................................... 53 

Figura 35: valor da identidade trigonométrica 𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥) ..................... 53 

Figura 36: montagem do cálculo de 𝑦  =  𝑠𝑒𝑛2(𝑥)   + 2𝑡𝑎𝑛2(𝑥), se 𝑠𝑒𝑐 (𝑥) = 3. 54 

Figura 37: valor da expressão 𝑦  =   𝑠𝑒𝑛2(𝑥)   + 2𝑡𝑎𝑛2(𝑥), quando 𝑠𝑒𝑐 (𝑥) = 3. 55 

Figura 38: modelagem da equação da elipse  𝑥2/4 + 𝑦2 = 12 ......................... 57 

Figura 39: gráfico da elipse. ............................................................................. 57 

Figura 40: modelagem da equação da elipse  𝑥2/4 + 𝑦2 = 12. ........................ 59 

Figura 41: gráfico da hipérbole. ........................................................................ 59 

Figura 42: modelagem da equação da parábola  𝑥2 − 3𝑥 + 2. ......................... 60 

Figura 43: visualização gráfica da equação 𝑥2 − 3𝑥 + 2 .................................. 61 

Figura 44: montagem para o estudo do sinal de 2𝑥 –  1 ................................... 62 

Figura 45: saída gráfica do bloco lessThreshold. ............................................. 63 

Figura 46: saída gráfica do bloco greaterThreshold. ........................................ 63 

Figura 47: modelagem para o estudo do sinal da função 𝑥2 –  𝑥 −  6. .............. 64 

Figura 48: saída do bloco lessThreshold, onde 𝑥2 –  𝑥 −  6 < 0 ....................... 64 

Figura 49: saída do bloco greaterThreshold, onde  𝑥2 –  𝑥 −  6 > 0 ................. 65 

Figura 50: modelagem do sistema de inequações (22) .................................... 66 

Figura 51: solução do sistema de inequações (22) .......................................... 66 

Figura 52: diagrama de blocos para o problema de otimização ....................... 67 

Figura 53: saída do bloco triggeredSampler mostrando onde 𝑑’ = 0. .............. 68 

Figura 54: saída do bloco lessThreshold, mostrando onde 𝑑’ < 0. .................. 68 

Figura 55: saída do bloco greaterThreshold, mostrando 𝑑’ > 0. ...................... 68 

Figura 56: modelo em diagrama de blocos para o cálculo de (26). .................. 69 

Figura 57: cálculo da área de 𝑦 = 𝑥 entre 1,1 e 4,2. ......................................... 70 

Figura 58: modelagem para gerar a solução gráfica de (29). ........................... 73 

Figura 59: solução da equação (29) ................................................................. 73 

Figura 60: modelagem para gerar a solução gráfica de (31). ........................... 74 

Figura 61: solução gráfica de (31) .................................................................... 74 

Figura 62: circuito elétrico RLC paralelo .......................................................... 75 

Figura 63: diagramas de blocos que modela o circuito RLC paralelo. ............. 76 

Figura 64: solução gráfica da equação diferencial de segunda ordem ............ 76 

Figura 65: modelagem para solução gráfica de (30) ........................................ 77 

Figura 66: solução gráfica de (36) .................................................................... 78 

Figura 67: sistema mecânico ............................................................................ 79 

Figura 68: Modelagem através de equações no espaço de estados. .............. 80 

Figura 69: resposta 𝑦 para as equações no espaço de estado (40). ............... 80 

Figura 70: diagrama de blocos que modela o sistema da Figura 67. ............... 81 

Figura 71: modelagem em diagrama de blocos da equação (40) .................... 81 

Figura 72: saída 𝑦 do diagrama de blocos da Figura 71. ................................. 82 

Figura 73: modelo elétrico e mecânico de um motor CC ................................. 83 

Figura 74: diagrama de blocos que modela as equações do motor CC ........... 84 

Figura 75: modelagem motor CC ..................................................................... 85 

Figura 76: velocidade do motor CC .................................................................. 86 

Figura 77: corrente do motor CC ...................................................................... 86 

Figura 78: modelo para o cálculo da fatura de energia. ................................... 88 

Figura 79: curva de carga diária de uma residência ......................................... 88 

Figura 80: curva do dispêndio com energia elétrica durante um dia ................ 89 

Figura 81: diagrama de blocos que modela a lei de Newton do resfriamento .. 90 

Figura 82: decaimento da temperatura acordo com a lei de resfriamento de 

Newton ............................................................................................ 90 

Figura 83: cabo suspenso pela ação do próprio peso ...................................... 91 

Figura 84: diagrama de blocos que modela a equação (57) ............................ 93 

Figura 85: gráfico da catenária ......................................................................... 93 

 
 
 
 
 
 
 
LISTA DE TABELAS 

Tabela 1: blocos da Biblioteca Continous que serão utilizados. ....................... 28 

Tabela 2: blocos da Biblioteca Logical que serão utilizados. ........................... 29 

Tabela 3: blocos da Biblioteca Math que serão utilizados. ............................... 29 

Tabela 4: blocos da Biblioteca Source que serão utilizados. ........................... 30 

Tabela 5: blocos da Biblioteca BlocksComplex que serão utilizados. .............. 30 

Tabela 6: operações básicas com números complexos no OpenModelica. ..... 44 

Tabela 7: resultado da soma e subtração de 𝑧1 e 𝑧2. ....................................... 44 

Tabela 8: resultado da multiplicação, divisão de 𝑧1 e 𝑧2 e conjugado de 𝑧1. .... 45 

Tabela 9: lista de equipamentos e suas potências ........................................... 87 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
SUMARIO 

1 

2 

2.1 

2.2 

INTRODUÇÃO .................................................................................... 17 

MODELAGEM MATEMÁTICA ............................................................ 19 

Ferramentas de Simulação .................................................................. 21 

Introdução ao OpenModelica ............................................................... 24 

2.2.1 

Bibliotecas do OpenModelica .............................................................. 28 

3 

MODELAGEM  DE  PROBLEMAS  MATEMÁTICOS  COM  O 

OPENMODELICA ............................................................................... 32 

Sistemas de equações lineares ........................................................... 32 

Soluções reais de equações do segundo grau com o OpenModelica . 40 

Operações básicas com números complexos ..................................... 43 

3.1 

3.2 

3.3 

3.3.1 

Soluções complexas de equações do segundo grau com o 

OpenModelica...................................................................................... 45 

3.4 

Soluções de equações trigonométricas e exponenciais com o 

OpenMOdelica. .................................................................................... 50 

3.5 

Gráficos das cônicas: elipse, hipérbole e parábola ............................. 55 

3.5.1 

A elipse ................................................................................................ 55 

3.5.2 

A hipérbole .......................................................................................... 57 

3.5.3 

A parábola ........................................................................................... 59 

3.6 

Estudo do sinal de funções, solução de inequações e aplicações de 

derivadas e integrais ............................................................................ 61 

3.6.1 

Estudo do sinal de funções .................................................................. 61 

3.6.2 

Problema com Inequação .................................................................... 65 

3.6.3 

Problemas de máximos e mínimos ...................................................... 66 

3.6.4 

Área de superfície ................................................................................ 69 

4 

MODELAGEM  DE  EQUAÇÕES  DIFERENCIAIS,  EQUAÇÕES  NO 

ESPAÇO  DE  ESTADOS  E  DE  SISTEMAS  DINÂMICOS  COM  O 

OPENMODELICA ............................................................................... 71 

Modelagem de equações diferenciais de primeira e segunda ordem .. 72 

Modelagem de sistemas dinâmicos: circuito elétrico RLC paralelo ..... 75 

Modelagem de sistemas dinâmicos: linhas de corrente de sistemas 

4.1 

4.2 

4.3 

hidráulicos, linhas de emissão e trajetória. .......................................... 77 

4.4 

Modelagem de sistemas dinâmicos: Sistema mecânicos e equações no 

espaço de estado ................................................................................ 78 

4.5 

4.6 

4.7 

4.8 

5 

6 

Modelagem de sistemas dinâmicos: motor em corrente contínua. ...... 82 

Modelagem de sistemas dinâmicos: medição de energia elétrica e o 

seu faturamento. .................................................................................. 86 

Modelagem de sistemas dinâmicos: Lei de esfriamento de Newton ... 89 

Modelamento de sistema dinâmico: cabo suspenso ........................... 91 

CONCLUSÃO...................................................................................... 94 

REFERÊNCIAS ................................................................................... 95 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
1 

INTRODUÇÃO 

17 

O OpenModelica é um ambiente de código aberto, que modela, simula e 

realiza  otimização,  baseado  na  linguagem  Modelica  orientada  a  objetos 

fundamentada em equações. 

Muito além de montar diagramas de blocos e códigos os conhecimentos 

de modelagem computacional é um aprendizado benéfico para outras áreas de 

formação tanto para crianças como para os adultos.  

Os  conceitos  de  lógica  e  raciocínio  fazem  parte  tanto  da  utilização  de 

softwares  como  da  matemática.  Por  exemplo,  modelar  para  aprender 

matemática, fara com que os alunos enxerguem os problemas matemáticos de 

maneira mais lógica e saberá o que deve ser feito para solucioná-los. 

Explorar a modelagem matemática de fenômenos é uma ótima prática de 

como  aplicar  a  matemática  no  cotidiano.  A  descrição  matemática  do 

comportamento de fenômenos permite, prever por exemplo, o desempenho do 

fenômeno em tela. Por fim, estudar os conceitos matemáticos de modelagem, a 

aplicação destes modelos ao dia a dia, usando para isso também os conceitos 

de modelagem computacional, fara com que os problemas sejam resolvidos de 

forma muito mais otimizada. 

A  linha  a  ser  seguida  toma  como  princípio  os  seguintes  objetivos 

específicos: Desenvolver a modelagem matemática de alguns sistemas físicos e 

naturais.  Mostrar  como  se  criar  a  partir  do  modelo  matemático,  modelos 

computacionais através do OpenModelica. Apresentar os principais recursos do 

OpenModelica  que  serão  utilizados  para  resolver  os  modelos  matemáticos  e 

motivar  os  alunos  a  utilizarem  ferramentas  computacionais  para  auxiliar  o 

aprendizado da matemática. 

 
 
 
 
 
 
 
 
 
 
 
 
18 

Na  seção  2  tem-se  uma  contextualização  do  processo  de  modelagem 

matemática associada a modelagem por software e uma breve descrição sobre 

softwares de modelagem 

Na seção 3 é realizada a descrição resumida do software OpenModelica 

e como se dá a lógica de criação de modelos através de diagramas de blocos. A 

abordagem  sobre  a  resolução  de  alguns  problemas  matemáticos  também  é 

descrita nesta seção. É nesta seção que são dados exemplos majoritariamente 

de  atividades  que  tenham  relação  mais  direta  com  os  conteúdos  do  ensino 

básico e cujo desenvolvimento não demandam conhecimentos excessivamente 

complexos. Os professores e alunos do ensino básico e médio podem utilizar o 

conteúdo descrito  no  início  da  seção  3 até a  subseção  3.6.2  como  base  para 

desenvolver  seus  próprios  modelos,  relativos  a  algum  outro  assunto  de 

matemática básica não exposta neste trabalho. Nas subseções 3.6.3 e 3.6.4 são 

utilizados  exemplos  de  aplicações  utilizando  cálculo  diferencial  e  integral  e 

destinam-se a alunos e professores dos cursos de nível superior em matemática, 

física e engenharias que desejam ampliar o uso de ferramentas computacionais 

para a solução de problemas de cálculo ou iniciar o aprendizado de uma primeira 

ferramenta computacional. 

A  seção  4  trata  da  modelagem  de  equações  diferenciais,  equações  no 

espaço de estados e de sistemas dinâmicos com o OpenModelica. Toda a seção 

4 é indicada a alunos e professores de nível superior em matemática, física e 

engenharias. Essas atividades são mais direcionadas ao professor e ao aluno 

que desejam enriquecer o repertorio de recursos de ensino/aprendizagem. Deste 

modo,  o  professor  e  aluno  podem  incorporar  algumas  das  modelagens  aqui 

apresentadas  em  seus  estudos  e  pesquisas,  e  na  medida  que  passarem  a 

dominar as ferramentas tecnológicas poderão então criar modelos, integrar os 

modelos  existentes  com  novas  linguagens  de  programação  e  até  realizar 

confrontos  entre  modelos  para  saber  o  mais  adequado  a  determinado  tipo  de 

problema. 

E a seção 5 apresenta as considerações finais do trabalho. 

 
 
 
 
 
 
 
 
19 

2  MODELAGEM MATEMÁTICA 

Um  modelo  matemático  descreve  através  de  equações  matemáticas  o 

comportamento  de  um  sistema.  Construir  um  modelo  adequado  é  sempre  o 

primeiro passo na descrição de um sistema porque é tecnicamente inviável saber 

a  resposta  deste  sistema  a  uma  excitação  ou  perturbação,  sem  uma 

representação  matemática  do  seu  progresso  com  o 

tempo.  Modelos 

matemáticos  são  obtidos  pela  aplicação  das  leis  da  física  aos  pontos  de 

interesse  do  sistema.  Uma  análise  crítica  deve  ser  empregada  para  avaliar  a 

complexidade  do  modelo  com  a  exatidão  da  análise,  devemos  então, 

estabelecer uma  conciliação  entre  a  simplicidade  do modelo e a  precisão  dos 

resultados da análise. 

De acordo com Kraig (2018, p.1) 

Na solução de problemas de engenharia, é necessário compreender e 

determinar  a  resposta  dinâmica  de  sistemas  físicos  que  podem 

consistir  em  vários  componentes.  Esses  esforços  envolvem 

modelagem,  análise  e  simulação.  Geralmente,  construir  um  sistema 

protótipo  e  conduzir  testes  experimentais  pode  ser  impraticável  ou 

muito  caro  para  um  projeto  preliminar.  Assim  sendo,  a  modelagem 

matemática,  a  análise  e  a  simulação  de  sistemas  de  engenharia 

auxiliam imensamente no processo de projeto. 

Ainda  de  acordo  com  Kraig  (2018,  p.1),  “Modelagem: O  processo  de 

aplicar  as  leis  físicas  fundamentais  apropriadas  de  modo  a  determinar  as 

equações  matemáticas  que  adequadamente  descrevem  o  comportamento  do 

sistema de engenharia”. 

Conforme Ogata (2010, p. 12), “a modelagem matemática de um sistema 

dinâmico é definida com um conjunto de equações que representam a dinâmica 

do sistema com precisão, ou pelo menos, de forma bastante aceitável”. 

Na  obtenção  de  um  modelo  matemático  relativamente  simplificado, 

frequentemente 

torna-se  necessário 

ignorar  certas  propriedades 

físicas 

 
 
 
 
 
 
 
 
 
 
 
 
 
20 

inerentes ao sistema. Se os efeitos que essas propriedades ignoradas têm sobre 

a resposta forem pequenos, pode-se obter boa aproximação entre os resultados 

da análise de um modelo matemático e os resultados do estudo experimental do 

sistema físico (Ogata, 2010). É extremamente recomendado que as previsões 

de  um  modelo  matemático,  sejam  realizadas  também,  através  de  simulações 

computacionais,  principalmente  quando  se  tem  um  número  grande  variáveis 

envolvidas no processo.  

Existem diversas ferramentas de simulação que podem ser usadas, cabe 

ao usuário perceber a que melhor se adequa ao modelo matemático criado. As 

simulações que tratam de modelos lineares tornam mais fácil a sua utilização no 

computador exigindo  inclusive  menos  ciclos  de  cálculo.  Deve-se,  portanto,  ter 

em o cuidado quando se usa modelos não lineares pois o tempo requerido a sua 

solução  é  bem  mais  elevado,  ou  seja,  o  modelo  deve  ser  suficientemente 

sofisticado para mostrar os aspectos relevantes da solução do problema sem se 

tornar muito pesado para as ferramentas computacionais disponíveis. 

Para Costa (2018) 

Modelagem pode ser compreendida como uma metodologia de ensino 
que  possibilita  ao  estudante  abordar  conteúdos  matemáticos  a  partir 
de  fenômenos  de  sua  realidade,  e  tem  como  objetivo  explicar 
matematicamente situações do cotidiano, das mais diferentes áreas da 
Ciência, com o propósito de educar matematicamente. Ela permite uma 
inversão  do  “modelo  comum”  de  ensino,  visto  que,  por  meio  da 
modelagem  selecionam-se  primeiramente  os  problemas  e  deles 
emergem os conteúdos matemáticos, de modo a resolvê-los. 

Conforme  definição  expostas  a  modelagem  matemática  consiste  no 

exercício ou na procura de caracterizar matematicamente um fenômeno. Com a 

modelagem pode-se ensinar matemática de modo que os alunos a percebam no 

seu cotidiano, já que esses alunos poderão traduzir para linguagem matemática 

as suas observações. 

As aplicações dos modelos matemáticos vão desde a descrição sistemas 

mecânicos, elétricos, fluidos, térmicos, fenômenos econômicos, epidemiológicos 

dentre  outras  inúmeras  aplicações.  Importante  ressaltar  que  os  resultados 

 
 
 
 
 
 
 
 
 
 
21 

obtidos a partir de um modelo matemático específico são aproximações e a sua 

utilização prática  deve  ser sempre  verificada  por meio  da  comparação da  sua 

solução (como os resultados da simulação) com os resultados experimentais. 

Por  isso,  destacam  Marcel  e  Mirian  (2016,  p.  17)  que  “Assim,  o 

computador deve estar inserido em atividades essenciais, tais como aprender a 

ler, escrever, compreender textos, entender gráficos, contar, desenvolver noções 

espaciais  etc.  E,  nesse  sentido,  a  informática  na  escola  passa  a  ser  parte  da 

resposta a questões ligadas à cidadania.”. 

2.1  Ferramentas de Simulação 

Diversos  softwares  comerciais  e  gratuitos  de  simulação  têm  sido 

desenvolvidos como ferramentas para os usuários analisarem sistemas. Vamos 

discutir  brevemente  alguns  desses  programas  de  modo  a  exemplificar  a 

modelagem matemática e a análise dos sistemas. 

OpenModelica  é  um  ambiente  de  modelagem  e  simulação  baseado  na 

linguagem Modelica (linguagem de modelagem orientada a objetos que permite 

a  modelagem  de  sistemas  dinâmicos)  de  código  aberto  destinado  ao  uso 

industrial e acadêmico. 

O  Simulink  é  uma  ferramenta  numérica  de  simulação  que  faz  parte  do 

programa MATLAB desenvolvido pela MathWorks. Ele usa uma interface gráfica 

que possibilita a criação de representações em diagrama de blocos dos sistemas 

a serem simulados, no qual cada bloco representa uma operação de entrada e 

saída. O Simulink é usado para simular os mais diversos tipos de sistemas, tais 

como  sistemas  mecânicos,  elétricos,  biológicos,  meteorológicos  dentre  outras 

infinidades de sistemas. 

O Xcos é um simulador de sistemas dinâmicos no domínio do tempo. Ele 

pode realizar simulações com tempo discreto e contínuo. O Xcos é composto de 

um  editor  gráfico,  onde  é  possível  projetar  modelos  de  sistemas  dinâmicos 

 
 
 
 
 
 
 
 
 
 
 
 
22 

híbridos. Os modelos podem ser projetados, carregados, salvos, compilados e 

simulados. 

LTspice é um software de simulação SPICE de alto desempenho, que faz 

a  captura  esquemática  e  a  visualiza  através  de  formas  de  onda.  No  LTspice 

temos aprimoramentos de modelos de dispositivos eletroeletrônicos para facilitar 

a  simulação  de  circuitos  analógicos.  Incluídos  no  download  do  LTspice  estão 

macromodelos  para  a  maioria  dos  reguladores  de  comutação  de  dispositivos 

analógicos,  amplificadores,  bem  como  uma  biblioteca  de  dispositivos  para 

simulação geral de circuitos. 

Wolfram Mathematica (conhecido como Mathematica) é um programa de 

computador,  que  implementa  um  sistema  de  álgebra  computacional.  Contém 

diversas bibliotecas de programação prontas a serem usadas para diversos fins 

em várias áreas das ciências exatas. O programa insere-se em diversas áreas 

da  engenharia,  biologia,  química,  processamento  de  imagens,  finanças, 

estatística, matemática, além de outras áreas. 

PSIM  é  um  pacote  de  software  de  simulação  de  circuitos  elétricos, 

projetado especificamente para uso em simulações de circuitos de eletrônica de 

potência e acionamento de motores, ele também pode ser usado para simular 

qualquer circuito eletrônico. 

Excel é um editor de planilhas eletrônicas produzido pela Microsoft para 

computadores e tem a principal função de organizar e formatar folhas de cálculo, 

com  fórmulas  matemáticas.  Possui  pacotes  de  funções  matemáticas  e  de 

engenharia. O Excel é um software de fácil utilização o que permite que os 

seus usuários rapidamente dominem vários dos seus recursos. As tabelas 

construídas  com  o  Excel  são  compostas  por  linhas  e  colunas,  e  a 

intersecção entre uma linha e uma coluna, chamada de célula.  

O Excel também é ótimo para trabalhar com a Matemática, pois diversos 

modelos  matemáticos  já  prontos,  estão  disponíveis  para  uso.  Modelagens  de 

 
 
 
 
 
 
 
 
 
 
 
23 

problemas que envolvem transferência de calor e que são resolvidos através das 

funções de Bessel, podem ser analisados através da função BESSELJ no Excel. 

A distribuição normal, estudada em estatística, é uma das distribuições de 

probabilidade  mais  utilizadas  para  modelar  fenômenos  naturais.  No  Excel 

podemos  utilizar  a  função  DIST.NORM.N  para  modelar  fenômenos  com 

distribuição de probabilidade do tipo normal. 

Há também diversas funções da matemática básica já prontas para serem 

utilizadas  no  Excel  tais  com  como  funções  trigonométricas,  hiperbólicas, 

logarítmicas entre outras. Algumas funções básicas são excelentes para modelar 

sistemas  da  física  clássica  que  trata  do  movimento  retilíneo  e  do  movimento 

circular. 

Resumindo, deve ser observado que todas as ferramentas de simulação 

numérica  são  construídas  usando  os  princípios  básicos  de  modelagem 

matemática.  Ou  seja,  a  lei  da  Física  apropriada  (por  exemplo,  segunda  lei  de 

Newton, lei das tensões de Kirchhoff, Lei de Newton do resfriamento) é aplicada 

ao sistema específico (mecânico, elétrico, fluido etc.) de modo a desenvolver as 

equações  que  descrevem  a  dinâmica  do  sistema,  que  então  são  resolvidas 

através de algum algoritmo computacional.  

A  proposta  é  trazer  o  OpenModelica  como  a  ferramenta  de  simulação 

numérica escolhida para obtenção das respostas de sistemas dinâmicos lineares 

e não lineares e de solução de problemas matemáticos e com isso mostrar aos 

estudantes  que  as  tecnologias  de  informática  associadas  ao  ensino  da 

matemática  é  um  dos  caminhos  para  ampliar  o  raciocínio  lógico,  apoiar  o 

aprendizado,  complementar  o processo de ensino e  difundir  a  informação.  Os 

exemplos  descritos  nesse  trabalho  buscam  justamente  motivar  o  aluno  na 

direção anteriormente exposta. 

 
 
 
 
 
 
 
 
 
 
 
 
24 

2.2 

Introdução ao OpenModelica 

O  OpenModelica  pode  ser  instalado  em  máquinas  com  sistemas 

operacionais, Windows, Linux, Mac ou em outro sistema operacional, diferente 

deste,  através  da  criação  de  uma  máquina  virtual.  Os  requisitos  para  que  se 

tenha um desempenho satisfatório é que a máquina tenha uma memória RAM 

de no mínimo 4Gb e um espaço livre em disco de aproximadamente 2Gb para a 

instalação do programa. Pode ser instado em máquinas de 32 e 64 bits. 

.OMEdit  –  OpenModelica  Connection  Editor  é  a  interface  gráfica  do 

Usuário para edição de modelos gráficos no OpenModelica. Ele é implementado 

em  C++  usando  a  biblioteca  de  interface  gráfica  OMEdit  que  fornece  vários 

recursos fáceis de usar para criar, navegar, editar e simular modelos. Iniciando 

o OMEdit uma tela semelhante à mostrada na Figura 1 aparecerá indicando que 

está começando OMEdit. 

Figura 1: tela de abertura do OMEdit 

Fonte:https://www.openmodelica.org/doc/OpenModelicaUsersGuide/latest/ome
dit.html. 

A  janela  de  boas-vindas  do  OMEdit  mostra  a  lista  de  arquivos  abertos 

recentes  e  a  lista  de  últimas  notícias  de  https://www.openmodelica.org.  Ver 

Figura 2. 

 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 2: janela de abertura do OMedit. 

25 

Fonte:https://www.openmodelica.org/doc/OpenModelicaUsersGuide/latest/ome

dit.html. 

A janela de modelagem fornece a interface onde o usuário pode criar e 

projetar seus modelos. Ver Figura 3. 

Figura 3: janela de modelagem do OMEdit 

Fonte:https://www.openmodelica.org/doc/OpenModelicaUsersGuide/latest/ome
dit.html. 

 
 
 
 
 
26 

A janela de gráficos mostra os resultados da simulação dos modelos e se 

tornará automaticamente ativa quando a simulação do modelo for concluída com 

sucesso. Ver a Figura 4. 

Figura 4: janela de gráficos do OMEdit 

Fonte:https://www.openmodelica.org/doc/OpenModelicaUsersGuide/latest/ome

dit.html. 

Para criar uma classe no OMEdit, que é o passo inicial para iniciarmos a 

modelagem dos nossos problemas matemáticos, deve-se escolher qualquer um 

dos seguintes métodos: 

•  Selecione Arquivo > Nova > Nova Classe Modelica no menu. 

•  Clique no botão barra de ferramentas New Modelica Class. 

•  Clique  no  botão  Criar  novas  classes  Modelica  disponível  na  parte 

inferior esquerda do Welcome Perspective. 

•  Pressione Ctrl+N. 

Após criar a classe deve-se inserir um nome para o arquivo de modelagem 

que será gerado. Ver Figura 5. 

 
 
 
 
 
 
 
 
 
 
Figura 5: janela para nomear o modelo a ser criado no OMEdit 

27 

Para iniciar a criação do modelo deve-se utilizar a biblioteca contendo uma 

lista com as classes do Modelica onde essas classes são compostas de blocos 

e sub-blocos. As classes são mostradas em uma estrutura de árvore com nome 

e ícone. Para adicionar blocos de componentes arraste os ícones dos modelos 

desejados da biblioteca escolhida e solte-os na janela de modelagem. 

Para conectar um bloco de um modelo a outro, o usuário primeiro precisa 

mover o mouse sobre o conector do bloco. O cursor do mouse mudará de cursor 

de seta para cursor cruzado. Para iniciar a conexão pressione o botão esquerdo 

e mova-se mantendo o botão pressionado. Agora solte o botão esquerdo. Mova-

se para o conector final e clique quando o cursor mudar para cursor cruzado. Na 

Figura 6, foi realizado a conexão de duas funções rampas a um bloco de soma. 

No ponto de saída do bloco soma as duas funções rampas estarão somadas. 

Figura 6: conexão entre blocos 

 
 
 
 
 
 
Cada bloco de um modelo é traduzido em código C/C++ que o transforma 

em um conjunto de variáveis, parâmetros, equações, algoritmos e funções. Estes 

Blocos  serão avaliados  em  função  de  uma variável de  integração  (em geral o 

tempo).  Os  blocos  estão  organizados  em  sub-blocos  com  aplicações 

28 

específicas.  

2.2.1  Bibliotecas do OpenModelica 

A seguir são mostradas algumas bibliotecas do OpenModelica e alguns 

dos seus respectivos blocos: 

Biblioteca  Continuous:  biblioteca  de  sistemas  de  controle  de  tempo 

contínuo.  Nesta  biblioteca  encontramos  blocos  como  a  função  de  integração, 

derivação,  modelagem  no  espaço  de  estado,  função  de  transferência,  filtros 

entre outras funções. Parte dos blocos da biblioteca Continous esta mostrada na 

Tabela 1. 

Tabela 1: blocos da Biblioteca Continous que serão utilizados. 

bloco 

descrição 

A  saída  deste  bloco  é  a  integral  do  sinal  de  entrada,  com  a 

opção de reinicialização. 

A saída deste bloco é a derivada do sinal de entrada. 

Biblioteca  Logical:  biblioteca  de  componentes  com  entrada  e  saídas  de 

sinais booleanos. Nesta biblioteca nós temos as operações lógicas de “and”, “or”, 

“xor”, dentre outras. É possível saber quando uma função é maior ou menor que 

outra  ou  quando  uma  função  é  maior  ou  menor  que  um  determinado  valor.  É 

possível chavear sinais através de uma condição lógica, detectar o cruzamento 

por zero de sinais entre outas funções. Parte dos blocos da biblioteca Logical 

esta mostrada na Tabela 2. 

 
 
 
 
 
 
 
 
 
 
 
Tabela 2: blocos da Biblioteca Logical que serão utilizados. 

bloco 

descrição 

29 

A saída deste bloco é 1 quando a entrada é maior que o valor de 

referência do bloco e 0 quando menor. 

A saída deste bloco é 1 quando a entrada é menor que o valor 

de referência do bloco e 0 quando maior. 

A saída deste bloco é 1 quando a 1ª entrada é menor que a 2ª 

entrada e 0 em caso contrário. 

A saída deste bloco é 1 quando a 1ª entrada é maior que a 2ª 

entrada e 0 em caso contrário. 

Biblioteca  Math:  esta  biblioteca  trabalha  com  números,  funções  e 

operações  reais.  Possui  blocos  para  o  cálculo  das  operações  com  funções 

básicas tais como as trigonométricas, exponencias, logarítmicas e estatísticas, 

entre  outras  funções.  Parte  dos  blocos  da  biblioteca  Math  esta  mostrada  na 

Tabela 3. 

Tabela 3: blocos da Biblioteca Math que serão utilizados. 

bloco 

descrição 

A saída deste bloco é a soma das duas entradas. 

A saída deste bloco é a soma das três entradas. 

A saída deste bloco é o produto das duas entradas. 

A  saída  deste  bloco  é  a  divisão  da  primeira  entrada  pela 

segunda. 

A saída deste bloco é o seno da entrada. 

 
 
 
 
 
 
 
 
 
 
 
 
A saída deste bloco é a tangente da entrada. 

30 

Biblioteca Source: esta biblioteca possui funções que geram sinais reais, 

booleanos e  inteiros. Parte  dos  blocos da  biblioteca  Source  esta mostrada  na 

Tabela 4. 

Tabela 4: blocos da Biblioteca Source que serão utilizados. 

bloco 

descrição 

Esse  bloco  gera  um  sinal  de  tempo.  Pode  ser  usado  para 

simular os valores desconhecidos de uma variável. 

Esse bloco gera um sinal real constante. 

Esse bloco gera um sinal na forma de uma rampa. 

Biblioteca  BlocksComplex:  esta  biblioteca  realiza  a  operações  com 

números complexos. Operações com funções complexas podem ser realizadas 

com essa biblioteca. Sinais com funções complexas também são gerados com 

blocos  dessa  biblioteca.  Parte  dos  blocos  da  biblioteca  BlocksComplex  esta 

mostrada na Tabela 5. 

Tabela 5: blocos da Biblioteca BlocksComplex que serão utilizados. 

bloco 

descrição 

A  saída  deste  bloco  é  o  conjugado  complexo  do  sinal  de 

entrada. 

A  saída  deste  bloco  é  o  valor  de  um  ganho  multiplicado  pelo 

sinal de entrada. 

A  saída  deste  bloco  é  soma  complexa  dos  dois  sinais  da 

entrada. 

 
 
 
 
 
 
 
 
 
 
 
 
31 

A  saída  deste  bloco  é  soma  complexa  dos  três  sinais  da 

entrada. 

A  saída  deste  bloco  é  produto  complexo  dos  dois  sinais  da 

entrada. 

Esse bloco gera um sinal complexo constante. 

Várias  outras  bibliotecas  estão  disponíveis  para  a  modelagem  de 

sistemas elétricos, mecânicos, hidráulicos etc. 

 
 
 
 
 
 
 
 
3  MODELAGEM 

DE 

PROBLEMAS  MATEMÁTICOS 

COM  O 

OPENMODELICA 

32 

Já  na  resolução  de  problemas  matemáticos,  utilizaremos  os  blocos  do 

OpenModelica para traduzir o referido problema matemático para a linguagem 

de diagramas de blocos. A visualização da montagem do problema através de 

diagramas  de  blocos  do  OpenModelica  possibilita  a 

integração  de 

conhecimentos, convergindo para a busca da solução do problema. 

3.1  Sistemas de equações lineares 

Um sistema de equações lineares com 𝑚 equações e 𝑛 incógnitas é um 

conjunto de equações do tipo: 

𝑎11𝑥1 + 𝑎12𝑥2 + ⋯ + 𝑎1𝑛𝑥𝑛 = 𝑘1
𝑎21𝑥1 + 𝑎22𝑥2 + ⋯ + 𝑎2𝑛𝑥𝑛 = 𝑘2
.
.
𝑎𝑚1𝑥1 + 𝑎𝑚2𝑥2 + ⋯ + 𝑎𝑚𝑛𝑥𝑛 = 𝑘𝑚

{

(1) 

Existem várias formas de se resolver sistemas lineares. Trataremos aqui 

da solução de sistemas de duas equações e duas incógnitas e de três equação 

e  três  incógnitas.  Primeiramente  iremos  obter  uma  solução  algébrica  e 

posteriormente  vamos  modelar  o  sistema  através  do  diagrama  de  blocos  do 

OpenModelica  para  se  obter  as  respostas  de  forma  gráfica.  Seja  um  sistema 

linear de duas incógnitas: 

{

𝑎1𝑥 + 𝑏1𝑦 = 𝑘1
𝑎2𝑥 + 𝑏2𝑦 = 𝑘2

É sabido que a solução deste tipo de sistema é: 

𝑦 =

𝑎1 ∗ 𝑘2 − 𝑎2 ∗ 𝑘1
𝑎1 ∗ 𝑏2 − 𝑎2 ∗ 𝑏1

 𝑒 𝑥 =

𝑏1 ∗ 𝑘2 − 𝑏2 ∗ 𝑘1
𝑎1 ∗ 𝑏2 − 𝑎2 ∗ 𝑏1

(2) 

(3) 

Se por exemplo 𝑎1   =  2; 𝑏1   =  3; 𝑘1   =  2; 𝑎2   =  4; 𝑏2   =   −5; 𝑘2   =   −14, 

teremos: 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
2𝑥 + 3𝑦 = 4     
{
4𝑥 − 5𝑦 = −14

33 

(4) 

e como solução 𝑥 igual a −1 e 𝑦 igual a 2. 

Vamos  resolver  este  sistema  usando  o  OpenModelica.  Utilizaremos  os 

blocos de gain e add da biblioteca Math, e o bloco const da biblioteca Source. 

Ver Figura 7. 

Figura 7: blocos da biblioteca Math e Source. 

. 

Inicialmente realiza-se a montagem descrita na  Figura 8. A configuração 

da montagem da Figura 8 é feita de tal forma que tenhamos a variável 𝑦 isolada. 

A  entrada  desconhecida  𝑥  será  multiplicada  por  um  ganho  igual  a  −0.6666, 

posteriormente o somador add irá realizar a soma de −0.6666𝑥 com a constante 

1.333333. Evidente que a saída do somador será igual ao valor de 𝑦. 

Figura 8: modelagem da primeira equação do sistema (4). 

De  maneira  semelhante  realiza-se  a  montagem  descrita  na  Figura  9, 

referente a equação 2, do sistema (4). 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 9: modelagem da segunda equação do sistema (4). 

34 

A conclusão que o aluno deve chegar é que como o valor da incógnita 𝑥 

da  primeira  equação  do  sistema  (4)  deve  ser  igual  ao  valor  da  incógnita  𝑥 da 

segunda  equação do sistema  (4), então deve  haver uma  interligação entre  as 

linhas  do  diagrama  de  blocos  do  OpenModelica  que  representam  a  mesma 

variável  𝑥  do  sistema  (4).  O  mesmo  raciocínio  aplica-se  para  a  variável  𝑦.  O 

diagrama  final  do  OpenModelica  que  resolvera  o  sistema  (4)  será  conforme 

Figura 10. 

Figura 10: modelagem que resolve o sistema (4). 

A resposta dada é da forma gráfica e numérica. Observar que o valor de 

𝑥  é  o  valor de  entrada dos blocos  gain e gain1.  Observando a  janelas  gráfica 

gerada no OpenModelica e marcando a opção de entrada do bloco gain (entrada 

 
 
 
 
 
 
35 

u) vemos que o valor de 𝑥 é −1. Ver Figura 11. O valor de 𝑦 é dado pela saída 

do bloco add. Observando a janela gráfica gerada no OpenModelica e marcando 

a opção de saída do bloco add (entrada u) vemos que o valor de 𝑦 é 2. Ver Figura 

12. 

Figura 11: resposta gráfica gerada no OpenModelica para o valor de x do 
sistema (1). 

Figura 12: resposta gráfica gerada no OpenMdelica para o valor de y do 
sistema (1). 

 
 
 
 
 
Seja um sistema linear de três incógnitas: 

𝑎1𝑥 + 𝑏1𝑦 + 𝑐1𝑧 = 𝑘1
𝑎2𝑥 + 𝑏2𝑦 + 𝑐2𝑧 = 𝑘2
{
𝑎3𝑥 + 𝑏3𝑦 + 𝑐3𝑧 = 𝑘3

36 

(5) 

A  regra  de  Cramer  para  a  solução  de  sistemas  lineares  com  três 

incógnitas é uma técnica de resolução adequada para este pequeno número de 

equações.  Essa  regra  estabelece  que  cada  incógnita  em  um  sistema  de 

equações  algébricas  lineares  com  três  incógnitas  por  exemplo  pode  ser 

expressa como uma fração de dois determinantes, com denominador D e com o 

numerador obtido a partir de D trocando-se a coluna de coeficientes da incógnita 

em questão pelas constantes 𝑘1, 𝑘2,  𝑘3.  

𝐷 =  |

𝑎1 𝑏1
𝑎2 𝑏2
𝑎3 𝑏3

𝑐1
𝑐2
𝑐3

| 

Por exemplo, 𝑥 é calculada por: 

|

𝑘1 𝑏1
𝑘2 𝑏2
𝑘3 𝑏3
𝐷

𝑐1
𝑐2
𝑐3

|

𝑥 =  

De forma semelhante calcula-se 𝑦: 

𝑎1 𝑘1
𝑎2 𝑘2
|
𝑎3 𝑘3
𝐷

𝑐1
𝑐2
𝑐3

|

𝑦 =  

𝑎1 𝑏1 𝑘1
𝑎2 𝑏2 𝑘2
|
𝑎3 𝑏3 𝑘3
𝐷

|

𝑧 =  

e 𝑧: 

(6) 

(7) 

(8) 

(9) 

Vamos resolver como exemplo o sistema (10) usando o OpenModelica. 

Utilizaremos  os  blocos  de  ganho  e  de  soma  da  biblioteca  Math,  e  o  bloco 

constante da biblioteca Source. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
{

2𝑥 − 3𝑦 + 𝑧 = −6
3𝑥 + 5𝑦 − 2𝑧 = 2
𝑥 + 𝑦 + 𝑧 = 7

37 

(10) 

Os passos para resolver este sistema é: 

i.  Escreva uma das variáveis em função das outras duas; 

ii.  No OpenModelica monte o diagrama de blocos para cada variável que foi 

isolada; 

iii.  No  OpenModelica  Interligue  as  linhas  que  representam  as  mesmas 

incógnitas. 

De i: escrevemos as equações do sistema isolando o valor de x 

  𝑥 =

− 3

3𝑦
2
5𝑦
3

−

+

𝑧
2
2𝑧
3

+

2
3

𝑥 = −

{

𝑥 = −𝑦 − 𝑧 + 7

(11) 

De ii: montamos o diagrama de blocos de acordo com a Figura 13, Figura 

14 e Figura 15. 

Figura 13: variável 𝑥 da 1ª equação do sistema (11) como função de 𝑦 e 𝑧. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 14: variável 𝑥 da 2ª equação do sistema (11) como função de 𝑦 e 𝑧. 

38 

Figura 15: variável 𝑥 da 3ª equação do sistema (11) como função de 𝑦 e 𝑧. 

De iii: realizamos a montagem final conforme a Figura 16. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 16: o diagrama de blocos final que resolve o sistema (11). 

39 

A solução para o sistema (11) usando (06), (07), (08) e (09) é 𝑥 = −1, 𝑦 =

5, 𝑧 = 3.  e  quando  usamos  o  OpenModleica  para  observar  a  solução  gráfica 

apresentada,  ver  Figura  17,  encontramos  justamente  os  mesmos  valores, 

mostrando assim a assertividade da montagem. 

Figura 17: gráfico que mostra a solução do sistema (11). 

 
 
 
 
 
 
40 

3.2  Soluções reais de equações do segundo grau com o OpenModelica 

Seja uma equação do segundo grau: 

As  soluções  reais  deste  tipo  de  equação  são  dadas  pela  fórmula  de 

𝑎𝑥2 + 𝑏𝑥 + 𝑐 = 0 

 (12) 

Bhaskara 

𝑥 =

−𝑏 ± √𝑏2 − 4𝑎𝑐
2𝑎

(13) 

Vamos resolver uma equação do segundo grau usando o OpenModelica. 

Utilizaremos  os  blocos  de  ganho  e  de  soma  da  biblioteca  Math,  e  o  bloco 

constante da biblioteca Source, ver figura 06. Inicialmente deve-se isolar o termo 

𝑏𝑥 na equação (12), posteriormente dividir os dois membros por b.  

𝑥 =   −

𝑎𝑥2
𝑏

−

𝑐
𝑏

(14) 

Vamos  usar  como  exemplo  a  equação  (15)  para  encontrar  as  raízes 

utilizando o OpenModelica. 

𝑥2 − 3𝑥 + 2 = 0 

𝑥 =  

𝑥2
3

−

2
3

(15) 

(16) 

Com  o  valor  de  𝑥  isolado  a  interligação  procede-se  como  indicado  na 

Figura 18 para realizar a interligação dos blocos do OpenModelica. 

Figura 18: diagrama de blocos de uma solução da equação (15) com o 
OpenModelica. 

O  valor  desconhecido  de  𝑥  é  aplicado  na  entrada  do  bloco  produto.  A 

saída  do  bloco  produto  resulta  em  𝑥2.  Então  𝑥2  é  multiplicado  pelo  bloco  de 

ganho que possui valor de um terço. A saída do bloco de ganho é, portanto, um 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
terço de 𝑥2. Por último temos o somador que irá adicionar o valor da constante 

dois terços ao valor de um terço de 𝑥2, que é justamente o valor de 𝑥. Com essa 

41 

sequência conseguimos montar exatamente a equação (16). Aqui o diagrama de 
blocos montado irá convergir para um valor tal de 𝑥, tal que 𝑥 seja igual a 𝑥2

−

2
. 
3

3

Observando  a  resposta  obtida  no  OpenModelica  constatamos  que  uma 

das raízes da equação (15) foi calculada e está mostrada na forma gráfica, ver 

Figura 21, cujo valor mostrado é o número 1. A outra solução não foi possível 

obter de forma gráfica, isso porque quando o software converge para resolver o 

modelo  proposto  ele  para  na  primeira  solução  encontrada  para  a  equação.  É 

importante observar que a montagem não deve se resumir a simples procura do 

resultado,  mas  buscar  na  matemática  as  lacunas  que  foram  deixadas  pelo 

software para se resolver o problema proposto.  

Vamos então utilizar a geometria analítica para resolver a lacuna deixada 

pelo  software.  Sabemos  que  a  representação  gráfica  de  uma  equação  do 

segundo grau no plano cartesiano é uma parábola. Seja o ponto 𝑉 = (𝑥𝑣, 𝑦𝑣) o 

vértice de uma parábola, sabe-se que a abscissa  𝑥𝑣 está no ponto médio das 

abscissas  das  raízes  da  equação  do  segundo  grau  que  representa  essa 

parábola,  se  esta  equação  do  segundo  grau  admitir  raízes  reais.  Se 

conhecermos então uma das raízes e a abscissa do vértice desta parábola então 

seremos capazes de determinar a outra raiz. Para a equação (15) parte do seu 

gráfico  é  mostrado  na  Figura  19,  a  expressão  matemática  para  o  cálculo  do 

vértice é: 

𝑥𝑣 =   −

, 

𝑏
2𝑎
𝑥1 + 𝑥2
2

, 

𝑥𝑣 =

𝑥2 = 2𝑥𝑣 − 𝑥1 =>   𝑥2 = −2

𝑏
2𝑎

− 𝑥1 =>   𝑥2 = −

𝑏
𝑎

− 𝑥1 

(17) 

(18) 

(19) 

Para  o  caso  da  equação  (15)  temos  que  𝑏 =   −3 𝑒 𝑎 = 1,  então  𝑥2 =

−

−3

1

− 1 = 2. Através da Figura 19temos a noção gráfica do que foi descrito. 

 
 
 
 
 
 
 
Figura 19: gráfico da equação (15) mostrando o vértice V. 

42 

Para  implementar  no  OpenModelica  esse  procedimento  matemático 

fazemos o cálculo do valor de −

𝑏

𝑎

 para a equação (15) e inserimos esse valor no 

bloco  que  está  representado  por  const1  e  o  resultado  subtraímos  do  valor  da 

primeira  raiz  encontrada.  Na  Figura  20  temos  o  modelo  final  dos  blocos  que 

resolvem  a  equação  (15).  O  procedimento  descrito  juntamente  com  o  modelo 

mostrado na Figura 20 resolve qualquer equação do segundo grau com raízes 

reais. Na Figuras 21 e na Figura 22 são mostradas as soluções para a equação 

(15). 

Figura 20: diagrama de blocos que resolve equação (15). 

 
 
 
  
 
 
 
 
 
 
 
 
Figura 21: primeira solução da equação (15). 

43 

Figura 22: segunda solução da equação (15). 

3.3  Operações básicas com números complexos 

A  biblioteca  ComplexBlocks  do  OpenModelica  contém  blocos  nas  suas 

entradas  e  saídas  são  utilizados  sinais  complexos.  Com  esta  biblioteca  é 

possível realizar as operações básicas com números complexos. Por exemplo 

se queremos realizar as operações básicas de soma, subtração, multiplicação e 

divisão  de  números  complexos  basta  usar  o  bloco  ComplexConstant  desta 

biblioteca  para  representar um  número  complexo e  os  blocos de operação da 

biblioteca  ComplexMath.  Clicando  duas  vezes  no  bloco  ComplexConstant  é 

aberto uma janela para inserirmos o valor do número complexo que desejamos. 

 
 
 
 
 
 
44 

A sintaxe para inserir uma constante complexa é Complex(Re,Im) onde Re é a 

parte real do número complexo e Im é a parte imaginária. 

Como  exemplo  fazendo  𝑧1   =  2 + 3𝑖  e  𝑧2   =  4 + 5𝑖,  as  operações  e  as 

respectivas montagens de como se proceder para resolver as operações estão 

mostradas na Tabela 6. 

Tabela 6: operações básicas com números complexos no OpenModelica. 
a)  𝑧1 + 𝑧2 

b)   𝑧1 − 𝑧2 

c)  𝑧1 ∗ 𝑧2 

d)  𝑧1/𝑧2 

e)  𝑧1̅  

Nas Tabelas 7 e 8 são apresentadas as saídas no formato de gráficos. 

Tabela 7: resultado da soma e subtração de 𝑧1 e 𝑧2. 

𝑧1 + 𝑧2 

𝑧1 − 𝑧2 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Tabela 8: resultado da multiplicação, divisão de 𝑧1 e 𝑧2 e conjugado de 𝑧1. 

𝑧1 ∗ 𝑧2 

𝑧1/𝑧2 

𝑧1̅  

45 

3.3.1  Soluções complexas de equações do segundo grau com o OpenModelica 

O método anterior para a solução de uma equação do segundo grau com 

raízes  reais  falha  quando  temos  uma  solução  complexa  das  raízes  desta 

equação.  Vamos  desenvolver  um  método  geral  que  nos  dará  tanto  a  solução 

complexa como a real pura. Para a solução tento complexa como real de uma 

equação  do  segundo  grau,  montamos  um  diagrama  de  blocos  como  base  na 

fórmula de Bhaskara.  

A  equação  (13)  é  então  modelada  no  OpenModelica.  Inicialmente 

inserirmos três blocos onde estarão os valores dos coeficientes 𝑎, 𝑏 𝑒 𝑐 𝑑𝑒 𝑎𝑥2 +

𝑏𝑥 + 𝑐 = 0,  depois  buscamos  realizar  a  montagem  de  forma  a  se  montar  a 

fórmula  de  Bhaskara.  Multiplicamos  o  valor  de  𝑎  através  do  bloco  de  ganho, 

gain1, que possui valor de −4. Isso resulta um valor de −4𝑎 na saída do bloco 

gain1. O valor de −4𝑎 é multiplicado com o valor de 𝑐 através do bloco product2, 

o  que  resultará  na  saída  desse  bloco  o  valor  de  −4𝑎𝑐.  Após  o  bloco  que 

representa o valor de 𝑏 inserimos um bloco de produto, product1, que pegará o 

valor de 𝑏 e multiplicará por ele mesmo, resultando em 𝑏2.  

O bloco de soma add somará os valores de 𝑏2 − 4𝑎𝑐. Logo após o bloco 

de  soma  add  temos  um  bloco  que  extrai  a  raiz  quadrada  dos  valores  de  sua 

 
 
 
 
 
 
 
 
46 

entrada,  aqui  representado  pelo  bloco  sqrt1.  Na  saída  de  sqrt1  vamos  obter 

então √𝑏2 − 4𝑎𝑐. Utilizamos agora outro bloco de soma add1, para somarmos o 

valor  da  saída  de  sqrt1  com  o  valor  de  −𝑏,  obtendo  assim  −𝑏 + √𝑏2 − 4𝑎𝑐. 

Utilizamos agora um bloco division para realizar a divisão de −𝑏 + √𝑏2 − 4𝑎𝑐 por 

𝑎, teremos então na saída do bloco division −𝑏+√𝑏2−4𝑎𝑐

𝑎

 e finalmente multiplicamos 

este  último  resultado  por  1
2

  para  termos  −𝑏+√𝑏2−4𝑎𝑐

2𝑎

.  que  é  o  resultado  que 

queríamos encontrar.  

Estamos  utilizando  para  essa  montagem  blocos  da  biblioteca 

ComplexBlocks do OpenModelica por isso podemos ter valores reais negativos 

dentro  da  raiz  que  o  programa  tratará  as  operações  de  forma  adequada 

conforme  a  álgebra  complexa.  Na  Figura  23 

temos  a  montagem  no 

OpenModelica  para  a  solução  de  uma  equação  do  segundo  grau  com  raízes 

complexas. 

Figura 23: diagrama de blocos para solução de equação do segundo grau com 
raízes complexas. 

Como  exemplo  para  testar  a  montagem  proposta  vamos  resolver  a 
equação  𝑥2 + 10𝑥 + 50 = 0.  Esta  equação  tem  como  solução  𝑥1 = −5 +
5𝑖 𝑒 𝑥2 =   −5 − 5𝑖. Inserindo os valores de 𝑎 = 1, 𝑏 = 10 𝑒 𝑐 = 50 na montagem 

da Figura 23 teremos como saída do bloco gain a Figura 24 e a saída do bloco 

gain2 os gráficos da Figura 25 e da Figura 26. 

 
 
 
 
 
 
Figura 24: raízes reais e imaginários da 1° solução de 𝑥2 + 10𝑥 + 50 = 0. 

47 

Verificar que na notação dada para esta resposta o OpenModelica adotou 

que a parte imaginária da saída do bloco gain é um gráfico vermelho, enquanto 

o gráfico azul representa a parte real da saída deste mesmo bloco. Observando 

a saída obtemos que a primeira solução de 𝑥2 + 10𝑥 + 50 = 0 tem como parte 

real de −5 e parte imaginária de 5.  

A saída da segunda solução de 𝑥2 + 10𝑥 + 50 = 0 tem como parte real de 

−5  e  parte  imaginária  de  −5.  Como  os  valores  foram  iguais  para  a  parte 

imaginária e real não é interessante visualizar estas soluções no mesmo gráfico, 

ficando mais didático utilizar dois gráficos, um para a parte real e outro para a 

parte imaginária. Para o bloco gain2, as Figuras 24 e 25 mostram parte real e 

imaginaria da segunda solução: 

 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 25: valor real da 2° solução de 𝑥2 + 10𝑥 + 50 = 0 

48 

Figura 26: valor imaginário da 2° solução de 𝑥2 + 10𝑥 + 50 = 0 

Outra  forma  de  se  resolver  a  equação  𝑥2 + 10𝑥 + 50 = 0  é  montar  o 

diagrama de blocos conforme mostrado na Figura 27. Para montar o diagrama 

de blocos da Figura 27, foi isolado o 𝑥 que está multiplicando o 10 da equação 

𝑥2 + 10𝑥 + 50 = 0    obtendo  −0.1𝑥2 − 5 = 𝑥.  O  valor  desconhecido  de  𝑥  é 

aplicado na entrada do bloco produto. A saída do bloco produto resulta então em 

𝑥2. 𝑥2 é multiplicado por uma constante igual a −0.1 do bloco add. Então antes 

do bloco add realizar a soma com o valor da constante −5 ele multiplica 𝑥2 por 

−0.1.  Com  essa  sequência  conseguimos  montar  exatamente  a  equação 

−0.1𝑥2 − 5. 

 
 
 
 
 
 
 
49 

Aqui o diagrama de blocos montado irá convergir para um valor tal de 𝑥, 

tal  que  𝑥  seja  igual  a  −0.1𝑥2 − 5.  Observando  a  resposta  obtida  no 

OpenModelica  constatamos  que  apenas  uma  das  raízes  complexa 

foi 

encontrada. Para encontrar a segunda raiz basta aplicar a saída do bloco add a 

entrada de um bloco que calcula o conjugado. Então na saída do conjugado do 

bloco conj nós temos a segunda raiz. 

Figura 27: modelagem para equação do segundo grau raízes complexas. 

Os  gráficos  gerados  pelo  diagrama  de  blocos  mostram  as  soluções  da 

equação do segundo grau com raízes complexas. O gráfico mostrado na Figura 

28  mostra  os  valores  da  primeira  solução  da  equação  𝑥2 + 10𝑥 + 50 = 0,  e  o 

gráfico mostrado na Figura 29 mostra a segunda solução. 

Figura 28: valores reais e imaginários da 1ª solução de 𝑥2 + 10𝑥 + 50 = 0. 

 
 
 
 
 
 
 
Figura 29: valores reais e imaginários da 2ª solução de 𝑥2 + 10𝑥 + 50 = 0. 

50 

3.4  Soluções  de  equações  trigonométricas  e  exponenciais  com  o 

OpenMOdelica. 

Com o OpenModelica é possível resolver equações trigonométricas para 

isso basta isolar 𝑥 de um lado da equação. O artifício para se isolar 𝑥 de um lado 

da equação é somar 𝑥 a ambos os lados da equação. 

Vejamos  o  seguinte  exemplo.  Resolver  a  equação  𝑠𝑒𝑛(𝑥) = 0.5.  Para 

resolver esta equação somamos 𝑥 a ambos os lados da equação o que nos dá 

𝑥 + 𝑠𝑒𝑛(𝑥) = 0.5 + 𝑥. Isolando o valor de 𝑥 obtemos: 𝑥 = 𝑥 + 𝑠𝑒𝑛(𝑥) − 0.5. Para 

realizar a montagem dessa equação no OpenModelica, utilizamos o bloco sin, 

que mostra na saída o seno da entrada. Ao se ter um valor desconhecido 𝑥 na 

entrada desse bloco o valor do 𝑠𝑒𝑛(𝑥) é calculado e a esse valor do 𝑠𝑒𝑛(𝑥) é 

somado 𝑥 e −0.5 o que resultará em 𝑥 + 𝑠𝑒𝑛(𝑥) − 0.5, e claro que esse valor é 

igual ao nosso próprio 𝑥. Por isso foi realizado a realimentação dessa saída para 

a entrada do bloco sin. O valor de 𝑥 que faz convergir esse modelo é a solução 

da equação 𝑠𝑒𝑛(𝑥) = 0.5. Na Figura 30 é mostrado a modelagem através dos 

diagramas de blocos para a solução de 𝑠𝑒𝑛(𝑥) = 0.5. 

 
 
 
 
 
Figura 30: montagem para solução da equação 𝑠𝑒𝑛(𝑥) = 0.5 . 

51 

A solução gráfica obtida após o modelo convergir é dada pelo gráfico da 

Figura  31.  Observar  que  o  valor  que  resolve  a  equação  trigonométrica  num 

intervalo de 0 a 2𝜋 é 30° ou 0,52359... rad. e o valor obtido pela simulação é 

0,523599. 

Figura 31: solução gráfica da equação trigonométrica 𝑠𝑒𝑛(𝑥) = 0.5 

Como  outro  exemplo  vamos  resolver  a  equação  𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2.  Para 

resolver  esta  equação  somamos  𝑥  a  ambos  os  lados  da  equação  o  que  nos 

dá 𝑥 + 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2 + 𝑥.  Isolando  o  valor  de  𝑥  obtemos:  𝑥 = −2 + 𝑥 +

𝑠𝑒𝑛(𝑥) + 𝑒 𝑥.  Para  realizar  a  montagem  dessa  equação  no  OpenModelica, 

utilizamos o bloco 𝑠𝑖𝑛, o bloco 𝑒𝑥𝑝 e um bloco de valor constante. Ao se ter um 

valor desconhecido 𝑥 na entrada do bloco 𝑠𝑖𝑛 e do bloco 𝑒𝑥𝑝 o valor do 𝑠𝑒𝑛(𝑥) e 

de 𝑒 𝑥 serão calculados e a esse valor do 𝑠𝑒𝑛(𝑥) e de 𝑒 𝑥 são somados o valor de 

𝑥  mais  −2,  o  que  resultará  em−2 + 𝑥 + 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥,  e  claro  que  esse  valor  é 

 
 
 
 
 
 
 
52 

igual ao nosso próprio 𝑥. Por isso foi realizado a realimentação dessa saída para 

a entrada do bloco sin e do bloco exp. Na Figura 32 vemos a montagem para 

implementar no OpenModelica a solução para a equação 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2. 

Figura 32: montagem para solução da equação 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2 

A solução gráfica obtida após o modelo convergir é dada pelo gráfico da 

Figura  33.  Observar  que  o  valor  que  resolve  a  equação  trigonométrica  num 

intervalo de 0 a 4 é 0.4487. Com o método apresentado acima é possível resolver 

uma infinidade de equações. 

Figura 33: gráfico da solução da equação 𝑠𝑒𝑛(𝑥) + 𝑒 𝑥 = 2 

No OpenModelica é possível encontrar o valor da conhecida identidade 

trigonométrica 𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥) = 1. Para isso uma montagem possível seria a 

da  Figura  34.  Um  bloco  clock  produz  valores  reais,  esses  valores  reais  são 

 
 
 
 
 
 
 
53 

inseridos na entrada do bloco sin que por sua vez calcula o seno dessa entrada 

e  aplica  na  entrada  do  bloco  product.  Nas  duas  entradas  do  bloco  product 

entramos com 𝑠𝑒𝑛(𝑥), que resultará na multiplicação de 𝑠𝑒𝑛(𝑥), vezes o 𝑠𝑒𝑛(𝑥), 

e, portanto, 𝑠𝑒𝑛2(𝑥). De forma análoga na parte inferior da montagem temos o 

mesmo procedimento, mas agora ao invés de se utilizar o 𝑠𝑒𝑛(𝑥), utilizamos o 

cos (𝑥). Por fim somamos os valores do  𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥). Após simular esta 

montagem obtemos o gráfico da Figura 35 com o valor obtido igual a 1. Observar 

os ruídos encontrados nesta simulação. 

Figura 34: montagem para encontrar o valor da identidade trigonométrica 
𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥). 

Figura 35: valor da identidade trigonométrica 𝑠𝑒𝑛2(𝑥) + 𝑐𝑜𝑠2(𝑥) 

Sabendo  que  𝑠𝑒𝑐 𝑥 = 3,  calcular  o  valor  da  expressão 𝑦  =  𝑠𝑒𝑛2(𝑥)   +

2𝑡𝑎𝑛2(𝑥), utilizando a modelagem através do OpenModelica.  

 
 
 
 
 
 
 
54 

O  procedimento  para  solucionar  esse  problema  é  primeiro  resolver  a 

equação sec (𝑥) = 3, que pode ser reescrita como 𝑐𝑜𝑠 (𝑥)   =  0.3333333. a forma 

de  resolver  a  equação  𝑐𝑜𝑠 (𝑥)   =  0.3333333  é  somar  𝑥  a  ambos  os  lados  da 

equação 𝑥 + 𝑐𝑜𝑠 (𝑥)   =  0.3333333 + 𝑥 e depois isolar o valor de 𝑥. 𝑥 + 𝑐𝑜𝑠 (𝑥) −

 0.3333333 = 𝑥. 

Para realizar a montagem dessa equação no OpenModelica, utilizamos o 

bloco  𝑐𝑜𝑠,  que  mostra  na  saída  o  cosseno  da  entrada.  Ao  se  ter  um  valor 

desconhecido 𝑥 na entrada desse bloco o valor do 𝑐𝑜𝑠(𝑥) é calculado e a esse 

valor  do  𝑐𝑜𝑠(𝑥)  é  somado  𝑥  e  −0.333333  que  resultará  em  𝑥 + cos(𝑥) −

0.333333, e claro que esse valor é igual ao nosso próprio 𝑥. Por isso foi realizado 

a  realimentação  dessa  saída  para  a  entrada  do  bloco  𝑐𝑜𝑠.  Então  na  saída  do 

bloco add3 nós temos a solução de 𝑠𝑒𝑐 (𝑥) = 3.  

O  valor  de  𝑥  que  resolve  a  equação  𝑠𝑒𝑐 (𝑥) = 3,  é  então  aplicado  na 

entrada de um bloco que calcula o seno e na entrada de um bloco que calcula o 

valor da tangente. Inserimos então o valor do seno de 𝑥,e da tangente de 𝑥, num 

bloco produto para se ter na saída do bloco produto o valor do seno ao quadrado 

de 𝑥 e da tangente ao quadrado de 𝑥, por fim inserimos um bloco de soma add 

com ganho de valor 2 para se multiplicar a tangente ao quadrado de 𝑥 por 2 e 

no final desse bloco add ter o valor do cálculo do seno ao quadrado de 𝑥 mais 2 

vezes  a tangente ao quadrado  de  𝑥.  Na  Figura  36  temos a montagem  para o 

cálculo de 𝑦  =  𝑠𝑒𝑛2(𝑥)   + 2𝑡𝑎𝑛2(𝑥), se 𝑠𝑒𝑐 (𝑥) = 3. 

Figura 36: montagem pro cálculo de 𝑦  =  𝑠𝑒𝑛2(𝑥)   + 2𝑡𝑎𝑛2(𝑥), se 𝑠𝑒𝑐 (𝑥) = 3. 

O resultado da expressão acima é 16.8889 e é mostrado na Figura 37. 

 
 
 
 
 
 
Figura 37: valor da expressão 𝑦  =  𝑠𝑒𝑛2(𝑥)   + 2𝑡𝑎𝑛2(𝑥), quando 𝑠𝑒𝑐 (𝑥) = 3. 

55 

Considerações sobre a solução de equações: 

a)  Uma rotina de gráficos deveria ser incluída no programa para se ter uma 

ideia de onde realmente encontra-se a solução. 

b)   devido a precisão do software no final dos cálculos, a estimativa final da 

raiz deverá sempre ser substituída na função original para calcular se o 

resultado é realmente zero. Essa verificação nos resguarda parcialmente 

daqueles casos nos quais a convergência oscilante ou lenta pode levar a 

valores pequenos, enquanto a solução ainda está longe da raiz.  

c)  O diferencial do OpenModelica é que ele não te dá fórmulas prontas para 

desenvolver  as  soluções  matemáticas.  Tem-se  que  utilizar  os 

conhecimentos matemáticos aliados com os conhecimentos do software. 

3.5  Gráficos das cônicas: elipse, hipérbole e parábola  

3.5.1  A elipse  

É uma figura plana classificada como uma cônica, pois ela pode ser obtida 

da secção de um plano em um cone. a elipse é estudada a fundo na geometria 

analítica,  sendo  possível  descrevê-la  por  meio  de  uma  equação  que  leva  em 

consideração seus elementos. Os principais elementos da elipse são: eixo maior, 

 
 
 
 
 
 
 
 
 
56 

eixo menor, distância focal, focos F1 e F2. Para construir o gráfico da elipse no 

OpenModelica, é necessário conhecer a sua equação. 

Tomemos  por  exemplo  a  equação  (20).  Essa  Equação  representa  uma 

elipse com eixo maior sobre o eixo dos 𝑥 de tamanho 4. 

2

𝑥
4

+ 𝑦2 = 12 

(20) 

Para representarmos graficamente a equação da elipse (20) isolamos por 

o valor da vaiável y. 

𝑦 = √1 −

2

𝑥
4

Com esse valor de 𝑦 isolado é possível plotar todos os pontos da elipse 

que estão acima dos eixos das abscissas. Para plotarmos os pontos da elipse 

que estão abaixo do eixo das abscissas fazemos: 

𝑦 = −√1 −

2

𝑥
4

Para  implementar  essa  equação  no  OpenModelica  utilizaremos  o  bloco 

clock  para  gerar  os  valores  de  𝑥,  depois  utilizamos  um  bloco  para  fazer  a 

multiplicação de 𝑥 vezes 𝑥 e se obter 𝑥2. Posteriormente multiplicamos por 𝑥2 

por 0.25 através de um bloco de ganho (bloco gain). Na saída do bloco ganho 

nós utilizamos um somador com o valor negativo para  𝑥
4

2

 e somamos com um 

valor constante 1, assim obtemos 1 −

2

𝑥

4

, por fim extraímos a raiz quadrada da 

expressão anterior para se ter √1 −

2

𝑥

4

, através do bloco sqrt1. Observar que com 

esse procedimento é possível obter o gráfico da elipse que estão acima do eixo 

das abscissas. Para se ter a parte inferior do gráfico acrescenta-se ao diagrama 

de blocos do OpenModelica um bloco de ganho com uma constante multiplicativa 

de −1. Então se fizermos a união da saída do bloco sqrt1 com a saída do bloco 

gain1 o resultado será o gráfico da elipse.  

 
 
 
 
 
 
 
 
Figura 38: modelagem da equação da elipse  𝑥
4

2

+ 𝑦2 = 12 

57 

O resultado obtido através da montagem da Figura 38, pode ser visto na 

Figura 39. 

Figura 39: gráfico da elipse. 

3.5.2  A hipérbole  

É definida como a interseção entre uma superfície cônica circular regular 

e  um  plano  que  passa  pelas  duas  metades  do  cone.  Além  disso,  a  hipérbole 

também pode ser classificada como o conjunto de todos os pontos coplanares, 

para os quais a diferença das distâncias a dois pontos fixos é sempre constante. 

Para construir o gráfico da hipérbole no OpenModelica, é necessário conhecer a 

sua equação. 

Tomemos  por  exemplo  a  equação  (20). Essa  Equação  representa  uma 

hipérbole com eixo maior sobre o eixo dos 𝑥 de tamanho 4. 

 
  
 
 
 
 
 
 
 
2

𝑥
4

− 𝑦2 = 12 

58 

(21) 

Para representarmos graficamente a equação da hipérbole (21) isolamos 

o valor da vaiável 𝑦. 

𝑦 = √−1 +

2

𝑥
4

Com esse valor de 𝑦 isolado é possível plotar todos os pontos da hipérbole 

que estão acima dos eixos das abscissas. Para plotarmos os pontos da hipérbole 

que estão abaixo do eixo das abscissas fazemos: 

𝑦 = −√−1 +

2

𝑥
4

Para  implementar  essa  equação  no  OpenModelica  utilizaremos  o  bloco 

clock  para  gerar  os  valores  de  𝑥,  depois  utilizamos  um  bloco  para  fazer  a 

multiplicação de 𝑥 vezes 𝑥 e se obter 𝑥2. Posteriormente multiplicamos por 𝑥2 

por 0.25 através de um bloco de ganho (bloco gain). Na saída do bloco ganho 

nós  utilizamos  um  somador  para  somar  𝑥
4

2

  com  o  valor  constante  -1,  assim 

obtemos −1 +

2

𝑥

4

, por fim extraímos a raiz quadrada da expressão anterior para 

se ter √−1 +

2

𝑥

4

, através do bloco sqrt1. Aqui há de se ter cuidado pois a geração 

dos valores no clock, serão no intervalo de -4 até 4 (pré-configuração do tempo 

de  simulação  no  OpenModelica)  e  para  a  equação  da  hipérbole  do  exemplo 

dado, quando o clock percorrer os valores de -2 a 2 os valores recebidos pelo 

bloco sqrt1 serão negativos.  

Daí a necessidade de se utilizar o bloco sqrt1 da biblioteca complexa do 

OpenModelica. com esse procedimento é possível obter os pontos do gráfico da 

hipérbole que estão acima do eixo das abscissas. Para se ter a parte inferior do 

gráfico  acrescenta-se  ao  diagrama  de  blocos  do  OpenModelica  um  bloco  de 

ganho, também da matemática complexa, com uma constante multiplicativa de -

1. Então se fizermos a união da saída do bloco sqrt1 com a saída do bloco gain1 

o resultado será o gráfico da hipérbole. O resultado obtido através da montagem 

da Figura 40 pode ser visto na Figura 41. 

 
 
 
 
 
 
Figura 40: modelagem da equação da elipse  𝑥
4

2

− 𝑦2 = 12. 

59 

Figura 41: gráfico da hipérbole. 

3.5.3  A parábola 

A parábola pode ser obtida quando um cone circular reto é secionado por 

um  plano  paralelo  a  uma  geratriz  e  oblíquo  ao  eixo  do  cone  e  os  pontos  que 

pertencem  tanto  ao  plano  como  ao  cone  são  observados.  A  parábola  é  uma 

curva  plana  aberta  e  seus  ramos  podem  ser  prolongados  ao  infinito.  Para 

construir o gráfico de uma parábola tomemos novamente a equação do segundo 

grau (15), de posse desta equação fazemos a montagem descrita na Figura 42. 

 
 
 
 
 
 
 
 
 
 
 
 
Figura 42: modelagem da equação da parábola  𝑥2 − 3𝑥 + 2. 

60 

A variável 𝑥 da equação do segundo grau é modelada no OpenModelica 

com o bloco de clock. O clock representa um relógio que percorre um conjunto 

de  valores  numéricos  com  início,  fim  e  passo  de  acordo  com  a  com  a 

configuração da simulação. A multiplicação de dois blocos de clock resultará em 

𝑥2.  Se  multiplicarmos  um  bloco  com  um  valor  constante  -3,  no  caso  aqui 

modelado pelo bloco const, pelo bloco de clock o produto é igual a -3𝑥. Por fim 

somamos, através do bloco add3 os valores de 𝑥2 − 3𝑥 com o valor 2 do bloco 

const1  e  obtemos  𝑥2 − 3𝑥 + 2.  Posteriormente  simula-se  esse  projeto  e 

conseguimos  visualizar  a  representação  gráfica  da  equação  da  parábola  𝑥2 −

3𝑥 + 2. O resultado pode ser visto na Figura 43. Observar que onde o gráfico 

tem os seus valores iguais a zero é em 𝑥 = 1 𝑒 𝑥 = 2. 

 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 43: visualização gráfica da equação 𝑥2 − 3𝑥 + 2 

61 

3.6  Estudo do sinal de funções, solução de inequações e aplicações de 

derivadas e integrais  

Esta  seção  trata  do  estudo  de  sinais  de  funções,  da  resolução  de 

inequações,  e  algumas  aplicações  de  derivadas  e  integrais.  As  aplicações  de 

cálculo abordadas e modelados através do OpenModelica foram problemas de 

máximo e mínimo e problemas para o cálculo da área de superfície. 

3.6.1  Estudo do sinal de funções 

Seja  a  função  𝑓: 𝐴  →  𝐵  definida  por  𝑦  =  𝑓(𝑥).  Vamos  resolver  o 

problema “para que valores de 𝑥 temos 𝑓(𝑥) >  0, 𝑓(𝑥)   < 0 𝑜𝑢 𝑓(𝑥)   = 0 ?”. 

Resolver este problema significa estudar o sinal da função 𝑦  =  𝑓(𝑥).  para 

cada  𝑥  pertencente  a  seu  domínio.  Para  se  estudar  o  sinal  de  uma  função, 

quando  ela  está  representada  no  plano  cartesiano,  basta  examinar  se  a 

ordenada  de  cada  ponto  da  curva  é  positiva,  nula  ou  negativa.  A  título  de 

exemplos  vamos  realizar  o  estudo  do  sinal  de  alguns  tipos  de  funções  no 

OpenModelica. 

 
 
 
 
 
 
 
 
 
 
62 

Iniciaremos com o estudo do sinal da função 𝑓(𝑥) =  2𝑥  −  1. Montamos 

o modelo dessa função no OMEdit através do diagrama de blocos. 

O  bloco  de  clock  gera  valores  que  simulam  a  variável  𝑥.  Inserimos  no 

bloco Const o valor 2. Multiplicamos então o bloco clock pelo valor 2 através do 

bloco product para se ter na saída o valor igual a 2𝑥 posteriormente somamos 

esse valor de 2𝑥 com outro valor de −1 de um outro bloco const. Teremos então 

na saída do bloco add o valor de 2𝑥  −  1, esse valor é então comparado através 

dos blocos lógicos, lessThreshold (<  0) e greaterThreshol (>  0). O bloco lógico 

lessThreshold  executa  a  operação  de  encontrar  os  valores  de    𝑥 onde  2𝑥 –  1 

seja menor  que  zero. O  bloco  lógico  greaterThreshold  executa  a  operação  de 

encontrar os valores de  𝑥 onde  2𝑥 –  1 seja maior que zero. Na Figura 44 temos 

a montagem final para o estudo da função 𝑓(𝑥) = 2𝑥–  1. 

Figura 44: montagem para o estudo do sinal de 2𝑥 –  1 

O bloco lessThreshold tem saída igual a 1 quando a função é menor que 

um  valor  de  referência,  no  caso  em  estudo  nosso  valor  de  referência  é  0. Na 

Figura 45 vemos a saída do bloco  lessThreshold indicando que os valores da 

função 𝑓(𝑥) é menor que zero para 𝑥 menor que 0.5. 

 
 
 
 
 
 
 
 
 
 
 
Figura 45: saída gráfica do bloco lessThreshold. 

63 

O  bloco  greaterThreshold  tem  saída  igual a 1 quando a  função  é maior 

que um valor de referência, no caso em estudo nosso valor de referência é 0. Na 

Figura 46 vemos a saída do bloco greaterThreshold indicando que os valores da 

função 𝑓(𝑥) é maior que zero para 𝑥 maior que 0.5. 

Figura 46: saída gráfica do bloco greaterThreshold. 

Mais um exemplo de estudo do sinal de funções. Seja a função  𝑓(𝑥) =

 𝑥2 –  𝑥 −  6, queremos verificar com o OpenModelica o sinal de 𝑓(𝑥). 

Montamos então o diagrama de blocos da Figura 47. Observar que agora 

a varável 𝑥 não está sendo gerada por um sinal de clock e sim por sinal do tipo 

 
 
 
 
 
 
 
64 

rampa (bloco ramp da biblioteca source). Fazemos a multiplicação de 2 rampas 

através do bloco product, e na saída do bloco product encontramos o valor de 

𝑥2, posteriormente realizamos a soma de um bloco ramp, que modela a variável 

𝑥  com  um  bloco  constant  com o  valor  de  −6.  por último  colocamos os  blocos 

lógicos  de  maior  e  menor  para  realizar  o  estudo  do  sinal  da  função.  O  que  é 

interessante  notar  também  com  esse  exemplo  é  a  geração  dos  valores  da 

varável  𝑥 com  o  bloco  rampa,  demonstrando  assim  que  as  possibilidades  de 

resolução de um problema são inúmeras. 

Figura 47: modelagem para o estudo do sinal da função 𝑥2 –  𝑥 −  6. 

A  saída  do  bloco  lessThreshold  indica  os  valores  em  que  a  função 

𝑥2 –  𝑥 −  6 é menor que 0. Observar que pela Figura 48 o intervalo aberto entres 

−2 e 3 é o intervalo que satisfaz a condição. 

Figura 48: saída do bloco lessThreshold, onde 𝑥2 –  𝑥 −  6 < 0 

 
  
 
 
 
 
65 

A  saída  do  bloco  greaterThreshold  indica  os  valores  em  que  a  função 

𝑥2 –  𝑥 −  6 é maior que 0. Observar que pela Figura 49 o intervalo aberto entres 

menor que −2 e maior que 3 é o intervalo que satisfaz a condição.  

Figura 49: saída do bloco greaterThreshold, onde  𝑥2 –  𝑥 −  6 > 0 

3.6.2  Problema com Inequação 

Resolver o sistema de inequações: 

{

3𝑥 − 2 > 4𝑥 + 1
5𝑥 + 1 < 2𝑥 − 5

(22) 

Inicialmente deve-se montar os modelos das inequações de acordo com 

o já exposto neste capítulo. O diferencial deste modelo será a inserção do bloco 

less, do bloco greater e do bloco and. O bloco less verifica se o sinal da conexão 

superior é menor que o sinal da conexão inferior, se sim então a saída do bloco 

less é 1, senão então a saída é 0. Da forma similar o bloco greater verifica se o 

sinal da conexão superior é maior que o sinal da conexão inferior, se sim então 

a saída do bloco less é 1, senão então a saída é 0. O bloco and mostra na saída 

o valor 1 quando as duas entradas tiverem entradas 1, portanto na saída do bloco 

and  será  1  quando  os  sinais  dos  blocos  less  e  greater  forem  1.  A  situação 

descrita é equivalente a intersecção da solução da inequação 3𝑥 − 2 > 4𝑥 + 1, 

com a solução da equação 5𝑥 + 1 < 2𝑥 − 5. O modelo em diagrama de blocos 

da solução de (22) esta mostrada na Figura 50 e a solução do sistema na Figura 

51. 

 
 
 
 
 
 
 
 
 
 
Figura 50: modelagem do sistema de inequações (22) 

66 

Figura 51: solução do sistema de inequações (22) 

3.6.3  Problemas de máximos e mínimos 

Encontre  o  ponto  sobre  a  parábola  𝑦2 = 2𝑥  mais  próximo  de  (1,4).  A 

distância entre um ponto 𝑃 = (𝑥, 𝑦) da parábola e o ponto 𝑄 = (1,4) é: 

𝑑 =   √(𝑥 − 1)2 + (𝑦 − 4)2 

(23) 

Como P está na parábola então 𝑥 =

𝑦2. E substituindo essa expressão 

1

2

em (23), d ficará: 

 
 
 
 
 
 
 
 
 
 
1
𝑑 =   √(
2

2
𝑦2 − 1)

+ (𝑦 − 4)2 

67 

(24) 

Neste ponto utilizaremos o OpenModelica para se criar um modelo que 

minimize (24). Para isso utilizaremos bloco Pythagoras que calcula distâncias. 
Com as entradas desse bloco sendo os termos 1
2

𝑦2 − 1 e 𝑦 − 4. Nosso modelo 

calcula a distância d entre o ponto 𝑃 e 𝑄 em função de 𝑦. Utilizamos os blocos 

zeroCrossing  e 

triggeredSampler  para  descobrir  onde  𝑑’ = 0.  Depois 

utilizaremos  os  blocos  greaterThreshold  (>)  e  lessThreshold  (<)  para  verficar 

onde 𝑑’ > 0 𝑒 𝑑’ < 0 que corresponde justamente ao teste da primeira derivada 

para se descobrir os valores de máximos e mínimos globais de funções. A Figura 

52 mostra a modelagem para o problema de otimização. 

Figura 52: diagrama de blocos para o problema de otimização 

Na saída gráfica do bloco triggeredSampler, Figura 53, vemos que 𝑑’ = 0 

em 𝑦 = 2, então 2 é ponto crítico de 𝑑. A saída gráfica de lessThreshold, Figura 

54, nos diz que 𝑑’ < 0 se 𝑦 < 2. A saída gráfica de greaterThreshold, Figura 55, 

nos diz que 𝑑’ > 0 se 𝑦 > 2, então conclui-se que 𝑦 = 2 é um mínimo de 𝑑′. e 

quando 𝑦 = 2, 𝑥 = 2, então o ponto 𝑅 = (2,2) é o ponto procurado. 

 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 53: saída do bloco triggeredSampler mostrando onde 𝑑’ = 0. 

68 

Figura 54: saída do bloco lessThreshold, mostrando onde 𝑑’ < 0. 

Figura 55: saída do bloco greaterThreshold, mostrando 𝑑’ > 0. 

 
 
 
 
 
 
69 

3.6.4  Área de superfície 

Conforme Swokowski (1995, p. 432), “se uma função 𝑓 é suave e 𝑓(𝑥) ≥

0 em [𝑎, 𝑏], então a área S da superfície gerada pela revolução de do gráfico de 

𝑓 em torno do eixo-𝑥 é dada por:” 

𝑏

𝑆 =   ∫ 2𝜋𝑓(𝑥)√1 + [𝑓′(𝑥)]2

𝑑𝑥 

𝑎

(25) 

Vamos  utilizar  (38)  para  calcular  a  área  da  superfície  gerada  pela  rotação  do 

gráfico de 𝑦 = √𝑥 de (1,1) a (4,2): 

4

𝑆 =   ∫ 2𝜋𝑥0.5√1 + [

1

2

1
2𝑥0.5]

𝑑𝑥 

(26) 

Agora  vamos  modelar  (39)  utilizando  o  OpenModelica.  Como  o 

OpenModelica possui o bloco de integral pronto, podemos utilizá-lo para calcular 

(26).  Montamos  o  integrando  com  os  blocos  da  biblioteca  Math,  conforme 

descrito na Figura 56. O valor da área calculada foi 30.84 e esta mostrada na 

Figura 57. 

Figura 56: modelo em diagrama de blocos para o cálculo de (26). 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 57: cálculo da área de 𝑦 = √𝑥 entre (1,1) e (4,2). 

70 

 
 
4  MODELAGEM  DE  EQUAÇÕES  DIFERENCIAIS,  EQUAÇÕES  NO 

ESPAÇO  DE  ESTADOS  E  DE  SISTEMAS  DINÂMICOS  COM  O 

OPENMODELICA 

71 

De  acordo  com  Ogata  (2010,  p.  3),  “Um  sistema  é  a  combinação  de 

componentes que agem em conjunto para atingir determinado objetivo. A ideia 

de sistema não fica restrita apenas a algo físico. O conceito sistema pode ser 

aplicado  a  fenômenos  abstratos  dinâmicos,  como  aqueles  encontrados  na 

economia.”  

Um sistema dinâmico é um sistema no qual as variáveis de saída atuais 

dependem das condições iniciais, ou da energia armazenada, do sistema e/ou 

das variáveis de entrada anteriores. As variáveis dinâmicas de um sistema, por 

exemplo, deslocamento, velocidade, tensão, pressão, entre outras, variam com 

o  tempo.  Então  para  modelar  sistemas  dinâmicos  necessitaremos  determinar 

sua  resposta  através  de  uma  representação  matemática  da  sua  dinâmica. 

Tomando como base o modelo matemático construído, utilizaremos um modelo 

computacional,  baseado  nas  equações  matemáticas  obtidas,  para  se  ter  as 

respostas gráficas do sistema dinâmico. 

Vivenciamos diariamente os mais diversos tipos de sistemas aumentarem 

a sua complexidade e necessitarem de maior precisão. Sistemas complexos de 

engenharia  por  exemplo  podem  ter  várias  entradas  e  várias  saídas  e  quando 

tentamos modelar tais sistemas de alta complexidade a forma matemática mais 

conveniente  é  utilizar  equações  no  espaço  de  estados  em  conjunto  com  as 

equações diferenciais. 

Com  o  OpenModelica  é  possível  modelar  equações  diferenciais  e 

equações no espaço de estado, e com a modelagem dessas duas ferramentas 

matemáticas através de diagrama de blocos do OpenModelica a trasferencia do 

modelo matemático de um sistema dinâmico para o modelo computacional torna-

se muito mais simples. 

 
 
 
 
 
 
 
 
 
 
72 

4.1  Modelagem de equações diferenciais de primeira e segunda ordem 

           Seja a equação diferencial linear de primeira ordem da forma: 

𝑑𝑦

𝑑𝑡

+ 𝑝(𝑡)𝑦 = 𝑔(𝑡)  

(27) 

  Onde 𝑝 e 𝑔 são funções dadas da variável independente 𝑡. 

De acordo com Boyce e DiPrima: 

Muitos  dos  princípios  ou  leis  que  regem  o  comportamento  do 

mundo físico são proposições, ou relações, envolvendo a taxa segundo 

a qual as coisas acontecem. Expressas em linguagem matemática, as 

relações são equações e as taxas são derivadas. Equações contendo 

derivadas  são  equações  diferenciais.  Portanto  para  compreender  e 

investigar  problemas  envolvendo  o  movimento  de  fluidos,  o  fluxo  de 

corrente elétrica em circuitos, a dissipação de calor em objetos sólidos, 

a  propagação  e  detecção  de  ondas  sísmicas,  ou  aumento  ou 

diminuição  de  populações  muitos  outros  é  necessário  saber  alguma 

coisa sobre equações diferenciais. 

O nosso objetivo é determinar uma solução gráfica da equação (27).  Para 

determinar uma solução gráfica da equação (27) construiremos um modelo de 

diagrama de blocos que vai representar tal equação. Para ilustrar o procedimento 

tomemos a equação diferencial de primeira ordem: 

𝑑𝑦
𝑑𝑡

+

1
2

𝑦 =

𝑡
3 

𝑒

1
2

(28) 

Rearranjando a equação (25) e isolando o operador derivada temos: 

𝑑𝑦
𝑑𝑡

= −

1
2

𝑦 +

𝑡
3 

𝑒

1
2

(29) 

O  procedimento  para  se  montar  a  solução  é:  fazer  o  bloco  integrador 

receber 𝑑𝑦
𝑑𝑡

, então na sua saída nós teremos a variável 𝑦, depois nós inserimos 

, esses valores de 𝑡
um bloco ramp para gerar os valores de  𝑡
,  são inseridos no 
3
3

bloco exp gerando os valores de 𝑒

𝑡
3, por último nós inserimos um bloco de soma 

acopla ganhos de valores −

 para a variável 𝑦 e de valor 1
1
  para a 𝑒
2
2

𝑡
3,  então na 

 
 
 
   
 
 
 
 
 
 
 
73 

saída do bloco add nós teremos a equação diferencial requerida, que entrando 

no  bloco  integrador  obtemos  o  valor  da  varável  𝑦.  Na  Figura  58  temos  a 

montagem do procedimento descrito. Na Figura 59 temos a solução gráfica da 

equação (29). 

Figura 58: modelagem para gerar a solução gráfica de (29). 

Para  a  geração  do  gráfico  que  representa  a  solução  da  equação  (29) 

considerou-se o valor a condição inicial 𝑦 = 4 quando 𝑡 = 1. 

Figura 59: solução da equação (29) 

Vamos agora utilizar o mesmo procedimento descrito no item anterior para 

resolver a equação diferencial linear de segunda ordem do tipo: 

𝑦’’ + 𝑏𝑦’ + 𝑐𝑦  =  𝑔(𝑡) 

(30) 

Para ilustrar vamos modelar a equação diferencial: 

 
 
 
 
 
 
 
 
 
𝑦’’ + 𝑦’ − 2𝑦 =  2𝑡 

74 

(31) 

Monta-se  a  modelagem  conforme  a  Figura  60,  que  é  um  procedimento 

análogo  ao  anterior  e  acrescenta-se  um  bloco  de  soma  com  3  entradas.  A 

terceira  entrada  do  bloco  de  soma  vai ser responsável por adicionar a função 

𝑔(𝑡) ao modelo. Na Figura 61 temos a solução gráfica de (31). 

Figura 60: modelagem para gerar a solução gráfica de (31). 

Figura 61: solução gráfica de (31) 

Nota 01: as equações diferenciais utilizadas como exemplos foram retiradas do 

livro  de  equações  diferencia  do  livro  Equações  Diferenciais  Elementares 

Problemas de Valores de Contorno autores Willim E. Boyce e Richard C. DiPrima 

 
 
 
 
 
 
 
 
4.2  Modelagem de sistemas dinâmicos: circuito elétrico RLC paralelo 

75 

Seja o circuito elétrico: 

Figura 62: circuito elétrico RLC paralelo 

Fonte: livro Fundamentos de Análise de Circuitos Elétricos 

Supor que no instante inicial a tensão no capacitor seja de 𝑣  =  𝑉𝑜 e a 

corrente inicial no indutor seja de 𝑖  =  𝐼𝑜, nosso objetivo é modelar o circuito para 

encontrar 𝑣 para 𝑡  >  0. De acordo com David, John, Johnny (2012, p. 219) a 

equação que modela o circuito da Figura 62 é:  

𝐶

𝑑2𝑣
𝑑𝑡2 +

1
𝑅

𝑑𝑣
𝑑𝑡

+

1
𝐿

𝑣 =

𝑑𝑖𝑔
𝑑𝑡

e as frequências naturais para esta equação são: 

𝑠1,2 =   −

1
2𝑅𝐶

+√(

1
2𝑅𝐶

2
)

−

1
𝐿𝐶

(32) 

(33) 

Neste caso se 𝐿  >  4𝑅2 então as frequências naturais 𝑠1,2 são números 

reais e distintos e temos o caso de um circuito superamortecido, com: 

𝑣  =  𝐴1𝑒 𝑠1𝑡 + 𝐴2𝑒 𝑠2𝑡 

(34) 

Como  exemplo,  suponha  𝑅  =  1 Ω, 𝐿  =

4

3

𝐻, 𝐶  =  

1

4

 𝐹, 𝑉𝑜  =  2 𝑉, 𝐼𝑜  =

 −3 𝐴 e 𝑖𝑔  =  0. Temos: 

𝑑2𝑣
𝑑𝑡2 +

4

𝑑𝑣

1

𝑑𝑡

+

3

1

𝑣 = 0, com 𝑠1 = −1 e 𝑠2 = −3 

e portanto, 

𝑣  =  𝐴1𝑒−𝑡 + 𝐴2𝑒−3𝑡 

 
 
 
 
 
 
 
 
 
 
    
 
 
  
 
 
 
76 

para 𝑣(0) =  2 𝑉 𝑒 𝑣’(0) =  4 

𝑉

𝑠

. 

Que são usadas para se obter A1 = 5 e A2 = -3 e desta forma: 

𝑣  =  5𝑒−𝑡 − 3𝑒−3𝑡 

A  modelagem  descrita  na  Figura  63,  resolve  equações  diferenciais  de 

segunda  ordem  e  pode  ser  usada  para  modelar  o  circuito  RLC  paralelo.  Na 

Figura 64 temos o gráfico da tensão de saída no capacito. 

Figura 63: diagramas de blocos que modela o circuito RLC paralelo. 

Se fizermos no modelo do diagrama de bloco 𝑏  =   −4 e 𝑐  =   −3 então na 

saída do bloco integrador 1 teremos a solução gráfica de 𝑑2𝑣

𝑑𝑡2 +

4

𝑑𝑣

1

𝑑𝑡

+

3

1

𝑣 = 0 com 

as condições iniciais de 𝑣(0) =  2 𝑉 𝑒 𝑣’(0) =  4 

𝑉

𝑠

. 

Figura 64: solução gráfica da equação diferencial de segunda ordem 

 
 
 
 
 
 
 
 
 
77 

4.3  Modelagem  de  sistemas  dinâmicos:  linhas  de  corrente  de  sistemas 

hidráulicos, linhas de emissão e trajetória. 

Uma linha de corrente consiste numa linha contínua traçada num fluido, 

tangente  em  todos  os  pontos  ao  vetor  velocidade.  Para  um  escoamento 

bidimensional em regime permanente suponhamos que  as linhas de correntes 

são dadas pela solução da equação diferencial; 

𝑑𝑦
𝑑𝑥

= −

𝑦
𝑥

Podemos escrevê-la da forma: 

𝑥

𝑑𝑦
𝑑𝑥

= −𝑦 

(35) 

(36) 

O  OpenModelica  possui  um  bloco  pronto  para  se  calcular  derivada  e 

resolver (36) de forma simples. A modelagem da Figura 65 é uma das formas de 

se resolver problema. O resultado da simulação mostra a geração de uma linha 

de corrente (para o valor inicial de 𝑥 e 𝑦 iguais a 1) conforme pode ser visto na 

Figura 66. 

Figura 65: modelagem para solução gráfica de (30) 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Pode-se  construir  várias  linhas  de  corrente  utilizando  valores  iniciais 

diferentes para 𝑥 e 𝑦. 

78 

Figura 66: solução gráfica de (36) 

4.4  Modelagem  de  sistemas  dinâmicos: Sistema  mecânicos  e equações 

no espaço de estado 

Considere-se o sistema mecânico indicado na Figura 67. Admita-se que 

o  sistema  seja  linear.  A  força  externa  𝑢(𝑡)  é  a  entrada  do  sistema  e  o 

deslocamento  𝑦(𝑡)  é  medido  a  partir  da  posição  de  equilíbrio  na  ausência  de 

força  externa.  Esse  é um  sistema monovariável  (uma entrada e  uma  saída) a 

equação do sistema é: 

𝑚𝑦’’ + 𝑏𝑦’ + 𝑘𝑦  =  𝑢(𝑡) 

(37) 

Onde b é uma constante de amortecimento e k a constante de elasticidade 

da mola. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 67: sistema mecânico 

79 

Fonte: livro Engenharia de Controle Moderno 

De  acordo  com  Ogata  a  equação  diferencial  (37)  pode  ser  resolvida 

através de equações no espaço de estados, que são equações que modelam 

sistemas dinâmicos. As equações no espaço de estado são dadas por: 

𝑥′(𝑡) = 𝐴𝑥(𝑡) + 𝐵𝑢(𝑡) 

𝑦(𝑡) = 𝐶𝑥(𝑡) + 𝐷𝑢(𝑡) 

(38) 

Onde: 

𝑥 = vetor de estado 
𝑥’= derivada do vetor de estado em relação ao tempo 
𝑦 = vetor de saída 
𝑢 = vetor de entrada ou vetor de controle 
𝐴 = matriz do sistema 
𝐵 = matriz de entrada 
𝐶 = matriz de saída 
𝐷 = matriz de transmissão direta 

Para o exemplo dado (33) torna-se: 

[

𝑥1′
𝑥2′] = [

0
𝑘
𝑚

−

1
𝑏
𝑚

−

] [

𝑥1
𝑥2

] + [

0
1
𝑚

] 𝑢 

𝑦 = [1 0] [

𝑥1
𝑥2

] 

(39) 

O  OpenModelica  possui  um  bloco  pronto  para  modelar  equações  no 

espaço  de  estados.  Se 

tivermos  𝑚  =  0.125, 𝑏  =  2, 𝑘  =  24 𝑒 𝑢  =  2, 

escrevemos (39) como: 

 
 
 
 
 
 
 
 
 
𝑥1′
𝑥2′] = [
[

0

1

−192 −16

] [

𝑥1
𝑥2

] + [

0
8

] 𝑢 

𝑦 = [1 0] [

𝑥1
𝑥2

] 

80 

(40) 

Vamos  agora  modelar  (40)  através  do  OpenModelica  para  se  ter  a 

resposta 𝑦 que nos mostrará o deslocamento do bloco 𝑚 em relação a posição 

de equilíbrio. A Figura 68 mostra o modelo pronto. 

Figura 68: Modelagem através de equações no espaço de estados. 

O  deslocamento  𝑦  da  massa  𝑚,  do  sistema  mecânico  da  Figura  67  é 

mostrado na Figura 69. 

Figura 69: resposta 𝑦 para as equações no espaço de estado (40). 

É  possível  modelar  as  equações  no  espaço  de  estado  através  de 

diagramas  de  blocos.  Na  Figura  70  vemos  uma  proposta  para  modelar  as 

equações no espaço de estado do sistema mecânico da Figura 67. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 70: diagrama de blocos que modela o sistema da Figura 67. 

81 

Fonte: livro de Engenharia de Controle Moderno. 

Utilizando  o  OpenModelica  vamos  criar  o  modelo  para  as  equações  no 

espaço de estados tomando como base a Figura 70. 

Figura 71: modelagem em diagrama de blocos da equação (40) 

A  saída do  diagrama de  blocos  da  Figura 71  é  mostrada  na  Figura  72. 

Evidente que a curva gerada é a mesma curva Figura 69, o que mostra que o 

modelo  criado  no  OpenMOdelica  através  de  diagramas  de  blocos  simula  as 

equações no espaço de estado já disponíveis também no OpenModelica. Este 

exemplo  mostra  a  versatilidade  o  software,  uma  vez  que,  dispõe-se  de  vários 

recursos para se modelar o mesmo sistema. 

 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 72: saída 𝑦 do diagrama de blocos da Figura 71. 

82 

4.5  Modelagem de sistemas dinâmicos: motor em corrente contínua. 

O modelo de um circuito eletromecânico de um motor de corrente contínua 

com  excitação  independente  está  mostrado  na  Figura  73.  O  circuito  do 

enrolamento de armadura é modelado como tendo: 

a)   Uma resistência constante 𝑅𝑎, em série com uma indutância constante 

𝐿𝑎. 

b)  Uma indutância 𝐿𝑎 que modela a indutância do enrolamento da armadura,  

c)  Uma  fonte  de  tensão  𝑉𝑎  representando  a  tensão  nos  terminais  da 

máquina e 

d)  Uma tensão 𝐸𝑎 designada como tensão interna gerada na armadura.  

e)  Um  enrolamento  de  campo  que  é  representado  por  uma  resistência 

constante 𝑅𝑓, e uma indutância constante 𝐿𝑓.  

Como  o  fluxo  de  campo  líquido  de  entreferro  sendo  designado  por  𝜑  a 

velocidade do eixo de armadura é representada por 𝜔 e o conjugado induzido, 

torque de atrito do motor e o torque de carga no eixo do motor são indicados por 

𝑇𝑚, 𝑇𝑟𝑜𝑡, 𝑇𝐿 respectivamente. 

 
 
 
 
 
 
 
 
 
 
Figura 73: modelo elétrico e mecânico de um motor CC 

83 

Aplicando a lei das tensões de Kirchhof na figura XX teremos a seguinte 

equação: 

𝑉𝑎 = 𝐿𝑎 ∗

𝑑𝐼𝑎
𝑑𝑡

+ 𝑅𝑎 ∗ 𝐼𝑎 + 𝐸𝑎 

(41) 

Escrevendo a equação em termos de impedâncias elétricas: 

𝑉𝑎(𝑠) =  𝑠 ∗ 𝐿𝑎 ∗ 𝐼𝑎(𝑠) + 𝑅𝑎 ∗ 𝐼𝑎(𝑠) + 𝐸𝑎(𝑠) 

(42) 

Isolando o valor da corrente: 

𝐼𝑎(𝑠) =

𝑉𝑎(𝑠) − 𝐸𝑎(𝑠)
𝑠 ∗ 𝐿𝑎 + 𝑅𝑎

(43) 

Da teoria de máquinas elétricas a tensão gerada interna da máquina CC 

é dada por: 

𝐸𝑎 = 𝐾𝑎 ∗ 𝜑 ∗ 𝑤 

(44) 

Onde 𝐾𝑎 é uma é uma constante que depende da forma construtiva da 

máquina 𝜑 é o fluxo gerado no enrolamento de campo e  𝑤 é a velocidade no 

eixo do motor. O conjugado induzido desenvolvido pela máquina é dado por: 

𝑇𝑚 = 𝐾𝑎 ∗ 𝜑 ∗ 𝐼𝑎 

(45) 

A lei de Newton para sistemas rotacionais diz que o somatório dos torques 

aplicados à um corpo é igual ao momento de inércia vezes a aceleração angular. 

A equação de torque é dada então por: 

∑ 𝑇 = 𝐽 ∗

𝑑𝑤
𝑑𝑡

(46) 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
84 

Os torques aplicados ao motor de corrente cc são os toques magnéticos 

o torque de atrito do motor e o torque de carga. O torque resultante será então 

𝑇𝑚 − 𝑇𝑟𝑜𝑡 − 𝑇𝐿 o que dá: 𝑇𝑚 − 𝑇𝑟𝑜𝑡 − 𝑇𝐿 =  𝐽 ∗ 𝑤, mas torque de atrito rotacioal 

é proporcional a velocidade mecânica da máquina, 𝑇𝑟𝑜𝑡 = 𝐵 ∗ 𝑤, onde 𝐵 é uma 

constante chamada de coeficiente de atrito. Podemos escrever 𝑇𝑚 − 𝑇𝐿 = 𝐵 ∗

𝑤 +  𝐽 ∗

𝑑𝑤

𝑑𝑡

. 

Agora  escrevemos  as  equações  considerando  as 

impedâncias 

mecânicas: 

𝑇𝑚(𝑠) − 𝑇𝐿(𝑠) = 𝐵 ∗ 𝑤(𝑠) + 𝑠𝐽𝑤(𝑠) 

𝑤(𝑠) =

𝑇𝑚(𝑠) − 𝑇𝐿(𝑠)
𝐽𝑠 + 𝐵

(47) 

(48) 

Para  montarmos  o  diagrama  de  blocos  iniciamos  com  as  equações  da 

elétrica,  equações  41,  42  e  43,  depois  inserimos  a  equação  que  dá  o  torque 

magnético  em  função  das  grandezas  elétricas,  equação  45,  posteriormente 

subtraímos o Torque magnético do Torque de carga e dividimos pela impedância 

mecânica para se obter a velocidade mecânica no eixo da máquina, equação 48. 

Por  fim  utilizamos  a  equação  44  que  faz  a  ligação  entre  a  parte  mecânica  e 

elétrica. O diagrama de blocos que modela o motor CC é descrito na Figura 74. 

Figura 74: diagrama de blocos que modela as equações do motor CC 

Vamos utilizar dados usuais de uma máquina CC: 

𝑅𝑎  =  7 Ω 

𝐿𝑎  =  160𝑚 𝐻 

𝐵  =  3.1𝑚 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
85 

𝐽𝑚𝑜𝑡𝑜𝑟  =  13𝑚 𝑘𝑔 ∗ 𝑚^2 

𝐽𝑐𝑎𝑟𝑔𝑎  =  35𝑚 𝑘𝑔 ∗ 𝑚^2 

𝐾𝑎 ∗ 𝜑 = 0.5 𝑊𝑏 

𝑉𝑎  =  65 𝑉 

A  ideia  para  esse  modelo  é  saber  o  comportamento  da  velocidade  do 

motor e da corrente que circula por esta máquina quando é aplicado uma carga 

externa.  Essas  informações  são  importantes  para  se  realizar  o  controle  de 

velocidade do motor CC, e regular a potência que deve ser aplicada a esse motor 

para se ter uma resposta adequada de velocidade.  

Figura 75: modelagem motor CC 

De  posse  do  diagrama  de  blocos  que  modela  as  equações  elétricas  e 

mecânicas  da  máquina  CC  montamos  o  diagrama  de  blocos,  Figura  75,  no 

OpenModelica.  A  modelagem  através  do  OpenModelica  nos  fornece  gráficos 

para visualizar o comportamento da velocidade do motor CC, Figura 76, e a sua 

corrente, Figura 77. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 76: velocidade do motor CC 

86 

Esses dados visuais permitem ao projetista verificar se a velocidade do 

motor  variou  de  forma  significativa  na  presença  de  uma  nova  carga  e  se  a 

corrente  ultrapassou  o  limite  permitido  de  acordo  com  as  especificações  da 

máquina. 

Figura 77: corrente do motor CC 

4.6  Modelagem de sistemas dinâmicos:  medição de energia elétrica e o 

seu faturamento. 

O cálculo da energia elétrica consumida pelos aparelhos eletrodomésticos 

pode  ser  feito  com  base  na  potência  e  no  tempo  em  que  cada  um  desses 

 
 
 
 
 
 
 
 
 
aparelhos  permanece  ligado,  de  modo  que  a  energia  elétrica  consumida  seja 

calculada  em  quilowatt-hora  (kWh).  A  Tabela  9  mostra  valores  típicos  de 

potência de eletrodomésticos e de lâmpadas, com o tempo médio diário de uso. 

87 

Tabela 9: lista de equipamentos e suas potências 

Equipamentos 

Potência 

Quantidade  Tempo  médio  de 

Chuveiro elétrico 

Ar-condicionado 

Geladeira  com  freezer 

240 L 

Tv 40’ 

Máquina lavar roupas 

Notebook 

Lâmpadas 

Ventilador 

(kW) 

7.5 

1.4 

0.0131 

0.075 

0.8 

0.0015 

0.020 

0.014 

uso diário (h) 

0.1666 

8 

24 

5 

1 

10 

3 

8 

2 

2 

1 

3 

1 

2 

15 

1 

A  energia  média  consumida  diariamente  =  (potência  em  watt/1000)  x 

(tempo  em  horas)  =  total  em  kWh.  Para  saber  o  valor  da  conta  de  energia 

multiplica-se o kWh mensal vezes o valor da tarifa de energia. Em Rondônia a 

tarifa de energia tem o valor de R$ 0.6845 por kWh.  

O  modelo  da  Figura  78,  é  composto  pelos  equipamentos  da  Tabela  9. 

Cada  equipamento  é  ligado  e  desligado  com  a  abertura  da  chave  switch  que 

simula os interruptores de uma instalação, o bloco booleano simula o momento 

que uma pessoa liga ou desliga os equipamentos, os blocos de ganho simulam 

a quantidade de equipamentos e o bloco integrador simula o medidor de energia 

elétrica já com os valores em Reais da energia consumida. Com este modelo, 

gráficos  importantes  são  obtidos  tais  como  a  curva  de  carga  diária  de  uma 

residência, a quantidade de energia consumida diariamente e o dispêndio diário 

com a energia elétrica. 

 
 
 
 
 
 
 
 
 
Figura 78: modelo para o cálculo da fatura de energia. 

88 

O gráfico da Figura 79, mostra a curva de carga da potência diária de uma 

residência, deduz-se pelo gráfico que os aparelhos que mais consomem energia 

são o ar-condicionado e o chuveiro elétrico. 

Figura 79: curva de carga diária de uma residência 

Na Figura 80, temos o gráfico do custo diário da energia elétrica de uma 

residência que tem como eletrodomésticos a lista descrita na Tabela 9. Verifica-

se  que  no  final  no  final  de  um  dia  o  dispêndio  com  a  energia  elétrica  foi  de 

aproximadamente R$ 19,32. Um modelo como este é extremamente útil para se 

fazer um uso mais racional da energia elétrica visando a economia. 

 
 
 
 
 
 
 
 
 
Figura 80: curva do dispêndio com energia elétrica durante um dia 

89 

4.7  Modelagem de sistemas dinâmicos: Lei de esfriamento de Newton 

De acordo a empírica lei de esfriamento de Newton, a taxa de esfriamento 

de  um  corpo  é  proporcional  à  diferença  entre  a  temperatura  do  corpo  e  a 

temperatura do meio ambiente. Suponha que 𝑇(𝑡) denote a temperatura de um 

corpo no instante 𝑡 e que a temperatura do meio ambiente seja constante, igual 

a 𝑇𝑚. Se 𝑑𝑇/𝑑𝑡 representa a taxa de variação da temperatura do corpo, então a 

lei de esfriamento de Newton poderá ser expressa matematicamente como:  

𝑑𝑇
𝑑𝑡

= 𝑘(𝑇 − 𝑇𝑚) 

(49) 

Vamos supor que a temperatura  de um corpo seja de 70° num instante 

inicial  e  que  a  temperatura  ambiente  seja  de  23°  depois  de  quanto  tempo  a 

temperatura do corpo igualara a temperatura ambiente? Suponha que o valor de 

𝑘 para este corpo seja de −0.4321 então a equação 49 pode ser escrita como: 

𝑑𝑇
𝑑𝑡

= −0.4321𝑇 + 9.9383 

(50) 

De  acordo  com a  teoria  de  equações  diferenciais,  esta é  uma equação 

diferencial ordinária de primeira ordem e a sua solução é da forma exponencial.  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 81: diagrama de blocos que modela a lei de Newton do resfriamento 

90 

O  bloco  integrador  calcula  a  antiderivada  de  𝑑𝑇
𝑑𝑡

  encontrado  o  valor  da 

função  𝑇(𝑡).  Para  que  a  função  𝑇(𝑡)  convirja  exatamente  para  a  equação 

proposta  ajustamos  os  valores  da  constante  −0.4321,  no  bloco  de  gain,  para 

multiplicar a função temperatura e por último somamos esse valor a constante 

9.9383. Este modelo, ver Figura 81, do OpenModelica converge exatamente para 

a solução da equação (50) com a condição inicial da temperatura do corpo estar 

a 70°𝐶. A Figura 82 mostra o decaimento da temperatura do corpo até próximo 

a 

temperatura  ambiente.  A 

resposta  então  a  pergunta  é  de  que 

aproximadamente após 10 horas o corpo estará na temperatura ambiente. 

Figura 82: decaimento da temperatura acordo com a lei de resfriamento de 
Newton 

 
 
 
 
 
 
 
91 

4.8  Modelamento de sistema dinâmico: cabo suspenso 

Suponha um cabo suspenso sobre a ação do seu próprio peso, conforme 

a  Figura  83.  Um  exemplo  dessa  situação  pode  ser  observado  em  redes  de 

distribuição  aéreas  de  energia  elétrica  onde  os  condutores  estão  suspensos 

sobre a ação do seu próprio peso. 

Figura 83: cabo suspenso pela ação do próprio peso 

Vamos examinar somente a porção do cabo entre o ponto mais baixo 𝑃1 

e o ponto arbitrário 𝑃2, 3 forças estão agindo no cabo o peso da porção 𝑃1𝑃2 e 

as tensões 𝑇1, 𝑇2 em 𝑃1 e 𝑃2 respectivamente. Se 𝑤 for densidade linear medida 

em Newton por metro e s for comprimento do segmento 𝑃1𝑃2, seu peso será 𝑤𝑠 

A 

tensão  𝑇2 

tem  2  componentes,  uma  horizontal  e  outra  vertical, 

respectivamente dadas por 𝑇2𝑐𝑜𝑠(𝜃) e 𝑇2𝑠𝑖𝑛(𝜃). Da física podemos escrever as 

equações de equilíbrio: 

|𝑇1| = 𝑇1 = 𝑇2𝑐𝑜𝑠(𝜃) 𝑒 𝑤𝑠  = 𝑇2 𝑠𝑖𝑛(𝜃) 

(51) 

Fazendo a divisão da equação anterior: 

𝑇2𝑠𝑖𝑛(𝜃)
𝑇2𝑐𝑜𝑠(𝜃)

=

𝑤𝑠
𝑇1

tan(𝜃) =

𝑤𝑠
𝑇1

Ou 

Que vai resultar em: 

(52) 

(53) 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
𝑑𝑦
𝑑𝑥

=

𝑤𝑠
𝑇1

O comprimento do arco entre os pontos 𝑃1 e 𝑃2 é dado por: 

𝑥

𝑠 = ∫ √(1 + (

2
)

) 𝑑𝑥

𝑑𝑦
𝑑𝑥

0

Onde podemos reescrever como: 

𝑑𝑠
𝑑𝑥

= √(1 + (

2
)

) 

𝑑𝑦
𝑑𝑥

Derivando a equação (54) com relação a 𝑥 

𝑑2𝑦
𝑑𝑥2 =

𝑤
𝑇1

∗

𝑑𝑠
𝑑𝑥

ou  

𝑑2𝑦
𝑑𝑥2 =

𝑤
𝑇1

∗ √(1 + (

2
)

) 

𝑑𝑦
𝑑𝑥

92 

(54) 

(55) 

(56) 

(57) 

A equação (57) é o modelo matemático, ver Figura 84, que descreve a 

curva de um cabo suspenso apenas pelo seu próprio peso. Esta equação (57) é 

uma equação diferencial ordinária de segunda ordem redutível à primeira ordem 

através de uma substituição de variáveis, sua solução nos leva a uma expressão 

do  tipo  𝑦(𝑡) = 𝑚 ∗ 𝑐𝑜𝑠ℎ(𝑘 ∗ 𝑡),  onde  𝑚  e  𝑘  são  constantes,  esta  equação  é 

chamada de equação da catenária. Para visualizar a curva que é descrita pela 

equação (57) vamos modelá-la utilizando 2 blocos de integração para se calcular 

a antiderivada da função 𝑦 e depois manipulando os blocos de raiz quadrada, de 

produto e um bloco constante para implementar a expressão de dentro da raiz e 

assim construir a equação (57). Para esta modelagem vamos supor que 𝑤/𝑇1  =

 1. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figura 84: diagrama de blocos que modela a equação (57) 

93 

E  o  gráfico  gerado  está  mostrada  na  Figura  85,  este  gráfico,  conforme 

exposto representa a curva de um cabo sob a ação única do seu próprio peso. 

Figura 85: gráfico da catenária 

Foram  dados  apenas  alguns  exemplos  de  modelagens  com  o 

OpenModelica pois a lista de possibilidades é infinita. Observar que a sequência 

de modelagem é sempre realizar interpretação física do sistema a ser modelado 

para  posteriormente  utilizar  as  equações  matemáticas  adequadas  e  por  fim 

através  de  software 

traduzir  essas  equações  para  uma 

linguagem 

computacional. 

 
 
 
 
 
 
 
 
5  CONCLUSÃO 

94 

Uma  das  principais  vantagens  de  se  utilizar  o  OpenModelica  como 

ferramenta para o aluno estudar matemática é  o favorecimento à utilização da 

interação  entre  disciplinas.  Duas  disciplinas  intercambiando  conhecimentos 

torna o aprendizado mais atrativo, saindo um pouco do método tradicional. 

Ao se propor usar o OpenModelica, outra clara vantagem que se destaca 

é capacidade de motivar os alunos a buscarem com esta ferramenta tecnológica 

soluções a problemas matemáticos saindo do lugar comum de apenas aplicar 

fórmulas.  A  mudança  do  jeito  pensar  e  a  capacidade  de  testar  as  soluções  é 

inovador e interessante. 

O aprendizado por si só do OpenModelica não garante que um problema 

matemático seja resolvido, ou uma modelagem seja construída adequadamente, 

o aprendizado da matemática é primordial e indispensável, e é evidente que o 

conhecimento  matemático  vai  nos  dizer  se  a  resposta  dada  pelo  software  é 

minimamente aceitável. 

A quantidade de recursos do OpenModelica é enorme e impossível de se 

contemplar tudo em apenas um trabalho, por isso  deixo como sugestões para 

futuros trabalhos a utilização da álgebra matricial e o uso das transformadas de 

Laplace  e  Fourier  para  aplicações  em  sistemas  elétricos,  térmicos  e  de 

comunicação. 

Por fim nunca se deve focar em apenas um meio para unir matemática e 

computação, explorar mais softwares que tratam de matemática é muito valioso 

pois a infinidade de problemas que surgem pode requerer que diferentes tipos 

de recursos computacionais sejam utilizados para a sua solução. Um aluno deve 

sempre  buscar  aperfeiçoar  a  sua  capacidade  de  escolher  quais  recursos  e  o 

mais eficiente utilizar para atacar um problema. 

 
 
 
 
 
 
 
 
 
95 

6  REFERÊNCIAS 

BORBA, M. de C.; PENTEADO, M. G. Informática e Educação Matemática. 5. 

ed. Belo Horizonte: Autêntica Editora, 2016. 

BOYCE,  W.  E.;  DIPRIMA,  R.  C.  Equações  Diferenciais  Elementares  e 

Problemas de Valores de Contorno, 9. ed. Rio de Janeiro: LTC, 2010. 

CHAPRA, S. C.; CANALE, R. P. Métodos Numéricos para Engenharia, 7. ed. 

McGraw Hill, 2016. 

COSTA,  F.  de  A.;  IGLIORI,  S.  B.  C.  Estudo  da  periodicidade  a  partir  da 

modelagem matemática à luz da Teoria da Aprendizagem Significativa. Revista 

de Produção Discente em Educação Matemática, v.7, n.1, 2018. 

DELGADO, J.; FRENSEL, K.; CRISSAFF, L. Geometria Analítica. 2. ed. Rio de 

Janeiro: SBM, 2017. 

KLUEVER, C. A. Sistemas Dinâmicos: Modelagem, Simulação e Controle. 1. 

ed. Rio de Janeiro: LTC, 2018. 

LIMA, E. L. Números e Funções Reais. 1. ed. Rio de Janeiro: SBM, 2014. 

MARCONDES, A. B. M. Matemática com Python um Guia Prático. 1. ed. São 

Paulo: Novatec Editora Ltda, 2018. 

MUNSON, B.R.; YOUNG, D.F.; OKIISHI, T.H. Fundamentos da Mecânica dos 

Fluidos. 4. ed. São Paulo: Blucher, 2004. 

HEFEZ, A; VILLELA, M. L. T. Polinômios e Equações Algébricas. 2. ed. Rio 

de Janeiro: SBM, 2012. 

Introdução ao OPenModelica: Disponível em < https://www.openmodelica.org 

> Acesso em: 5 de maio, de 2021. 

 
 
 
 
 
 
 
 
 
 
 
 
96 

OGATA, K. Engenharia de Controle Moderno. 5. ed. Rio de Janeiro: Prentice-

Hall, 2010. 

STEWART, J. Cálculo volume I. 7. ed. São Paulo: Cengage Learning, 2013. 

SWOKOWSKI,  E.  W.  Cálculo  com  Geometria  Analítica,  Vol.  I.  2.  ed.  São 

Paulo: Makron Books, 1995. 

 
 
 
 
 
 
 
 
 
 
 
