UNIVERSIDADE ESTADUAL DE FEIRA DE SANTANA
Departamento de Ciˆencias Exatas

PROFMAT - Mestrado Profissional em Matem´atica em Rede Nacional

Dissertac¸˜ao de Mestrado

ALGUNS ALGORITMOS EM JAVA PARA MATEM ´ATICA

B ´ASICA

Newton Silva Santos

Orientador: Prof. Dr. Haroldo Gon¸calves Benatti

Feira de Santana

Dezembro de 2020

UNIVERSIDADE ESTADUAL DE FEIRA DE SANTANA

Departamento de Ciˆencias Exatas

PROFMAT - Mestrado Profissional em Matem´atica em Rede Nacional

ALGUNS ALGORITMOS EM JAVA PARA

MATEM ´ATICA B ´ASICA

Newton Silva Santos

Disserta¸c˜ao apresentada ao Programa de Mestrado

Proﬁssional em Matem´atica em Rede Nacional

-

PROFMAT do Departamento de Ciˆencias Exatas,

UEFS, como requisito parcial para a obten¸c˜ao do

t´ıtulo de Mestre.

Orientador: Prof. Dr. Haroldo Gon¸calves Benatti

Feira de Santana

18 de Dezembro de 2020

                                        Ficha Catalográfica – Biblioteca Central Julieta Carteado           Tatiane Souza Santos - Bibliotecária CRB5/1634  S233a Santos, Newton Silva         Alguns algoritimos em Java para matemática básica / NewtonSilva Santos. –, 2020. 90f.: il.  Orientador: Haroldo Gonçalves Benatti Dissetação (mestrado) – Universidade Estadual de Feira de Santana, Programa de Pós-Graduação Mestrado Profissional em Matemática em Rede Nacional, 2020.           1. Algoritimo – Educação matemática 2. Algoritimo - Computação I. Benatti, Haroldo Gonçalves, orient. II. Universidade Estadual de Feira de Santana. III. Título.                            CDU: 51:681.3 Agradecimentos

Tenho muito a agradecer, primeiro a essa for¸ca c´osmica que nos une como seres humanos,

alguns nomeiam tal for¸ca como Buda, Maom´e, Deus, etc. Eu apenas acredito nesta for¸ca.

Agrade¸co a UEFS pois por meio desta institui¸c˜ao obterei o t´ıtulo de mestre e foi mediante a

parceria UEFS/PROFMAT que tornou-se poss´ıvel a minha realiza¸c˜ao neste mestrado, j´a que

moro em Araci-ba cidade que ﬁca a 200 km de Salvador, onde, na ´epoca, era o PROFMAT

mais pr´oximo de mim. Com a ades˜ao da UEFS ao programa, ﬁcou mais vi´avel fazer o

mestrado.

`A CAPES - Coordena¸c˜ao de Aperfei¸coamento de Pessoal de N´ıvel Superior, que me

concedeu uma bolsa para aux´ılio ﬁnanceiro que foi muito importante para custeios como

deslocamento, livros, etc. O presente trabalho foi realizado com apoio da Coordena¸c˜ao de

Aperfei¸coamento de Pessoal de N´ıvel Superior - Brasil (CAPES) - C´odigo de Financiamento

001

Ao prefeito Antˆonio Carvalho da Silva Neto e a secretaria de educa¸c˜ao Manuela Texeira

Silva Nery de Almeida, que me ajudaram facilitando meus estudos na UEFS em Feira de

Santana.

Aos meus professores que contribu´ıram para o enriquecimento de meus conhecimentos

matem´aticos uma vez que minha gradua¸c˜ao ´e em Analise de sistemas , na ´area de in-

form´atica, fato que trouxe muita diﬁculdade para acompanhar o curso. Em especial ao

professor Dr. Haroldo Gon¸calves Benatti pelo apoio, dedica¸c˜ao, disponibilidade, corre¸c˜oes,

cobran¸cas, paciˆencia e incentivo na elabora¸c˜ao deste trabalho.

i

A todos os meus familiares, meus irm˜aos, amigos, a meu pai, minha m˜ae, minha av´o

materna (Lindinha), a meu avˆo paterno (Fernando) e ´e claro, a eles, “as trˆes leis de Newton”

que s˜ao Ana Livia Santos Pimentel, Newton Silva Santos Junior e Anna Edith Andrade Pinho

Santos, meus queridos ﬁlhos, que s˜ao fundamentais para mim.

ii

Resumo

Observamos que os Algoritmos s˜ao muito usados na matem´atica da educa¸c˜ao b´asica, mas

alunos e professores n˜ao se d˜ao conta de sua importˆancia, pois, nossa sociedade est´a a cada dia

mais informatizada e toda a tecnologia que nos rodeia precisa dos algoritmos para funcionar.

O objetivo deste trabalho ´e demonstrar a importˆancia dos algoritmos para a matem´atica e dar

um contexto para os mesmos na sala de aula. Para objetivar esta inten¸c˜ao pretende-se mostrar

o que ´e Algoritmo e suas estruturas, visualizar alguns algoritmos matem´aticos escritos em

linguagem Java e demostrar um exemplo de Sequˆencia Did´atica. Assim os leitores entender˜ao

n˜ao s´o a relevˆancia dos algoritmos mas a rela¸c˜ao que ele faz entre a computa¸c˜ao e a educa¸c˜ao

Matem´atica.

Palavras-chave: Algoritmos, Matem´atica, Computa¸c˜ao.

iii

Abstract

We observed that Algorithms are widely used in the mathematics of basic education,

but students and teachers do not realize their importance, because our society is more and

more computerized every day and all the technology that surrounds us needs the algorithms

to work. The objective of this work is to demonstrate the importance of algorithms for

mathematics and to provide a context for them in the classroom. To objectify this intention

it is intended to show what Algorithm and its structures are, to visualize some mathematical

algorithms written in Java language and to demonstrate an example of Didactic Sequence.

This way, readers will understand not only the relevance of the algorithms but the relationship

it makes between computing and mathematics education.

Keywords: Algoritmo, Mathematics, computing.

iv

Sum´ario

Agradecimentos

Resumo

Abstract

Introdu¸c˜ao

1 O Come¸co

1.1 O que ´e algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.2 A importˆancia dos algoritmos . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.3 Caracter´ısticas de um algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . .

1.4 Representa¸c˜oes de algoritmos . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.5 Composi¸c˜ao dos algoritmos

. . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.5.1 Operadores e Express˜oes . . . . . . . . . . . . . . . . . . . . . . . . . .

1.5.2 Vari´aveis e constantes . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.5.3 Condicionais

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.5.4 Repeti¸c˜ao . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2 Alguns algoritmos matem´aticos

2.1 Divis˜ao Euclidiana . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.1.1 Fluxograma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

v

i

iii

iv

1

2

3

4

4

5

8

8

10

12

15

18

18

21

2.1.2 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.1.3 C´odigo em Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.1.4 Resultados

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.2 Algoritmo de Euclides para determinar MDC(M´aximo Divisor Comum)

. . .

2.2.1 Como o algoritmo funciona . . . . . . . . . . . . . . . . . . . . . . . .

2.2.2 Fluxograma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.2.3 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.2.4 C´odigo em Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.2.5 Resultados

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.3 F´ormula resolutiva da equa¸c˜ao de segundo grau (Teorema de Bhaskara)

. . .

2.3.1 Fluxograma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.3.2 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.3.3 C´odigo em Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.3.4 Resultados

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.4 Briot-Ruﬃni

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.4.1 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.4.2 C´odigo em Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.4.3 Resultados

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.5 Sistema de numera¸c˜ao e mudan¸ca de base 10 para base 2 . . . . . . . . . . .

2.5.1 Algoritmo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.5.2 C´odigo em Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2.5.3 Resultados

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3 Aplicando algoritmos na sala de aula

3.1 A importˆancia do aprendizado dos algoritmos no ensino B´asico . . . . . . . .

3.2 Porque Java . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3.3 Um exemplo de como aplicar em sala . . . . . . . . . . . . . . . . . . . . . . .

3.3.1

Sequˆencia Did´atica . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

vi

22

22

24

25

26

28

28

29

30

31

34

35

36

37

39

43

44

46

47

52

53

54

56

57

58

60

60

4 Conclus˜ao

Referˆencias Bibliogr´aﬁcas

Apˆendice

66

68

73

vii

Introdu¸c˜ao

Este trabalho traz como tema os algoritmos. Uma tem´atica que ´e utilizada constante-

mente no cotidiano, seja na escola ou fora dela, algoritmos aparecem em todos os n´ıveis de

conhecimentos matem´aticos e em outros campos de conhecimento, como na medicina, que

por meio de alguns algoritmos os m´edicos fazem diagn´osticos das doen¸cas de seus pacientes.

Os algoritmos est˜ao praticamente em tudo que nos rodeia atualmente, entretanto, nem todos

percebem este fato.

No cap´ıtulo 1, basicamente ´e explorado o que ´e algoritmo, trazendo para isso, uma abor-

dagem hist´orica e como as ciˆencias, como a matem´atica e a inform´atica, dependem dele,

al´em de demonstrar a importˆancia, caracter´ısticas, representa¸c˜oes e componentes que um

algoritmo pode ter.

No cap´ıtulo 2, apresentam-se alguns algoritmos matem´aticos da educa¸c˜ao b´asica(focando

no ensino fundamental e ensino m´edio), seu funcionamento, sua estrutura, o c´odigo Java e

resultados.

No Cap´ıtulo 3, ´e discutida a importˆancia do aprendizado dos algoritmos no ensino B´asico,

fala porque foi escolhida a linguajem Java e apresenta uma ideia de como introduzir algoritmos

na sala de aula.

1

Cap´ıtulo 1

O Come¸co

A matem´atica ´e uma ciˆencia que trabalha muito a percep¸c˜ao e a l´ogica dos objetos

que nos rodeiam tentando entender e explicar o mundo atrav´es de c´alculos e das rela¸c˜oes

que existem entre objetos distintos. Na contemporaneidade, a matem´atica est´a bastante

desenvolvida e tem f´ormulas e algoritmos para v´arias situa¸c˜oes do cotidiano. Mas nem sempre

foi assim, a matem´atica foi se desenvolvendo ao decorrer que o tempo passava, foi mudando

e se aprimorando `a medida que se unia o conhecimento de v´arias regi˜oes. Com isso, veio a

necessidade de aplic´a-la a rotina di´aria e isso se tornou mais vi´avel por conta dos algoritmos.

Na China em 1983, uma escava¸c˜ao levou a uma tumba que tinha uma cole¸c˜ao de 190 tiras

de bambu contendo um texto matem´atico que foi datado do ano 186 e cujo o nome ´e “Suan

shu shu - Writings on Reckonig”. Para dar um exemplo na luta “Jiu-jitsu”a ´ultima parte da

palavra ´e uma varia¸c˜ao do termo chinˆes “shu”onde um de seus signiﬁcados ´e m´etodo, proce-

dimento. Jiu-jitsu signiﬁca regras procedimentais da ﬂexibilidade, dos movimentos suaves.

A palavra m´etodo era usada pelos chineses tamb´em na matem´atica, al´em de outras ´areas

e artes marciais. O livro chinˆes tem v´arias se¸c˜oes, e muitas destas se¸c˜oes, se referem a

resolu¸c˜ao de c´alculos, sendo um guia destinado aos administradores chineses daquela ´epoca

para atender necessidades pr´aticas. Outras se¸c˜oes revelam o interesse por conhecer como se

estrutura a resolu¸c˜ao de problemas[1].

2

Na cultura ocidental, tem-se registros que o termo algoritmo surgiu devido ao matem´atico

persa Al-Khwarizmi, cujo livro de sua autoria, que em latim se chamava Algorismi, da´ı vem

a origem do nome algoritmo que foi de grande importˆancia para a pr´atica da aritm´etica.

Recentemente a palavra algoritmo tem um signiﬁcado relevante e fundamental em uma ´area

relativamente nova de conhecimento que ´e a Inform´atica.

1.1 O que ´e algoritmo

Algoritmo ´e uma sequˆencia de instru¸c˜oes ﬁnitas, que n˜ao podem ser amb´ıguas, com

a ﬁnalidade de resolver algum problema. Cada instru¸c˜ao deve ser executada de maneira

manual, mecˆanica ou eletrˆonica obedecendo um intervalo de tempo e uma quantidade de

esfor¸co ou processamento ﬁnito.

Segundo Berlinsk [28],

“O computador digital ´e uma m´aquina e, como qualquer objeto, um prisioneiro

ao ﬁm de ´aridas leis da termodinˆamica. Quando o tempo acaba, o combust´ıvel

acaba tamb´em. Da mesma forma que o programador de computador martelando

em um teclado com a ponta de dois dedos tensos. Como todos n´os. Mas um

algoritmo ´e outra coisa. Ocupando o espa¸co entre a agulhada do desejo e a

resultante bolha de satisfa¸c˜ao, ´e um instrumento abstrato de coordena¸c˜ao, que

fornece os procedimentos para v´arias ﬁnalidades. Feito de sinais e s´ımbolos, os

algoritmos, como os pensamentos, vivem em um mundo al´em do tempo. Um

algoritmo ´e um procedimento eﬁcaz, um modo de fazer uma determinada coisa

em um n´umero ﬁnito de passos discretos. No mundo de onde surge um matem´atico

e para o qual o matem´atico, como n´os, deve voltar, um algoritmo, por assim dizer,

´e um conjunto de regras, uma receita, uma prescri¸c˜ao para a a¸c˜ao, um guia, uma

diretiva concatenada e controlada, uma intimida¸c˜ao, um c´odigo, um esfor¸co feito

para jogar um complexo xale verbal sobre o caos inarticulado da vida.”

3

Uma compara¸c˜ao bastante utilizada para ilustrar um algoritmo ´e uma receita de bolo, onde

se tem os passos pr´e-determinados para que o bolo ﬁque pronto, ent˜ao algoritmo nada mais

´e que passos a serem realizados para completar uma tarefa.

1.2 A importˆancia dos algoritmos

Como j´a citado acima, algoritmo ´e uma ferramenta abstrata muito importante que trans-

passou a matem´atica e atualmente ´e mais conhecida na ´area da computa¸c˜ao/inform´atica. Na

escola vˆe-se a todo momento algoritmos para resolu¸c˜ao de problemas e, no cotidiano se est´a

rodeado deles em computadores, celulares, tablets, internet, dentre muitos outros. Ent˜ao,

est´a na hora de come¸carmos a dar um prest´ıgio maior a essa ferramenta abstrata, para que a

sociedade venha a entender a sua importˆancia e a estudar os mesmos, com a ﬁnalidade de se

ter um conhecimento inicial sobre algoritmo. A cada dia que passa, o mundo se torna mais

autˆonomo, devido a novas tecnologias, e essas novas tecnologias s˜ao dependentes dos algorit-

mos. Existe outro grande benef´ıcio em estudar os algoritmos, que ´e desenvolver a l´ogica, e

assim tornar a sociedade mais apta a compreender e interpretar as milhares de informa¸c˜oes

na qual se est´a exposto diariamente.

Pensar desta forma diferenciada ´e muito importante para muitas ´areas do conhecimento,

principalmente nas ´areas de exatas e tecnol´ogicas, pois um computador com um algoritmo

bem elaborado vai executar uma tarefa com mais rapidez e eﬁciˆencia usando o mesmo volume

de dados. Entender como funcionam os algoritmos a as tecnologias do nosso cotidiano ´e muito

importante[3].

1.3 Caracter´ısticas de um algoritmo

Para Knuth [4], um algoritmo tem que ter algumas caracter´ısticas indispens´aveis para que

consiga ser efetivo e possa resolver o problema a que se prop˜oe, que s˜ao:

4

Finitude:

Um algoritmo deve sempre terminar depois de um n´umero ﬁnito de instru¸c˜oes.

Deﬁni¸c˜ao:

Cada instru¸c˜ao do algoritmo deve ser deﬁnida com precis˜ao, ou seja, as instru¸c˜oes que

ser˜ao executadas dever˜ao ser especiﬁcadas rigorosamente e n˜ao podem ter espa¸co para inter-

preta¸c˜oes diferentes do que se quer.

Entrada:

S˜ao os dados que ser˜ao fornecidos ao algoritmo. Essas entradas s˜ao tomadas a partir

de conjuntos de objetos especiﬁcados antes do algoritmo iniciar. ´E importante ressaltar que

existe a possibilidade da entrada ser um dado nulo.

Sa´ıda:

Um algoritmo deve ter uma ou mais respostas (sa´ıdas), onde o conjunto de dados entregues

ao algoritmo ser´a por ele tratado, operado a partir do conjunto de dados da entrada.

1.4 Representa¸c˜oes de algoritmos

Existem algumas maneiras de representar um algoritmo. Dentre as existentes as mais

comuns e usuais s˜ao:

Linguagem Natural

Os algoritmos que usam uma narrativa descritiva, ou seja, na linguagem formal do in-

div´ıduo que os ﬁzeram. Assim eram feitos os algoritmos antigamente, sem s´ımbolos utilizando

apenas palavras, o que diﬁcultava a precis˜ao do racioc´ınio descrito.

Fluxograma (ou Diagrama de Fluxo)

Nada mais ´e que uma representa¸c˜ao gr´aﬁca de um algoritmo onde cada ﬁgura geom´etrica

foi padronizada para representar uma a¸c˜ao ou decis˜ao para resolver o problema a que o

algoritmo se prop˜oe. Ser´a utilizado o padr˜ao ANSI (American National Standards Institute)

5

Tabela 1.1: Tabela com alguns s´ımbolos.

S´ımbolo

Nome

Quando utilizar?

Inicio ou Fim Todas as vezes que iniciar ou terminar o Fluxograma de

um determinado processo

Decis˜ao

Todo processo existe um ponto de decis˜ao que depen-

dendo da situa¸c˜ao ou decis˜ao tomada poder˜ao sinalizar

dois ou mais caminhos. Um exemplo pr´atico poderia

ser ap´os a veriﬁca¸c˜ao de um produto antes de sua li-

bera¸c˜ao.Nesta situa¸c˜ao poderiamos ter um s´ımbolo de

decis˜ao com o questionamento: “O produto est´a con-

forme?”. Caso positivo, o produto poderia ser entregue

ao cliente, caso negativo, o produto n˜ao pode ser libe-

rado.

Processo

Serve para indicar as etapas no ﬂuxo continuo do pro-

cesso. “Embalar o produto”, “Atendimento a cliente”,

este s˜ao apenas alguns exemplos de atividades que po-

dem ser inseridos neste s´ımbolo. Este s´ımbolo nomeia

quais s˜ao as etapas fundamentais de cada processo.

Opera¸c˜ao ma-

Indicado para representar tarefas manuais existentes no

nual

ﬂuxo de um processo.

ﬂuxo de linha Utilizado como conector entre os s´ımbolos de um pro-

cesso. Serve para indicar a dire¸c˜ao em que os processos

ocorrem.

Dispon´ıvel em https://certiﬁcacaoiso.com.br/o-que-e-ﬂuxograma-de-processos/

6

Pseudo linguagem ou pseudo c´odigo

Emprega uma linguagem intermedi´aria entre uma linguagem natural qualquer, como o

portuguˆes, e uma linguagem de programa¸c˜ao como o Java, uma pseudo linguagem muito

utilizada para aprendizado no Brasil ´e o Portugol. A pseudo linguagem ´e mais utilizada para

fazer algoritmos que tem como objetivo o uso na inform´atica, para que depois seja transcrita

nas diversas linguagens de programa¸c˜ao. Ent˜ao, os algoritmos criados em pseudo linguagem

devem ser independentes das linguagens de programa¸c˜ao, sendo assim um pouco menos res-

tritivas que as linguagens de programa¸c˜ao pois cada linguagem tem suas peculiaridades e

formalismo.

Por ser o meio termo entre a codiﬁca¸c˜ao e a linguagem escrita ´e de f´acil interpreta¸c˜ao e de

codiﬁca¸c˜ao, como a pr´opria ambiguidade de sua deﬁni¸c˜ao sugere, ´e possivel chamar de pseudo

linguagem ou pseudo c´odigo, ´e um interm´edio entre a linguagem padr˜ao e a linguagem de

programa¸c˜ao. N˜ao existe nenhuma padroniza¸c˜ao, mas existem uma s´erie de recomenda¸c˜oes

e boas pr´aticas para escrever um algoritmo em pseudo linguagem, dentre elas destacam-se:

• Use um comando por linha;

• Imagine que o algoritmo ser´a lido por pessoas que n˜ao s˜ao da ´area da inform´atica ou

de exatas;

• Use frases breves;

• Seja objetivo;

• Use palavras claras para evitar duplo sentido;

• O algoritmo da pseudo linguagem precisa funcionar;

C´odigo

´E o algoritmo escrito em alguma linguagem j´a existente como Java, Cobol, C e outras,

seguindo as peculiaridades e formalismo da linguagem em que o algoritmo ´e escrito. ´E bom

7

lembrar que o algoritmo ´e compilado e transformado depois em “linguaguem de m´aquina”

do respectivo computador, celular, tablet, e muito mais.

1.5 Composi¸c˜ao dos algoritmos

Os algoritmos podem ser extremamente simples mas a grande maioria dos algoritmos s˜ao

mais complexos e usam alguns componentes e instrumentos que ser˜ao especiﬁcados abaixo.

Vale lembrar que os algoritmos n˜ao s˜ao estruturas ﬁxas ou engessadas, existem algoritmos que

ter˜ao todos os componentes, outros algoritmos ter˜ao alguns ou apenas um destes componentes

e os mais simples nenhum dos instrumentos citados, isso vai depender do que ser´a feito e de

como o algoritmo ´e escrito pois duas pessoas podem escrever algoritmos para a mesma fun¸c˜ao

ou ﬁnalidade com estruturas bem diferentes. Veja alguns dos componentes ou instrumentos

a seguir.

1.5.1 Operadores e Express˜oes

As express˜oes s˜ao na verdade instru¸c˜oes constitu´ıdas por operadores onde o resul-

tado ´e dependente dos valores atribu´ıdos aos operadores. Os operadores, como o pr´oprio

nome j´a revela, s˜ao estruturas que fazem opera¸c˜oes e essas opera¸c˜oes podem ser aritm´eticos,

l´ogicos,relacionais e de atribui¸c˜ao.

Operadores aritm´eticos s˜ao comumente usados em express˜oes que fazem c´alculos, os ope-

radores l´ogicos basicamente dar˜ao resultados como “verdadeiro” e “falso” nas express˜oes em

que aparecem, os operadores relacionais fazem uma compara¸c˜ao entre os termos utilizados em

uma rela¸c˜ao, e o operador de atribui¸c˜ao, cujo simbologia utilizada ser´a “:=”, deﬁni um dado

inicial ou sobrescrever um dado em uma vari´avel. A tabela 1.2 exibe os principais operadores

indicando os tipos e s´ımbolos:

8

Tabela 1.2: Principais Operadores

Opera¸c˜ao

Adi¸c˜ao

Subtra¸c˜ao

Multiplica¸c˜ao

Divis˜ao

Potˆencia

conjun¸c˜ao

Disjun¸c˜ao

Nega¸c˜ao

Maior

Maior ou igual

Menor

Menor ou igual

Igual

Diferente

Prioridade

Tipo

Aritm´etico

Aritm´etico

Aritm´etico

Aritm´etico

Aritm´etico

l´ogico

l´ogico

L´ogico

Relacional

Relacional

Relacional

Relacional

Relacional

Relacional

Relacional

S´ımbolo

+

-

*

/

ˆ

AND (E)

OR (OU)

NOT(N ˜AO)

>

>=

<

<=

=

<>

()

Assim como nas express˜oes matem´aticas os algoritmos tem uma ordem de prioridade de

seus operadores que vai das mais altas prioridades at´e a mais baixa, sendo que as de maior

prioridade s˜ao analisadas e processadas primeiro. Veja a ordem de prioridade dos operadores:

1. Parˆenteses: ( )

2. Potˆencia: ˆ

3. Multiplica¸c˜ao e divis˜ao: * e /

4. Adi¸c˜ao e subtra¸c˜ao: + e -

9

5. NOT (N ˜AO)

6. AND (E)

7. OR (OU)

Observe o exemplo para visualizar as prioridades:

(−1 + (22 − 5 ∗ 6)) ÷ (−5 + 2) + 1 = (−1 + (4 − 30)) ÷ (−3) + 1

= (−1 + (−26)) ÷ (−3) + 1

= (−1 − 26) ÷ (−3) + 1

= −27 ÷ −3 + 1

= 9 + 1

= 10

(1.1)

1.5.2 Vari´aveis e constantes

Os algoritmos s˜ao estruturas que basicamente manipulam dados para chegar a um resultado

ou solu¸c˜ao e existem duas formas de trabalhar com dados em um algoritmo que s˜ao as

constantes e as vari´aveis.

Uma vari´avel faz referˆencia a um dado que pode ser modiﬁcado `a medida que o algoritmo

´e executado. Em computadores e componentes eletrˆonicos mais soﬁsticados a vari´avel ´e um

espa¸co na mem´oria alocado para armazenar um tipo de dado e para isso as vari´aveis precisam

ser nomeadas para que possa utiliz´a-la no decorrer do algoritmo. ´E preciso especiﬁcar o tipo

de dados que esta vari´avel pode receber e operar pois n˜ao ´e poss´ıvel, por exemplo, operar

uma vari´avel do tipo “ texto ” com uma do tipo “ num´erica ”.

Uma constante, como o pr´oprio nome sugere, ´e um valor que n˜ao vai mudar em toda

a execu¸c˜ao do algoritmo, um valor ﬁxo que sempre ser´a o mesmo a qualquer momento do

algoritmo. Em uma constante, assim como as vari´aveis, ´e preciso dizer a qual tipo de dados

10

ela pertence. Abaixo, a tabela 1.3 de alguns tipos de dados que vari´aveis e constantes podem

assumir, na linguagem de programa¸c˜ao Java, Observe:

Tabela 1.3: Tipos de vari´aveis e constantes.

Tipo

Descri¸c˜ao

Int

N´umeros inteiros de 32 bits. Pode assumir valores entre -2.147.483.648 at´e

2.147.483.647.

Float

Representa n´umeros em nota¸c˜ao de ponto ﬂutuante, normalizada em pre-

cis˜ao simples de 32 bits. O menor valor positivo ´e 1.40239846e-46 e o maior

´e 3.40282347e+38.

Boolean

Pode assumir dois valores. true e false.

String

Armazena caractere em nota¸c˜ao de 16 bits. Serve para a armazenagem de

dados alfanum´ericos. Tamb´em pode ser como dado inteiro com valores na

faixa 0 e 65535.

Byte

Aloca n´umero de 8 bits. Pode assumir valores entre −27 = −128 e 27 −1 =

127.

Short

Armazena n´umeros inteiros de 16 bits em nota¸c˜ao de complemento de dois.

Os valores poss´ıveis cobrem a faixa de −2−15 = −32.768 a 215 −1 = 32.767.

Long

Aloca inteiros de 64 bits. Pode assumir valores entre −263 e 263 − 1.

Double

Representa n´umeros em nota¸c˜ao de Ponto ﬂutuante normalizada com a

precis˜ao dupla de 64 bits em conformidade com a norma IEEE 754-1985.

O menor valor positivo represent´avel ´e 4.94065645841246544e-324 e o maior

´e 1.7976931348623157e+308.

Dispon´ıvel em http://trtrfdfd.blogspot.com/2012/11/tipos-de-dados-Java.html

O bit ´e a menor unidade de informa¸c˜ao que pode ser armazenada ou transmitida, assumi

somente os valores 0 ou 1. Olhando na tabela, observe que uma vari´avel do tipo byte, que

tem 8 bits, pode assumir 28 = 256 valores, dos quais s˜ao 128 negativos, 127 positivos e o zero.

11

Em um programa as vari´aveis e constantes ao receberem um tipo de dado s˜ao ent˜ao

declaradas, essa a¸c˜ao de especiﬁcar o tipo de dados das vari´aveis e constantes ´e chamada de

declara¸c˜ao. Em alguns casos especiﬁca-se um valor inicial ao declarar a vari´avel.

1.5.3 Condicionais

A estrutura condicional nos possibilita a sele¸c˜ao de uma a¸c˜ao ou um grupo destas a ser

executada atrav´es de condi¸c˜oes, representadas por express˜oes l´ogicas.

Comando: SE

O comando SE ´e usado da seguinte forma, se uma condi¸c˜ao ´e verdadeira uma sequˆencia de

comandos ´e executada, e se for falsa, outra sequˆencia de comandos ´e executada. O comando

SE pode ser simples ou composto como poderemos ver na s´ıntaxe abaixo.

A sintaxe da estrutura condicional simples ´e:

Se (condi¸c˜ao) ent˜ao

(sequˆencia de comandos)

FimSe

A sintaxe da estrutura condicional composta ´e:

Se (condi¸c˜ao) ent˜ao

(sequˆencia de comandos A) sen˜ao

(sequˆencia de comandos B) sen˜ao

(sequˆencia de comandos C) sen˜ao

Sen˜ao...

12

Algoritmo 1: Exemplo: O algoritmo compara dois n´umeros e identiﬁca o maior deles.

Entrada: n1,n2

Sa´ıda: resultado da compara¸c˜ao

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

ler (n1);

ler (n2);

se (n1 > n2) ent˜ao

Escrever (“ O primeiro n´umero ´e o maior ”);

sen˜ao

se (n1 < n2) ent˜ao

Escrever (“ O primeiro n´umero ´e o menor ”);

sen˜ao

Escrever (“ Os n´umeros s˜ao iguais ”);

ﬁm

ﬁm

13 ﬁm

Comando CASO

O comando CASO ´e utilizado quando a condi¸c˜ao avaliada tem valores diferentes de verda-

deiro ou falso. Os comandos s˜ao executados de acordo aos resultados da express˜ao condicional.

A sintaxe do comando CASO ´e:

CASO (Express˜ao)

(Op¸c˜ao 1): (sequˆencia de comandos 1)

(Op¸c˜ao 2): (sequˆencia de comandos 2)

...

(Op¸c˜ao n): (sequˆencia de comandos N)

13

Ele funciona assim, caso o resultado da express˜ao seja igual a op¸c˜ao 1 execute a sequˆencia

de comandos 1, caso o resultado da express˜ao seja igual a op¸c˜ao 2 execute a sequˆencia 2 e

assim por diante.

Algoritmo 2: Exemplo: Calcular o dobro ou o triplo de um n´umero fornecido.

Entrada: op¸c˜ao, num

Sa´ıda: resultado

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

13

14

15

Escrever (“ Op¸c˜oes: ”);

Escrever (“ 1 para calcular o dobro do n´umero ”);

Escrever (“ 2 para calcular o triplo do n´umero ”);

Escrever (“ Escolha uma op¸c˜ao: ”);

Ler (Op¸c˜ao);

Escrever (“ Digite o n´umero: ”);

Ler (Num);

caso (Op¸c˜ao = 1) fa¸ca

Resultado := Num*2;

ﬁm

caso (Op¸c˜ao = 2) fa¸ca

Resultado := Num*3;

ﬁm

Escrever (Resultado);

16 ﬁm

14

1.5.4 Repeti¸c˜ao

Os comandos de repeti¸c˜ao d´a a possibilidade de repetir uma sequˆencia de comandos at´e que

uma condi¸c˜ao o interrompa.

Comando: ENQUANTO

´E um comando de repeti¸c˜ao que s´o ira parar quando a condi¸c˜ao estipulada for falsa.

Sintaxe:

ENQUANTO (condi¸c˜ao) FAC¸ A

(sequˆencia de comandos)

FimENQUANTO

Algoritmo 3: Exemplo: Algoritmo que mostra os n´umeros de 1 a 50.

Entrada: n˜ao tem entrada

Sa´ıda: n´umeros de 1 a 50

1 in´ıcio

2

3

4

5

6

Contador := 1;

enquanto (Contador <= 50) fa¸ca

Escrever(Contador);

Contador := Contador + 1;

ﬁm

7 ﬁm

Comando: PARA

O comando PARA executa o c´odigo um n´umero determinado de vezes.

Sintaxe:

PARA Contador := ValorInicial AT ´E ValorFinal FAC¸ A

(Sequˆencia de comandos)

FimPARA

15

Algoritmo 4: Exemplo: Algoritmo que mostra os n´umeros de 1 a 50.

Entrada: n˜ao tem entrada

Sa´ıda: n´umeros de 1 a 50

1 in´ıcio

2

3

4

5

Contador := 1;

para Contador := 1 at´e 50 fa¸ca

Escrever(Contador);

ﬁm

6 ﬁm

Comando: REPITA

O REPITA ´e uma estrutura de repeti¸c˜ao bem parecida com o ENQUANTO, ele tamb´em

precisa de uma condi¸c˜ao para ﬁnalizar. A estrutura do comando REPITA garante que pelo

menos uma passagem ser´a feita por ele j´a que, ao contr´ario do ENQUANTO, o teste de

condi¸c˜oes ´e feito no ﬁnal da estrutura.

Sintaxe:

REPITA

(Sequˆencia de comandos)

AT ´E (condi¸c˜ao)

16

Algoritmo 5: Exemplo: Algoritmo que mostra os n´umeros de 1 a 50.

Entrada: n˜ao tem entrada

Sa´ıda: n´umeros de 1 a 50

1 in´ıcio

2

3

4

5

6

Contador := 1;

repita

Escrever(Contador);

Contador := Contador + 1;

at´e (Contador >= 50);

7 ﬁm

Os t´opicos acima apresentados cobrem o que ser´a utilizado neste trabalho e ´e suﬁciente

para entender o que iremos utilizar no pr´oximo cap´ıtulo. Para aprofundar-se nas estruturas,

funcionamento, tipos, e outras caracter´ısticas de maneira mais imersiva, que n˜ao ´e o objetivo

aqui, consultar referˆencia bibliogr´aﬁca [13] [14] [15].

17

Cap´ıtulo 2

Alguns algoritmos matem´aticos

Depois de falar como se estrutura um algoritmo mostrando suas vari´aveis, representa¸c˜oes,

opera¸c˜oes, e outros, este Cap´ıtulo 2 apresenta o funcionamento de alguns algoritmos ma-

tem´aticos atrav´es de pseudolinguagem e/ou ﬂuxograma e os respectivos c´odigos em lingua-

gem de programa¸c˜ao Java. Assim, al´em de ver o algoritmo em passos, ir´a vˆe-lo funcionando

na pr´atica.

Caso haja interesse em se aprofundar no c´odigo Java aqui apresentado, existem v´arios

livros, cursos e sites na internet. Vale salientar que os algoritmos apresentados neste trabalho

usaram apenas operadores, vari´aveis, estruturas de repeti¸c˜ao e condicionais a ﬁm de tornar

o entendimento dos algoritmos mais f´acil e did´atico.

Muitos dos algoritmos matem´aticos existentes j´a est˜ao implementados na biblioteca de

objetos do Java e n˜ao seria interessante utiliz´a-los para o objetivo deste trabalho, que ´e o

entendimento dos c´odigos, a utiliza¸c˜ao desses objetos do Java diﬁcultaria o entendimento do

leitor.

2.1 Divis˜ao Euclidiana

A divis˜ao euclidiana que tamb´em ´e conhecida como divis˜ao inteira ou divis˜ao com resto, ´e

um dos temas essenciais dos assuntos de matem´atica visto nos primeiros anos de aprendizado,

18

os alunos s˜ao introduzidos a tais conceitos atrav´es da exempliﬁca¸c˜ao e apresenta¸c˜oes de

situa¸c˜oes - problemas como dividir uma pizza de 10 peda¸cos em 4 pratos, distribuir uma certa

quantidade x de objetos para uma quantidade y de pessoas, dentre muitas outras situa¸c˜oes.

´E uma opera¸c˜ao que os alunos apresentam muita diﬁculdade, e isso n˜ao ocorre apenas

no ensino fundamental mas tamb´em no ensino m´edio, pois chegam muitos alunos em salas

de aulas com essa diﬁculdade. Uma opera¸c˜ao b´asica, que mesmo assim, quase sempre, n˜ao ´e

completamente dominada pelos alunos [18][19]. Desconﬁo que a falta da pr´atica da tabuada,

como era na minha ´epoca, seja um entre v´arios outros motivos, para tal realidade, que acaba

acarretando na falta do dom´ınio da tabela de multiplica¸c˜ao de cor, al´em as regras b´asicas de

c´alculo como adi¸c˜ao, subtra¸c˜ao, decomposi¸c˜ao de n´umeros inteiros e diferencia¸c˜ao de n´umeros

pares e n´umeros ´ımpares, e muito mais, mas essa discuss˜ao n˜ao cabe aqui no escopo deste

trabalho.

A divis˜ao euclidiana ´e aprendida como uma das quatro opera¸c˜oes b´asicas da matem´atica

na educa¸c˜ao b´asica no Brasil. E o conceito por tr´as da divis˜ao ´e na verdade subtra¸c˜oes

consecutivas at´e que se sobra um n´umero menor que o divisor. Veja a ﬁgura 2.1.

Figura 2.1: M´etodo da chave, fonte:https://brainly.com.br/tarefa/4467950

Dividendo (D): N´umero que ser´a dividido.

Divisor (d): N´umero que divide.

Quociente (q): Resultado da divis˜ao.

Resto (r): Algumas vezes, assim que ﬁnalizada a divis˜ao, sobra uma quantidade que n˜ao

pode ser dividida. Esta quantidade recebe o nome de resto.

19

A partir dos elementos acima, a divis˜ao ser´a deﬁnida da seguinte maneira:

D = d.q + r, onde D,d e q s˜ao naturais e r ´e um natural com 0 ≤ r < d. Onde para

dividir D por d temos que achar um n´umero q que multiplicado por d chegue em D ou o mais

pr´oximo poss´ıvel de D, sendo que o valor que sobrar´a ser´a o resto r que n˜ao pode ser maior

que d. Usando esse racioc´ınio criou-se o m´etodo da chave, o m´etodo mais usado na Educa¸c˜ao

b´asica para ensinar o algoritmo da divis˜ao.

Teorema [16]

Se a, b ∈ N, com b > 0, ent˜ao existem dois ´unicos naturais q e r tais que a = bq + r, com

0 ≤ r < b.

Demonstra¸c˜ao

Existˆencia:

Se a < b, ent˜ao existem q = 0 e r = a nas condi¸c˜oes exigidas. Assim pode-se assumir

que a ≥ b > 0. Considere que N n˜ao tem o elemento zero e considere tamb´em o conjunto

S ={a − by | y ∈ N} ∩ (N ∪ {0}). Como a − b ≥ 0, tem-se que a − b ∈ S, logo o conjunto S

´e n˜ao vazio. Como S ´e limitado inferiormente, pelo principio da boa ordena¸c˜ao[35], tem-se

que S possui um menor elemento, digamos que r = a − bq ≥ 0. Ser´a mostrado que r < b.

Suponha por absurdo que r ≥ b. Segue-se ent˜ao que r = s + b com s ∈ N ∪ {0}, logo

s = r − b = a − bq − b = a − (q + 1)b ∈ S. Note que s ´e igual a a − bq − b = r − b. Assim

s < r e s ∈ S. Isto ´e uma contradi¸c˜ao pois r ´e o menor elemento de S.

Unicidade:

Suponha a = bq + r = bq(cid:48) + r(cid:48), sendo 0 ≤ r e r(cid:48) < b. Sem perda de generalidade,

suponha r ≤ r(cid:48). Da´ı tem-se que 0 ≤ b(q − q(cid:48)) = r(cid:48) − r < b, o que s´o ´e poss´ıvel se q = q(cid:48) e

consequentemente r = r(cid:48), Caso r seja maior que r(cid:48) a prova ´e an´aloga. (cid:4)

Assim os n´umeros q e r s˜ao chamados, respectivamente, de quociente e resto da divis˜ao

de a por b. A partir da prova pode se gerar um algoritmo, por subtra¸c˜oes sucessivas, a − b,

a − 2b, a − 3b, ......, e em cada itera¸c˜ao consulta-se o resultado at´e que o resto seja menor que

o divisor.

20

2.1.1 Fluxograma

Na Figura 2.2 temos o ﬂuxograma do algoritmo utilizado.

Figura 2.2:

21

2.1.2 Algoritmo

Algoritmo 6: O Algoritmo abaixo ´e baseado no ﬂuxograma apresentado na Figura 2.2.

Entrada: A,B,quociente, resto

Sa´ıda: quociente, resto

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

Escrever (“ Escreva o Divisor ”);

Ler (A)

Escrever (“ Escreva o Dividendo ”);

Ler (B)

quociente := 0 ;

resto := 0 ;

enquanto (resto >= B) fa¸ca

resto := resto - B;

quociente := quociente + 1;

ﬁm

Escrever (“O quociente ´e ”+ quociente + “ e o resto ´e” + resto );

13 ﬁm

2.1.3 C´odigo em Java

1

2

3

4

5

6

7

8

9

import java . util . Scanner ;

import javax . swing . JOptionPane ;

public class Divisao {

public static void main ( String [] args ) {

// TODO Auto - generated method stub

long a ,b ,q , r ;

Scanner ler = new Scanner ( System . in ) ;

System . out . print ( " Escreva o dividendo : " ) ;

a = ler . nextLong () ;

22

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

System . out . print ( " Escreva o divisor : " ) ;

b = ler . nextLong () ;

q = 0;

r = a ;

System . out . println () ;

System . out . println ( " passos " ) ;

System . out . println () ;

while ( r >= b ) { // garante que o resto ´e menor que o divisor

r = r - b ;

q = q + 1;

System . out . print ( a ) ;

System . out . print ( " = " ) ;

System . out . print ( b ) ;

System . out . print ( " . " ) ;

System . out . print ( q ) ;

System . out . print ( " + " ) ;

System . out . println ( r ) ;

}

System . out . println () ;

System . out . print ( " O quociente da divis~ao de " ) ;

System . out . print ( a ) ;

System . out . print ( " por " ) ;

System . out . print ( b ) ;

System . out . print ( " ´e " ) ;

System . out . print ( q ) ;

System . out . print ( " e o resto ´e " ) ;

System . out . println ( r ) ;

}

}

23

2.1.4 Resultados

Figura 2.3: Resultado da divis˜ao usando 2344 como dividendo e 234 como divisor.

Figura 2.4: Resultado da divis˜ao usando 234 como dividendo e 49 como divisor.

24

Figura 2.5: Resultado da divis˜ao usando 563 como dividendo e 15 como divisor.

2.2 Algoritmo de Euclides para determinar MDC(M´aximo Di-

visor Comum)

O ensino do conceito do MDC (M´aximo Divisor Comum) e o m´etodo de encontr´a-lo acontece

no ensino fundamental, per´ıodo em que as crian¸cas est˜ao vivenciando algumas experiˆencias

do seu dia a dia que utilizam o racioc´ınio da divis˜ao de dois ou mais elementos em partes

iguais, ou seja, justamente o conceito de MDC.

O que acontece, ´e que, este conhecimento ´e passado em um contexto apenas Matem´atico

25

e os alunos n˜ao percebem que o MDC ´e um ferramenta muito importante para que resolvam

situa¸c˜oes de sua vida cotidiana.

Os professores devem instigar os alunos a perceberem a importˆancia deste algoritmo por

meio de situa¸c˜oes problemas contextualizando com acontecimentos de sua vida cotidiana.

A decomposi¸c˜ao de um n´umero natural em fatores primos ´e uma estrat´egia para se con-

seguir determinar o MDC de dois ou mais n´umeros naturais. Veja o exemplo:

Determine o MDC de 48,36 e 30

Fatoramos os n´umeros:

48 = 24.31

36 = 22.32

30 = 21.31.51

O MDC ser´a o resultado da multiplica¸c˜ao dos n´umeros que aparecem em todas as fa-

tora¸c˜oes sempre com o menor expoente, que no exemplo acima s˜ao os n´umeros 21 e 31.

Observe que no exemplo aparecem 24, 22 e 21, escolhendo o de menor expoente, o 21, o

mesmo ocorre para escolher o 31, como 21 = 2 e 31 = 3, ent˜ao o MDC de 48, 36 e 30 ser´a

2.3 = 6

Mas, quando os n´umeros forem muito grandes este m´etodo ﬁcar´a bastante complicado

pois a decomposi¸c˜ao de n´umeros muitos grandes pode ser bastante demorada e de pouca

eﬁciˆencia pr´atica.

No livro s´etimo dos Elementos de Euclides [5] h´a um m´etodo, apesar de terem evidˆencias

hist´oricas que este m´etodo existisse antes do livro, que ´e o Algoritmo de Euclides para a

obten¸c˜ao do MDC entre dois n´umeros naturais.

2.2.1 Como o algoritmo funciona

Obtendo o [mdc] entre dois n´umeros naturais X e Y onde X > Y .

1) Divida X por Y e obtenha o resto R1. Se R1 for zero, o mdc entre X e Y ´e Y.

26

2) Se R1 n˜ao for zero, divida Y por R1 e obtenha o resto R2. Se R2 for zero, o mdc entre

X e Y ´e R1.

3) R2 n˜ao for zero, divida R1 por R2 e obtenha o resto R3. Se R3 for zero, o mdc entre

X e Y ´e R2.

...

Se Rn n˜ao for zero, divida Rn-1 por Rn e obtenha o resto Rn+1. Se Rn+1 for zero, o mdc

entre X e Y ´e Rn

Observe abaixo a exempliﬁca¸c˜ao de como funciona o algoritmo.

Calcular mdc (84,76):

mdc(84, 76)

84 = 76.1 + 8

mdc(84, 76) = mdc(76, 8)

76 = 8.9 + 4

mdc(76, 8) = mdc(8, 4)

8 = 4.2 + 0

mdc(4, 0) = 4

mdc(84, 76) = 4

Para calcular o MDC de mais de dois n´umeros naturais ou segmentos, basta escolher 2

desses n´umeros, aplica-se o algoritmo, o resultado ser´a aplicado com o pr´oximo n´umero at´e

que se chegue na resposta ﬁnal que ser´a o MDC de todos os n´umeros. Veja a seguir:

Calcular MDC de (30,40,60,75)

MDC de (30,40) = 10

MDC de (10,60) = 10

MDC de (10,75) = 5

ent˜ao o MDC de (30,40,60,75) = 5

27

2.2.2 Fluxograma

Figura 2.6: Dispon´ıvel em https://slideplayer.com.br/slide/5591740/

2.2.3 Algoritmo

Algoritmo 7: O Algoritmo MDC

Entrada: A,B,r

Sa´ıda: m

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

Escrever (“vamos calcular o MDC de: ”);

Ler (A)

Ler (B)

enquanto ( B <> 0) fa¸ca

r:= A % B;

A:= B;

B:= r;

ﬁm

m: = A;

Escrever (“O MDC ser´a ” + m);

12 ﬁm

28

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

2.2.4 C´odigo em Java

Observe o c´odigo.

import java . util . Scanner ;

public class Mdc {

public Mdc () {

// TODO Auto - generated constructor stub

}

public static void main ( String [] args ) {

// TODO Auto - generated method stub

long a ,b , r ;

Scanner ler = new Scanner ( System . in ) ;

System . out . println ( " Digite os dois n´umeros para calcular o MDC " ) ;

a = ler . nextLong () ;

b = ler . nextLong () ;

System . out . print ( " MDC de ( " ) ;

System . out . print ( a ) ;

System . out . print ( " ," ) ;

System . out . print ( b ) ;

System . out . print ( " ) " ) ;

while ( b != 0) {

r = a % b ;

// retorna o resto da divis~ao de a por b

a = b ;

b = r ;

}

System . out . print ( " = " ) ;

System . out . print ( a ) ;

}

}

29

2.2.5 Resultados

Figura 2.7: MDC de 5562 e 42.

Figura 2.8: MDC de 456 e 45.

30

Figura 2.9: MDC de 349587340304985 e 2345.

2.3 F´ormula resolutiva da equa¸c˜ao de segundo grau (Teorema

de Bhaskara)

Problemas envolvendo a resolu¸c˜ao de equa¸c˜oes de 2o grau existem h´a muito tempo, existem

textos com as resolu¸c˜oes destas equa¸c˜oes muito antes da era crist˜a. H´a relatos que foram

achadas placas na mesopotˆamia e papiros eg´ıpcios que datam de aproximadamente 4 mil

anos[11].

“Babilˆonios e eg´ıpcios utilizavam-se de textos e s´ımbolos como ferramenta au-

xiliar na resolu¸c˜ao. Os gregos conseguiam concluir suas resolu¸c˜oes realizando

associa¸c˜oes com a geometria, pois eles possu´ıam uma forma geom´etrica para so-

lucionar problemas ligados a equa¸c˜oes do 2o grau.

Dentre os indianos, os matem´aticos Sridhara, Bramagupta e Bhaskara tamb´em

contribu´ıram para o desenvolvimento da Matem´atica, fornecendo importantes in-

forma¸c˜oes sobre as equa¸c˜oes do 2o grau. Sridhara foi o primeiro a estabelecer uma

31

f´ormula matem´atica para a resolu¸c˜ao das equa¸c˜oes biquadradas, pois Bramagupta

e Bh´askara trabalhavam utilizando textos.

Os ´arabes foram brilhantemente representados por al-Khowarizmi, que se base-

ando no trabalho dos gregos, criou metodologias para a resolu¸c˜ao de equa¸c˜oes do

2o grau. A representa¸c˜oes geom´etricas utilizadas por al-Khowarizmi s˜ao inﬂuen-

ciadas por Euclides.

Foi com o francˆes Vi`ete que o m´etodo resolutivo das equa¸c˜oes do 2o grau ga-

nharam como s´ımbolos, as letras. Vi`ete ´e o respons´avel pela moderniza¸c˜ao da

´algebra. Seus trabalhos foram desenvolvidos por outro francˆes, denominado Ren´e

Descartes.”[27]

Uma observa¸c˜ao interessante ´e que a grande maioria dos alunos conseguem identiﬁcar ins-

tantaneamente uma equa¸c˜ao do segundo grau, mas n˜ao conseguem resolvˆe-las. Acredito que

a causa seja o fato dele ser um pouco longo, e infelizmente n˜ao desperta interesse nos alunos.

´E um algoritmo bastante usado no cotidiano de v´arios proﬁssionais. Veja os Exemplos:

• Na engenharia ´e usada para estudar lan¸camentos e proj´eteis em trajet´oria parab´olicas;

• Em f´ısica, nos movimentos uniformemente variados, lan¸camentos, queda livre, entre

outros;

• Em administra¸c˜ao ou economia, pode ser usada para descobrir o lucro m´aximo de uma

empresa.

Demonstra¸c˜ao da f´ormula de resolu¸c˜ao da equa¸c˜ao do segundo grau:

A demonstra¸c˜ao desta f´ormula consiste basicamente em completar quadrados, veja:

f (x) = ax2 + bx + c, onde a ´e diferente de zero, logo ax2 + bx + c = 0, passo o termo

independente c para a esquerda ax2 + bx = −c, divido tudo por a

x2 +

bx
a

= −

c
a

32

(2.1)

Agora temos que achar o valor que somado a x2 +

bx
a

forme um quadrado perfeito da

forma (x + y)2 = x2 + 2xy + y2, ent˜ao o termo que deve somar a x2 +

seja um quadrado perfeito ´e:

logo

acrescento

2xy =

2y =

y =

bx
a
b
a
b
2a

(x +

b
2a

)2 = x2 +

bx
a

+

b2
4a2

+

x2 +

bx
a

b2
4a2 nos dois lados da equa¸c˜ao 2.1, temos
b2
4a2
b2
4a2
(−4ac + b2)
4a2
−4ac + b2
4a2

b2
4a2 = −
b
)2 = −
2a

x + b/2a = ±

c
a
c
a

b
2a

)2 =

(x +

(x +

(cid:114)

+

+

x + b/2a =±

x = -b/2a ±

√

√

b2 − 4ac
2a

b2 − 4ac
2a

−b ±

x =

√

b2 − 4ac
2a

(cid:4)

33

bx
a

para que a soma

(2.2)

(2.3)

(2.4)

E, ﬁnalmente, obteve-se os dois valores de x, um usando o sinal positivo e outro o sinal

negativo, vale observar tamb´em que foi encontrado b2 − 4ac de delta ((cid:52)), e ele ´e utilizado

para saber se as ra´ızes fazem ou n˜ao parte do conjunto dos n´umeros reais e se s˜ao ou n˜ao

iguais.

2.3.1 Fluxograma

Figura 2.10: Equa¸c˜ao do segundo grau

34

2.3.2 Algoritmo

Algoritmo 8: Equa¸c˜ao do Segundo Grau

Entrada: a,b,c,

Sa´ıda: D,x1,x2

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

Escrever (Vamos resolver equa¸c˜oes de 2o grau);

Escrever (Digite os coeﬁcientes ‘a’ do termo x2:);

ler (a);

enquanto (a = 0) fa¸ca

Escrever ( O termo ‘a’ n˜ao pode ser zero, digite outro valor.);

ler(a);

ﬁm

Escrever (Digite o coeﬁciente ‘b’ do termo x:);

ler(b);

Escrever (Digite o termo independente ‘c’: );

ler(c);

D := b2 − 4 ∗ a ∗ b

Escrever ( O delta ´e: );

Escrever (D);

se (D < 0) ent˜ao

Escrever (N˜ao existem ra´ızes reais)

sen˜ao

Escrever ( primeira raiz ´e);

x1:= -b + (raiz(D))/2*a;

Escrever ( x1);

Escrever ( segunda raiz ´e);

x2:= -b - (raiz(D))/2*a;

Escrever (x2);

ﬁm

35

26 ﬁm

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

2.3.3 C´odigo em Java

package equacao_2grau ;

import java . util . Scanner ;

public class Equacao2grau {

public Equacao2grau () {

// TODO Auto - generated constructor stub

}

public static void main ( String [] args ) {

// TODO Auto - generated method stub

double a ,b ,c ,d , x1 , x2 ;

Scanner ler = new Scanner ( System . in ) ;

System . out . print ( " Escreva o termo ’a ’: " ) ;

a = ler . nextFloat () ;

while ( a == 0) {

System . out . print ( " O termo ’a ’ tem que ser diferente de

zero , digite outro valor : " ) ;

a = ler . nextFloat () ;

}

System . out . print ( " Escreva o termo ’b ’: " ) ;

b = ler . nextFloat () ;

System . out . print ( " Escreva o termo independente ’c ’: " ) ;

c = ler . nextFloat () ;

d = Math . pow (b ,2) - 4* a * c ;

System . out . print ( " O delta ´e : " ) ;

System . out . println ( d ) ;

if ( d < 0) {

System . out . print ( " A equa¸c~ao n~ao tem raiz real " ) ;

} else {

x1 = ( - b + Math . sqrt ( d ) ) /(2* a ) ;

36

29

30

31

32

33

34

35

36

37

38

System . out . print ( " A raiz x1 ´e : " ) ;

System . out . println ( x1 ) ;

x2 = ( - b - Math . sqrt ( d ) ) /(2* a ) ;

System . out . print ( " A raiz x2 ´e : " ) ;

System . out . print ( x2 ) ;

}

}

}

2.3.4 Resultados

Figura 2.11: Raizes da equa¸c˜ao: x2 + 5x + 6 = 0.

37

Figura 2.12: Raizes da equa¸c˜ao: x2 − 49 = 0.

Figura 2.13: Raizes da equa¸c˜ao: −x2 + 4x + 2 = 0.

38

Figura 2.14: Raizes da equa¸c˜ao: x2 + x + 1 = 0.

2.4 Briot-Ruﬃni

A existˆencia de aplica¸c˜oes utilizando equa¸c˜oes polinomiais e as t´ecnicas para calcul´a-

las surgiram da necessidade de se ter resultados mais precisos em c´alculos. A divis˜ao de

polinˆomio ´e uma das mais importantes ferramentas de c´alculo j´a desenvolvidas. O algoritmo

de Briot-Ruﬃni ´e usado principalmente para calcular limites e diminuir o grau da equa¸c˜oes

al´em de muitas outras utilidades.

O Algoritmo de Briot-Ruﬃni consiste em um m´etodo de divis˜ao de um polinˆomio de

qualquer grau por um binˆomio da forma x − a. Ele foi criado por Charles Auguste Briot e

Paolo Ruﬃni e pode ser utilizado no ensino m´edio para resolu¸c˜ao de uma enorme quantidade

de problemas.

39

Veja um exemplo obtido da internet [17].

Sejam:

P (x) = 3x3 − 2x2 + x + 5

D(x) = x + 1

Queremos dividir P(x) por D(x).

Primeiro, desenhe dois segmentos de reta, um na horizontal e outro na vertical.

Figura 2.15: m´etodo de Briot-Ruﬃni

Colocar os coeﬁcientes do polinˆomio P(x) no segmento de reta horizontal e `a direita do

segmento vertical e repetir o primeiro coeﬁciente na parte de baixo. No lado esquerdo do

segmento vertical, deve-se colocar a raiz do binˆomio. Para determinar a raiz de um binˆomio,

basta igual´a-lo a zero, assim: x + 1 = 0 , x = −1.

Figura 2.16: m´etodo de Briot-Ruﬃni

Multiplicar a raiz do divisor pelo primeiro coeﬁciente localizado abaixo da linha horizontal

e, em seguida, somar o resultado pelo pr´oximo coeﬁciente localizado acima da linha horizontal.

Repetir o processo at´e o ´ultimo coeﬁciente, no caso da Figura 2.15 o coeﬁciente ser´a 5. Veja:

40

Figura 2.17: m´etodo de Briot-Ruﬃni

Ap´os realizar esses trˆes passos, ser´a analisado o que o algoritmo fornece. Na parte su-

perior da linha horizontal e `a direita da linha vertical, temos os coeﬁcientes do polinˆomio

P (x) = 3x3 + 2x2 + x + 5.

O n´umero −1 ´e a raiz do divisor e, portanto, o divisor ´e D(x) = x+1. Por ﬁm, o quociente

pode ser encontrado com os n´umeros localizados abaixo da linha horizontal, sendo o ´ultimo

n´umero o resto da divis˜ao.

Lembre-se de que o grau do dividendo ´e 3 e o grau do divisor ´e 1, portanto o grau do

quociente ´e dado por 3 − 1 = 2. Assim, o quociente ´e q(x) = 3x2 − x + 2.

Observe novamente que os coeﬁcientes s˜ao obtidos com os n´umeros abaixo da linha hori-

zontal e que o resto da divis˜ao ´e R(x) = 3.

Demonstra¸c˜ao do Algoritmo de Briot-Ruﬃni

Dado um polinˆomio P (x) = anxn + an−1xn−1 + ... + a1x1 + a0 e o binˆomio D(x) = x − d

sabemos, pelo Teorema de D’Alembert, que a divis˜ao de um polinˆomio de grau n dividido

pelo binˆomio acima ter´a como quociente um polinˆomio um grau menor que P(x) ﬁcando o

quociente Q(x) = qn−1xn−1 + qn−2xn−2 + ... + q1x1 + q0 e sobrar´a um resto r.

Sabemos que P (x) = Q(x).D(x) + r ent˜ao

anxn + an−1xn−1 + ... + a1x1 + a0 = (x − d).(qn−1xn−1 + qn−2xn−2 + ... + q1x1 + q0) + r

anxn + an−1xn−1 + ... + a1x1 + a0 = (qn−1xn + qn−2xn−1 + ... + q0x) − (dqn−1xn−1 +

dqn−2xn−2 + ... + dq1x1 + dq0) + r

anxn +an−1xn−1 +...+a1x1 +a0 = qn−1xn +(qn−2 −dqn−1)xn−1 +...+(q0 −dq1)x+r −dq0

41

como consequˆencia teremos que

an = qn−1

an−1 = qn−2 − dqn−1

.

.

.

a1 = q0 − dq1

a0 = r − dq0

ou seja

qn−1 = an

qn−2 = an−1 + dqn−1

.

.

.

q0 = a1 + dq1

r = a0 + dq0

Observe que as igualdades apresentadas anteriormente s˜ao justamente o que faz o algo-

ritmo de Briot-Ruﬃni:

Figura 2.18: algoritmo de Briot-Ruﬃni

como exemplo disso, observe que qn−1.d + an−1 = qn−2 o mesmo acontece com os outros

termos do polinˆomio, chega-se ent˜ao ao ﬁm do Algoritmo.

42

2.4.1 Algoritmo

Algoritmo 9: AlgoritmoBriotRuﬃni

Entrada: grau, raiz

Sa´ıda: polinomioq[ ]

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

Escrever(“Escreva o grau do polinˆomio”); ler (grau);

poli := grau; cont := grau;

polinomiox.tamanho:= grau + 1; polinomioq.tamanho:= grau + 1;

enquanto (grau <> 0) fa¸ca

Escreva(“Escreva o termo x elevado a” );

Escreva(grau);

Ler(polinomiox[grau]); grau:= grau -1;

ﬁm

Escreva(“Escreva o termo independente”);

ler(polinomiox[0]);

Escreva(“Escreva a raiz do binˆomio. ex:x + a, raiz = -a”); ler(raiz);

polinomioq[poli]:= polinomiox[poli]; poli:= poli -1;

enquanto (poli <> -1) fa¸ca

polinomioq[poli] = polinomioq[poli + 1]*raiz + polinomiox[poli];

poli = poli - 1;

ﬁm

enquanto (cont <> 0) fa¸ca

Escreva(“Termo x elevado a”); Escreva(cont);

Escreva(polinonioq[cont]); cont:= cont - 1;

ﬁm

Escreva( “O resto ´e”); Escreva(polinomioq[0]);

23 ﬁm

43

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

2.4.2 C´odigo em Java

package ruffine ;

import java . util . Scanner ;

public class briot_ruffine {

public briot_ruffine () {

// TODO Auto - generated constructor stub

}

public static void main ( String [] args ) {

// TODO Auto - generated method stub

int grau ;

int poli ;

int cont ;

Scanner ler = new Scanner ( System . in ) ;

System . out . println ( " Escreva o Grau do polin^omio " ) ;

grau = ler . nextInt () ;

poli = grau ;

cont = grau ;

double [] polinomiox = new double [ grau + 1];

double [] polinomioq = new double [ grau + 1];

while ( grau != 0) {

System . out . print ( " Escreva o termo x elevado a " ) ;

System . out . println ( grau ) ;

polinomiox [ grau ] =

ler . nextInt () ;

grau = grau - 1;

}

System . out . println ( " Escreva o termo x independente " ) ;

polinomiox [0] =

ler . nextInt () ;

System . out . println ( " Escreva a raiz do bin^omio que dividir´a o

44

polin^omio . ex : x + a ,

raiz = -a " ) ;

double raiz ;

raiz = ler . nextDouble () ;

polinomioq [ poli ] = polinomiox [ poli ] ;

poli = poli - 1;

while ( poli != -1) {

polinomioq [ poli ] = polinomioq [ poli + 1]* raiz + polinomiox [ poli ];

poli = poli - 1;

}

while ( cont != 0) {

System . out . print ( " Termo x elevado a " ) ;

System . out . print ( cont -1) ;

System . out . print ( " =

" ) ;

System . out . println ( polinomioq [ cont ]) ;

cont = cont -1;

}

System . out . print ( " Resto = " ) ;

System . out . println ( polinomioq [0]) ;

}

}

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

45

2.4.3 Resultados

Figura 2.19: Divis˜ao do polinˆomio 3x4 − 4x3 + 4x + 2 por x + 1.

Figura 2.20: Divis˜ao do polinˆomio 5x3 − 2x2 + 3x − 1 por x − 2.

46

2.5 Sistema de numera¸c˜ao e mudan¸ca de base 10 para base 2

Usualmente utiliza-se o sistema de numera¸c˜ao decimal, ou seja, s˜ao dez s´ımbolos (al-

garismos) para representar os n´umeros que s˜ao 0,1,2,3,4,5,6,7,8,9. Al´em disso, este sistema

tamb´em ´e posicional o que implica que a posi¸c˜ao do algarismo ´e importante, acompanhe o

exemplo abaixo.

N´umero 235 (duzentos e trinta e cinco) ´e formado por trˆes algarismos diferentes o 2, 3 e 5,

neste sistema, a posi¸c˜ao que o algarismo ocupa ´e importante pois ´e sabido que o 2 representa

2.100 = 200, o 3 representa 3.10 = 30 e 5 representa 5.1 = 5 se trocada a ordem que os

algorismos aparecem tem-se outro n´umero, ent˜ao ´e percept´ıvel que a posi¸c˜ao do algarismo ´e

muito importante.

Mas n˜ao existe apenas o sistema decimal/posicional..., existem v´arios outros, e um que

´e bastante utilizado hoje em dia, devido ao avan¸co tecnol´ogico ´e o sistema de numera¸c˜ao

bin´ario, onde existem apenas dois s´ımbolos 0, 1. Esse sistema de numera¸c˜ao se encaixa

perfeitamente em computadores e equipamentos eletrˆonicos diversos, pois em equipamentos

eletrˆonicos s´o existem dois estados, “ligado” que signiﬁca que est´a passando energia pelo

componente e “desligado” onde n˜ao est´a passando energia pelo componente. O s´ımbolo “0”

representa o desligado e o s´ımbolo “1” representa ligado.

Tudo o que se vˆe na tela de um celular, um computador ou qualquer equipamento

eletrˆonico ´e feito com opera¸c˜oes no sistema de numera¸c˜ao bin´ario. Apesar da intera¸c˜ao

com estes tipos de equipamentos acontecerem atrav´es de toque na tela, n´umeros, letras, som,

entre outras, no ﬁnal tudo ´e transformado em c´odigo bin´ario.

Vale salientar que a l´ogica de funcionamento do sistema bin´ario ´e igual ao do sistema

decimal, cujo a base ´e 10. O sistema bin´ario “base 2” , consiste em apenas dois algarismos

o 1 e 0. Como dito acima, esse sistema ´e a base da funcionalidade dos computadores e

equipamentos eletrˆonicos diversos e funciona da mesma forma que o sistema decimal, a ´unica

diferen¸ca entre eles ´e a quantidade de algarismos.

Os n´umeros bin´arios podem ser somados, subtra´ıdos, multiplicados e divididos da mesma

47

forma que os decimais, e embora o processo seja familiar, o fato de ter apenas dois algarismos

pode causar um pouco de confus˜ao. Por isso, ´e importante compreender como a nota¸c˜ao

posicional funciona, onde o valor que o algarismo assume depende da posi¸c˜ao que ocupa

dentro do n´umero. Veja a seguir pequenos exemplos de como acontecem esses opera¸c˜oes

b´asicas na base 2 (sistema bin´ario) para que perceba a equivalˆencia dos algoritmos posicionais

da soma, subtra¸c˜ao, divis˜ao e multiplica¸c˜ao com as mesmas opera¸c˜oes no sistema decimal, e

que conclua que esses algoritmos funcionam em qualquer outro sistema posicional de base x,

onde x > 1.

Soma

Pequena tabuada da soma.

0 + 0 = 0

0 + 1 = 1

1 + 0 = 1

1 + 1 = 0 ( “vai um” para o d´ıgito de ordem superior)

1 + 1 + 1 = 1 ( “vai um” para o d´ıgito de ordem superior)

Soma de 101 + 011.

Figura 2.21: opera¸c˜ao de soma

48

Subtra¸c˜ao

Pequena tabuada da subtra¸c˜ao.

0 - 0 = 0

0 - 1 = 1 (e “pede emprestado 1” para o d´ıgito de ordem superior)

1 - 0 = 1

1 - 1 = 0

Subtra¸c˜ao de 101 - 011

Figura 2.22: opera¸c˜ao de subtra¸c˜ao

Multiplica¸c˜ao

Pequena tabuada da multiplica¸c˜ao.

0 . 0 = 0

0 . 1 = 0

1 . 0 = 0

1 . 1 = 1

Multiplica¸c˜ao de 101 x 011

49

Figura 2.23: opera¸c˜ao de multiplica¸c˜ao

Divis˜ao

Idˆentico ao m´etodo decimal, foram utilizados deslocamentos e subtra¸c˜oes.

Divis˜ao de 101010 por 110

Figura 2.24: opera¸c˜ao de divis˜ao

No caso espec´ıﬁco do sistema de numera¸c˜ao decimal, os equipamentos eletrˆonicos que

precisam fazer esta transforma¸c˜ao para o sistema bin´ario usam um algoritmo matem´atico de

mudan¸ca de base, que possibilita a mudan¸ca do sistema decimal, que tem dez s´ımbolos, para

o sistema bin´ario, que tem apenas dois s´ımbolos, veja como isso ocorre a seguir.

50

Figura 2.25: https://pt.wikipedia.org/wiki/Convers˜ao-de-base-num´erica

Ou seja, escolher um n´umero e fazer divis˜oes sucessivas neste n´umero pela base 2 at´e zerar

o quociente, logo em seguida, forma-se o n´umero resultante na base 2 utilizando os restos das

divis˜oes de tr´as para a frente, assim como o exemplo acima. ´E interessante salientar que esse

algoritmo pode ser aplicado em outras bases.

Demonstra¸c˜ao do m´etodo da divis˜ao

A prova ´e mostrada na referˆencia[12]. Basicamente ela funciona de seguinte forma.

Suponha Ai um inteiro, Ai+1 o quociente da divis˜ao, ri o resto da divis˜ao para algum

i ≥ 0 e t a base destino. Pode-se escrever Ai como Ai = (Ai+1) ∗ t + ri , dividindo por t temos
t = Ai+1 + (ri)
(Ai)

t

Sendo A0 o inteiro a converter e t a base destino. Pelo m´etodo da expans˜ao, tem-se:

A0 = bmtm + bm−1tm−1 + ... + b1t1 + b0t0

Na primeira divis˜ao se tem:

A0/t = (bmtm + bm−1tm−1 + ... + b1t1 + b0t0)/t

A1 + r0/t = bmtm−1 + bm−1tm−2 + ... + b1 + b0/t

observe que bmtm−1 + bm−1tm−2 + ... + b1 ´e inteiro, e b0/t ´e uma frac˜ao pois b0 < t.

ent˜ao A1 = bmtm−1 + bm−1tm−2 + ... + b1 e r0 = b0

51

Aplicando em A1 o mesmo que foi feito em A0 e a cada intera¸c˜ao obtendo um resto

ri = bi, onde bi ´e o s´ımbolo na base t correspondente `a posi¸c˜ao i do resultado. A expans˜ao e

o restante da prova podem ser vistos na referˆencia [12].

2.5.1 Algoritmo

Algoritmo 10: algoritmo MudancaDeBase10-para-2

Entrada: n

Sa´ıda: basedois

1 in´ıcio

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

Escrever(“Escreva o N´umero na base decimal: ”);

ler(n);

q := n; cont := 0;

enquanto (q <> 0) fa¸ca

q := n/2;

r := n - (q*2); n := q;

basedois[cont] = r;

cont = cont + 1;

ﬁm

cont = cont − 1;

Escrever(“N´umero na base binomial =”);

enquanto (cont <> -1) fa¸ca

Escrever(“ ”);

Escrever(basedois[cont]);

cont = cont - 1;

ﬁm

18 ﬁm

52

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

2.5.2 C´odigo em Java

import java . util . Scanner ;

public class MudancaDeBase {

public MudancaDeBase () {

// TODO Auto - generated constructor stub

}

public static void main ( String [] args ) {

// TODO Auto - generated method stub

int r ,q ,n , cont ;

int [] basedois = new int [2000];

Scanner ler = new Scanner ( System . in ) ;

System . out . print ( " Escreva o N´umero na base decimal : " ) ;

n = ler . nextInt () ;

q = n ;

cont = 0;

while ( q != 0) {

q = n /2;

// quociente recebe a parte inteira da divis~ao

n /2

r = n - ( q *2) ;

n = q ;

basedois [ cont ] = r ;

cont = cont + 1;

}

cont = cont - 1;

System . out . print ( " N´umero na base binomial = " ) ;

while ( cont != -1) {

System . out . print ( "

" ) ;

System . out . print ( basedois [ cont ]) ;

cont = cont - 1;

}

53

30

31

32

}

}

2.5.3 Resultados

Figura 2.26: Do decimal 45 para seu correspondente na base 2.

Figura 2.27: Do decimal 1023 para seu correspondente na base 2.

54

Neste cap´ıtulo foram vistos alguns t´opicos da matem´atica da educa¸c˜ao b´asica que foi

algoritmizada para o leitor ver que tais t´opicos podem ser vistos em pseudo c´odigo e em

Java. Isso foi s´o uma pequena demonstra¸c˜ao, pois na educa¸c˜ao b´asica existem muitos outros

assuntos que podem ser transformados em c´odigos ou programas, tais como opera¸c˜oes com

matrizes, sistemas lineares, teorema de Pit´agoras na geometria e muitos outros assuntos.

Devido a realidade a que estamos expostos, com muita tecnologia e algoritmos, ´e bastante

interessante acrescentar uma abordagem algor´ıtmica de tais assuntos na educa¸c˜ao b´asica.

Fazendo c´odigos e programas dos algoritmos estudados, os alunos, desde cedo, perceberam a

importˆancia da matem´atica aplicada a computa¸c˜ao.

55

Cap´ıtulo 3

Aplicando algoritmos na sala de

aula

O papel do algoritmo se torna cada vez mais essencial na nossa vida cotidiana e mesmo

assim n˜ao se nota a sua importˆancia, fato que j´a foi dito aqui, os algoritmos est˜ao em todos

os lugares em nosso mundo de hoje, at´e em uma simples receita de bolo.

O algoritmo n˜ao ´e uma f´ormula de matem´atica ou um programa de computador, mas ele

deﬁne uma sequˆencia de passos ﬁnitos que podem levar a resposta de determinadas quest˜oes.

O mundo no qual se vive obriga o sujeito a lidar com novas tecnologias o tempo todo,

linguagens, ferramentas e estruturas l´ogicas que surgem com a cria¸c˜ao de algoritmos.

Hoje vive-se em um mundo conectado e dinˆamico com ferramentas de busca, redes sociais,

redes neurais, e-mails, softwares de produ¸c˜ao, etc, e essas ferramentas trabalham com sele¸c˜ao

das informa¸c˜oes mais importantes para o dia a dia, um papel de grande importˆancia para a

vida conectada de hoje. Essas ferramentas atuam com grandes bases de dados e por toda a

internet, fazendo o mapeamento das preferˆencias em rela¸c˜ao aos demais usu´arios, e trazendo

partes novas ou esquecidas da cultura. S˜ao eles, os algoritmos, que gerenciam as intera¸c˜oes

em sites de redes sociais, enquanto destaca uma novidade de um amigo e exclui as novidades

de outros.

56

3.1 A importˆancia do aprendizado dos algoritmos no ensino

B´asico

Segundo Gomes 2015 [20],

“Mesmo que o estudante n˜ao se torne um proﬁssional da ´area de tecnologia, ele

ser´a beneﬁciado pelo desenvolvimento do racioc´ınio l´ogico e das demais habilida-

des citadas no texto, entre tantas outras. Dessa forma, se tornar´a um cidad˜ao

mais consciente e preparado para os desaﬁos, os problemas e a complexidade do

mundo atual”

Ent˜ao ensinar programa¸c˜ao possibilita o desenvolvimento da capacidade de abstra¸c˜ao e

do racioc´ınio l´ogico. Possibilita tamb´em o desenvolvimento de habilidades como resolu¸c˜ao

de problemas e no¸c˜oes de causa e efeito. Assim, aprender programa¸c˜ao n˜ao deve ser s´o para

quem quer seguir na ´area de tecnologia e sim para qualquer pessoa pois desenvolve o racioc´ınio

e competˆencias necess´arias para realizar atividades cotidianas. O ensino da programa¸c˜ao nas

escolas ´e necess´ario para que os alunos desenvolvam sua criatividade e sua capacidade de

lidar com problemas, sabendo resolvˆe-los passo a passo.

A codiﬁca¸c˜ao ou programa¸c˜ao atualmente ´e considerada o centro de toda nova inova¸c˜ao

ou cria¸c˜ao que est´a presente no mundo. Alguns autores acreditam que no futuro os trabalhos

ser˜ao quase todos feitos por robˆos, ´e por isso que alguns pa´ıses e seus respectivos professores

est˜ao tentando preparar seus alunos para atender `as necessidades futuras e evitar que per-

cam seus empregos para m´aquinas autˆonomas[21]. Atualmente, existem diferentes cursos,

programas e at´e plataformas on-line que ensinam codiﬁca¸c˜ao para crian¸cas, mas nem todos

os pa´ıses adotaram esse m´etodo ainda, muitos pa´ıses ainda est˜ao na fase inicial.

Um pa´ıs pioneiro no ensino de algoritmos e programa¸c˜ao ´e Israel[21]. No ﬁm da d´ecada

de 1990 Israel j´a incrementava o seu curr´ıculo da escola b´asica, incluindo nele o ensino de

algoritmos e programa¸c˜ao[21][22]. Para ´epoca, foi uma atitude arriscada por se tratar de uma

Ciˆencia relativamente nova mas hoje, sabemos que essa postura foi acertada e v´arios pa´ıses ao

57

redor no mundo acrescentaram em seus curr´ıculos o estudo de algoritmos e consequentemente

da programa¸c˜ao.[23]

O Brasil deveria incluir o estude de algoritmos e programa¸c˜ao em seu curr´ıculo assim

como a Inglaterra, Israel , entre outros[21]. Talvez por ser graduado em An´alise de Sistemas

e em Matem´atica tenha uma vis˜ao mais privilegiada deste problema que algumas na¸c˜oes no

mundo j´a perceberam e por meio deste trabalho pretendo dar minha pequena contribui¸c˜ao

para o tema no Brasil.

3.2 Porque Java

Depois de falar sobre algoritmos e de demostrar alguns algoritmos matem´aticos feitos em

Java, era necess´ario falar um pouco mais sobre o Java.

Java ´e uma das linguagens mais utilizadas nos ´ultimos anos[25], e sua utiliza¸c˜ao ainda

vem crescendo. Al´em disso ´e umas das 5 primeiras linguagens de programa¸c˜ao utilizada para

usu´arios iniciantes em programa¸c˜ao[24]. Ou seja temos a uni˜ao de caracter´ısticas, que na

minha opni˜ao, n˜ao podem ser ignoradas pois o Java ´e uma linguagem amplamente utilizada no

mundo ao mesmo tempo que ´e uma das mais utilizadas para aprendizagem da programa¸c˜ao.

Isso implica que os alunos e professores ter˜ao acesso a uma grande quantidade de materiais

sobre Java na internet como videos, livros, artigos, f´oruns, grupos de whatsapp, manuais

entre outros, inclusive uma grande quantidade destes conte´udos de maneira gratuita.

58

Figura

3.1:

Linguagens

mais

utilizadas

no

mundo

at´e

2020.

https://olhardigital.com.br/2020/07/25/noticias/python-lidera-ranking-entre-as-10-

melhores-linguagens-de-programacao-de-2020/

Outro beneﬁcio do Java ´e que ele n˜ao ´e s´o uma linguagem ele ´e uma plataforma de

desenvolvimento, com Java ´e poss´ıvel desenvolver aplica¸c˜oes para desktop, celular, internet

das coisas, web, televis˜ao digital, e muito mais.

Quando se compila um arquivo em Java ele gera um bytecode que ´e interpretado numa

JVM (maquina virtual Java) isso quer dizer que se o seu sistema operacional tiver uma

JVM ser´a poss´ıvel executar o Java em seu sistema operacional e os sistemas operacionais

mais utilizados no mundo, como Windows, GNU/linux, OS/2 , Mac, e outros, tem ou pode

59

ser instalado o JVM. O java pode ser programado at´e em um editor de texto comum mas

existem varias IDE(ferramenta que auxilia e facilita a constru¸c˜ao dos algoritmos em java)

neste trabalho utilizo o Eclipse mas existem varias outras IDEs que tamb´em podem ser

executados em v´arios sistemas operacionais.

Com este conjunto de caracter´ısticas apresentados acima que encontramos em Java acre-

dito que essa linguagem seja uma ´otima escolha para este trabalho.

3.3 Um exemplo de como aplicar em sala

Nesta se¸c˜ao passarei um exemplo de como aplicar o estudo de algoritmo e Java utilizando

Sequˆencia Did´atica com o objetivo de unir o assunto da grade curricular do aluno de ma-

tem´atica com o ensino de algoritmos, ﬂuxogramas e Java. Vale salientar que para conseguir

programar um c´odigo, ´e estritamente necess´ario que o aluno tenha entendido o assunto, ou

seja, ele entendeu o algoritmo. Na fase em que estiver fazendo o ﬂuxograma e a programa¸c˜ao

ele estar´a ﬁxando o assunto, aprendendo a programar e ainda ter´a o estimo de ver seus c´odigos

executando no computador. Este ´e um exemplo onde o professor pode escolher outros temas

do curr´ıculo pedag´ogico da turma em quest˜ao para aplicar a Sequˆencia Did´atica assim como

ele tem a liberdade de utilizar outra linguagem de programa¸c˜ao.

3.3.1 Sequˆencia Did´atica

Tema da Sequˆencia Did´atica: Algoritmo da mudan¸ca de base

Objetivo da sequˆencia did´atica: Fazer os alunos perceberem a importˆancia dos algo-

ritmos e inici´a-los em programa¸c˜ao usando a linguagem Java.

Conte´udos a serem trabalhados: Mudan¸ca de base num´erica, divis˜oes sucessivas,

Logica, linguagem Java.

Habilidades a serem desenvolvidas:

Saber e reconhecer um algoritmo

O desenvolvimento do racioc´ınio l´ogico

60

Identiﬁcar um algoritmo e suas estruturas

Trabalhar com comandos e estruturas da linguagem Java

Saber desenvolver um algoritmo

Saber fazer um ﬂuxograma

Mudan¸ca de base decimal para outra qualquer

Tempo de execu¸c˜ao da sequˆencia did´atica: 10 aulas

Materiais necess´arios: Computador, Datashow, Celular, Quadro, Folhas de papel,

Livros e manuais de Java, Manuais dos s´ımbolos de ﬂuxogramas padr˜oes ISO − 9000.

Detalhamento das aulas:

Aula 1 e 2

Organiza¸c˜ao da turma: Sala de aula

Introdu¸c˜ao:

No primeiro momento ser´a discutido com os alunos a importˆancia dos n´umeros em base 2,

a sua principal ﬁnalidade e o porque de sua utiliza¸c˜ao atrav´es de aula expositiva/participativa

dos alunos.

Desenvolvimento:

Atrav´es de aula expositiva ser´a feito o aprofundamento do tema, que ´e mudan¸ca de base,

explicando tamb´em que existem outras bases al´em da binaria(base 2) e decimal(base 10) e

que o conceito para mudar de uma base x para y ´e sempre o mesmo. Entraremos em como

trocar o nosso sistema de numera¸c˜ao decimal para o sistema de numera¸c˜ao bin´ario. Al´em de

fazer o contr´ario, ou seja , trocar de bin´ario para decimal, fazendo a convers˜ao para outras

bases al´em da decimal utilizando sempre o quadro.

Conclus˜ao:

Ser´a solucionada as poss´ıveis d´uvidas dos alunos e depois ser´a passada a atividade 1 de

ﬁxa¸c˜ao de conte´udo.

61

Atividade 1

1) Pratique a mudan¸ca para base 2 dos n´umeros decimais abaixo:

a) 9

b) 16

c) 31

d) 234

e) 1234

f) 2048

2) Realize a convers˜ao dos n´umeros decimais abaixo em base 2, 3 e 8 :

a) 38

b) 160

c) 265

3) Converta agora os n´umeros em base 2 abaixo em n´umeros de base 10 (decimais).

a) 1000(2)

b) 101010(2)

c) 11111(2)

d) 10100001(2)

4) Converta os n´umeros em bases diferentes em base 10

a) 234(8)

b) 122(3)

c) 42313(4)

5) Qual a importˆancia do sistema bin´ario na atualidade?

Aula 3 e 4

Organiza¸c˜ao da turma: sala de aula

Nesta fase, com o entendimento de como funciona a mudan¸ca de base, come¸camos a

aprofundar nos ﬂuxogramas, algoritmos e em java.

62

Introdu¸c˜ao:

Come¸camos com uma pequena revis˜ao, corre¸c˜ao da atividade 1 e resolu¸c˜ao de d´uvidas da

atividade

Desenvolvimento:

Continua-se a aula apresentado sobre os s´ımbolos e normas dos ﬂuxogramas segundo a

ISO - 9000, explicando, exempliﬁcando e fazendo ﬂuxogramas de diversas situa¸c˜oes.

Conclus˜ao :

Ser´a disponibilizada a atividade 2 de ﬁxa¸c˜ao para os alunos. Lembrando aos mesmos

que eles podem utilizar materiais diversos sobre ﬂuxograma pois a inten¸c˜ao ´e saber fazer o

ﬂuxograma e n˜ao decorar os s´ımbolos.

Atividade 2

1) Escreva um ﬂuxograma para cada situa¸c˜ao abaixo:

a) Trocar uma lˆampada.

b) Trocar o pneu do carro pelo pneu step.

c) Da nota ﬁnal de sua escola.

d) Ler dois valores inteiros , descobrir qual o maior e escrevˆe-lo.

e) Escrever todos os n´umeros ´ımpares at´e 100.

Aula 5 a 8

Organiza¸c˜ao da turma: Sala de computadores ou laborat´orio de inform´atica com no

m´aximo 2 alunos por computador.

Neste momento os alunos j´a tem ferramentas necess´arias para programar em java , basta

agora que eles tenham contato com essa linguagem de programa¸c˜ao, para entender a estrutura

geral da linguagem e conseguirem transformar o pensamento l´ogico que adquiriram at´e ent˜ao

em c´odigo java.

Introdu¸c˜ao:

Come¸ca-se tirando d´uvidas e fazendo a corre¸c˜ao da atividade 2. Come¸camos tamb´em a

explica¸c˜ao, visualiza¸c˜ao e exempliﬁca¸c˜ao do que ´e linguagem de programa¸c˜ao utilizando e

63

focando sempre em Java.

Desenvolvimento:

Ser´a apresentado toda a estrutura b´asica e necess´aria do Java que s˜ao operadores, ex-

press˜oes, vari´aveis, constantes, condicionais e estrutura de repeti¸c˜oes. ´E poss´ıvel que neces-

sitemos de mais tempo aqui, ´e bom ressaltar que n˜ao ser´a utilizado conceitos avan¸cados de

java como polimorﬁsmo, cria¸c˜ao de objetos e classes, entre outros, pois o intuito n˜ao ´e tornar

o aluno um especialista na linguagem Java.

Conclus˜ao:

Ser´a realizada a atividade 3 para ﬁxa o assunto e a corre¸c˜ao da mesma.

Atividade 3

1) Fa¸ca um resumo de todas as estruturas vistas em sala de aula e informe para que eles

servem.

2) O que s˜ao IDE?

3) Como declarar uma vari´avel em Java?

Operadores e express˜oes

4) Mostre pelo menos 8 operadores e suas fun¸c˜oes.

5) Como resolvemos express˜oes em Java

Condicionais

6) Crie um algoritmo que leia a nota de um aluno e mostre se ele est´a: aprovado (acima

de 60), em recupera¸c˜ao (abaixo de 60) ou reprovado por m´edia (abaixo de 20)

7) Escreva um algoritmo em Java que leia um n´umero e informe se ele ´e divis´ıvel por 10,

por 5 ou por 2 ou se n˜ao ´e divis´ıvel por nenhum deles.

Repeti¸c˜ao

8) Escreva um algoritmo que exiba 10 vezes a mensagem “Adoro Algoritmo e Matem´atica”.

9) Escreva um algoritmo que calcule a soma dos n´umeros de 1 a 20.

10) Leia a idade de 5 colegas exiba a soma das idades.

11) Crie um algoritmo leia um n´umero do usu´ario e exiba a sua tabuada de multiplica¸c˜ao.

64

Aula 9 e 10

Aula ﬁnal, com o objetivo de avaliar o conhecimento dos alunos e de se constatar, olhando

os resultados dos alunos, se o objetivo foi alcan¸cado.

Organiza¸c˜ao da turma: Sala de computadores ou laborat´orio de inform´atica com no

m´aximo 2 alunos por computador.

Introdu¸c˜ao:

Arruma¸c˜ao da sala/laborat´orio para aplicar a atividade avaliativa.

Desenvolvimento:

Os alunos sozinhos ou em duplas fazem a atividade avaliativa.

Conclus˜ao:

Ao terminar o tempo o professor avalia os c´odigos dos alunos nos computadores.

Atividade avaliativa

Escrever o algoritmo da mudan¸ca de base: de base 10 para base 2 e o algoritmo de base

2 para base 10.

65

Cap´ıtulo 4

Conclus˜ao

Os exemplos acima expostos ´e uma quantidade muito pequena do aparecimento, uso e

aplicabilidade dos algoritmos nas vidas humanas, percebe-se ent˜ao que infelizmente n˜ao ´e

dada a importˆancia necess´aria para essa ferramenta cognitiva excepcional.

O que quero dizer ´e que atualmente s˜ao de extrema importˆancia os conhecimentos de

algoritmos na forma¸c˜ao de qualquer proﬁssional, pois saber organizar os processos e ideias

em passos que podem ser executados por pessoas ou computadores pode possibilitar a este

proﬁssional um diferencial no mercado de trabalho.

Para Berlinski 2002 [28],

“Para o homem atual a formaliza¸c˜ao, aptid˜ao, habilidade no manejo dos c´odigos

algor´ıtmicos s˜ao componentes fundamentais para a cultura. A trama dos algo-

ritmos ´e o que tem dado ritmo ao desenvolvimento da humanidade, abrindo um

novo tempo e reorganizando a sua cultura.”

Em se tratando de algoritmo como um mecanismo positivo para o crescimento do co-

nhecimento do homem, o que se deve entender ´e que o manusear da m´aquina n˜ao se limita

apenas em opera¸c˜oes algor´ıtmicas de apertar bot˜oes.

No contexto atual h´a v´arios tipos de conhecimento e habilidades exigidos pela sociedade

para que se possa exercer determinadas fun¸c˜oes, ´e nesse contexto que se insere o pensamento

66

algor´ıtmico, onde se considera um dos requisitos mais importantes, devido estar em todos

os contextos atuais, seja no trabalho, em casa, na escola ou na vida social como um todo.

De acordo com Fran¸ca, Silva e Silva[29], o pensamento computacional ou algor´ıtmico est´a

em saber utilizar o computador para aumentar o poder cognitivo e operacional humano,

aumentando assim a produtividade, criatividade e inventividade.

´E de grande valia inserir o pensamento algor´ıtmico na educa¸c˜ao b´asica, pois essa al´em de

possibilitar conhecimentos na ´area de exatas, mostra v´arias formas de resolver problemas do

cotidiano, possibilitando a melhoria do rendimento escolar.

Conclu´ı-se ent˜ao que o conceito b´asico do algoritmo ´e entender como funciona as coisas

e os v´arios sistemas digitais, ou n˜ao digitais, que se usa diariamente para que seja poss´ıvel

resolvˆe-los em passos ﬁnitos, isso n˜ao s´o na matem´atica e inform´atica, mas para todo e

qualquer problema, tornando hoje o entendimento e o estudo dos algoritmos de extrema

utilidade, e para isso seria ´otimo introduzir o seu estudo no ensino fundamental e m´edio da

educa¸c˜ao b´asica no Brasil.

67

Referˆencias Bibliogr´aﬁcas

[1]

ALMEIDA, Regina de Cassia. ALGORITMOS - UMA PROBLEMATIZAC¸ ˜AO

DO TEMA MEDIADA PELA HIST ´ORIA DA MATEM ´ATICA. Dispon´ıvel em

https://www.13snhct.sbhc.org.br/resources/anais/10/1345086117_ARQUIVO_

13cnhttexto.pdf.Acesso em: 15 de novembro de 2018

[2]

CRUZ, Adriano Joaquim de Oliveira (1 de janeiro de 1997). Algoritmos. Disponivel

em http://http://equipe.nce.ufrj.br/adriano/c/apostila/algoritmos.htm.

acesso em: 17 de novembro de 2018

[3]

SANTOS, Daniel Tebaldi O Uso de Algoritmos e Programa¸c˜ao no Ensino de Ma-

tem´atica. Campinas, SP : [s.n.], 2015

[4]

[5]

[6]

[7]

D. E. Knuth The art of Computer Programming - volume 1 Addison-Wesley, 1973.

WIKIPEDIA. Algoritmo de Euclides. Dispon´ıvel em https://pt.wikipedia.org/

wiki/Algoritmo_de_Euclides acesso em: 15 de marco de 2019

ZARIFAN, P. Objetivo Competˆencia: por uma nova l´ogica. S˜ao Paulo: Atlas, 2001.

ANDRADE, J. B. de (2003). Fotogrametria. SBEE. 2 ed revista, ampliada e atuali-

zada. Curitiba, 2003.

[8]

MATEUS, M. H. M. “Tradu¸c˜ao autom´atica: um pouco de hist´oria”. Engenharia da

Linguagem. Org. Maria Helena M. Mateus e Ant´onio Horta Branco. Lisboa, Edi¸c˜oes

Colibri, 1995

68

[9]

CHOMSKY, Noam. M´ıdia: propaganda pol´ıtica e manipula¸c˜ao. WWF Martins Fon-

tes, 2015.

[10] WILKE, Val´eria Cristina Lopes. Informa¸c˜ao, poder e estado: o dispositivo informa-

cional e as pol´ıticas p´ublicas de inclus˜ao digital do governo brasileiro (2003-2008).

2012.

[11]

PEDROSO, Hermes Antˆonio. Uma breve hist´oria da equa¸c˜ao do 2o grau. Dispon´ıvel

em https://repositorio.unesp.br/handle/11449/122614, acesso em: 15 de feve-

reiro de 2020.

[12]

DEIMEL, Lionel E. Conversion of Number Representations. Dispon´ıvel em https:

//deimel.org/comp_sci/conversion.htm, acesso em: 15 de fevereiro de 2020.

[13]

LEMAY, Laura; PERKINS, Charles. Aprenda Java em 21 dias - JAVA. Editora

Campus, 1997.

[14]

GHEZZI, Carlo; JAZAYERI, Mehdi. Conceitos de Linguagens de Programa¸c˜ao. Edi-

tora Campus, 1987.

[15]

DEITEL, H. M.; DEITEL, P. J. Java Como Programar: 4 ed. S˜ao Paulo: Bookman,

2002. 1386 p.

[16]

HEFEZ, Abramo. Aritm´etica. 2. ed. Rio de Janeiro: SBM, 2016 (Cole¸c˜ao PROFMAT,

v. 8). 330p.

[17]

LUIZ, Robson. “Dispositivo pr´atico de Briot-Ruﬃni”; Brasil Escola. Dispon´ıvel

em:

https://brasilescola.uol.com.br/matematica/divisao-polinomios-utilizando-

dispositivo-briotruﬃni.htm. Acesso em 15 de abril de 2020.

69

[18]

GIR ˜AO,

Ivna.

“91 % dos

estudantes

do

Ensino M´edio

n˜ao

sabem

matem´atica”;

Di´ario

do

Nordeste.

Dispon´ıvel

em:

https://diariodonordeste.verdesmares.com.br/metro/91-dos-estudantes-do-ensino-

medio-nao-sabem-matematica-1.212306. Acesso em 13 de junho de 2020.

[19]

NOGUEIRA,

Flavia.

“Alunos

chegam ao M´edio

sem saber

di-

vis˜ao

e

interpreta¸c˜ao

de

texto”;

Nova

Escola.

Dispon´ıvel

em:

https://novaescola.org.br/conteudo/12519/alunos-chegam-ao-medio-sem-saber-

divisao-e-interpretacao-de-texto. Acesso em 15 de junho de 2020.

[20]

GOMES, Marcos C´esar Pires. Os benef´ıcios do ensino de linguagem de programa¸c˜ao

no curr´ıculo regular. Dispon´ıvel em: https://administradores.com.br/artigos/os-

beneﬁcios-do-ensino-de-linguagem-de-programacao-no-curriculo-regular.

Acessado

em: 12 de Setembro de 2020.

[21]

ROBOGARDEN. Os 5 principais pa´ıses em codiﬁca¸c˜ao e programa¸c˜ao e Pa´ıses que

ensinam codiﬁca¸c˜ao nas escolas. Disponivel em: https://robogarden.ca/pt/blog/top-

5-countries-in-coding-and-programming. Acessado em: 12 de Setembro de 2020.

[22]

R. S. A. Fran¸ca and H. Costa, Ensino de computa¸c˜ao na educa¸c˜ao b´asica no brasil:

Um mapeamento sistem´atico, in XXI Workshop sobre Educa¸c˜ao em Computa¸c˜ao,

2013.

[23]

PIVA, Naiady.

Inclus˜ao da programa¸c˜ao nos curr´ıculos escolares avan¸ca no

exterior. Disponivel em:

https://www.gazetadopovo.com.br/educacao/inclusao-

da-programacao-nos-curriculos-escolares-avanca-no-exterior-

9dlmbpvkpztvrp4vp1647l8fk/ .Gazeta do Povo. Acessado em:

12 de Setembro

de 2020.

70

[24]

MATOS, David. As 5 Melhores Linguagens de Programa¸c˜ao Para Aprender em

2020. Disponivel em: https://www.cienciaedados.com/as-5-melhores-linguagens-de-

programacao-para-aprender-em-2020/. Acessado em: 12 de Setembro de 2020.

[25]

SHIMABUKURO,

Igor.

Python

lidera

ranking

entre

as

10 me-

lhores

linguagens

de

programa¸c˜ao

de

2020.

Disponivel

em:

https://olhardigital.com.br/2020/07/25/noticias/python-lidera-ranking-entre-as-

10-melhores-linguagens-de-programacao-de-2020/. Acessado em: 12 de outubro de

2020.

[26]

RAMOS,

Lu´ıs

Eduardo.

Tabela

de

comandos

Java. Disponivel

:

https://www.academia.edu/7134498/Tabela de comando Java.

Acessado

em:

20 de outubro de 2020.

[27]

SILVA, Marcos No´e Pedro da. “O Surgimento da Equa¸c˜ao do 2o Grau ”; Brasil

Escola. Dispon´ıvel em: https://brasilescola.uol.com.br/matematica/o-surgimento-

equacao-2-o-grau.htm. Acesso em 03 de abril de 2020.

[28]

BERLINSKI, D. O advento do algoritmo (a Id´eia Que Governa o Mundo). Globo,

2002

[29]

FRANC¸ A, R. S.; Silva, W. C.; Silva, J. C. Ensino de Ciˆencia da Computa¸c˜ao na

Educa¸c˜ao B´asica: Experiˆencias, Desaﬁos e Possibilidades. Garanhuns ? PE, Brasil,

2012.

[30]

FORBELLONE, Andr´e Luiz Villar; EBERSP ¨ACHER, Henri Frederico. L´ogica de

programa¸c˜ao: a constru¸c˜ao de algoritmos e estruturas de dados. Makron Books, 1993.

71

[31]

ALMEIDA, Paulo Nunes de. Educa¸c˜ao L´udica:

t´ecnicas e jogos pedag´ogicos;

Loyola,11a ed. S˜ao Paulo, 2003.

[32]

LANGLOIS, L.; HAMILTON, B. Assessing the Diﬀerence: Greenhouse Gas Emissi-

ons of Electricity Generating Chains.IAEA Bulletin, Vienna, v. 42, n. 2, 2003.

[33]

SANTOS, P. “Tradu¸c˜ao autom´atica”. Engenharia da Linguagem. Org. Maria Helena

M. Mateus e Ant´onio Horta Branco. Lisboa, Edi¸c˜oes Colibri, 1995.

[34]

BRASIL. Minist´erio da Educa¸c˜ao - Secretaria da Educa¸c˜ao Fundamental. PCN’s:

parˆametros curriculares nacionais. Bras´ılia: MEC/SEF, 1998.

[35]

LIMA,

Elon

Lages.

“O

principio

da

indu¸c˜ao”.

Dispon´ıvel

em:

http://www.mat.uc.pt/ mat0829/A.Peano.htm. Acesso em 14 de setembro de

2020.

72

Apˆendice

Abaixo temos algumas tabelas com um ´otimo resumo dos comandos b´asicos e exemplos,

necess´arias as demandas das atividades e sequˆencia pedag´ogica.

Tipos de dados
PSEUDO C ´ODIGO LINGUAGEM JAVA

literal

caracter

inteiro

real

real

String

Char

Int

Float

Double

Declara¸c˜ao de vari´aveis
PSEUDO C ´ODIGO LINGUAGEM JAVA

idade num´erico

Int idade

pre¸co num´erico

Float preco

nome literal

String nome

sexo literal

Char nome

PSEUDO C ´ODIGO

Delimitado por /* r */

Ex:

Coment´arios

LINGUAGEM JAVA

Delimitado por /* */

Ex:

N1 num´erico /*primeira nota*/

/* Isso ´e um coment´ario */

Se o coment´ario for em apenas uma linha pode-se usar //

EX: //coment´ario

73

PSEUDO C ´ODIGO

LINGUAGEM JAVA

Operadores Aritm´eticos

Adi¸c˜ao: +

Subtra¸c˜ao: -

Multiplica¸c˜ao: *

Divis˜ao: /

Resto: %

Atribui¸c˜ao: < −

+

-

*

/

%

=

Obs.: caso a divis˜ao seja feita entre dois n´umeros inteiros o resultado

ser´a o quociente inteiro da divis˜ao Ex.: RESULT = 5/2;

A vari´avel RESULT receber´a 2 e n˜ao 2.5

Se a resposta esperada ´e a divis˜ao exata, ou seja, 2.5 precisa-se

transformar um dos n´umeros em ﬂoat Ex.: RESULT = 5f/2;

ou RESULT = 5.0f/2; ou RESULT = (ﬂoat)5/2;

Operadores Relacionais

PSEUDO C ´ODIGO

LINGUAGEM JAVA

Igual a: =

Diferente de: (cid:54)= ou <>

Maior que: >

Menor que: <

Maior ou igual a: ≥

Menor ou igual a: ≤

==

!=

>

<

>=

<=

74

Operadores L´ogicos
PSEUDO C ´ODIGO LINGUAGEM JAVA

Conjun¸c˜ao: e

Disjun¸c˜ao: ou

Nega¸c˜ao: n˜ao

&&

||

!

Para fazer a entrada de dados atrav´es do prompt de comando o primeiro ato necess´ario ´e

criar um objeto da classe Scanner, por isso recomenda-se que assim que iniciar o m´etodo

main, escreva a seguinte linha de c´odigo que cria este objeto: Scanner leia = new

Scanner(System.in);

Comandos de entrada de dados

PSEUDO C ´ODIGO

LINGUAGEM JAVA

leia idade

idade = leia.nextInt();

leia preco

preco = leia.nextFloat();

leia salario

salario = leia.nextDouble();

leia nome

nome = leia.next();

leia sexo

sexo = leia.next().charAt(0);

75

PSEUDO C ´ODIGO

LINGUAGEM JAVA

Comandos de saida de dados

escreva “Digite o salario:”

System.out.println(“Digite o sal´ario:”);

escreva “sal´ario atual:”

System.out.println(“sal´ario atual:”+salario);

escreva

System.out.println

“O funcion´ario ”, nome,

“ recebe R$”, salario

(“O funcion´ario ”+nome+“ recebe R$”+salario);

escreva

System.out.println

“O aumento de 10% ´e

”, salario+salario*0.10

(“O aumento de 10% ´e ”+(salario+salario*0.10));

Observa¸c˜ao: O comando de sa´ıda de dados System.out.println(), mostra a mensagem e pula

uma linha, caso deseje mostrar a mensagem mas n˜ao pular uma linha no ﬁnal usa-se

System.out.print().

PSEUDO C ´ODIGO

Math.PI

Principais fun¸c˜oes Matem´aticas

LINGUAGEM JAVA

constante do valor PI

Math.abs(x)

Retorna o valor absoluto (m´odulo) do numero passado por parˆametro.

Math.ceil(x)

Arredonda um numero real para cima. Ex.: Math.ceil(3.7) ´e 4

Math.cos(x)

Calcula o cosseno de x . ( x deve estar representado em radianos)

Math.exp(x)

Obt´em o logaritmo natural e elevado a x

Math.ﬂoor(x)

Arredonda um n´umero real para baixo. Ex.: Math.ﬂoor(3.7) ´e 3

Math.log(x)

Math.log10(x)

Math.pow(x,y)

Obt´em o logaritmo natural de x.

Obt´em o logaritmo de base 10 de x.

Calcula a potˆencia de x elevado a y.

Math.sin(x)

Calcula o seno de x (x deve estar representado em radianos)

76

Math.cbrt(x)

Math.sqrt(x)

Calcula a raiz c´ubica de x

Calcula a raiz quadrada de x

Math.tan(x)

Calcula a tangente de x (x deve estar representado em radianos)

Math.toDegress(x)

Converte a medida de x de radianos para graus.

Math.toRadians(x)

Converte a medida de x de graus para radianos.

Estreutura de decis˜ao ou condicional - ESCOLHA

PSEUDO C ´ODIGO

LINGUAGEM JAVA

escolha (op)

inicio

caso 1:

switch (op)

{

case 1:

escreva “soma : ”, a + b

System.out.println(“soma : ”+( a + b));

parar;

case 2:

break;

case 2:

escreva “subtra¸c˜ao : ”, a - b

System.out.println(“subtra¸c˜ao : ”+( a - b));

parar;

case 3:

break;

case 3:

escreva “multiplica¸c˜ao : ”, a * b

System.out.println(“multiplica¸c˜ao : ”+( a * b));

parar;

padr˜ao:

break;

default:

escreva “divis˜ao : ”, a*1.0 / b

System.out.println(“divis˜ao : ”+( a*1.0/ b));

parar;

ﬁmescolha

break;

}

77

Estreutura de decis˜ao ou condicional - SE

PSEUDO C ´ODIGO

LINGUAGEM JAVA

se (preco < 100) ent˜ao

if (preco < 100) {

novopreco = preco*1.10

novopreco=preco*1.10

}

se (sexo = ‘F’) ent˜ao

if (sexo == ‘F’) {

qMulheres = qMulheres + 1

qMulheres = qMulheres + 1

sen˜ao

}

else {

qHomens = qHomens + 1

qHomens = qHomens + 1

ﬁmse

}

se (cor = “azul”) ent˜ao

if (cor.equalsIgnoreCase(“azul”)){

qAzul = qAzul + 1

System.out.println(“A cor ´e azul”);

sen˜ao

}

else{

se cor = “vermelho” ent˜ao

if (cor.equalsIgnoreCase(“vermelho”)){

qVermelho = qVermelho + 1

System.out.println(“A cor ´e vermelha”);

sen˜ao

}

else {

qQualquer = qQualquer + 1

System.out.println(“A cor n˜ao ´e azul e nem vermelha”);

ﬁmse

ﬁmse

}

}

78

Estrutura de repeti¸c˜ao - ENQUANTO

PSEUDO C ´ODIGO

LINGUAGEM JAVA

raio, v numerico

raio < − 0;

ﬂoat raio, v;

raio = 0;

enquanto (raio <= 20) fa¸ca

while (raio <= 20) {

v < − 4/3 ∗ 3.14 ∗ raio3

v = 4/3 ∗ (f loat)3.14∗ (ﬂoat)pow(raio, 3);

escreva

System.out.println

(“Para raio:”, raio, “o volume ´e:”, v)

(“Para raio:”+ raio +“o volume ´e:”+v);

raio < − raio + 0.5;

raio = raio + 0.5;

ﬁmenquanto

ﬁmalgoritmo

}

system(“pause”);

}

Estrutura de repeti¸c˜ao - REPITA

PSEUDO C ´ODIGO

raio, v numerico

raio < − 0;

repita

LINGUAGEM JAVA

ﬂoat raio, v;

raio = 0;

Do{

v < − 4/3 ∗ 3.14 ∗ raio3

v = 4/3 ∗ (f loat)3.14∗ (ﬂoat)pow(raio, 3);

escreva

System.out.println

(“Para raio”, raio, “o volume ´e:”, v)

(“Para raio:”+ raio +“o volume ´e:”+v);

raio < − raio + 0.5;

raio = raio + 0.5;

at´e (raio <= 20);

}while(raio <= 20);

ﬁmalgoritmo

}

System(“pause”);

79

Estrutura de repeti¸c˜ao - PARA

PSEUDO C ´ODIGO

LINGUAGEM JAVA

raio, cont, v numerico

ﬂoat raio, v; int cont

raio < − 0;

raio = 0;

para cont de 0 at´e 40 passo 1 fa¸ca

for(cont=0; cont<=40; cont=cont+1) {

v < − 4/3 ∗ 3.14 ∗ raio3

v = 4/3 ∗ (f loat)3.14∗ (ﬂoat)pow(raio, 3);

escreva

System.out.println

(“Para raio:”, raio, “o volume ´e:”, v)

(“Para raio:”+ raio +“o volume ´e:”+v);

raio < − raio + 0.5;

raio = raio + 0.5;

ﬁmpara

}

System(“pause”);

80

